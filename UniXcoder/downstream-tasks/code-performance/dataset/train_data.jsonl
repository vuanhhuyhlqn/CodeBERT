{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "# Introducing a penalty for selecting distant nodes", "penalty", "=", "(", "distance_to_next", "/", "avg_distance_to_unvisited", ")", "if", "avg_distance_to_unvisited", ">", "0", "else", "1", "score", "=", "(", "avg_distance_to_unvisited", "-", "distance_to_next", ")", "-", "penalty", "# Adjust score based on penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.3335850070689865}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "weighted_average_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "weight_factor", "=", "1", "/", "(", "distance_to_next", "+", "1", ")", "# Avoid division by zero", "score", "=", "(", "weight_factor", "*", "weighted_average_distance", ")", "-", "distance_to_next", "# Balance immediate and average distances", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.351656602584806}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm introduces a selection criterion based on both distance and a penalty for clustering of unvisited nodes, encouraging a more spread-out route.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ",", "1", ")", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "*", "(", "penalty", "-", "distance_to_next", ")", "# Focus on minimizing both immediate and clustering distances", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.357686789692623}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate a score for each unvisited node based on distance to destination, connectivity, and distance to unvisited nodes", "scores", "=", "{", "}", "connectivity_weight", "=", "0.5", "distance_to_destination_weight", "=", "1.5", "for", "node", "in", "unvisited_nodes", ":", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Weighted score calculation", "total_score", "=", "(", "distance_to_destination_weight", "*", "distance_score", ")", "+", "(", "connectivity_weight", "*", "connectivity_score", ")", "-", "avg_distance_to_unvisited", "scores", "[", "node", "]", "=", "total_score", "# Lower score is better", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.35828255629592}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "average_distance_to_unvisited", "=", "total_distance_to_unvisited", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "penalty", "=", "1", "/", "(", "(", "distance_to_next", "+", "1", ")", "**", "2", ")", "# Squared penalty diminishes score impact for distant nodes", "score", "=", "(", "average_distance_to_unvisited", "-", "distance_to_next", ")", "*", "penalty", "# Combining average distance optimized with penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.362010196137341}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "avg_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "# Weighting based on proximity to the destination node", "proximity_score", "=", "1", "/", "(", "distance_to_destination", "+", "1", ")", "# Introducing a decay factor to favor shorter paths", "decay_factor", "=", "1", "/", "(", "1", "+", "distance_to_next", ")", "# Combined score", "score", "=", "proximity_score", "*", "decay_factor", "*", "(", "avg_distance_to_remaining", "-", "distance_to_next", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.409390305033564}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "score", "=", "(", "avg_distance_to_unvisited", "-", "distance_to_next", ")", "# Higher score for nodes with lower average distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.41724333977419}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm prioritizes nodes based on the combination of the minimum distance to the next node and the average distance to the unvisited nodes, incentivizing both proximity and accessibility.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "score", "=", "(", "average_distance_to_unvisited", "-", "distance_to_next", ")", "# Higher score for nodes closer to others", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.41724333977419}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate a score for each unvisited node based on distance, connectivity, and average distance to unvisited nodes", "scores", "=", "{", "}", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "avg_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "scores", "[", "node", "]", "=", "distance_score", "+", "connectivity_score", "-", "avg_score", "# Lower score is better", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.41724333977419}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "avg_distance_to_unvisited", "=", "total_distance_to_unvisited", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "# Weighted score based on current distance and average distance to unvisited nodes", "score", "=", "(", "avg_distance_to_unvisited", "*", "0.5", ")", "-", "(", "distance_to_next", "*", "0.5", ")", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.41724333977419}
{"code_tokens": ["# {This algorithm incorporates a dynamic weighting approach, where the score calculation not only considers proximity and accessibility but also introduces a factor for node connectivity, thus selecting nodes based on their overall importance in the unvisited set.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "connectivity_score", "=", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "10", "]", ")", "# Example threshold for connectivity", "score", "=", "(", "average_distance_to_unvisited", "-", "distance_to_next", ")", "+", "connectivity_score", "# Higher score for nodes with better connectivity", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.41724333977419}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "# Calculate the number of connections for each unvisited node", "connectivity_scores", "=", "{", "node", ":", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "0", ")", "for", "node", "in", "unvisited_nodes", "}", "total_connectivity", "=", "sum", "(", "connectivity_scores", ".", "values", "(", ")", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "connectivity_penalty", "=", "connectivity_scores", "[", "node", "]", "/", "(", "total_connectivity", "if", "total_connectivity", ">", "0", "else", "1", ")", "score", "=", "(", "average_distance_to_remaining", "-", "distance_to_next", ")", "-", "connectivity_penalty", "# Balanced score with connectivity penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.41724333977419}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "weight_factor", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Weight based on remaining nodes", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "score", "=", "(", "average_distance_to_unvisited", "-", "distance_to_next", ")", "*", "weight_factor", "# Balanced score with weights", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.41724333977419}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "total_distance_from_unvisited_to_destination", "=", "sum", "(", "distance_matrix", "[", "n", "]", "[", "destination_node", "]", "for", "n", "in", "unvisited_nodes", ")", "score", "=", "(", "total_distance_to_unvisited", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", ")", "-", "distance_to_next", "+", "(", "0.3", "*", "total_distance_from_unvisited_to_destination", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.41724333977419}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm uses a combination of greedy selection based on distance and a spread-out factor that adjusts for the average distance of unvisited nodes, helping to both minimize immediate distance and explore unvisited nodes more effectively.}", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "spread_factor", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ",", "1", ")", "score", "=", "distance_to_next", "+", "(", "avg_distance", "-", "spread_factor", ")", "# Minimize the distance while maintaining exploration", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.424216980256856}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "# Calculate the total distance to all unvisited nodes", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Calculate remaining distances to destination", "remaining_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Heuristic factor: ratio of distance to unvisited nodes relative to total unvisited distance", "proximity_weight", "=", "distance", "/", "(", "total_distance_to_unvisited", "+", "1e-5", ")", "# Clustering effect: averages the distances to the unvisited nodes for potential efficiency", "clustering_effect", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "adj", "]", "for", "adj", "in", "unvisited_nodes", "if", "adj", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "# Combine metrics to compute a weighted score using both proximity and clustering effect", "weighted_score", "=", "distance", "+", "proximity_weight", "*", "remaining_distance_to_destination", "-", "clustering_effect", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.4248131215536635}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_factor", "=", "1", "/", "(", "distance_to_next", "+", "1", ")", "# Influence of proximity", "total_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "avg_distance_to_remaining", "=", "total_distance_to_remaining", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "# Introduce penalty for visiting farther nodes", "penalty", "=", "distance_to_next", "*", "0.5", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "score", "=", "(", "proximity_factor", "*", "avg_distance_to_remaining", ")", "-", "penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.426468549276079}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "centrality_scores", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "other", "]", "[", "node", "]", "for", "other", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", "}", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "centrality_penalty", "=", "1", "/", "(", "centrality_scores", "[", "node", "]", "+", "1", ")", "# Encourage central nodes", "future_visit_impact", "=", "(", "total_distance", "/", "len", "(", "unvisited_nodes", ")", ")", "*", "0.3", "# Weight future implications", "score", "=", "(", "distance", "+", "future_visit_impact", ")", "*", "centrality_penalty", "*", "random", ".", "uniform", "(", "0.95", ",", "1.05", ")", "# Adding randomness", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.429695265829893}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "# Calculate the centroid of unvisited nodes for clustering", "centroid_x", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "centroid_y", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "current_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "direct_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Proximity score", "proximity_score", "=", "1", "/", "(", "direct_distance_to_destination", "+", "1", ")", "# Clustering score based on average distance to remaining unvisited nodes", "avg_distance_to_cluster", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "# New score with an emphasis on clustering", "score", "=", "proximity_score", "*", "(", "avg_distance_to_cluster", "-", "distance_to_next", ")", "*", "(", "1", "/", "(", "1", "+", "centroid_x", "+", "centroid_y", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.437308110660587}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# This algorithm introduces a weighted scoring system that combines both the proximity to current and remaining nodes,", "# while also considering the remaining unvisited nodes' distances to each other.", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "inter_distance_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "score", "=", "(", "avg_distance_to_unvisited", "-", "distance_to_next", ")", "+", "(", "1", "/", "(", "inter_distance_score", "+", "1", ")", ")", "# Adds the influence of inter-distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.449252949833896}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "connectivity_score", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "float", "(", "'inf'", ")", ")", "# Average distance to neighbors", "avg_neighbor_distance", "=", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "/", "(", "connectivity_score", "+", "1", ")", ")", "if", "connectivity_score", ">", "0", "else", "0", "# Combined score emphasizing proximity and connectivity", "score", "=", "distance_to_next", "+", "distance_to_destination", "-", "(", "0.5", "*", "avg_neighbor_distance", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.4597365709491275}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "# Calculate immediate distances", "immediate_distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Calculate the closest unvisited node", "closest_unvisited_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "immediate_distances", "[", "node", "]", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "immediate_distances", "[", "node", "]", "# Penalty for potential backtracking: if the node is significantly further from the destination than the closest node", "backtrack_penalty", "=", "(", "distance_matrix", "[", "closest_unvisited_node", "]", "[", "destination_node", "]", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "/", "(", "1", "+", "distance_matrix", "[", "closest_unvisited_node", "]", "[", "destination_node", "]", ")", "# Combine metrics to compute a weighted score using both immediate distance and backtrack penalty", "weighted_score", "=", "distance", "+", "backtrack_penalty", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.478177742012496}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# Design idea: This algorithm incorporates a multi-faceted scoring mechanism using heuristic adjustments based on travel efficiency, potential cluster size of remaining unvisited nodes, and the influence of returning to the destination more quickly.", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "# Constants for weighting", "alpha", "=", "0.4", "# Weight for distance score", "beta", "=", "0.4", "# Weight for cluster potential score", "gamma", "=", "0.2", "# Weight for distance penalty", "# Calculate total distances to the remaining nodes", "total_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Cluster potential score: based on proximity of unvisited nodes", "cluster_score", "=", "sum", "(", "max", "(", "0", ",", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "-", "distance_to_next", ")", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "# Combined score incorporating cluster potential and distance penalty", "combined_score", "=", "(", "cluster_score", "*", "beta", "/", "total_distance_remaining", "-", "distance_to_destination", "*", "gamma", "-", "distance_to_next", "*", "alpha", ")", "if", "combined_score", ">", "best_score", ":", "best_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.525134263828551}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "diversity_scores", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", "}", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "diversity_penalty", "=", "1", "/", "(", "diversity_scores", "[", "node", "]", "+", "1", ")", "# Reduce score for diverse connections", "score", "=", "(", "distance", "+", "(", "avg_distance", "*", "0.5", ")", ")", "*", "diversity_penalty", "*", "random", ".", "uniform", "(", "0.9", ",", "1.1", ")", "# Adding randomness", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.550973982441487}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "euclidean_factor", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "*", "(", "1", "-", "(", "avg_distance_to_remaining", "/", "(", "distance_to_next", "+", "1", ")", ")", ")", "# Encourage path efficiency", "score", "=", "euclidean_factor", "*", "(", "avg_distance_to_remaining", "-", "distance_to_next", ")", "# Balance between immediate and future distances", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.563308132108515}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "total_distance_from_current_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Cost-effectiveness ratio", "cost_effectiveness_ratio", "=", "distance_to_next", "/", "(", "total_distance_to_unvisited", "+", "1e-6", ")", "# epsilon to avoid division by zero", "# New score incorporating cost-effectiveness and penalties", "score", "=", "cost_effectiveness_ratio", "+", "(", "0.5", "*", "total_distance_from_current_to_destination", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.571349423372209}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "dynamic_threshold", "=", "0.5", "+", "(", "0.5", "*", "len", "(", "unvisited_nodes", ")", "/", "len", "(", "distance_matrix", ")", ")", "if", "unvisited_nodes", "else", "0.5", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "average_distance_to_unvisited", "*", "dynamic_threshold", "-", "distance_to_next", ")", "-", "(", "0.3", "*", "distance_to_destination", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.608948264816889}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm utilizes a composite score based on a weighted sum of distance, penalty for clustering, and a bonus for nodes closer to the destination.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "clustering_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ",", "1", ")", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Weighting factors", "weight_distance", "=", "0.5", "weight_clustering", "=", "0.3", "weight_destination", "=", "0.2", "# Composite score calculation", "score", "=", "(", "weight_distance", "/", "(", "distance_to_next", "+", "1", ")", ")", "+", "(", "weight_clustering", "*", "(", "clustering_penalty", "-", "distance_to_next", ")", ")", "+", "(", "weight_destination", "/", "(", "distance_to_destination", "+", "1", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.613950744672907}
{"code_tokens": ["# {This algorithm employs a heuristic that balances not only short distance and connectivity but also incorporates a penalty for distant unvisited nodes, thus prioritizing nodes closer to the overall route while ensuring connectivity.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "penalty_for_distant_unvisited", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "+", "1", ")", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "15", ")", "# Penalty for distant nodes", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "+", "(", "total_distance_to_unvisited", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", ")", "-", "penalty_for_distant_unvisited", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.636340427227218}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "def", "visibility", "(", "node", ")", ":", "# Example visibility: inverse of distance to destination node", "return", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", "def", "dynamic_weight", "(", "node", ")", ":", "# Example dynamic weight: more weight to closer nodes", "return", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1", ")", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "vis", "=", "visibility", "(", "node", ")", "weight", "=", "dynamic_weight", "(", "node", ")", "# Combine visibility and dynamic weight", "score", "=", "distance", "*", "weight", "*", "vis", "# New score based on distance, weight and visibility", "scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.681151989816328}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "median_distance_to_unvisited", "=", "sorted", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "[", "len", "(", "unvisited_nodes", ")", "//", "2", "]", "if", "unvisited_nodes", "else", "0", "score", "=", "(", "median_distance_to_unvisited", "-", "distance_to_next", ")", "# Higher score for nodes with lower median distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.685179210579767}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate the distance to the destination from the current node", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Introduce a dynamic weighting factor for exploration versus optimization", "explore_weight", "=", "0.6", "# Weighting towards exploration", "optimize_weight", "=", "1.0", "-", "explore_weight", "# Weighting towards optimization", "# Calculate scores for each unvisited node", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "desirability_score", "=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", "# Compute the weighted score", "scores", "[", "node", "]", "=", "(", "explore_weight", "*", "distance_to_node", ")", "+", "(", "optimize_weight", "*", "desirability_score", ")", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.686629297695152}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate the distance to the destination from the current node", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Introduce a dynamic penalty factor based on the distance to the destination", "penalty_factor", "=", "1", "/", "(", "distance_to_destination", "+", "1", ")", "# Calculate scores for each unvisited node", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "desirability_score", "=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", "# Compute the multiplicative score with penalty", "scores", "[", "node", "]", "=", "(", "distance_to_node", "*", "penalty_factor", ")", "*", "desirability_score", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.699237951584123}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "unvisited_nodes", "=", "list", "(", "unvisited_nodes", ")", "def", "heuristic", "(", "node", ")", ":", "# Example heuristic: inverse of distance to destination node", "return", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "distance", "*", "heuristic", "(", "node", ")", "# Combine distance and heuristic", "scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.699237951584123}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate the distance to the destination from the current node", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Introduce a randomness factor for exploration", "risk_factor", "=", "0.4", "# Adjusted risk factor based on inspirations from No.1", "random_factor", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "*", "risk_factor", "# Calculate scores for each unvisited node", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_to_destination_score", "=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", "scores", "[", "node", "]", "=", "(", "distance_to_node", "*", "(", "1", "+", "random_factor", ")", ")", "+", "(", "distance_to_destination", "*", "proximity_to_destination_score", ")", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.702945291596709}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm selects the next node based on a combination of the total distance to all unvisited nodes and a cohesion factor that prioritizes nodes that maintain a compact path.}", "next_node", "=", "None", "min_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "# Cohesion factor: Penalizing visits to remote nodes while incentivizing closeness", "cohesion_factor", "=", "(", "len", "(", "unvisited_nodes", ")", "*", "distance_to_next", ")", "/", "(", "total_distance_to_unvisited", "if", "total_distance_to_unvisited", ">", "0", "else", "1", ")", "cost", "=", "distance_to_next", "+", "cohesion_factor", "# Combine distance with cohesion factor", "if", "cost", "<", "min_cost", ":", "min_cost", "=", "cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.70716943457822}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "# Constants for weighting", "alpha", "=", "0.5", "# Weight for distance score", "beta", "=", "0.3", "# Weight for connectivity score", "gamma", "=", "0.2", "# Weight for return distance penalty", "lambda_penalty", "=", "0.2", "# Weight for penalty on previously visited nodes", "# Calculate total distances to the remaining nodes", "total_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Track nodes that have been visited (for penalty application)", "visited_nodes", "=", "set", "(", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Connectivity score: based on the accumulated distance to unvisited neighboring nodes", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "# Penalty applied for previously visited nodes (if any)", "previous_visit_penalty", "=", "-", "lambda_penalty", "*", "len", "(", "visited_nodes", ")", "if", "node", "in", "visited_nodes", "else", "0", "# Combined score incorporating connectivity, distance penalty, and previous visit penalty", "combined_score", "=", "(", "connectivity_score", "*", "beta", "/", "total_distance_remaining", "-", "distance_to_destination", "*", "gamma", "-", "distance_to_next", "*", "alpha", "+", "previous_visit_penalty", ")", "if", "combined_score", ">", "best_score", ":", "best_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.737469186578055}
{"code_tokens": ["import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_combined_score", "=", "float", "(", "'-inf'", ")", "# Calculate cohesion score based on the average distance to other unvisited nodes", "cohesion_factor", "=", "len", "(", "unvisited_nodes", ")", "-", "1", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Cohesion score: average distance to all other unvisited nodes ", "cohesion_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "/", "cohesion_factor", "if", "cohesion_factor", ">", "0", "else", "0", "# Combined score: balance between cohesion and distance", "combined_score", "=", "cohesion_score", "-", "(", "distance_to_next", "*", "0.7", "+", "distance_to_destination", "*", "0.3", ")", "if", "combined_score", ">", "max_combined_score", ":", "max_combined_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.774473006000306}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "# Effective distance considering remaining unvisited nodes", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "weight_factor", "=", "1", "/", "max", "(", "num_unvisited", ",", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "direct_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Proximity score", "proximity_score", "=", "1", "/", "(", "direct_distance_to_destination", "+", "1", ")", "# Sum of distances to remaining unvisited nodes for influence of density", "total_distance_to_cluster", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "avg_distance_to_cluster", "=", "total_distance_to_cluster", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "# Incorporate density and proximity into the new score", "score", "=", "proximity_score", "*", "(", "2", "*", "avg_distance_to_cluster", "-", "distance_to_next", ")", "*", "weight_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.778534199268217}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "avg_distance_to_unvisited", "=", "total_distance_to_unvisited", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "# Score incorporating distance to destination as a penalty", "score", "=", "(", "avg_distance_to_unvisited", "*", "0.4", ")", "-", "(", "distance_to_next", "*", "0.4", ")", "-", "(", "distance_to_destination", "*", "0.2", ")", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.791674262630402}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm selects the next node by considering the combination of the minimum distance to the next node, ", "# the average distance to unvisited nodes, and a penalty for far nodes relative to the destination.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# New scoring mechanism that incorporates a penalty for distance to the destination", "score", "=", "(", "average_distance_to_unvisited", "-", "distance_to_next", ")", "-", "(", "distance_to_destination", "/", "2", ")", "# Minimizing distance to both unvisited and destination", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.791674262630402}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# This algorithm incorporates a penalty for the distance to the destination node and rewards nodes that reduce the overall path length without increasing the distance to unvisited nodes excessively.", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "score", "=", "(", "avg_distance_to_unvisited", "-", "distance_to_next", ")", "-", "(", "0.5", "*", "distance_to_destination", ")", "# Adjust score to consider closer access to destination", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.791674262630402}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "average_distance_to_unvisited", "-", "distance_to_next", ")", "-", "(", "0.5", "*", "distance_to_destination", ")", "# Balance between average, immediate, and destination distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.791674262630402}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "average_distance_to_unvisited", "-", "distance_to_next", ")", "-", "(", "0.5", "*", "distance_to_destination", ")", "# Incorporate penalty for distance to destination", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.791674262630402}
{"code_tokens": ["import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_combined_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate happiness score based on the sum of distances to all other unvisited nodes", "happiness_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "# Combined score: maximize happiness while minimizing distances", "combined_score", "=", "(", "happiness_score", "/", "len", "(", "unvisited_nodes", ")", ")", "-", "(", "distance_to_next", "+", "0.5", "*", "distance_to_destination", ")", "if", "combined_score", ">", "max_combined_score", ":", "max_combined_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.791674262630402}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "unvisited_nodes", "=", "list", "(", "unvisited_nodes", ")", "def", "heuristic", "(", "node", ")", ":", "# Example heuristic: distance to destination node adjusted by average distance to other unvisited nodes", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "return", "1", "/", "(", "avg_distance", "+", "1", ")", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "distance", "*", "heuristic", "(", "node", ")", "# Combine distance and modified heuristic", "scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.797780584122648}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_combined_score", "=", "float", "(", "'-inf'", ")", "# Constants for weighting", "alpha", "=", "0.5", "# Weight for distance score", "beta", "=", "0.3", "# Weight for cohesion score", "gamma", "=", "0.2", "# Weight for distance penalty", "# Total number of unvisited nodes", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Cohesion score: average distance to remaining unvisited nodes", "cohesion_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "/", "(", "num_unvisited", "-", "1", ")", "if", "num_unvisited", ">", "1", "else", "0", "# Penalty score: additional distance incurred to go to destination after current", "distance_penalty", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score incorporating distance penalty", "combined_score", "=", "(", "cohesion_score", "*", "beta", "-", "distance_penalty", "*", "gamma", "-", "distance_to_next", "*", "alpha", ")", "if", "combined_score", ">", "max_combined_score", ":", "max_combined_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.8024398518384}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate the distance to the destination from the current node", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Calculate the average distance to unvisited nodes for variance consideration", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Introduce a novelty factor based on distance variance", "novelty_factor", "=", "0.5", "# Weighting to prioritize exploration", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_variance_score", "=", "abs", "(", "distance_to_node", "-", "avg_distance_to_unvisited", ")", "# Combine scores: base score with novelty weighting and proximity to destination", "scores", "[", "node", "]", "=", "(", "distance_to_node", "*", "1.2", ")", "+", "(", "distance_to_destination", "*", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", ")", ")", "-", "(", "novelty_factor", "*", "distance_variance_score", ")", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.809195521046739}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate the distance to the destination from the current node", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Introduce a dynamic weighting factor for exploration versus optimization", "explore_weight", "=", "0.7", "# Weighting towards exploration", "optimize_weight", "=", "1.0", "-", "explore_weight", "# Weighting towards optimization", "# Maximize novelty by introducing variability", "novelty_factor", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "# Calculate scores for each unvisited node", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "desirability_score", "=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", "# Compute the weighted score incorporating the novelty factor", "scores", "[", "node", "]", "=", "(", "explore_weight", "*", "distance_to_node", "+", "novelty_factor", ")", "+", "(", "optimize_weight", "*", "desirability_score", ")", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.811176950081406}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_combined_score", "=", "float", "(", "'-inf'", ")", "# Dynamic weight adjustment based on current tour length (example scale: 1 to 10)", "current_tour_length", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "weight_scale", "=", "min", "(", "1", "+", "current_tour_length", "/", "10", ",", "2", ")", "# Constants for weighting with dynamic adjustment", "alpha", "=", "0.5", "*", "weight_scale", "# Weight for distance score", "beta", "=", "0.3", "*", "weight_scale", "# Weight for cohesion score", "gamma", "=", "0.2", "*", "weight_scale", "# Weight for distance penalty", "# Total number of unvisited nodes", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Cohesion score: standard deviation of distances to remaining unvisited nodes", "distances_to_others", "=", "[", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "]", "cohesion_score", "=", "(", "sum", "(", "distances_to_others", ")", "/", "(", "num_unvisited", "-", "1", ")", ")", "if", "num_unvisited", ">", "1", "else", "0", "# Penalty score: additional distance incurred to go to destination after current", "distance_penalty", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score incorporating a modified penalty approach through a logarithmic scale", "combined_score", "=", "(", "cohesion_score", "*", "beta", "-", "distance_penalty", "*", "gamma", "-", "distance_to_next", "*", "alpha", ")", "*", "(", "1", "+", "1", "/", "(", "1", "+", "distance_to_next", ")", ")", "if", "combined_score", ">", "max_combined_score", ":", "max_combined_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.823645446582952}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate score based on a ratio of the distances", "if", "distance_to_destination", ">", "0", ":", "# Avoid division by zero", "score", "=", "distance_to_node", "/", "distance_to_destination", "else", ":", "score", "=", "float", "(", "'inf'", ")", "# Penalize if destination is zero distance away", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.831500052161287}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_ratio", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate the ratio of distances", "if", "distance_to_destination", ">", "0", ":", "# Avoid division by zero", "ratio", "=", "distance_to_node", "/", "distance_to_destination", "# Select the node with the minimum ratio", "if", "ratio", "<", "best_ratio", ":", "best_ratio", "=", "ratio", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.831500052161287}
{"code_tokens": ["import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_combined_score", "=", "float", "(", "'-inf'", ")", "# Calculate constants for weighting", "alpha", "=", "0.6", "# Weight for distance score", "beta", "=", "0.4", "# Weight for cohesion score", "# Total number of unvisited nodes", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Cohesion score: average distance to all other unvisited nodes", "cohesion_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "/", "(", "num_unvisited", "-", "1", ")", "if", "num_unvisited", ">", "1", "else", "0", "# Heuristic score based on the connectivity density (higher is better)", "connectivity_density", "=", "len", "(", "[", "other_node", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "(", "distance_to_next", "+", "2", ")", "]", ")", "# Consider nodes 'close' to the current one", "# Combined score: balance between distance and cohesion with connectivity density", "combined_score", "=", "(", "cohesion_score", "*", "beta", "+", "(", "connectivity_density", "*", "distance_to_next", "*", "-", "1", ")", "*", "alpha", ")", "if", "combined_score", ">", "max_combined_score", ":", "max_combined_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.842236937616268}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate average distance to unvisited nodes", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Calculate diversity scores", "diversity_scores", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", "}", "# Calculate clustering factor based on proximity to other unvisited nodes", "clustering_scores", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "for", "node", "in", "unvisited_nodes", "}", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "diversity_penalty", "=", "1", "/", "(", "diversity_scores", "[", "node", "]", "+", "1", ")", "# Reduce score for diverse connections", "clustering_factor", "=", "1", "/", "(", "clustering_scores", "[", "node", "]", "+", "1", ")", "# Favor nodes that are clustered closely with others", "score", "=", "(", "distance", "+", "(", "avg_distance", "*", "0.5", ")", ")", "*", "diversity_penalty", "*", "clustering_factor", "*", "random", ".", "uniform", "(", "0.9", ",", "1.1", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.851333339843542}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "weight_factor", "=", "1", "/", "max", "(", "1", ",", "len", "(", "unvisited_nodes", ")", ")", "# Dynamic weight based on remaining unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "total_distance_from_unvisited_to_destination", "=", "sum", "(", "distance_matrix", "[", "n", "]", "[", "destination_node", "]", "for", "n", "in", "unvisited_nodes", ")", "score", "=", "(", "average_distance_to_unvisited", "*", "weight_factor", ")", "-", "distance_to_next", "+", "(", "0.5", "*", "total_distance_from_unvisited_to_destination", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.8531660816014}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "median_distance_to_unvisited", "=", "sorted", "(", "[", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "]", ")", "[", "len", "(", "unvisited_nodes", ")", "//", "2", "]", "if", "unvisited_nodes", "else", "0", "# Introducing a collaborative score based on median distance", "score", "=", "(", "median_distance_to_unvisited", "-", "distance_to_next", ")", "*", "0.5", "+", "(", "1", "/", "(", "distance_to_next", "+", "1e-5", ")", ")", "# Avoid division by zero", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.854218353906577}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm utilizes a combination of proximity, a heuristic penalty for farther distances, ", "# and dynamic adjustment based on the average distance to all unvisited nodes, emphasizing nodes ", "# that are both closer and have fewer connections to the remaining nodes.}", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "heuristic_penalty", "=", "(", "distance_to_next", "/", "(", "avg_distance_to_remaining", "+", "1", ")", ")", "*", "(", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "score", "=", "distance_to_next", "+", "heuristic_penalty", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.857189911690752}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "connectivity_scores", "=", "{", "node", ":", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "log_penalty", "=", "-", "1", "*", "(", "1", "+", "(", "distance_to_next", "**", "0.5", ")", ")", "# Logarithmic penalty on distance", "average_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "connectivity_score", "=", "connectivity_scores", "[", "node", "]", "score", "=", "(", "log_penalty", "*", "connectivity_score", ")", "+", "(", "0.5", "*", "average_distance_to_remaining", ")", "# Adjusted scoring equation", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.871574901958524}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "candidates", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_bonus", "=", "1", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "# Closer nodes get higher scores", "random_factor", "=", "random", ".", "uniform", "(", "0.9", ",", "1.1", ")", "# Introduce variability", "score", "=", "(", "distance_to_node", "*", "0.5", ")", "+", "(", "distance_to_destination", "*", "0.3", ")", "+", "(", "proximity_bonus", "*", "0.2", ")", "*", "random_factor", "candidates", ".", "append", "(", "(", "node", ",", "score", ")", ")", "next_node", "=", "min", "(", "candidates", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 6.882177178371151}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "avg_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_proximity", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "visited", "]", "for", "visited", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "visited", "!=", "current_node", "and", "visited", "not", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "penalty_for_distance", "=", "max", "(", "0", ",", "avg_distance_to_remaining", "-", "distance_to_next", ")", "# Penalize for far distances", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "*", "(", "heuristic_proximity", "+", "penalty_for_distance", ")", "# Combine factors", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.892514570726942}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Total distance to finish", "connectivity_score", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "neighbour", "]", "for", "neighbour", "in", "unvisited_nodes", "if", "neighbour", "!=", "node", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "exploration_factor", "=", "connectivity_score", "[", "node", "]", "*", "0.05", "# Reward for potential connections", "weighted_score", "=", "distance", "+", "(", "total_remaining_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", ")", "-", "exploration_factor", "# Combine metrics", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.906840759597606}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate the distance to the destination from the current node", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Dynamic weighting factor based on the number of visited nodes", "total_nodes", "=", "len", "(", "distance_matrix", ")", "num_visited", "=", "total_nodes", "-", "len", "(", "unvisited_nodes", ")", "explore_weight", "=", "0.5", "+", "(", "0.5", "*", "(", "num_visited", "/", "total_nodes", ")", ")", "# Increases exploration weight with more visits", "optimize_weight", "=", "1.0", "-", "explore_weight", "# Adjust optimize weight accordingly", "# Calculate scores for each unvisited node", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "potential_efficient_score", "=", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", ")", "*", "(", "1", "+", "(", "num_visited", "/", "total_nodes", ")", ")", "# Compute the weighted score", "scores", "[", "node", "]", "=", "(", "explore_weight", "*", "distance_to_node", ")", "+", "(", "optimize_weight", "*", "potential_efficient_score", ")", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.911824453516497}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "num_unvisited", "if", "num_unvisited", ">", "0", "else", "1", ")", "# Reward for selecting closer nodes", "proximity_reward", "=", "(", "1", "/", "distance_to_next", ")", "if", "distance_to_next", ">", "0", "else", "0", "score", "=", "(", "avg_distance_to_unvisited", "-", "distance_to_next", ")", "+", "proximity_reward", "*", "(", "1", "+", "(", "num_unvisited", "/", "2", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.917486537475675}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm introduces a multi-faceted scoring system that factors in the closeness of the next node to the current node, ", "# the average distance to the destination, and the nearest unvisited node to create a more balanced selection for the next node.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "avg_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "nearest_unvisited_distance", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "+", "(", "1", "/", "(", "distance_to_destination", "+", "1", ")", ")", "+", "(", "avg_distance_to_remaining", "-", "nearest_unvisited_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957224461305669}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "unvisited_nodes", "=", "list", "(", "unvisited_nodes", ")", "def", "weighted_average_distance", "(", "nodes", ")", ":", "total_distance", "=", "0", "for", "node", "in", "nodes", ":", "total_distance", "+=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "return", "total_distance", "/", "len", "(", "nodes", ")", "avg_distance", "=", "weighted_average_distance", "(", "unvisited_nodes", ")", "optimal_node", "=", "None", "min_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance_to_node", "<", "min_distance", ":", "min_distance", "=", "distance_to_node", "optimal_node", "=", "node", "return", "optimal_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "from", "collections", "import", "defaultdict", "import", "numpy", "as", "np", "# Define a threshold distance to form clusters", "threshold_distance", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "# Create clusters of unvisited nodes", "clusters", "=", "defaultdict", "(", "list", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "<", "threshold_distance", ":", "clusters", "[", "current_node", "]", ".", "append", "(", "node", ")", "else", ":", "clusters", "[", "tuple", "(", "min", "(", "[", "(", "current_node", ",", "node", ")", ",", "(", "node", ",", "current_node", ")", "]", ",", "key", "=", "lambda", "x", ":", "distance_matrix", "[", "x", "[", "0", "]", "]", "[", "x", "[", "1", "]", "]", ")", ")", "]", ".", "append", "(", "node", ")", "# Find the nearest cluster", "nearest_cluster", "=", "min", "(", "clusters", ".", "keys", "(", ")", ",", "key", "=", "lambda", "cluster", ":", "np", ".", "mean", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "clusters", "[", "cluster", "]", "]", ")", ")", "# Select the closest node from the nearest cluster", "next_node", "=", "min", "(", "clusters", "[", "nearest_cluster", "]", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "# Weighted score calculation", "scores", "[", "node", "]", "=", "(", "distance_to_node", "+", "distance_to_destination", ")", "/", "(", "1", "+", "connectivity_score", ")", "# Lower score is better", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate the total distance to all unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Define a decay factor to decrease the influence of distant nodes", "decay_factor", "=", "0.3", "# Adjust based on how much to consider distance", "# Score calculation for each unvisited node", "scores", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "(", "1", "-", "decay_factor", ")", "+", "(", "total_distance", "/", "len", "(", "unvisited_nodes", ")", ")", "*", "decay_factor", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "len", "(", "unvisited_nodes", ")", "*", "0.1", "# Penalty based on unvisited nodes", "urgency", "=", "(", "1", "/", "(", "distance", "+", "1e-5", ")", ")", "# Urgency based on distance (avoids div by zero)", "weighted_score", "=", "distance", "+", "penalty", "-", "urgency", "# Combine metrics", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm prioritizes nodes based on a gradient descent-like approach that combines", "# proximity to the current node and the potential future path length to the destination.}", "next_node", "=", "None", "min_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "estimated_cost_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "heuristic_score", "=", "(", "distance_to_next", "+", "estimated_cost_to_destination", ")", "*", "(", "len", "(", "unvisited_nodes", ")", "**", "0.5", ")", "# Weighting by the number of unvisited nodes", "if", "heuristic_score", "<", "min_cost", ":", "min_cost", "=", "heuristic_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "# Calculate degree of separation: the number of unvisited neighbors", "degree_of_separation", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "float", "(", "'inf'", ")", ")", "-", "1", "# Penalty based on degree of separation: encourage visiting well-connected nodes", "penalty", "=", "degree_of_separation", "*", "0.1", "# Combined score factoring in penalty for less connected nodes", "score", "=", "distance_to_next", "+", "distance_to_destination", "+", "penalty", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "total_distance_traveled", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "if", "node", "!=", "current_node", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "# Penalty for total distance traveled so far", "penalty_score", "=", "total_distance_traveled", "*", "0.1", "# Combined score emphasizing proximity while penalizing longer paths", "score", "=", "distance_to_next", "+", "distance_to_destination", "+", "penalty_score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "# Calculate connectivity penalty based on the number of close neighbors", "connectivity_penalty", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "float", "(", "'inf'", ")", ")", "# Weighted score incorporating distance and connectivity", "score", "=", "distance_to_next", "+", "distance_to_destination", "+", "(", "1.5", "*", "connectivity_penalty", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "# Penalty for long distances to make closer nodes more favorable", "penalty", "=", "math", ".", "exp", "(", "distance_to_next", "/", "10", ")", "# Can adjust the divisor for sensitivity", "# Weighted score based on proximity and penalty", "score", "=", "(", "distance_to_next", "*", "penalty", ")", "+", "distance_to_destination", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "# Influence of destination", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_penalty", "=", "distance", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "# Normalized distance impact", "exploration_factor", "=", "(", "total_distance_to_unvisited", "-", "distance", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "# Exploration balance", "weighted_score", "=", "distance", "+", "distance_penalty", "-", "average_distance_to_destination", "+", "exploration_factor", "# Combine metrics", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate distances to the destination and unvisited nodes", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "distances_to_unvisited", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "# Calculate variance to introduce diversity in selection", "mean_distance_to_unvisited", "=", "sum", "(", "distances_to_unvisited", ")", "/", "len", "(", "distances_to_unvisited", ")", "variance_distance", "=", "sum", "(", "(", "distance", "-", "mean_distance_to_unvisited", ")", "**", "2", "for", "distance", "in", "distances_to_unvisited", ")", "/", "len", "(", "distances_to_unvisited", ")", "diversity_score", "=", "variance_distance", "**", "0.5", "# Standard deviation for diversity measure", "# Define weighting schemes", "distance_weight", "=", "1.5", "diversity_weight", "=", "0.5", "# Calculate scores incorporating distance and diversity", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "scores", "[", "node", "]", "=", "(", "distance_weight", "*", "distance_to_node", ")", "+", "(", "diversity_weight", "*", "(", "distance_to_node", "/", "(", "diversity_score", "+", "1", ")", ")", ")", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Create a dictionary to hold the minimum cost to reach each unvisited node", "cost_map", "=", "{", "node", ":", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", "}", "# Update costs to reach each unvisited node from the current node", "for", "node", "in", "unvisited_nodes", ":", "cost_map", "[", "node", "]", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Find the unvisited node with the minimum cost", "for", "node", "in", "unvisited_nodes", ":", "if", "cost_map", "[", "node", "]", "<", "min_cost", ":", "min_cost", "=", "cost_map", "[", "node", "]", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Define a distance threshold for clustering", "distance_threshold", "=", "1.5", "# Adjust based on the problem scale", "# Create clusters based on proximity", "clusters", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "added_to_cluster", "=", "False", "for", "cluster", "in", "clusters", ":", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<", "distance_threshold", ":", "cluster", ".", "append", "(", "node", ")", "added_to_cluster", "=", "True", "break", "if", "not", "added_to_cluster", ":", "clusters", ".", "append", "(", "[", "node", "]", ")", "# Select the nearest cluster", "if", "not", "clusters", ":", "return", "None", "nearest_cluster", "=", "min", "(", "clusters", ",", "key", "=", "lambda", "cluster", ":", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "cluster", ")", ")", "# Select the node from the nearest cluster with the least distance", "next_node", "=", "min", "(", "nearest_cluster", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate the average distance to the destination from current node", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Introduce a randomness factor to explore less-visited nodes", "random_factor", "=", "random", ".", "uniform", "(", "0.5", ",", "1.5", ")", "# Select the closest unvisited node with a penalty for more unvisited nodes", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "random_factor", "+", "(", "avg_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", ")", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "<", "min_distance", ":", "min_distance", "=", "distance", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate total distance to all unvisited nodes from the current node", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Define a decay factor that reduces the influence of farther nodes", "decay_factor", "=", "0.5", "# Adjust this value for stronger or weaker decay", "# Calculate scores for each unvisited node combining its direct distance and a decayed total distance", "node_scores", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "decay_factor", "*", "(", "total_distance", "/", "len", "(", "unvisited_nodes", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the node with the minimum score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate the average distance to all unvisited nodes", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Define a weight factor to prioritize distances relative to the average", "weight_factor", "=", "0.5", "# Adjust based on the importance of proximity vs. average distance", "# Score calculation for each unvisited node", "scores", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "(", "1", "-", "weight_factor", ")", "+", "avg_distance", "*", "weight_factor", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "unvisited_nodes", "=", "list", "(", "unvisited_nodes", ")", "distances_to_unvisited", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "# Calculate average distances to form clusters", "average_distance", "=", "np", ".", "mean", "(", "distances_to_unvisited", ")", "clusters", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "<=", "average_distance", ":", "clusters", ".", "setdefault", "(", "'near'", ",", "[", "]", ")", ".", "append", "(", "node", ")", "else", ":", "clusters", ".", "setdefault", "(", "'far'", ",", "[", "]", ")", ".", "append", "(", "node", ")", "# Select the centroid of the nearest cluster or fallback to the nearest node if no nearby cluster", "if", "'near'", "in", "clusters", "and", "clusters", "[", "'near'", "]", ":", "next_node", "=", "min", "(", "clusters", "[", "'near'", "]", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "else", ":", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["# {The new algorithm incorporates a dynamic scoring formula that adjusts penalties for longer distances while rewarding nodes closer to both the current and destination nodes, introducing a decay factor to emphasize exploration of nearby nodes.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Define decay factor for exploration proximity", "decay_factor", "=", "0.5", "# Calculate scores based on distance, proximity to destination, and exploration incentive", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", ")", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "exploration_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "# Combined score with a decay factor for distance", "scores", "[", "node", "]", "=", "distance_score", "*", "(", "1", "-", "decay_factor", ")", "+", "exploration_score", "+", "(", "1", "-", "proximity_score", ")", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "def", "proximity_score", "(", "node", ")", ":", "return", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1", ")", "def", "penalty_score", "(", "node", ")", ":", "return", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "+", "1", ")", "exploration_factor", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "prox_score", "=", "proximity_score", "(", "node", ")", "pen_score", "=", "penalty_score", "(", "node", ")", "score", "=", "prox_score", "*", "(", "1", "-", "pen_score", ")", "*", "exploration_factor", "# Combine scores", "scores", "[", "node", "]", "=", "score", "next_node", "=", "max", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate average distance to unvisited nodes", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Calculate popularity scores (number of visits)", "popularity_scores", "=", "{", "node", ":", "1", "for", "node", "in", "unvisited_nodes", "}", "# Initialize scores", "# Find the next node based on a scoring mechanism", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "popularity_penalty", "=", "1", "/", "popularity_scores", "[", "node", "]", "# More visited, higher penalty", "score", "=", "(", "distance", "+", "(", "avg_distance", "*", "0.5", ")", ")", "*", "popularity_penalty", "# Weighted score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "# Update popularity score", "popularity_scores", "[", "node", "]", "+=", "1", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["# {The modified algorithm incorporates a balancing mechanism that weighs distance, connectivity, and the cumulative travel cost, implementing a decay factor to prioritize nodes that are closer in both distance and connection while considering overall route efficiency.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate scores based on a combination of distance, connectivity, and cumulative travel cost with a decay factor", "scores", "=", "{", "}", "decay_factor", "=", "0.5", "# Adjust the influence of connectivity and heuristic over time", "cumulative_travel_cost", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "if", "node", "!=", "current_node", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "heuristic_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "# Calculate the final score with a decay factor influencing connectivity and heuristic", "scores", "[", "node", "]", "=", "(", "distance_score", "+", "decay_factor", "*", "connectivity_score", "+", "decay_factor", "*", "heuristic_cost", "-", "cumulative_travel_cost", ")", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_combined_score", "=", "float", "(", "'-inf'", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "float", "(", "'inf'", ")", ")", "# Combined score: balance between average distance and connectivity", "combined_score", "=", "(", "connectivity_score", "/", "len", "(", "unvisited_nodes", ")", ")", "-", "(", "distance_to_next", "/", "average_distance", ")", "if", "combined_score", ">", "max_combined_score", ":", "max_combined_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate a score for each unvisited node based on distance and connectivity", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "scores", "[", "node", "]", "=", "distance_score", "-", "connectivity_score", "# Lower score is better", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Sort unvisited nodes based on distance from the current node", "sorted_nodes", "=", "sorted", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "# Select the nearest node", "next_node", "=", "sorted_nodes", "[", "0", "]", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["# {This algorithm uses a modified greedy approach by integrating a dynamic scoring system that considers both distance and node popularity based on the number of visits, balancing exploration between nearby and more attractive unvisited nodes.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate scores for unvisited nodes based on distance and \"popularity\"", "node_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "popularity_score", "=", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "15", "]", ")", "# Popularity based on nearby unvisited nodes", "score", "=", "distance_to_node", "-", "popularity_score", "# Lower score is better", "node_scores", "[", "node", "]", "=", "score", "# Select the node with the best score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "total_path_cost", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "if", "node", "!=", "current_node", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "connectivity_score", "=", "len", "(", "unvisited_nodes", ")", "-", "1", "# Consider all other unvisited nodes as potential connections", "# Combined score using a historical cost factor", "historical_cost_factor", "=", "total_path_cost", "/", "len", "(", "unvisited_nodes", ")", "score", "=", "(", "distance_to_next", "+", "distance_to_destination", "+", "historical_cost_factor", ")", "/", "(", "connectivity_score", "+", "1", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm incorporates a synergy metric that enhances the selection process by combining the distances to unvisited ", "# nodes with exploration potential based on node diversity, while also factoring in a temporal aspect of previously visited paths.}", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "# Calculate the total distance to all unvisited nodes", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Calculate remaining distances to destination", "remaining_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Capture diversity factor based on the distances of unvisited nodes from this node", "diversity_factor", "=", "sum", "(", "min", "(", "distance_matrix", "[", "node", "]", "[", "adj", "]", ",", "distance_matrix", "[", "adj", "]", "[", "current_node", "]", ")", "for", "node", "in", "unvisited_nodes", "for", "adj", "in", "unvisited_nodes", "if", "adj", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Synergy metrics combining proximity, diversity, and remaining distance to destination", "synergy_metric", "=", "(", "distance", "+", "remaining_distance_to_destination", ")", "/", "(", "diversity_factor", "+", "1e-5", ")", "# Calculate weighted score", "weighted_score", "=", "synergy_metric", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Dynamically adjust the distance threshold based on remaining unvisited nodes", "distance_threshold", "=", "max", "(", "0.5", ",", "1.5", "*", "(", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "distance_matrix", ")", "-", "1", ")", ")", ")", "# Create clusters based on proximity using the dynamic threshold", "clusters", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "added_to_cluster", "=", "False", "for", "cluster", "in", "clusters", ":", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<", "distance_threshold", ":", "cluster", ".", "append", "(", "node", ")", "added_to_cluster", "=", "True", "break", "if", "not", "added_to_cluster", ":", "clusters", ".", "append", "(", "[", "node", "]", ")", "# Select the nearest cluster", "if", "not", "clusters", ":", "return", "None", "nearest_cluster", "=", "min", "(", "clusters", ",", "key", "=", "lambda", "cluster", ":", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "cluster", ")", ")", "# Select the node from the nearest cluster with the minimum distance", "next_node", "=", "min", "(", "nearest_cluster", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Score dictionary to assess nodes based on distance and penalty", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Introducing a revisit penalty based on how many nodes are left", "revisit_penalty", "=", "len", "(", "unvisited_nodes", ")", "*", "0.1", "# Score is based on the shortest distance to the unvisited node reduced by a penalty", "scores", "[", "node", "]", "=", "distance_to_node", "+", "revisit_penalty", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate distances to all unvisited nodes", "distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Find minimum distance", "min_distance", "=", "min", "(", "distances", ".", "values", "(", ")", ")", "# Filter candidates - those with minimum distance", "candidates", "=", "[", "node", "for", "node", ",", "dist", "in", "distances", ".", "items", "(", ")", "if", "dist", "==", "min_distance", "]", "# Introduce randomness to select among the best candidates", "if", "candidates", ":", "next_node", "=", "random", ".", "choice", "(", "candidates", ")", "# Randomly select one of the nearest", "else", ":", "next_node", "=", "None", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "def", "distance_to_target", "(", "node", ")", ":", "return", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "def", "penalty", "(", "node", ")", ":", "# Penalty is based on the number of unvisited nodes", "return", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "dist", "=", "distance_to_target", "(", "node", ")", "pen", "=", "penalty", "(", "node", ")", "score", "=", "dist", "*", "pen", "# New score calculated with distance and penalty", "scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate average distance to unvisited nodes", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Find the nearest node with respect to the average distance", "nearest_node", "=", "None", "min_weighted_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Adjust the distance with a weight factor based on the average distance", "weighted_distance", "=", "distance", "+", "(", "avg_distance", "-", "distance", ")", "*", "0.5", "if", "weighted_distance", "<", "min_weighted_distance", ":", "min_weighted_distance", "=", "weighted_distance", "nearest_node", "=", "node", "return", "nearest_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "adjusted_score", "=", "(", "total_distance_to_unvisited", "/", "len", "(", "unvisited_nodes", ")", ")", "-", "distance_to_next", "# Adjusting score with total distance concept", "if", "adjusted_score", ">", "max_score", ":", "max_score", "=", "adjusted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["# {The new algorithm introduces a scoring system that incorporates a penalty for longer distances and rewards for connectivity, while also considering the minimum distance to any unvisited node as an attraction factor.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate scores for each unvisited node", "scores", "=", "{", "}", "min_distance_to_unvisited", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_penalty", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "**", "2", "# Square of distance as penalty", "connectivity_reward", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "*", "2", "attraction_factor", "=", "min_distance_to_unvisited", "*", "0.5", "# Attraction based on the minimum distance to unvisited nodes", "scores", "[", "node", "]", "=", "distance_penalty", "-", "connectivity_reward", "+", "attraction_factor", "# Lower score is better", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "unvisited_nodes", "=", "list", "(", "unvisited_nodes", ")", "def", "heuristic_score", "(", "node", ")", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_nodes_count", "=", "len", "(", "unvisited_nodes", ")", "-", "1", "# Exclude the current node", "return", "distance_to_node", "*", "(", "1", "+", "remaining_nodes_count", "/", "len", "(", "distance_matrix", ")", ")", "optimal_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "heuristic_score", ")", "return", "optimal_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "threshold", "=", "10", "# Maximum distance to consider for next node", "candidates", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance_to_node", "<", "threshold", ":", "candidates", ".", "append", "(", "(", "node", ",", "distance_to_node", ")", ")", "if", "not", "candidates", ":", "# If no candidates within threshold, select the closest node", "candidates", "=", "[", "(", "node", ",", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "for", "node", "in", "unvisited_nodes", "]", "next_node", "=", "min", "(", "candidates", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm leverages a scoring system combining the direct distance to the destination, a penalty for visiting far nodes, ", "# and the average distance to other unvisited nodes, emphasizing the balance between short-term path efficiency and long-term total distance.}", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "# Calculate the average distance to all unvisited nodes", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "# Direct distance to destination", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Penalty term based on distance to this node", "penalty", "=", "distance", "*", "1.5", "# Score calculation incorporates distance to destination, penalty, and average distance to unvisited nodes", "weighted_score", "=", "distance_to_destination", "+", "penalty", "+", "(", "avg_distance_to_unvisited", "-", "distance", ")", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "current_path_length", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Score based on direct distance and current path length", "adjusted_score", "=", "distance_to_next", "+", "(", "current_path_length", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "if", "adjusted_score", "<", "min_score", ":", "min_score", "=", "adjusted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate distances to the nearest unvisited node", "nearest_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Calculate a penalty based on the total distance of remaining unvisited nodes", "total_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "scores", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "(", "total_penalty", "/", "len", "(", "unvisited_nodes", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm enhances node selection by considering not only proximity but also the number of connections with unvisited nodes, allowing for a more strategic decision.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connection_count", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "0", ")", "score", "=", "(", "connection_count", "/", "(", "distance_to_next", "+", "1", ")", ")", "# Higher score for nodes with more connections and shorter distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "scores", "=", "{", "}", "base_threshold", "=", "10", "# Base maximum distance to consider for next node", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate score using a dynamic threshold based on remaining unvisited nodes", "heuristic_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "score", "=", "distance_to_node", "+", "(", "heuristic_cost", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "# Dynamic scoring", "# Only consider nodes within base threshold for initial filtering", "if", "distance_to_node", "<", "base_threshold", ":", "scores", "[", "node", "]", "=", "score", "if", "not", "scores", ":", "# Fallback to closest unvisited node", "scores", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "\"\"\"{This algorithm introduces a two-factor scoring system that combines both the distance to unvisited nodes and an estimated cost to reach the destination node, normalized by the number of remaining unvisited nodes, thus ensuring a balanced selection process that mitigates the risk of selecting nodes that are too distant or costly to reach in future steps.}\"\"\"", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "scores", "=", "{", "}", "base_threshold", "=", "15", "# Increased base threshold for more options", "alpha", "=", "0.7", "# Weight for distance consideration", "beta", "=", "0.3", "# Weight for heuristic cost", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate heuristic cost with normalization", "heuristic_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "normalized_heuristic", "=", "heuristic_cost", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Dynamic score based on weighted factors", "score", "=", "(", "alpha", "*", "distance_to_node", ")", "+", "(", "beta", "*", "normalized_heuristic", ")", "# Only consider nodes within base threshold for initial filtering", "if", "distance_to_node", "<", "base_threshold", ":", "scores", "[", "node", "]", "=", "score", "if", "not", "scores", ":", "# Fallback to closest unvisited node", "scores", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "float", "(", "'inf'", ")", "# Connectivity score based on the number of unvisited neighbors", "connectivity_score", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "float", "(", "'inf'", ")", ")", "# Scoring: Minimize distance to next, maximize proximity to destination with connectivity", "score", "=", "distance_to_next", "+", "(", "1", "/", "(", "distance_to_destination", "+", "1e-6", ")", ")", "-", "(", "0.1", "*", "connectivity_score", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "iterations", "=", "100", "best_node", "=", "None", "best_distance", "=", "float", "(", "'inf'", ")", "for", "_", "in", "range", "(", "iterations", ")", ":", "candidates", "=", "[", "]", "# Find the minimum distance to unvisited nodes", "distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "min_distance", "=", "min", "(", "distances", ".", "values", "(", ")", ")", "# Generate candidates with randomness", "for", "node", ",", "dist", "in", "distances", ".", "items", "(", ")", ":", "if", "dist", "<=", "min_distance", ":", "candidates", ".", "append", "(", "node", ")", "if", "candidates", ":", "# Introduce randomness in selecting candidates", "random_candidate", "=", "random", ".", "choice", "(", "candidates", ")", "total_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "random_candidate", "]", "# Estimate a quick evaluation of upcoming unvisited node distances", "for", "next_node", "in", "unvisited_nodes", "-", "{", "random_candidate", "}", ":", "total_distance", "+=", "distance_matrix", "[", "random_candidate", "]", "[", "next_node", "]", "if", "total_distance", "<", "best_distance", ":", "best_distance", "=", "total_distance", "best_node", "=", "random_candidate", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "random_factor", "=", "random", ".", "uniform", "(", "0.1", ",", "1.0", ")", "min_distance_to_unvisited", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "max_distance_to_destination", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "(", "max_distance_to_destination", "-", "distance_to_next", ")", "+", "(", "0.1", "*", "random_factor", "*", "min_distance_to_unvisited", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "distance_threshold", "=", "2", "# Maximum acceptable distance for selection", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance_score", ">", "distance_threshold", ":", "continue", "# Skip nodes that exceed the distance threshold", "neighbor_weight", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "proximity_score", "=", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", ")", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "# Combined score emphasizing low distance, high connectivity, and proximity to destination", "scores", "[", "node", "]", "=", "(", "1", "/", "distance_score", ")", "+", "neighbor_weight", "+", "(", "1", "-", "proximity_score", ")", "# Select the unvisited node with the highest score", "next_node", "=", "max", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", ".", "get", "(", "node", ",", "float", "(", "'-inf'", ")", ")", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "unvisited_nodes", "=", "list", "(", "unvisited_nodes", ")", "def", "penalty", "(", "num_remaining", ")", ":", "# Penalty increases with the number of remaining unvisited nodes", "return", "num_remaining", "*", "0.5", "# Example penalty factor", "scores", "=", "{", "}", "num_remaining", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "distance", "+", "penalty", "(", "num_remaining", ")", "*", "(", "1", "+", "(", "1", "/", "num_remaining", ")", ")", "# Combine distance and penalty", "scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["# {This algorithm dynamically adjusts the selection of the next node by incorporating a dynamic scoring system based on the average distance to unvisited nodes, the proximity to the destination, and a randomness factor to encourage exploration of different paths.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "# Calculate average distance to unvisited nodes", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "# Adjusting the proximity to the destination", "proximity_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Randomness factor to diversify search: gives a small chance to explore less probable nodes", "randomness_factor", "=", "0.1", "*", "(", "distance", "/", "(", "average_distance_to_unvisited", "+", "1e-5", ")", ")", "# Weighted score incorporating randomness, proximity, and average distance", "weighted_score", "=", "(", "distance", "*", "(", "1", "+", "randomness_factor", ")", "+", "proximity_to_destination", "/", "(", "average_distance_to_unvisited", "+", "1e-5", ")", ")", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "min_distance_to_unvisited", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "float", "(", "'inf'", ")", "score", "=", "distance_to_next", "+", "(", "min_distance_to_unvisited", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", ")", "# Penalty for distance + incentive for proximity", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "clusters", "=", "{", "}", "# Create clusters based on proximity", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "not", "in", "clusters", ":", "clusters", "[", "distance", "]", "=", "[", "]", "clusters", "[", "distance", "]", ".", "append", "(", "node", ")", "# Find the closest cluster", "closest_distance", "=", "min", "(", "clusters", ".", "keys", "(", ")", ")", "closest_cluster", "=", "clusters", "[", "closest_distance", "]", "# Select the nearest node in the closest cluster", "next_node", "=", "min", "(", "closest_cluster", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["# {The new algorithm integrates a weighted scoring mechanism that combines distance, connectivity, and heuristic cost to prioritize unvisited nodes for exploration, balancing immediate travel efficiency with potential future benefits.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate scores based on a combination of distance, connectivity, and a heuristic cost towards destination", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "heuristic_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "scores", "[", "node", "]", "=", "distance_score", "+", "connectivity_score", "+", "heuristic_cost", "# Lower score is better", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_unvisited", "=", "total_distance_to_unvisited", "/", "len", "(", "unvisited_nodes", ")", "candidates", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_score", "=", "(", "distance_to_destination", "+", "average_distance_to_unvisited", "-", "distance_to_node", ")", "/", "2", "# Balance scores", "weighted_score", "=", "(", "distance_to_node", "*", "0.4", ")", "+", "(", "heuristic_score", "*", "0.6", ")", "# Adjust weighting", "candidates", ".", "append", "(", "(", "node", ",", "weighted_score", ")", ")", "next_node", "=", "min", "(", "candidates", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "unvisited_nodes", "=", "list", "(", "unvisited_nodes", ")", "def", "find_shortest_path", "(", "nodes", ")", ":", "if", "len", "(", "nodes", ")", "==", "1", ":", "return", "nodes", "[", "0", "]", ",", "0", "# Only one node, no distance to calculate", "mid", "=", "len", "(", "nodes", ")", "//", "2", "left_half", "=", "nodes", "[", ":", "mid", "]", "right_half", "=", "nodes", "[", "mid", ":", "]", "left_node", ",", "left_distance", "=", "find_shortest_path", "(", "left_half", ")", "right_node", ",", "right_distance", "=", "find_shortest_path", "(", "right_half", ")", "# Calculate distance to connect left and right", "distance_to_left", "=", "distance_matrix", "[", "current_node", "]", "[", "left_node", "]", "distance_to_right", "=", "distance_matrix", "[", "current_node", "]", "[", "right_node", "]", "optimal_node", "=", "left_node", "if", "distance_to_left", "<", "distance_to_right", "else", "right_node", "total_distance", "=", "left_distance", "+", "right_distance", "+", "min", "(", "distance_to_left", ",", "distance_to_right", ")", "return", "optimal_node", ",", "total_distance", "next_node", ",", "_", "=", "find_shortest_path", "(", "unvisited_nodes", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "adaptive_threshold", "=", "min", "(", "average_distance", "*", "1.2", ",", "10", ")", "# Dynamic threshold based on average distance", "candidates", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance_to_node", "<", "adaptive_threshold", ":", "candidates", ".", "append", "(", "(", "node", ",", "distance_to_node", ")", ")", "if", "not", "candidates", ":", "# If no candidates within adaptive threshold, select the closest node", "candidates", "=", "[", "(", "node", ",", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "for", "node", "in", "unvisited_nodes", "]", "next_node", "=", "min", "(", "candidates", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "scores", "=", "{", "}", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "future_cost", "=", "total_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "scores", "[", "node", "]", "=", "distance_score", "+", "connectivity_score", "+", "future_cost", "# Lower score is better", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Accumulate the distance from the starting point to the current position", "accumulated_distance", "=", "sum", "(", "distance_matrix", "[", "0", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Select the closest unvisited node with an adjustment based on accumulated distance", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "(", "accumulated_distance", "/", "len", "(", "unvisited_nodes", ")", ")", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "remaining_distance_sum", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "# Penalty based on total remaining distance to unvisited nodes", "penalty", "=", "remaining_distance_sum", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Combined score emphasizing proximity and total remaining travel cost", "score", "=", "distance_to_next", "+", "distance_to_destination", "+", "penalty", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "scores", "=", "{", "}", "decay_factor", "=", "0.5", "# Decay factor for distance influence", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Penalize distance based on a decay factor", "penalized_distance", "=", "distance_to_node", "*", "decay_factor", "# Calculate score with edge weight consideration for returning to destination", "return_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "score", "=", "penalized_distance", "+", "return_cost", "scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Penalty for the most recently visited node", "recent_node_penalty", "=", "1.5", "# Distance to destination provides attraction", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Calculate the potential cost for each unvisited node", "costs", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_from_current", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "recent_node_penalty", "if", "node", "==", "current_node", "else", "1", "# Adjust penalty", "# Combine factors: distance to destination and current distance with penalty", "total_cost", "=", "distance_from_current", "*", "penalty", "-", "(", "distance_to_destination", "/", "2", ")", "costs", "[", "node", "]", "=", "total_cost", "# Select the next node with the minimum calculated cost", "next_node", "=", "min", "(", "costs", ",", "key", "=", "costs", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate average distance to unvisited nodes", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Find the next node based on a scoring mechanism", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "(", "avg_distance", "-", "distance", ")", "if", "(", "avg_distance", "-", "distance", ")", ">", "0", "else", "0", "score", "=", "distance", "-", "penalty", "*", "0.3", "# You may adjust 0.3 as a tuning parameter", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate the average distance to all unvisited nodes", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Define a weight factor to prioritize the average distance", "weight_factor", "=", "0.3", "# Adjust this value to weigh the influence of the average distance", "# Calculate scores for each unvisited node combining distance to current and average distance", "node_scores", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "weight_factor", "*", "average_distance", "for", "node", "in", "unvisited_nodes", "}", "# Select the node with the minimum score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "# Penalty for longer distances", "penalty", "=", "distance_to_next", "**", "2", "# Connectivity score considering the number of direct neighbors", "connectivity_score", "=", "len", "(", "[", "other_node", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "float", "(", "'inf'", ")", "]", ")", "# Combined score with connectivity reward and distance penalty", "score", "=", "penalty", "-", "(", "0.7", "*", "connectivity_score", ")", "+", "distance_to_destination", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_connections", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "connection_penalty", "=", "remaining_connections", "/", "max", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ",", "1", ")", "# Avoid division by zero", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "-", "(", "0.5", "*", "connection_penalty", ")", "# Strike a balance between distance and connections", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connection_count", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "penalty_score", "=", "(", "len", "(", "unvisited_nodes", ")", "-", "connection_count", ")", "*", "10", "# Higher penalty for fewer connections", "scores", "[", "node", "]", "=", "distance_score", "+", "penalty_score", "# Lower score is better", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "degree_of_connection", "=", "{", "node", ":", "len", "(", "[", "neighbour", "for", "neighbour", "in", "unvisited_nodes", "if", "neighbour", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "neighbour", "]", ">", "0", "]", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connection_bonus", "=", "degree_of_connection", "[", "node", "]", "*", "0.1", "# Reward based on connectivity degree", "weighted_score", "=", "distance", "+", "(", "total_remaining_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", ")", "-", "connection_bonus", "+", "distance", "*", "0.01", "# Combine metrics with an additional weight on current distance", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "unvisited_nodes", "=", "list", "(", "unvisited_nodes", ")", "def", "connectivity_score", "(", "node", ")", ":", "# Example connectivity score based on the number of links to other unvisited nodes", "return", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "0", ")", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity", "=", "connectivity_score", "(", "node", ")", "# Assess node's connectivity", "score", "=", "distance", "/", "(", "connectivity", "+", "1", ")", "# Combine distance and connectivity", "scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate the distance to the destination from current node", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Introduce a randomness factor for exploration", "random_factor", "=", "random", ".", "uniform", "(", "0.1", ",", "2.0", ")", "# Calculate a score for each unvisited node", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "scores", "[", "node", "]", "=", "(", "distance_to_node", "*", "random_factor", ")", "+", "(", "distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", ")", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "min_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "candidates", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "(", "min_distance", "/", "(", "distance_to_node", "+", "1", ")", ")", "# Avoid division by zero with +1", "weighted_score", "=", "(", "distance_to_node", "*", "0.5", ")", "+", "(", "proximity_score", "*", "0.5", ")", "candidates", ".", "append", "(", "(", "node", ",", "weighted_score", ")", ")", "next_node", "=", "min", "(", "candidates", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connections_to_unvisited", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "0", ")", "penalty_factor", "=", "1", "/", "(", "1", "+", "connections_to_unvisited", ")", "# Penalize nodes with more unvisited connections", "score", "=", "(", "penalty_factor", "*", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", ")", "-", "distance_to_next", "# Combine factors", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "if", "not", "unvisited_nodes", ":", "return", "None", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Total distance to finish", "average_remaining_distance", "=", "total_remaining_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "# Average distance to remaining nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "locality_factor", "=", "(", "1", "/", "(", "direct_distance", "+", "1e-5", ")", ")", "# Reward for being closer", "weighted_score", "=", "direct_distance", "+", "average_remaining_distance", "-", "locality_factor", "# Combine metrics", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "base_threshold", "=", "10", "# Base maximum distance to consider", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "dynamic_threshold", "=", "base_threshold", "*", "(", "distance_to_destination", "/", "100", ")", "# Dynamic threshold based on distance to destination", "candidates", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance_to_node", "<", "dynamic_threshold", ":", "candidates", ".", "append", "(", "(", "node", ",", "distance_to_node", ")", ")", "if", "not", "candidates", ":", "# If no candidates within dynamic threshold, select the closest node", "candidates", "=", "[", "(", "node", ",", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "for", "node", "in", "unvisited_nodes", "]", "next_node", "=", "min", "(", "candidates", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "scores", "=", "{", "}", "nearest_unvisited_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "weight_distance", "=", "0.5", "weight_connectivity", "=", "0.3", "weight_nearest", "=", "0.2", "for", "node", "in", "unvisited_nodes", ":", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "-", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "/", "10", ")", "nearest_score", "=", "abs", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "-", "nearest_unvisited_distance", ")", "scores", "[", "node", "]", "=", "(", "weight_distance", "*", "distance_score", ")", "+", "(", "weight_connectivity", "*", "connectivity_score", ")", "+", "(", "weight_nearest", "*", "nearest_score", ")", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_weighted_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "len", "(", "unvisited_nodes", ")", "*", "0.1", "# Introduce a penalty based on the number of unvisited nodes", "weighted_distance", "=", "distance", "+", "penalty", "if", "weighted_distance", "<", "min_weighted_distance", ":", "min_weighted_distance", "=", "weighted_distance", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate the normalized distance to destination", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Calculate the attractiveness factor based on remaining unvisited nodes", "attractiveness_factor", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Calculate scores for each unvisited node", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cost_score", "=", "(", "distance_to_node", "/", "(", "distance_to_destination", "+", "1", ")", ")", "*", "attractiveness_factor", "scores", "[", "node", "]", "=", "cost_score", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "# Calculate distances to unvisited nodes and their density", "unvisited_distances", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "density_factor", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "sum", "(", "unvisited_distances", ")", "+", "1e-5", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Dynamic factor based on distance and density of unvisited nodes", "dynamic_factor", "=", "density_factor", "*", "distance", "# Calculate remaining distance to destination", "remaining_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Weighted score combining proximity, dynamic factor, and remaining distance", "weighted_score", "=", "distance", "+", "dynamic_factor", "+", "remaining_distance_to_destination", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<", "min_distance", ":", "min_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate the average distance to unvisited nodes for heuristic", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_value", "=", "(", "distance_to_node", "+", "avg_distance_to_unvisited", ")", "/", "2", "# Balance distance and heuristic", "total_score", "=", "distance_to_node", "+", "heuristic_value", "# Combine actual distance with heuristic", "if", "total_score", "<", "best_score", ":", "best_score", "=", "total_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "min_distance_to_unvisited", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "score", "=", "(", "min_distance_to_unvisited", "*", "1.5", ")", "-", "(", "distance_to_next", ")", "+", "(", "1", "/", "(", "total_distance_to_unvisited", "+", "1", ")", ")", "# Encourages visiting closer nodes", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Define a distance threshold for clustering", "distance_threshold", "=", "1.5", "# Adjust based on the problem scale", "# Create clusters based on proximity", "clusters", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "added_to_cluster", "=", "False", "for", "cluster", "in", "clusters", ":", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<", "distance_threshold", ":", "cluster", ".", "append", "(", "node", ")", "added_to_cluster", "=", "True", "break", "if", "not", "added_to_cluster", ":", "clusters", ".", "append", "(", "[", "node", "]", ")", "# Penalty calculation for distant nodes", "penalties", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "-", "distance_threshold", ")", "**", "2", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ">", "distance_threshold", "else", "0", "for", "node", "in", "unvisited_nodes", "}", "# Select the nearest cluster", "if", "not", "clusters", ":", "return", "None", "nearest_cluster", "=", "min", "(", "clusters", ",", "key", "=", "lambda", "cluster", ":", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "penalties", "[", "node", "]", "for", "node", "in", "cluster", ")", ")", "# Select the node from the nearest cluster with the least penalized distance", "next_node", "=", "min", "(", "nearest_cluster", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "penalties", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "def", "distance_weight", "(", "node", ")", ":", "# Weight based on distance to current node", "return", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "def", "decay_factor", "(", ")", ":", "# Decay factor based on the number of unvisited nodes", "return", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "scores", "=", "{", "}", "decay", "=", "decay_factor", "(", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_weight", "(", "node", ")", "score", "=", "distance", "*", "decay", "# Combine distance with decay factor", "scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate the base direct distance for each unvisited node", "direct_distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Calculate attractiveness based on the number of direct connections to other unvisited nodes", "attractiveness", "=", "{", "node", ":", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "neighbor", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", ">", "0", ")", "for", "node", "in", "unvisited_nodes", "}", "# Combine direct distance and attractiveness in a scoring function", "node_scores", "=", "{", "node", ":", "direct_distances", "[", "node", "]", "/", "(", "1", "+", "attractiveness", "[", "node", "]", ")", "# More connections decrease the score", "for", "node", "in", "unvisited_nodes", "}", "# Select the node with the minimum score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "connectivity_score", "=", "len", "(", "[", "node", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<", "10", "]", ")", "# penalty for being disconnected", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "exploration_factor", "=", "(", "total_distance_to_unvisited", "-", "distance", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "# Balance exploration", "connectivity_penalty", "=", "1", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ">=", "10", "else", "0", "# Penalize nodes too far", "weighted_score", "=", "distance", "+", "exploration_factor", "+", "connectivity_penalty", "# Combine metrics", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "unvisited_nodes", "=", "list", "(", "unvisited_nodes", ")", "def", "decay_factor", "(", ")", ":", "return", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "distance", "/", "decay_factor", "(", ")", "# Combine distance and decay factor", "scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {The algorithm uses a scoring mechanism that combines distance and the number of unvisited nodes remaining to select the next node.}", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_nodes", "=", "len", "(", "unvisited_nodes", ")", "-", "1", "# Exclude the next node itself", "score", "=", "distance", "+", "(", "remaining_nodes", "*", "0.1", ")", "# Adding a penalty for unvisited nodes", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Select the closest unvisited node", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate cumulative distance traveled so far", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Introduce a dynamic exploration factor based on cumulative distance", "exploration_factor", "=", "random", ".", "uniform", "(", "0.5", ",", "2.0", ")", "# Select the next node with a bias towards nodes that are farther away, applying the exploration factor", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "exploration_factor", ")", "-", "(", "cumulative_distance", "/", "len", "(", "unvisited_nodes", ")", ")", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate the distance to the destination from the current node", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Introduce a randomness factor for exploration", "randomness_factor", "=", "0.5", "random_factor", "=", "random", ".", "uniform", "(", "0", ",", "randomness_factor", ")", "# Calculate scores for each unvisited node", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "+", "1", ")", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "scores", "[", "node", "]", "=", "(", "distance_to_node", "*", "(", "1", "+", "random_factor", ")", ")", "+", "(", "1", "/", "(", "connectivity_score", "+", "1", ")", ")", "+", "distance_to_destination", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.964688949799511}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "max_distance_to_unvisited", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "# Combined score: favor nearer unvisited nodes while considering maximum distance to retain option viability", "score", "=", "(", "1", "/", "distance_to_next", ")", "-", "(", "max_distance_to_unvisited", "*", "0.1", ")", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.967231738091473}
{"code_tokens": ["import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_combined_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Cohesion score: variance of distances to all other unvisited nodes", "cohesion_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Penalty for longer paths (10% of longest distance found)", "penalty", "=", "0.1", "*", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "# Combined score: balance between cohesion, distance, and penalty", "combined_score", "=", "cohesion_score", "-", "(", "distance_to_next", "*", "0.6", "+", "distance_to_destination", "*", "0.4", "+", "penalty", ")", "if", "combined_score", ">", "max_combined_score", ":", "max_combined_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.974625230625187}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_from_next_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "penalty", "=", "distance_to_next", "*", "0.5", "# Penalty for longer distances to the next node", "score", "=", "(", "total_distance_from_next_to_unvisited", "/", "len", "(", "unvisited_nodes", ")", ")", "-", "penalty", "# Reward for minimizing distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.98930167680099}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# This algorithm uses a scoring mechanism that incorporates both proximity to the next node and the diversity of the remaining unvisited nodes, promoting visits to nodes with varying distances to balance the path.", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "avg_distance_to_unvisited", "=", "total_distance_to_unvisited", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "min_distance_to_unvisited", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "float", "(", "'inf'", ")", "score", "=", "(", "(", "avg_distance_to_unvisited", "-", "distance_to_next", ")", "+", "(", "avg_distance_to_unvisited", "-", "min_distance_to_unvisited", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.98930167680099}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate average distance to unvisited nodes", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Calculate connectivity score based on how many nodes are reachable from unvisited nodes", "connectivity_scores", "=", "{", "node", ":", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "average_distance", "*", "1.5", "]", ")", "for", "node", "in", "unvisited_nodes", "}", "# Calculate scores based on distance and connectivity", "scores", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "/", "average_distance", ")", "+", "(", "1", "/", "(", "connectivity_scores", "[", "node", "]", "+", "1", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.008663294218255}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "score", "=", "(", "1", "/", "distance_to_next", ")", "+", "(", "1", "/", "(", "total_remaining_distance", "+", "1e-6", ")", ")", "# Encourage both proximity and considering remaining distances", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.013536654583164}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate average distance to unvisited nodes", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Calculate scores for nodes", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Penalty for longer distances", "distance_penalty", "=", "(", "distance", "/", "avg_distance", ")", "if", "avg_distance", ">", "0", "else", "1", "# Safety factor based on connection density", "connectivity_factor", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "connectivity_factor", ">", "2", "*", "avg_distance", ":", "# Arbitrary threshold to avoid highly connected but distant nodes", "connectivity_factor", "=", "1", "/", "(", "connectivity_factor", "+", "1", ")", "else", ":", "connectivity_factor", "=", "1", "# Score combining factors and adding some randomness", "scores", "[", "node", "]", "=", "distance_penalty", "*", "connectivity_factor", "*", "random", ".", "uniform", "(", "0.9", ",", "1.1", ")", "# Select node with the best score (lowest)", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.02197469922589}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "visited_nodes", "=", "[", "n", "for", "n", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "n", "not", "in", "unvisited_nodes", "]", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate a score that balances the distance to the current node and the average distance to visited nodes", "average_distance_to_visited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "v", "]", "for", "v", "in", "visited_nodes", ")", "/", "(", "len", "(", "visited_nodes", ")", "+", "1", ")", "if", "visited_nodes", "else", "1", "# Score based on distance to node and distance to destination, adjusted by distance to visited nodes", "score", "=", "(", "distance_to_node", "+", "average_distance_to_visited", ")", "/", "(", "distance_to_destination", "+", "1", ")", "# Avoid division by zero", "# Select the node with the minimum score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.025211235266251}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "penalty", "=", "0.1", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "total_distance_traveled", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "inverse_distance_to_next", "=", "1", "/", "distance_to_next", "if", "distance_to_next", ">", "0", "else", "0", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "inverse_distance_to_next", "-", "penalty", ")", "-", "(", "0.4", "*", "distance_to_destination", ")", "-", "(", "0.2", "*", "(", "total_distance_traveled", "/", "len", "(", "distance_matrix", ")", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.025377757336667}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm integrates not only the distance but also a potential future benefit based on the closest unvisited node and overall travel efficiency, thus optimizing selection for greater long-term benefits.}", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_benefit", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "+", "(", "future_benefit", "/", "(", "distance_to_next", "+", "1", ")", ")", "# Encourage routes that are close but also consider future efficiency", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.03621234394371}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate average distance to the destination", "avg_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Compute cluster density scores", "cluster_density_scores", "=", "{", "node", ":", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "2", ")", "for", "node", "in", "unvisited_nodes", "}", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_density_penalty", "=", "1", "/", "(", "cluster_density_scores", "[", "node", "]", "+", "1", ")", "# Higher density, lower score", "score", "=", "(", "distance", "*", "0.6", "+", "avg_distance_to_destination", "*", "0.4", ")", "*", "cluster_density_penalty", "*", "random", ".", "uniform", "(", "0.95", ",", "1.05", ")", "# Adding randomness", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.0420421041191625}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "average_distance_to_unvisited", "=", "total_distance_to_unvisited", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "penalty_factor", "=", "distance_to_next", "**", "2", "# Square penalty to emphasize distance", "score", "=", "(", "(", "1", "/", "(", "average_distance_to_unvisited", "+", "1", ")", ")", "*", "(", "1", "/", "penalty_factor", ")", "-", "distance_to_next", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.04871395129536}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "unvisited_nodes", "=", "list", "(", "unvisited_nodes", ")", "def", "proximity_score", "(", "node", ")", ":", "# Score based on closeness to unvisited nodes", "return", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "+", "1", ")", "for", "n", "in", "unvisited_nodes", ")", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "risk_factor", "=", "distance", "# Accumulated risk based on distance", "score", "=", "distance", "*", "(", "1", "-", "proximity_score", "(", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "+", "risk_factor", "# Hybrid score", "scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.051727457267798}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {The new algorithm integrates a scoring mechanism based on complementary distance measures, ", "# adapted node attractiveness based on its centrality in the unvisited nodes, and a strategic weight ", "# adjustment depending on the remaining unvisited nodes.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "# Constants for weighting", "alpha", "=", "0.4", "# Weight for distance score", "beta", "=", "0.4", "# Weight for cohesion score", "gamma", "=", "0.2", "# Weight for distance penalty", "# Total number of unvisited nodes", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Cohesion score: average distance to remaining unvisited nodes", "cohesion_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "/", "(", "num_unvisited", "-", "1", ")", "if", "num_unvisited", ">", "1", "else", "0", "# Strategic attractiveness: inversely related to the distance to the destination", "attractiveness_score", "=", "1", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "# Combined score with adjusted weights", "combined_score", "=", "(", "cohesion_score", "*", "beta", "+", "attractiveness_score", "-", "distance_to_next", "*", "alpha", "-", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "gamma", ")", "if", "combined_score", ">", "max_score", ":", "max_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.054635665604507}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "avg_future_distance", "=", "sum", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "local_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_distance_penalty", "=", "avg_future_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Average distance to future nodes", "score", "=", "(", "local_distance", "*", "0.7", "+", "future_distance_penalty", "*", "0.3", ")", "*", "random", ".", "uniform", "(", "0.95", ",", "1.05", ")", "# Weighted score with randomness", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.0626260041728335}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_priority", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "min_distance_to_unvisited", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "priority_score", "=", "(", "distance_to_destination", "-", "distance_to_next", ")", "+", "min_distance_to_unvisited", "if", "priority_score", ">", "max_priority", ":", "max_priority", "=", "priority_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.064842752012117}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "visit_frequency", "=", "{", "node", ":", "1", "for", "node", "in", "unvisited_nodes", "}", "# Simplified frequency for all", "novelty_scores", "=", "{", "node", ":", "len", "(", "[", "other", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "float", "(", "'inf'", ")", "]", ")", "for", "node", "in", "unvisited_nodes", "}", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "frequency_penalty", "=", "visit_frequency", "[", "node", "]", "# Lower score for less frequently visited nodes", "novelty_factor", "=", "novelty_scores", "[", "node", "]", "if", "novelty_scores", "[", "node", "]", ">", "0", "else", "1", "# Prevent division by zero", "score", "=", "(", "distance", "/", "frequency_penalty", ")", "*", "random", ".", "uniform", "(", "0.9", ",", "1.1", ")", "+", "(", "1", "/", "novelty_factor", ")", "# Adding novelty", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.078384045962239}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm prioritizes unvisited nodes based on a combination of distance, heuristic cost to destination, and a bonus for visited proximity to underline future connectivity.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_cost_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Add a small distance penalty for each visit to discourage immediate circling for next closest nodes", "visit_penalty", "=", "1", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", "-", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "n", "]", "[", "node", "]", "<", "float", "(", "'inf'", ")", "]", ")", ")", "score", "=", "heuristic_cost_to_destination", "-", "distance_to_next", "-", "visit_penalty", "# Balanced score with visit penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.078385722187273}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "distance_to_destination", ">", "0", ":", "# Avoid division by zero", "# Calculate a heuristic score that combines distances and unvisited penalty", "score", "=", "(", "distance_to_node", "+", "(", "distance_to_destination", "/", "(", "num_unvisited", "+", "1", ")", ")", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.081438908556759}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "max_distance_to_unvisited", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "float", "(", "'inf'", ")", "urgency_factor", "=", "1", "/", "(", "distance_to_next", "+", "1", ")", "# Encourage selection of closer nodes", "distance_penalty", "=", "max_distance_to_unvisited", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Penalize based on max distance", "score", "=", "urgency_factor", "-", "distance_penalty", "# Balance between urgency and penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.083786565678209}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", "+", "(", "total_distance_to_unvisited", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", ")", ")", "-", "(", "0.5", "*", "distance_to_destination", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.093500943435799}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# This algorithm selects the next node to visit by incorporating a score based on the total distance to remaining unvisited nodes ", "# and the distance to the destination, emphasizing both short paths and strategic choices.", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "total_distance_to_unvisited", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", ")", "+", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "-", "(", "distance_to_destination", "/", "2", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.093500943435799}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "num_nodes", "=", "len", "(", "unvisited_nodes", ")", "avg_proximity", "=", "total_distance", "/", "num_nodes", "if", "num_nodes", ">", "0", "else", "float", "(", "'inf'", ")", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "visit_count", "=", "{", "node", ":", "1", "for", "node", "in", "unvisited_nodes", "}", "# Initialize visit counts", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "visit_penalty", "=", "1", "/", "(", "visit_count", "[", "node", "]", "**", "0.5", ")", "# Penalty increases with visits", "score", "=", "(", "distance", "+", "(", "avg_proximity", "*", "0.3", ")", ")", "*", "visit_penalty", "*", "random", ".", "uniform", "(", "0.95", ",", "1.05", ")", "# Random adjustment", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "# Update visit count for the selected node", "visit_count", "[", "next_node", "]", "+=", "1", "if", "next_node", "else", "0", "return", "next_node"], "code_perf": 7.09863514426538}
{"code_tokens": ["# {This algorithm calculates a weighted score based on the shortest distance to each unvisited node, ", "# the penalty for visiting nodes that are less connected to the unvisited cluster, ", "# and a heuristic that favors nodes closer to the destination by a weighted average of distances.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate score: shorter distance to the next node, lower connectivity penalty, and proximity to destination", "score", "=", "(", "1", "/", "distance_to_next", ")", "-", "(", "0.3", "*", "connectivity_score", ")", "-", "(", "0.7", "*", "distance_to_destination", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.0997650077243195}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate connection strength based on the number of direct connections to unvisited nodes", "connection_strength", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "float", "(", "'inf'", ")", ")", "# Combined score: balance connection strength and travel distances", "combined_score", "=", "connection_strength", "/", "(", "distance_to_next", "+", "1", ")", "-", "(", "0.5", "*", "distance_to_destination", ")", "if", "combined_score", ">", "best_score", ":", "best_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.100253941829304}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "# Calculate the number of unvisited nodes", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "# Calculate total distance to unvisited nodes", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Normalize distance to node", "normalized_distance", "=", "distance_to_node", "/", "(", "total_distance_to_unvisited", "+", "1e-5", ")", "# Urgency factor: how close the node is to the destination against remaining nodes", "urgency_factor", "=", "(", "1", "/", "num_unvisited", ")", "*", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "(", "total_distance_to_unvisited", "+", "1e-5", ")", ")", "# Combine metrics to compute a weighted score", "weighted_score", "=", "normalized_distance", "+", "urgency_factor", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.101442436613793}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "closest_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "closest_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "closest_node", "]", "penalties", "=", "{", "node", ":", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1", ")", "for", "node", "in", "unvisited_nodes", "}", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "penalties", "[", "node", "]", "randomness", "=", "random", ".", "uniform", "(", "0.9", ",", "1.1", ")", "*", "(", "closest_distance", "/", "(", "distance", "+", "1", ")", ")", "score", "=", "(", "distance", "*", "penalty", ")", "*", "randomness", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.1219165381444975}
{"code_tokens": ["import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_combined_score", "=", "float", "(", "'-inf'", ")", "# Calculate the average distance to unvisited nodes for variance score", "distances", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "avg_distance", "=", "sum", "(", "distances", ")", "/", "len", "(", "distances", ")", "if", "distances", "else", "0", "variance_score", "=", "sum", "(", "(", "d", "-", "avg_distance", ")", "**", "2", "for", "d", "in", "distances", ")", "/", "len", "(", "distances", ")", "if", "distances", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Novelty score: incentivizes visiting nodes that are closer than average", "novelty_score", "=", "avg_distance", "-", "distance_to_next", "# Combined score considers the distance, destination proximity, and novelty", "combined_score", "=", "novelty_score", "*", "0.5", "-", "(", "distance_to_next", "*", "0.4", "+", "distance_to_destination", "*", "0.1", ")", "-", "variance_score", "*", "0.05", "if", "combined_score", ">", "max_combined_score", ":", "max_combined_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.130635425960672}
{"code_tokens": ["# {This algorithm introduces a dynamic scoring mechanism that adjusts based on the proximity of unvisited nodes as well as a cost-benefit analysis of average travel distance reduction when choosing the next node.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "# Weighting Constants", "weight_distance", "=", "0.5", "# Weight for distance score", "weight_average_cost", "=", "0.3", "# Weight for average travel cost", "weight_return_penalty", "=", "0.2", "# Weight for return penalty", "# Calculate average distance remaining to unvisited nodes", "total_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance_remaining", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "return_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate cost efficiency based on the difference from average travel distance", "cost_efficiency", "=", "(", "average_distance", "-", "distance_to_next", ")", "/", "(", "average_distance", "+", "1e-5", ")", "# Avoid division by zero", "# Combined score considering return penalty and cost efficiency", "combined_score", "=", "(", "cost_efficiency", "*", "weight_average_cost", "-", "return_distance", "*", "weight_return_penalty", "-", "distance_to_next", "*", "weight_distance", ")", "if", "combined_score", ">", "best_score", ":", "best_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.138095693684128}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "attractiveness_scores", "=", "{", "node", ":", "1", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "for", "node", "in", "unvisited_nodes", "}", "threshold", "=", "10", "# Maximum distance to consider for next node", "candidates", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance_to_node", "<", "threshold", ":", "candidates", ".", "append", "(", "(", "node", ",", "distance_to_node", ",", "attractiveness_scores", "[", "node", "]", ")", ")", "if", "not", "candidates", ":", "# If no candidates within threshold, select the closest node augmented by attractiveness", "candidates", "=", "[", "(", "node", ",", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ",", "attractiveness_scores", "[", "node", "]", ")", "for", "node", "in", "unvisited_nodes", "]", "# Calculate priority based on distance and attractiveness", "next_node", "=", "min", "(", "candidates", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", "/", "x", "[", "2", "]", ")", "[", "0", "]", "# min distance divided by attractiveness", "return", "next_node"], "code_perf": 7.146115673616158}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "# Lower distance should yield a higher score (we use the inverse)", "# The penalty discourages moving away from the destination", "scores", "[", "node", "]", "=", "(", "1", "/", "(", "distance_to_node", "+", "1e-6", ")", ")", "+", "connectivity_score", "-", "(", "1", "/", "(", "distance_to_destination", "+", "1e-6", ")", ")", "next_node", "=", "max", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 7.15844878700375}
{"code_tokens": ["import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "# Calculate the average position of unvisited nodes", "average_position", "=", "[", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "_", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "]", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate the number of edges (connections) to the remaining unvisited nodes", "edge_count", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "float", "(", "'inf'", ")", ")", "# Novel scoring mechanism: leverage average position heuristic and edge count", "score", "=", "(", "average_position", "[", "node", "]", "/", "(", "distance_to_next", "+", "1", ")", ")", "*", "edge_count", "-", "(", "distance_to_destination", "*", "0.5", "+", "distance_to_next", "*", "0.5", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.158924458202568}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "# Calculate distances to all unvisited nodes", "distances", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "# Determine the maximum distance to unvisited nodes", "max_distance_to_unvisited", "=", "max", "(", "distances", ")", "if", "distances", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Distance scaling based on the furthest unvisited node", "distance_scaling", "=", "distance", "/", "(", "max_distance_to_unvisited", "+", "1e-5", ")", "# Future cost estimation: heuristic based on average distance to remaining nodes", "future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "adj", "]", "for", "adj", "in", "unvisited_nodes", "if", "adj", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "# Combine metrics to compute an adaptive score", "score", "=", "distance", "+", "distance_scaling", "*", "future_cost", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.160947025264944}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "# Total distance to unvisited nodes", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "# Calculate immediate distance", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Heuristic based on distance to destination", "heuristic_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "(", "total_remaining_distance", "+", "1", ")", "# Combine the immediate distance with heuristic score to compute a weighted score", "weighted_score", "=", "distance", "+", "heuristic_score", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.181021775003858}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "centrality_scores", "=", "{", "node", ":", "len", "(", "unvisited_nodes", ")", "-", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", ">", "0", ")", "for", "node", "in", "unvisited_nodes", "}", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "centrality_penalty", "=", "1", "/", "(", "centrality_scores", "[", "node", "]", "+", "1", ")", "# Encourage less connected nodes", "score", "=", "(", "distance", "*", "0.7", "+", "(", "centrality_penalty", "*", "0.3", ")", ")", "*", "random", ".", "uniform", "(", "0.9", ",", "1.1", ")", "# Balancing distance and centrality with randomness", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.183309240680478}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "weighted_average_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1e-6", ")", ")", "+", "0.5", "*", "(", "1", "/", "(", "weighted_average_distance", "+", "1e-6", ")", ")", "# Inverse distance weighted score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.209735944458233}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1e-5", ")", ")", "+", "(", "random", ".", "random", "(", ")", "*", "(", "average_distance_to_unvisited", "/", "(", "distance_to_next", "+", "1e-5", ")", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.220590506328902}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_combined_score", "=", "float", "(", "'inf'", ")", "# Calculate constants for weighting", "alpha", "=", "0.5", "# Weight for distance score", "beta", "=", "0.3", "# Weight for time penalty", "gamma", "=", "0.2", "# Weight for proximity to destination", "# Total number of unvisited nodes", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Time penalty based on the sequential distance to destination node", "time_penalty", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "(", "1", "+", "num_unvisited", ")", "# Penalizes nodes further from the destination", "# Proximity score: inverse of distance to destination", "proximity_score", "=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", "# Avoid division by zero", "# Combined score: balance between distance, time penalty, and proximity to destination", "combined_score", "=", "(", "distance_to_next", "*", "alpha", ")", "+", "(", "time_penalty", "*", "beta", ")", "-", "(", "proximity_score", "*", "gamma", ")", "if", "combined_score", "<", "min_combined_score", ":", "min_combined_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.229970541531419}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm introduces a novelty by integrating a dynamic scoring mechanism based on proximity variance and a reward for visiting nodes that maintain or reduce the overall tour length.}", "next_node", "=", "None", "max_combined_score", "=", "float", "(", "'-inf'", ")", "# Constants for weighting", "alpha", "=", "0.4", "# Weight for distance score", "beta", "=", "0.4", "# Weight for cohesion score", "gamma", "=", "0.2", "# Weight for distance penalty", "delta", "=", "0.1", "# Weight for variance reward", "# Total number of unvisited nodes", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "if", "num_unvisited", ">", "1", ":", "avg_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "num_unvisited", "else", ":", "avg_distance_remaining", "=", "0", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Variance score: how much the next node's distance deviates from the average", "variance_score", "=", "abs", "(", "distance_to_next", "-", "avg_distance_remaining", ")", "# Penalty score: additional distance incurred to go to destination after current", "distance_penalty", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Reward score: incentivize lower distances by rewarding the inverse of distance variance", "variance_reward", "=", "(", "1", "/", "(", "variance_score", "+", "1", ")", ")", "*", "delta", "if", "variance_score", "!=", "0", "else", "delta", "# Combined score incorporating variance reward", "combined_score", "=", "(", "beta", "*", "(", "avg_distance_remaining", "-", "distance_to_next", ")", "+", "variance_reward", "-", "distance_penalty", "*", "gamma", "-", "distance_to_next", "*", "alpha", ")", "if", "combined_score", ">", "max_combined_score", ":", "max_combined_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.234173955045242}
{"code_tokens": ["# {The new algorithm adopts a multi-faceted scoring system that integrates the distance score, node connectivity, and an exploration factor that encourages visiting less densely connected nodes to foster exploration.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_combined_score", "=", "float", "(", "'-inf'", ")", "# Define constants for weighting", "alpha", "=", "0.5", "# Weight for distance score", "beta", "=", "0.3", "# Weight for cohesion score", "gamma", "=", "0.2", "# Weight for exploration factor", "# Total number of unvisited nodes", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Cohesion score: inverse average distance to all other unvisited nodes", "cohesion_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "/", "(", "num_unvisited", "-", "1", ")", "if", "num_unvisited", ">", "1", "else", "0", "inverse_cohesion_score", "=", "1", "/", "(", "cohesion_score", "+", "1", ")", "# Inverse to prioritize less connected nodes", "# Exploration factor: assesses how unique the node is based on its connectivity", "exploration_score", "=", "gamma", "*", "(", "1", "/", "(", "(", "len", "(", "[", "other_node", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "(", "distance_to_next", "+", "5", ")", "]", ")", "+", "1", ")", ")", ")", "# Combined score: distance, cohesion, and exploration balance", "combined_score", "=", "(", "inverse_cohesion_score", "*", "beta", "+", "(", "distance_to_next", "*", "-", "1", ")", "*", "alpha", "+", "exploration_score", ")", "if", "combined_score", ">", "max_combined_score", ":", "max_combined_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.241344958429526}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Connectivity score based on how many unvisited nodes are neighbors of the current node", "connectivity_score", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "float", "(", "'inf'", ")", ")", "# Adjusted score that weighs connectivity against distance", "score", "=", "(", "connectivity_score", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "-", "(", "distance_to_next", "+", "0.3", "*", "distance_to_destination", ")", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.244455041163539}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "total_distance_from_unvisited_to_destination", "=", "sum", "(", "distance_matrix", "[", "n", "]", "[", "destination_node", "]", "for", "n", "in", "unvisited_nodes", ")", "score", "=", "(", "(", "1", "/", "(", "1", "+", "average_distance_to_unvisited", ")", ")", "*", "0.7", ")", "-", "distance_to_next", "+", "(", "0.3", "*", "total_distance_from_unvisited_to_destination", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.256967153914501}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "# Calculate the average distance from unvisited nodes to destination", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "n", "]", "[", "destination_node", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate a score with a new approach to balance the distance to current, destination, and average", "score", "=", "(", "1", "/", "(", "1", "+", "distance_to_next", ")", ")", "+", "(", "0.2", "*", "(", "avg_distance_to_destination", "-", "distance_to_destination", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.2725766365688616}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm evaluates the next node based on a combination of distance, ", "# the average distance to unvisited nodes, and a boost for nodes closest to the destination.}", "next_node", "=", "None", "max_eval", "=", "float", "(", "'-inf'", ")", "# Calculate the average distance to unvisited nodes", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Distance to the destination", "# Evaluation score considering distance to the next node, average distance, and proximity to destination", "eval_score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "+", "(", "1", "/", "(", "distance_to_destination", "+", "1", ")", "*", "0.5", ")", "-", "(", "avg_distance_to_unvisited", "/", "(", "avg_distance_to_unvisited", "+", "1", ")", ")", "if", "eval_score", ">", "max_eval", ":", "max_eval", "=", "eval_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.281798253848895}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm introduces a trade-off between distance minimization and maximizing connectivity, using a scoring mechanism based on inverse distance, an aggression factor for nearest nodes, and a penalty for isolation.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "num_connections", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "10", ")", "# Assuming a threshold for connectivity", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Weighting factors", "weight_distance", "=", "0.4", "weight_connections", "=", "0.4", "weight_destination", "=", "0.2", "# Composite score calculation", "score", "=", "(", "weight_distance", "/", "(", "distance_to_next", "+", "1", ")", ")", "+", "(", "weight_connections", "*", "num_connections", ")", "-", "(", "weight_destination", "*", "distance_to_destination", "/", "(", "distance_to_destination", "+", "1", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.281798253848895}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ",", "threshold", "=", "1.0", ")", ":", "clusters", "=", "[", "]", "visited_clusters", "=", "set", "(", ")", "# Step 1: Cluster unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "if", "not", "visited_clusters", ":", "clusters", ".", "append", "(", "[", "node", "]", ")", "visited_clusters", ".", "add", "(", "tuple", "(", "clusters", "[", "-", "1", "]", ")", ")", "else", ":", "added_to_cluster", "=", "False", "for", "cluster", "in", "clusters", ":", "if", "all", "(", "distance_matrix", "[", "node", "]", "[", "cluster_node", "]", "<=", "threshold", "for", "cluster_node", "in", "cluster", ")", ":", "cluster", ".", "append", "(", "node", ")", "added_to_cluster", "=", "True", "visited_clusters", ".", "add", "(", "tuple", "(", "cluster", ")", ")", "break", "if", "not", "added_to_cluster", ":", "clusters", ".", "append", "(", "[", "node", "]", ")", "visited_clusters", ".", "add", "(", "tuple", "(", "clusters", "[", "-", "1", "]", ")", ")", "# Step 2: Select the nearest node from the nearest cluster", "nearest_cluster", "=", "None", "min_distance_to_cluster", "=", "float", "(", "'inf'", ")", "for", "cluster", "in", "clusters", ":", "avg_distance_to_cluster", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "cluster", ")", "/", "len", "(", "cluster", ")", "if", "avg_distance_to_cluster", "<", "min_distance_to_cluster", ":", "min_distance_to_cluster", "=", "avg_distance_to_cluster", "nearest_cluster", "=", "cluster", "# Step 3: Return the closest node from the nearest cluster", "next_node", "=", "min", "(", "nearest_cluster", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "return", "next_node"], "code_perf": 7.302170783702197}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm employs a hybrid scoring system that combines nearest neighbor distance with a penalty for detours caused by unvisited nodes.}", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "penalty", "=", "len", "(", "unvisited_nodes", ")", "*", "0.1", "*", "distance_to_next", "# Introducing a penalty for longer distances", "score", "=", "distance_to_next", "+", "(", "total_remaining_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "+", "penalty", "# Consider distance to next and penalty", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.31823627587317}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "decay_factor", "=", "0.1", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Introducing a logarithmic factor to the average distance to unvisited nodes", "log_average_distance", "=", "decay_factor", "*", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", ")", "score", "=", "log_average_distance", "-", "distance_to_next", "-", "(", "0.5", "*", "distance_to_destination", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.327272772488095}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Weighted score: prioritizing lower distances to the next node and the destination", "score", "=", "(", "average_distance_to_unvisited", "-", "distance_to_next", ")", "-", "distance_to_destination", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.328751305099974}
{"code_tokens": ["# {This algorithm introduces a weighted factor based on the degree of connectivity of unvisited nodes, allowing better selection of the next node by considering local distance, connectivity, and proximity to the destination.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "connectivity_score", "-", "distance_to_next", "-", "distance_to_destination", ")", "# Balance between connectivity and distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.328751305099974}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "# Constants for weighting", "alpha", "=", "0.5", "# Influence of direct travel distance", "beta", "=", "0.3", "# Influence of cluster connectivity", "gamma", "=", "0.2", "# Penalty for distance to destination", "# Total distances and connectability", "total_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "connectivity_scores", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "connectivity_scores", "[", "node", "]", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "5", ")", "# arbitrary threshold for local connectivity", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Local connectability score weighted by current node distance", "local_connectivity_score", "=", "connectivity_scores", "[", "node", "]", "/", "total_distance_remaining", "# Combined score", "combined_score", "=", "(", "local_connectivity_score", "*", "beta", "-", "distance_to_next", "*", "alpha", "-", "distance_to_destination", "*", "gamma", ")", "if", "combined_score", ">", "best_score", ":", "best_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.331995111188165}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "total_distance_traversed", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "decay_factor", "=", "0.1", "# Adjust this value to influence the importance of already traversed distance", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "average_distance_to_unvisited", "*", "(", "1", "-", "decay_factor", "*", "total_distance_traversed", ")", ")", "-", "distance_to_next", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.371018871171994}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "unvisited_nodes", "=", "list", "(", "unvisited_nodes", ")", "def", "reward", "(", "node", ")", ":", "# Reward for being closer to the destination", "return", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", "def", "penalty", "(", "node", ")", ":", "# Penalty for the distance from the current node", "return", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "score", "=", "reward", "(", "node", ")", "-", "penalty", "(", "node", ")", "# Combine reward and penalty", "scores", "[", "node", "]", "=", "score", "next_node", "=", "max", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.373133925713997}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Introduce a factor that increases the score based on proximity to the destination", "proximity_score", "=", "1", "/", "(", "distance_to_destination", "+", "1", ")", "# Closer nodes to the destination earn higher scores", "# Use a penalty for longer distances to the next node", "distance_penalty", "=", "-", "1", "*", "distance_to_next", "# Calculate the total score combining proximity and penalty", "score", "=", "proximity_score", "+", "distance_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.373133925713997}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm evaluates nodes by balancing the shortest direct distance to the next node and the average distance to the destination node among unvisited nodes, thus providing both immediate proximity and a future strategic goal.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "average_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "n", "]", "[", "destination_node", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "score", "=", "(", "average_distance_to_destination", "-", "direct_distance", ")", "+", "(", "1", "/", "(", "1", "+", "distance_to_destination", ")", ")", "# Incorporating both direct distance and future potential", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.373133925713997}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_unvisited_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "avg_unvisited_distance", "=", "total_unvisited_distance", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "*", "(", "total_unvisited_distance", "+", "avg_unvisited_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.391431511815483}
{"code_tokens": ["# {This algorithm utilizes a multi-factor scoring system that balances distance, potential future distances to other nodes, and a weighted importance score based on the degree of connectivity, thereby prioritizing nodes that not only connect well but also minimize potential future travel.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_distance_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "10", ")", "# Example threshold", "# Modified scoring equation with additional weight for future distance", "score", "=", "(", "future_distance_score", "/", "(", "distance_to_next", "+", "1", ")", ")", "+", "(", "connectivity_score", "*", "1.5", ")", "# Weighted for more influence", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.391431511815483}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "connectivity_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "+", "1", ")", "for", "n", "in", "unvisited_nodes", ")", "# Encourages selection of less connected nodes", "score", "=", "(", "connectivity_score", "/", "unvisited_count", ")", "-", "distance_to_next", "# Combine connectivity and distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.417064959405391}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "# Calculate the direct distance to the node", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate the centrality based on the number of direct connections to unvisited nodes", "centrality", "=", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", ">", "0", ")", "# Estimate the distance to return to the destination node weighted by centrality", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "adjusted_score", "=", "(", "distance_to_node", "*", "(", "1", "+", "centrality", "/", "len", "(", "unvisited_nodes", ")", ")", ")", "+", "distance_to_destination", "if", "adjusted_score", "<", "lowest_score", ":", "lowest_score", "=", "adjusted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.449597346505821}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "from", "collections", "import", "defaultdict", "import", "numpy", "as", "np", "# {The algorithm clusters unvisited nodes based on a dynamically adjusted threshold and uses a weighted scoring mechanism to prioritize nodes closer to the destination.}", "# Define a dynamic threshold distance based on the minimum distance to the destination node", "threshold_distance", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "*", "0.8", "+", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "*", "0.2", "# Create clusters of unvisited nodes", "clusters", "=", "defaultdict", "(", "list", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "<", "threshold_distance", ":", "clusters", "[", "current_node", "]", ".", "append", "(", "node", ")", "else", ":", "clusters", "[", "tuple", "(", "min", "(", "[", "(", "current_node", ",", "node", ")", ",", "(", "node", ",", "current_node", ")", "]", ",", "key", "=", "lambda", "x", ":", "distance_matrix", "[", "x", "[", "0", "]", "]", "[", "x", "[", "1", "]", "]", ")", ")", "]", ".", "append", "(", "node", ")", "# Find the nearest cluster", "nearest_cluster", "=", "min", "(", "clusters", ".", "keys", "(", ")", ",", "key", "=", "lambda", "cluster", ":", "np", ".", "mean", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "clusters", "[", "cluster", "]", "]", ")", ")", "# Use a weighted scoring system to prioritize nodes not only by distance but also by closeness to the destination", "node_scores", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "0.5", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "clusters", "[", "nearest_cluster", "]", "}", "# Select the node with the minimum score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.4547222121864705}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Define a penalty factor based on the distance to the destination node", "penalty_factor", "=", "0.5", "# Adjust this value to weigh the influence of the penalty", "# Calculate scores for each unvisited node combining distance to current and penalty", "node_scores", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "penalty_factor", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Select the node with the minimum score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate scores based on distance to the node and the distance to the destination", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "scores", "[", "node", "]", "=", "distance_to_node", "+", "0.5", "*", "distance_to_destination", "# Weighting the distance to the destination", "# Select the node with the lowest score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["# {The new algorithm incorporates a weighted heuristic that not only accounts for distance and connectivity but also incorporates penalties based on the distance to the destination node, prioritizing nodes that lead more directly towards the destination.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate scores for each unvisited node based on distance, connectivity, and penalty towards destination", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "destination_penalty", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "0.5", "# Weight towards the destination", "scores", "[", "node", "]", "=", "distance_score", "+", "connectivity_score", "+", "destination_penalty", "# Lower score is better", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_combined_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score: prioritize shorter distance to unvisited node and minimize overall trip distance", "combined_score", "=", "distance_to_next", "+", "(", "0.5", "*", "distance_to_destination", ")", "if", "combined_score", "<", "min_combined_score", ":", "min_combined_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm evaluates nodes based on a combination of the nearest unvisited node and the heuristic of remaining distance to the destination, focusing on both immediate proximity and the overall path efficiency.}", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristics_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "distance_to_next", "+", "0.5", "*", "heuristics_to_destination", "# Prioritize short-term and long-term efficiency", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "distance_to_next", "+", "(", "distance_to_destination", "*", "0.5", ")", "# Combine distance to next and to destination", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "def", "score_node", "(", "node", ")", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "return", "distance_to_node", "+", "(", "distance_to_destination", "/", "2", ")", "# Weighted score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "score_node", ")", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Penalty calculation based on distance to the destination for unvisited nodes", "penalties", "=", "{", "node", ":", "0.5", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Calculate effective distance considering penalty", "effective_distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "penalties", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Select the nearest node based on effective distance", "next_node", "=", "min", "(", "effective_distances", ",", "key", "=", "effective_distances", ".", "get", ")", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "distance_threshold", "=", "10", "# Example threshold value", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "to_destination_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "distance", "<=", "distance_threshold", ":", "score", "=", "distance", "+", "0.5", "*", "to_destination_distance", "# Penalize based on distance to destination", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate scores for each unvisited node based on distance to current and destination", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "# Cumulative cost to reach the node and penalty based on distance to the destination", "score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "0.5", "scores", "[", "node", "]", "=", "score", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {The algorithm utilizes a hybrid approach that combines the nearest neighbor heuristic with a cost-adjusted distance measure to enhance decision-making for the next node.}", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Calculate the adjusted cost based on proximity and a heuristic factor (e.g., potential distance to destination)", "for", "node", "in", "unvisited_nodes", ":", "direct_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "adjusted_cost", "=", "direct_cost", "+", "heuristic_cost", "*", "0.5", "# Weight the heuristic", "if", "adjusted_cost", "<", "min_cost", ":", "min_cost", "=", "adjusted_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Define a scoring function for nodes", "def", "calculate_score", "(", "node", ")", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "return", "distance_to_node", "+", "(", "distance_to_destination", "/", "2", ")", "# Weight destination distance less", "# Generate scores for all unvisited nodes", "scores", "=", "{", "node", ":", "calculate_score", "(", "node", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the node with the minimum score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_combined_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate connectivity score based on the number of connections to other unvisited nodes", "connectivity_score", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "float", "(", "'inf'", ")", ")", "# Combine connectivity and happiness in the scoring", "combined_score", "=", "(", "connectivity_score", "*", "2", ")", "/", "len", "(", "unvisited_nodes", ")", "-", "(", "distance_to_next", "+", "0.5", "*", "distance_to_destination", ")", "if", "combined_score", ">", "max_combined_score", ":", "max_combined_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate a penalty factor based on the distance to the destination node", "penalty_factor", "=", "0.5", "# Adjust this factor to modify the influence of the destination", "destination_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Sort unvisited nodes with an added penalty favoring those closer to the destination", "sorted_nodes", "=", "sorted", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "penalty_factor", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "# Select the nearest node with the modified criteria", "next_node", "=", "sorted_nodes", "[", "0", "]", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "unvisited_nodes", "=", "list", "(", "unvisited_nodes", ")", "min_penalty", "=", "float", "(", "'inf'", ")", "optimal_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "penalty", "=", "distance_to_node", "+", "0.5", "*", "distance_to_destination", "# Introducing a penalty based on distance to destination", "if", "penalty", "<", "min_penalty", ":", "min_penalty", "=", "penalty", "optimal_node", "=", "node", "return", "optimal_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm employs a combination of both the nearest neighbor heuristic and a penalty for longer travel, enhancing the decision-making by factoring in the proximity to the destination node.}", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Introduce a penalty for longer distances", "score", "=", "distance_to_next", "+", "(", "0.5", "*", "distance_to_destination", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate the score considering both distances", "score", "=", "distance_to_node", "+", "0.5", "*", "distance_to_destination", "# Adding a weight to distance to the destination", "# Select the node with the minimum score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "cost", "=", "distance_to_node", "+", "0.5", "*", "distance_to_destination", "# Introduce a weighting factor", "if", "cost", "<", "min_cost", ":", "min_cost", "=", "cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "total_cost", "=", "distance_to_node", "+", "(", "0.5", "*", "distance_to_destination", ")", "# Penalty factor", "if", "total_cost", "<", "min_cost", ":", "min_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm utilizes a priority scoring system that combines the distance to the node and the distance to the destination to select the next node.}", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Score is calculated as a balance of the distance to the node and the distance to the destination", "score", "=", "distance_to_node", "+", "0.5", "*", "distance_to_destination", "scores", "[", "node", "]", "=", "score", "# Select the node with the lowest score", "next_node", "=", "min", "(", "scores", ".", "keys", "(", ")", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate the inverse distance to the destination from the current node", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Introduce a balance factor for heuristic scoring", "balance_factor", "=", "0.5", "# Equal balance between distance and heuristic score", "# Calculate scores for each unvisited node", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "+", "1", ")", "for", "unvisited", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Compute the weighted score with added random factor for exploration", "scores", "[", "node", "]", "=", "(", "balance_factor", "*", "distance_to_node", ")", "+", "(", "(", "1", "-", "balance_factor", ")", "*", "heuristic_score", ")", "+", "random", ".", "uniform", "(", "0", ",", "0.1", ")", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.468620640111974}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm incorporates not only distance and penalties but also a heuristic ", "# that considers the potential future cost to complete the tour from the next node.}", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Compute the estimated future cost to complete the tour.", "future_cost", "=", "distance_to_destination", "+", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "# Introducing a weighting factor for both distances", "proximity_factor", "=", "1", "/", "(", "distance_to_next", "+", "1", ")", "score", "=", "(", "proximity_factor", "*", "(", "1", "/", "(", "future_cost", "+", "1", ")", ")", ")", "-", "(", "distance_to_next", "*", "0.3", ")", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.485814210108867}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "connectivity_scores", "=", "{", "node", ":", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "5", ")", "for", "node", "in", "unvisited_nodes", "}", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "nearest_distance", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "connectivity_score", "=", "connectivity_scores", "[", "node", "]", "exploration_factor", "=", "random", ".", "uniform", "(", "0.8", ",", "1.2", ")", "# Exploration factor", "score", "=", "(", "distance_to_node", "+", "nearest_distance", "*", "0.3", ")", "/", "(", "connectivity_score", "+", "1", ")", "*", "exploration_factor", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.49295922507493}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate the average distance to all unvisited nodes", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Calculate the maximum distance to any unvisited node to use as a penalty", "max_distance_penalty", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Define weight factors", "weight_factor_average", "=", "0.2", "# Influence of average distance", "weight_factor_penalty", "=", "0.5", "# Influence of penalty for distance", "# Calculate scores for each unvisited node combining distance, average distance, and penalty", "node_scores", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "weight_factor_average", "*", "average_distance", "-", "weight_factor_penalty", "*", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "/", "max_distance_penalty", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the node with the minimum score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.4929677555855285}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "unvisited_nodes", "=", "list", "(", "unvisited_nodes", ")", "def", "connectivity_score", "(", "node", ")", ":", "# Calculate the average distance to all other unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "return", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity", "=", "connectivity_score", "(", "node", ")", "score", "=", "distance", "+", "0.5", "*", "connectivity", "# Combine distance with a weighted connectivity score", "scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.526271790227707}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm employs a combination of the nearest neighbor heuristic and a penalty for visiting nodes ", "# with high average distances to remaining unvisited nodes, encouraging exploration of more proximal clusters.}", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "proximity_penalty", "=", "avg_distance_to_unvisited", "*", "0.5", "# Adjust the weight of the penalty", "score", "=", "distance_to_next", "+", "proximity_penalty", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.526271790227707}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "# Calculate the base cost to the destination", "base_cost_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Cost penalty for immediate choice", "immediate_cost", "=", "distance_to_node", "+", "base_cost_to_destination", "# Estimate future costs based on connectivity (average distances to unvisited nodes)", "future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "adj", "]", "for", "adj", "in", "unvisited_nodes", "if", "adj", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "# Calculate total score by combining both costs with a weighting factor", "total_score", "=", "immediate_cost", "+", "0.5", "*", "future_cost", "if", "total_score", "<", "min_score", ":", "min_score", "=", "total_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.526271790227707}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "# Calculate total distance so far (current cost)", "current_cost", "=", "sum", "(", "distance_matrix", "[", "i", "]", "[", "j", "]", "for", "i", ",", "j", "in", "zip", "(", "[", "current_node", "]", "+", "list", "(", "unvisited_nodes", ")", ",", "list", "(", "unvisited_nodes", ")", "+", "[", "current_node", "]", ")", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Score based on distance and heuristic (simple combination)", "score", "=", "distance", "+", "(", "0.5", "*", "heuristic_cost", ")", "+", "current_cost", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.526271790227707}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "score", "=", "(", "1", "/", "distance_to_next", ")", "+", "(", "1", "/", "(", "total_distance_to_unvisited", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", ")", ")", "# Balances proximity to next and overall distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.536418909379112}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Calculate the total distance from each unvisited node to the destination node", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_destination", "=", "total_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Avoid division by zero", "if", "distance_to_destination", ">", "0", ":", "# Combined metric: distance ratio adjusted by average distance to destination", "score", "=", "(", "distance_to_node", "/", "distance_to_destination", ")", "+", "(", "average_distance_to_destination", "/", "distance_to_destination", ")", "# Select the node with the minimum score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.571847164232607}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate scores for each unvisited node; include penalty and boosting factor", "scores", "=", "{", "}", "penalty_factor", "=", "1.5", "# Penalty for longer paths", "boosting_factor", "=", "2.0", "# Boost for nodes closer to destination", "for", "node", "in", "unvisited_nodes", ":", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "penalty_factor", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "boost_score", "=", "distance_to_destination", "*", "boosting_factor", "scores", "[", "node", "]", "=", "distance_score", "+", "connectivity_score", "-", "boost_score", "# Lower score is better", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 7.579441656661819}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate clustering scores based on the average distance to all unvisited nodes", "clustering_scores", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", "}", "urgency_factor", "=", "{", "node", ":", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Distance to destination", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "clustering_penalty", "=", "1", "/", "(", "clustering_scores", "[", "node", "]", "+", "1", ")", "# Lower clustering score is better", "urgency_score", "=", "urgency_factor", "[", "node", "]", "*", "0.5", "# Factor in urgency", "score", "=", "(", "distance", "*", "clustering_penalty", "+", "urgency_score", ")", "*", "random", ".", "uniform", "(", "0.95", ",", "1.05", ")", "# Adding slight randomness", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.612568934799107}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate the total direct distance to the destination", "total_direct_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "# Direct distance from current node to the candidate node", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Penalty based on the distance to the destination node for that candidate", "penalty", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Score combines direct distance and the penalty", "score", "=", "direct_distance", "+", "penalty", "*", "(", "total_direct_distance", "/", "len", "(", "unvisited_nodes", ")", ")", "# Normalize with unvisited node size", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.622833646084267}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_discounted_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "connection_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "discounted_distance", "=", "direct_distance", "/", "(", "1", "+", "connection_score", "/", "len", "(", "unvisited_nodes", ")", ")", "if", "discounted_distance", "<", "min_discounted_distance", ":", "min_discounted_distance", "=", "discounted_distance", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.624258003809929}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate a combined score using a weighted approach", "if", "distance_to_destination", ">", "0", ":", "# Avoid division by zero", "score", "=", "(", "0.6", "*", "distance_to_node", ")", "+", "(", "0.4", "*", "distance_to_destination", ")", "# Select the node with the minimum score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.6490879527083395}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {The algorithm introduces a penalty for longer distances and rewards for nodes closer to the destination, adjusted by the number of connections to unvisited nodes and a novelty score based on the minimum distance of unvisited nodes.}", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "scores", "=", "{", "}", "min_distance_to_unvisited", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connections_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "destination_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Novelty score based on the proximity to the closest unvisited node", "novelty_score", "=", "min_distance_to_unvisited", "# Calculate overall score", "scores", "[", "node", "]", "=", "(", "distance_score", "*", "1.5", ")", "-", "(", "connections_score", "*", "0.5", ")", "+", "(", "destination_score", "-", "novelty_score", ")", "# Lower score is better", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 7.6490879527083395}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate desirability scores for each unvisited node", "scores", "=", "{", "}", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "desirability_score", "=", "(", "direct_distance", "*", "0.6", ")", "+", "(", "proximity_to_destination", "*", "0.4", ")", "# Weighted score", "scores", "[", "node", "]", "=", "desirability_score", "# Lower score is better", "# Select the unvisited node with the lowest desirability score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 7.6490879527083395}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "increase_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "proximity", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "increase_cost", "+", "0.5", "*", "proximity", "# Weighting proximity into the score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.6490879527083395}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_increase_cost", "=", "float", "(", "'inf'", ")", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "increase_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "adjusted_cost", "=", "increase_cost", "+", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "-", "average_distance", ")", "*", "0.5", "if", "adjusted_cost", "<", "min_increase_cost", ":", "min_increase_cost", "=", "adjusted_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.6490879527083395}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm prioritizes nodes based on the combination of the minimum distance to the next node and the maximum distance to the destination node, enhancing both immediate and long-term traversal efficiency.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "1", "/", "(", "1", "+", "distance_to_next", ")", ")", "+", "(", "1", "/", "(", "1", "+", "distance_to_destination", ")", ")", "# Incentivizes closer nodes to both current and destination", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.6608569721620725}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm introduces a dynamic scoring mechanism favoring nodes that maintain a balance between proximity and the cost of leading towards the destination while discouraging returning to previously visited nodes.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate a heuristic that favors closer nodes to the destination while penalizing for distance to the current node", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "+", "(", "1", "/", "(", "distance_to_destination", "+", "1", ")", ")", "-", "(", "0.5", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.6608569721620725}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "+", "(", "1", "/", "(", "distance_to_destination", "+", "1", ")", ")", "# Promote closer nodes", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.6608569721620725}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate a score based on the reciprocal of distances", "score", "=", "(", "1", "/", "(", "distance_to_node", "+", "1", ")", ")", "+", "(", "1", "/", "(", "distance_to_destination", "+", "1", ")", ")", "# Select the node with the maximum score", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.6608569721620725}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate the diversity factor as the average distance between unvisited nodes", "diversity_factor", "=", "sum", "(", "distance_matrix", "[", "a", "]", "[", "b", "]", "for", "a", "in", "unvisited_nodes", "for", "b", "in", "unvisited_nodes", "if", "a", "!=", "b", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "+", "1e-5", ")", "for", "node", "in", "unvisited_nodes", ":", "immediate_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "proximity_weight", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Combined score factoring immediate cost, diversity, and proximity", "score", "=", "(", "immediate_cost", "+", "remaining_cost", ")", "/", "(", "diversity_factor", "+", "1e-5", ")", "+", "proximity_weight", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.664923111935389}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Define weights for the scoring factors", "distance_weight", "=", "0.5", "urgency_weight", "=", "0.3", "penalty_weight", "=", "0.2", "# Calculate scores for each unvisited node", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "urgency_score", "=", "1", "/", "(", "distance_to_node", "+", "1", ")", "# Higher score for nodes closer to current node", "penalty_score", "=", "distance_to_destination", "# Greater distance to destination adds penalty", "# Weighted score calculation", "score", "=", "(", "distance_weight", "*", "distance_to_node", ")", "+", "(", "urgency_weight", "*", "urgency_score", ")", "+", "(", "penalty_weight", "*", "penalty_score", ")", "scores", "[", "node", "]", "=", "score", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 7.691671292274917}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate the potential future degradation based on the distance to the destination", "degradation_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "# Combine the metrics into a comprehensive score", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "-", "(", "distance_to_destination", "/", "(", "degradation_score", "+", "1", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.790135325136555}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm utilizes an adaptive scoring system that incorporates a dynamic weight for proximity and an estimated future travel cost based on the average distance to remaining unvisited nodes.}", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "# Calculate remaining distances to destination", "remaining_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Adaptive weight based on current distance to the next node and future potential distances", "adaptive_weight", "=", "distance", "/", "(", "remaining_distance_to_destination", "+", "1e-5", ")", "# Estimate future cost: average distance to remaining unvisited nodes", "future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "adj", "]", "for", "adj", "in", "unvisited_nodes", "if", "adj", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "# Combine metrics: proximity adjusted by adaptive weight and estimated future cost", "score", "=", "adaptive_weight", "+", "future_cost", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.798415596970887}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Calculate the average distance to other unvisited nodes", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate the score combining the ratio and the difference from the average", "if", "distance_to_destination", ">", "0", ":", "# Avoid division by zero", "ratio", "=", "distance_to_node", "/", "distance_to_destination", "score", "=", "ratio", "+", "(", "avg_distance", "-", "distance_to_node", ")", "# Modify score based on average distance", "# Select the node with the minimum score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.802414247361228}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm incorporates a hybrid scoring model that combines the minimum distance to the destination,", "# the nearest unvisited node, and a penalty factor based on the remaining unvisited nodes' distance variance.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "distance_variance", "=", "sum", "(", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "-", "distance_to_next", ")", "**", "2", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "+", "(", "1", "/", "(", "distance_to_destination", "+", "1", ")", ")", "-", "(", "distance_variance", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.818584701540308}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate the distance to the destination from the current node", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Initialize scores for each unvisited node", "scores", "=", "{", "}", "min_distance", "=", "float", "(", "'inf'", ")", "# Compute the minimum distance to any unvisited node for normalization", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance_to_node", "<", "min_distance", ":", "min_distance", "=", "distance_to_node", "# Calculate scores for each unvisited node", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", "exploration_bonus", "=", "(", "1", "/", "(", "distance_to_node", "+", "1", ")", ")", "*", "random", ".", "uniform", "(", "0.5", ",", "1.5", ")", "# Reward for exploring less traveled nodes", "penalty_factor", "=", "(", "distance_to_node", "/", "min_distance", ")", "*", "0.5", "# Penalty for longer distances", "scores", "[", "node", "]", "=", "(", "proximity_score", "-", "penalty_factor", "+", "exploration_bonus", ")", "# Select the node with the maximum score", "next_node", "=", "max", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.861937657755568}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "penalty_factor", "=", "max", "(", "0", ",", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "*", "0.1", ")", "# Increasing penalty for deeper routes", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "*", "(", "1", "/", "(", "distance_to_destination", "+", "1", ")", ")", "-", "penalty_factor", "# Evaluate immediate and future travel, penalizing longer unvisited nodes", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.862738108318953}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "# Calculate total connections for unvisited nodes", "connections", "=", "{", "node", ":", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "direct_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Neighborhood score based on connectivity", "neighborhood_score", "=", "connections", "[", "node", "]", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Normalize by total unvisited", "# Proximity score inversely related to distance", "proximity_score", "=", "1", "/", "(", "direct_distance_to_destination", "+", "1", ")", "# New score combining both neighborhood and proximity scores", "score", "=", "proximity_score", "*", "neighborhood_score", "/", "(", "1", "+", "distance_to_next", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.862738108318953}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm combines a scoring mechanism based on inverse distance to the ", "# destination, a dynamic penalty for visited nodes' proximity, and the potential ", "# new cluster formation based on remaining unvisited nodes.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "# Calculate the penalty for proximity to visited nodes", "visited_penalty", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "n", "not", "in", "unvisited_nodes", ")", "/", "max", "(", "1", ",", "len", "(", "distance_matrix", ")", "-", "len", "(", "unvisited_nodes", ")", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "direct_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Proximity score: Using exponential decay on distance", "proximity_score", "=", "1", "/", "(", "1", "+", "direct_distance_to_destination", ")", "# Newly introduced node density factor based on remaining unvisited nodes", "density_factor", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "1", "+", "distance_to_next", ")", "# Dynamic score considering visited nodes penalty", "score", "=", "proximity_score", "*", "density_factor", "*", "(", "1", "/", "(", "1", "+", "visited_penalty", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.862738108318953}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Weighting based on remaining distance to the destination", "proximity_score", "=", "1", "/", "(", "distance_to_destination", "+", "1", ")", "# Clustering factor that encourages visiting less connected nodes", "clustering_score", "=", "1", "/", "(", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "10", "]", ")", "+", "1", ")", "# Combined score", "score", "=", "proximity_score", "*", "(", "clustering_score", "+", "1", ")", "/", "(", "1", "+", "distance_to_next", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.862738108318953}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm introduces a scoring system that combines the minimum distance to the next node, the total distance to all unvisited nodes, and a weighted factor for unvisited node density.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "density_factor", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", "# Avoid division by zero", "score", "=", "(", "density_factor", "*", "total_distance", ")", "/", "(", "distance_to_next", "+", "1", ")", "# Higher score for nodes with higher density and shorter distances", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.862738108318953}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "probabilities", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "proximity_factor", "=", "1", "/", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ">", "0", "else", "float", "(", "'inf'", ")", "probabilities", "[", "node", "]", "=", "proximity_factor", "/", "total_distance", "# Introduce a random factor to explore less probable nodes", "weighted_candidates", "=", "[", "(", "node", ",", "prob", "*", "random", ".", "uniform", "(", "0.5", ",", "1.5", ")", ")", "for", "node", ",", "prob", "in", "probabilities", ".", "items", "(", ")", "]", "next_node", "=", "max", "(", "weighted_candidates", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 7.874900663766554}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "next_node", "=", "None", "min_adjusted_cost", "=", "float", "(", "'inf'", ")", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "increase_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Adjust the cost based on the average distance to unvisited nodes", "adjusted_cost", "=", "increase_cost", "+", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "-", "average_distance", ")", "*", "0.5", "# Introduce a penalty for being farther from the destination", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "penalty", "=", "distance_to_destination", "*", "0.3", "# Penalty factor", "total_cost", "=", "adjusted_cost", "+", "penalty", "if", "total_cost", "<", "min_adjusted_cost", ":", "min_adjusted_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.926865856011277}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "(", "0.5", "*", "distance_to_node", ")", "+", "(", "0.5", "*", "average_distance", ")", "*", "random", ".", "uniform", "(", "0.8", ",", "1.2", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.001573536772684}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm incorporates a multi-factorial score that emphasizes distance, a penalty for unvisited nodes' average distance from the current node, and a penalty for the total distance left to the destination.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ",", "1", ")", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Weighting factors", "weight_distance", "=", "0.4", "weight_avg_distance", "=", "0.4", "weight_destination", "=", "0.2", "# Composite score calculation", "score", "=", "(", "weight_distance", "/", "(", "distance_to_next", "+", "1", ")", ")", "+", "(", "weight_avg_distance", "/", "(", "average_distance_unvisited", "+", "1", ")", ")", "-", "(", "weight_destination", "*", "distance_to_destination", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.025342615542376}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculating node centrality as the inverse of the average distance to all other unvisited nodes", "centrality_score", "=", "1", "/", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "+", "1", ")", "# Introducing a risk-reward mechanism", "risk_factor", "=", "(", "distance_to_next", "+", "distance_to_destination", ")", "/", "2", "# Combining scores with a new equation", "score", "=", "centrality_score", "*", "(", "1", "/", "(", "risk_factor", "+", "1", ")", ")", "*", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.032864771548851}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_combined_score", "=", "float", "(", "'-inf'", ")", "# Calculate the maximum distance for normalization", "max_happiness_score", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate happiness score based on the sum of distances to all other unvisited nodes, normalized", "happiness_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "normalized_happiness_score", "=", "happiness_score", "/", "max_happiness_score", "if", "max_happiness_score", "!=", "0", "else", "0", "# Combined score: prioritize both normalized happiness and proximity", "combined_score", "=", "normalized_happiness_score", "-", "(", "0.5", "*", "distance_to_next", "+", "0.3", "*", "distance_to_destination", ")", "if", "combined_score", ">", "max_combined_score", ":", "max_combined_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.05523408857922}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "if", "not", "unvisited_nodes", ":", "return", "None", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate clustering potential based on remaining unvisited nodes", "clustering_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "weighted_score", "=", "(", "direct_distance", "+", "clustering_score", ")", "/", "(", "1", "+", "(", "1", "/", "(", "1", "+", "direct_distance", ")", ")", ")", "# Balance between current and future distances", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.060123594360967}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm incorporates a blend of nearest neighbor and diversity incentives, where the next node selection is influenced by the distance to neighboring nodes and a diversity score that penalizes selecting nearby nodes in favor of more distant, unvisited ones.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "diversity_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "+", "1", ")", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "# Encourages selection of distant nodes", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "+", "(", "diversity_score", "/", "max", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ",", "1", ")", ")", "# Combine proximity and diversity", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.087230425545947}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "from", "scipy", ".", "sparse", ".", "csgraph", "import", "minimum_spanning_tree", "import", "numpy", "as", "np", "# Create a sub-matrix for unvisited nodes", "sub_matrix", "=", "np", ".", "array", "(", "[", "[", "distance_matrix", "[", "i", "]", "[", "j", "]", "for", "j", "in", "unvisited_nodes", "]", "for", "i", "in", "unvisited_nodes", "]", ")", "# Calculate the Minimum Spanning Tree for unvisited nodes", "mst", "=", "minimum_spanning_tree", "(", "sub_matrix", ")", ".", "toarray", "(", ")", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "idx", ",", "node", "in", "enumerate", "(", "unvisited_nodes", ")", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "# Calculate the connectivity score based on MST", "connectivity_score", "=", "np", ".", "sum", "(", "mst", "[", "idx", "]", ")", "# Total edge weight to connect to other nodes", "# Combined score emphasizing proximity and connectivity", "score", "=", "distance_to_next", "+", "distance_to_destination", "-", "(", "0.3", "*", "connectivity_score", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.087714784677612}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate a weighted score based on both distances", "score", "=", "distance_to_node", "+", "distance_to_destination", "# Select the node with the minimum score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "# Calculate the total estimated cost (actual distance + heuristic estimate to destination)", "actual_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "total_cost", "=", "actual_cost", "+", "heuristic_cost", "if", "total_cost", "<", "min_cost", ":", "min_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "total_distance_traveled", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "if", "node", "!=", "current_node", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate the score based on distance to node and distance to destination", "score", "=", "(", "distance_to_node", "+", "distance_to_destination", ")", "/", "(", "1", "+", "total_distance_traveled", ")", "# Select the node with the minimum score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_increase_cost", "=", "float", "(", "'inf'", ")", "remaining_costs", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "increase_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "+", "remaining_costs", "if", "increase_cost", "<", "min_increase_cost", ":", "min_increase_cost", "=", "increase_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate the clustering density based on proximity to unvisited nodes", "density_score", "=", "0", "if", "unvisited_nodes", ":", "distances_to_unvisited", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "density_score", "=", "sum", "(", "distances_to_unvisited", ")", "/", "len", "(", "distances_to_unvisited", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Improved scoring: penalizes distance and rewards density", "score", "=", "distance_to_next", "+", "distance_to_destination", "-", "density_score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Introduce a novelty factor to diversify the exploration", "novelty_factor", "=", "random", ".", "uniform", "(", "1.0", ",", "5.0", ")", "# Calculate scores for each unvisited node", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combine distances with the novelty factor and a penalty for less connected nodes", "scores", "[", "node", "]", "=", "(", "distance_to_node", "+", "distance_to_destination", ")", "/", "novelty_factor", "+", "(", "1", "/", "len", "(", "unvisited_nodes", ")", ")", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_weighted_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate connection score based on the number of connections to other unvisited nodes", "connection_score", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "float", "(", "'inf'", ")", ")", "# Weighted score: prioritize higher connections while balancing distances", "weighted_score", "=", "(", "connection_score", "+", "1", ")", "/", "(", "distance_to_next", "+", "distance_to_destination", "+", "1e-6", ")", "# Add small epsilon to avoid division by zero", "if", "weighted_score", ">", "max_weighted_score", ":", "max_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm emphasizes visiting nodes that minimize the overall travel distance while considering the proximity to the destination node.}", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "distance_to_next", "+", "distance_to_destination", "# Combined score based on distance to next node and to destination", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_increase_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "increase_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "if", "increase_cost", "<", "min_increase_cost", ":", "min_increase_cost", "=", "increase_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm combines distance with a desirability factor that prioritizes closer nodes but also accounts for the total distance to the destination, aiming for a balance between immediate proximity and the overall journey.}", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "total_distance", "=", "distance_to_next", "+", "distance_to_destination", "desirability", "=", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Favor nodes that reduce overall unvisited count", "score", "=", "total_distance", "*", "(", "1", "-", "desirability", ")", "# Encourage visiting nodes that lead to shorter total paths", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "return_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "total_cost", "=", "distance", "+", "return_cost", "if", "total_cost", "<", "min_cost", ":", "min_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate the heuristic score for each unvisited node", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_from_node_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Score is calculated as the direct distance plus the estimated remaining distance to the destination", "score", "=", "distance_to_node", "+", "distance_from_node_to_destination", "scores", "[", "node", "]", "=", "score", "# Select the node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_increase", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "increase", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "if", "increase", "<", "min_increase", ":", "min_increase", "=", "increase", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate a weighted score combining distance to the node and distance to the destination", "if", "distance_to_destination", ">", "0", "and", "distance_to_node", ">", "0", ":", "# Avoid division by zero", "score", "=", "(", "0.5", "*", "distance_to_node", ")", "+", "(", "0.5", "*", "distance_to_destination", ")", "# Select the node with the minimum score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "unvisited_nodes", "=", "list", "(", "unvisited_nodes", ")", "def", "score", "(", "node", ")", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combine distance to next node and maximum distance left to destination", "return", "distance_to_node", "+", "remaining_distance_to_destination", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "score", ")", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate total impact score", "score", "=", "distance_to_node", "+", "distance_to_destination", "# Select the node with the minimum score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_adjusted_score", "=", "float", "(", "'inf'", ")", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "heuristic_value", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "# Average distance to destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Direct distance to destination from the candidate node", "adjusted_score", "=", "(", "direct_distance", "+", "(", "total_distance_to_unvisited", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", ")", "+", "future_cost", ")", "-", "heuristic_value", "if", "adjusted_score", "<", "min_adjusted_score", ":", "min_adjusted_score", "=", "adjusted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate total distance from the current node to the destination via each unvisited node", "total_distances", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "total_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "total_distances", "[", "node", "]", "=", "total_distance", "# Select the node with the minimum total distance", "next_node", "=", "min", "(", "total_distances", ",", "key", "=", "total_distances", ".", "get", ")", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "candidates", "=", "[", "]", "min_increase", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "increase", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "if", "increase", "<", "min_increase", ":", "min_increase", "=", "increase", "candidates", "=", "[", "node", "]", "elif", "increase", "==", "min_increase", ":", "candidates", ".", "append", "(", "node", ")", "if", "candidates", ":", "return", "random", ".", "choice", "(", "candidates", ")", "return", "None"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "clusters", "=", "{", "}", "# Create clusters based on proximity", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "not", "in", "clusters", ":", "clusters", "[", "distance", "]", "=", "[", "]", "clusters", "[", "distance", "]", ".", "append", "(", "node", ")", "# Calculate scores for each node considering both distance and heuristic", "scores", "=", "{", "}", "for", "distance", ",", "cluster", "in", "clusters", ".", "items", "(", ")", ":", "for", "node", "in", "cluster", ":", "heuristic_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# heuristic estimate to destination", "scores", "[", "node", "]", "=", "distance", "+", "heuristic_cost", "# score based on distance and heuristic", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Nearest neighbor weight: favor closer nodes", "nearest_neighbor_weight", "=", "distance_to_node", "# Penalty for increasing overall path length: based on the distance to the destination from the unvisited node", "overall_path_penalty", "=", "distance_to_destination", "*", "(", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", ")", "# Calculate the score combining both metrics", "score", "=", "nearest_neighbor_weight", "+", "overall_path_penalty", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Define a heuristic function that combines distance from the current node and distance to the destination", "def", "heuristic", "(", "node", ")", ":", "return", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Sort unvisited nodes based on the heuristic function", "sorted_nodes", "=", "sorted", "(", "unvisited_nodes", ",", "key", "=", "heuristic", ")", "# Select the node with the highest priority based on the heuristic", "next_node", "=", "sorted_nodes", "[", "0", "]", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "decay_factor", "=", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Decay factor based on remaining unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "total_distance", "=", "distance_to_next", "+", "distance_to_destination", "# Calculate score using a combination of the distance and decay factor", "score", "=", "(", "1", "/", "total_distance", ")", "*", "decay_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate scores for each unvisited node based on distance, proximity to destination, and connectivity", "scores", "=", "{", "}", "proximity_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "decay_factor", "=", "proximity_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Closer nodes to destination score better", "scores", "[", "node", "]", "=", "distance_score", "-", "decay_factor", "+", "connectivity_score", "# Lower score is better", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "mean_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "0.5", "*", "(", "mean_distance_to_unvisited", "-", "distance_to_next", ")", ")", "-", "(", "0.5", "*", "distance_to_destination", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "samples", "=", "1000", "# Number of samples to simulate", "best_node", "=", "None", "best_average_score", "=", "float", "(", "'inf'", ")", "for", "_", "in", "range", "(", "samples", ")", ":", "candidate_node", "=", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "# Calculate score based on distance to candidate node and distance to destination", "distance_to_candidate", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate_node", "]", "distance_to_destination", "=", "distance_matrix", "[", "candidate_node", "]", "[", "destination_node", "]", "average_score", "=", "distance_to_candidate", "+", "distance_to_destination", "# Select the node with the best average score over samples", "if", "average_score", "<", "best_average_score", ":", "best_average_score", "=", "average_score", "best_node", "=", "candidate_node", "return", "best_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_adjusted_cost", "=", "float", "(", "'inf'", ")", "# Calculate the weighted average distance to unvisited nodes", "weights", "=", "len", "(", "unvisited_nodes", ")", "**", "0.5", "weighted_average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "weights", "if", "weights", ">", "0", "else", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "immediate_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "return_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "adjusted_cost", "=", "immediate_cost", "+", "return_cost", "-", "weighted_average_distance", "*", "0.3", "if", "adjusted_cost", "<", "min_adjusted_cost", ":", "min_adjusted_cost", "=", "adjusted_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_cumulative_cost", "=", "float", "(", "'inf'", ")", "# Calculate cumulative costs for unvisited nodes", "cumulative_costs", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "cumulative_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Introduce a penalty for frequently visited nodes (assuming some criteria)", "penalty", "=", "0.1", "if", "node", "in", "unvisited_nodes", "else", "0", "cumulative_cost", "+=", "penalty", "cumulative_costs", "[", "node", "]", "=", "cumulative_cost", "if", "cumulative_cost", "<", "min_cumulative_cost", ":", "min_cumulative_cost", "=", "cumulative_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "from", "collections", "import", "defaultdict", "import", "numpy", "as", "np", "# Calculate distance of unvisited nodes from the current node and the destination", "distances_to_current", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "distances_to_destination", "=", "{", "node", ":", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Create a priority score based on distance to current and distance to destination", "priority_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "priority_scores", "[", "node", "]", "=", "distances_to_current", "[", "node", "]", "+", "distances_to_destination", "[", "node", "]", "# Simple sum of both distances", "# Select next node based on the minimum priority score", "next_node", "=", "min", "(", "priority_scores", ",", "key", "=", "priority_scores", ".", "get", ")", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "increase_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "heuristic_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# heuristic estimate to destination", "proximity", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "increase_cost", "+", "0.5", "*", "proximity", "+", "0.5", "*", "heuristic_cost", "# Combining costs with a proximity weight", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate a score for each unvisited node based on distance, connectivity, and priority towards the destination", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "# Introducing a penalty based on the number of remaining unvisited neighbors", "remaining_neighbors", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "penalty", "=", "remaining_neighbors", "*", "0.5", "# Penalty factor", "# Combine scores: prioritize closer nodes to destination while considering connectivity and the penalty", "score", "=", "(", "distance_to_node", "+", "distance_to_destination", ")", "+", "connectivity_score", "-", "penalty", "scores", "[", "node", "]", "=", "score", "# Lower score is better", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Calculate heuristic based on remaining distance to destination", "heuristic_map", "=", "{", "node", ":", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Calculate total cost as a combination of direct cost and heuristic", "for", "node", "in", "unvisited_nodes", ":", "direct_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_cost", "=", "direct_cost", "+", "heuristic_map", "[", "node", "]", "if", "total_cost", "<", "min_cost", ":", "min_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "\"\"\"\n    This algorithm evaluates the next node based on a combination of direct distance, \n    the average distance to the remaining unvisited nodes, and a penalty for the total distance \n    to the destination to optimize both immediate and future path efficiency.\n    \"\"\"", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "# Calculate average distance to unvisited nodes", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Penalty for the total distance to the destination as an additional factor", "penalty_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combine metrics to compute a weighted score considering direct distance, average distance, and penalty", "weighted_score", "=", "distance", "+", "average_distance_to_unvisited", "+", "penalty_to_destination", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["# {This algorithm employs a scoring mechanism that integrates a penalty for remaining unvisited nodes based on their average proximity to the current node, while also considering the minimum potential cost to the destination.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "# Calculate the average distance to unvisited nodes", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "# Calculate the direct distance to the destination", "direct_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Penalty for the average distance of remaining unvisited nodes", "unvisited_penalty", "=", "len", "(", "unvisited_nodes", ")", "*", "average_distance_to_unvisited", "# Minimum potential cost to destination if this node is selected", "remaining_cost_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Score calculation considering distance to the node, unvisited penalty, and potential cost to the destination", "score", "=", "distance_to_node", "+", "unvisited_penalty", "+", "remaining_cost_to_destination", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate penalties based on distance from the destination", "penalties", "=", "{", "node", ":", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Calculate the effective cost for each unvisited node", "effective_costs", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "penalties", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Select the node with the lowest effective cost", "next_node", "=", "min", "(", "effective_costs", ",", "key", "=", "effective_costs", ".", "get", ")", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate the average distance to all unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "# Distance to the next candidate node", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Euclidean distance to destination node", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate the score based on proximity and average distance consideration", "score", "=", "(", "0.5", "*", "distance_to_next", ")", "+", "(", "0.5", "*", "distance_to_destination", ")", "-", "(", "0.5", "*", "average_distance", ")", "# Select the node with the minimal score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate the penalty based on the number of connections to remaining nodes", "multiplicity_penalty", "=", "sum", "(", "1", "for", "adj", "in", "unvisited_nodes", "if", "adj", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "adj", "]", "<", "float", "(", "'inf'", ")", ")", "# Score incorporates distance to the node, distance to the destination, and multiplicity penalty", "score", "=", "distance_to_node", "+", "distance_to_destination", "+", "multiplicity_penalty", "*", "0.1", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "next_node", "=", "None", "min_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Composite cost calculation", "cost", "=", "distance_to_next", "+", "distance_to_destination", "if", "cost", "<", "min_cost", ":", "min_cost", "=", "cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "samples", "=", "1000", "# Number of samples to simulate", "best_node", "=", "None", "best_average_score", "=", "float", "(", "'inf'", ")", "for", "_", "in", "range", "(", "samples", ")", ":", "candidate_node", "=", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "# Calculate score based on distance to candidate node and combined distance to destination", "distance_to_candidate", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate_node", "]", "heuristic_cost", "=", "distance_matrix", "[", "candidate_node", "]", "[", "destination_node", "]", "# heuristic estimate to destination", "average_score", "=", "distance_to_candidate", "+", "heuristic_cost", "# Select the node with the best average score over samples", "if", "average_score", "<", "best_average_score", ":", "best_average_score", "=", "average_score", "best_node", "=", "candidate_node", "return", "best_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "optimal_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "increase_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "increase_cost", "<", "optimal_cost", "or", "(", "increase_cost", "==", "optimal_cost", "and", "distance", "<", "distance_matrix", "[", "current_node", "]", "[", "next_node", "]", ")", ":", "optimal_cost", "=", "increase_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "total_distance_from_node_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "0.5", "*", "distance_to_next", ")", "+", "(", "0.3", "*", "average_distance_to_unvisited", ")", "+", "(", "0.2", "*", "total_distance_from_node_to_destination", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.098243400991786}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "# Risk factor based on variability of distances to neighbors", "neighbor_distances", "=", "[", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "]", "risk_penalty", "=", "(", "(", "max", "(", "neighbor_distances", ",", "default", "=", "0", ")", "-", "min", "(", "neighbor_distances", ",", "default", "=", "0", ")", ")", "/", "(", "sum", "(", "neighbor_distances", ")", "/", "len", "(", "neighbor_distances", ")", ")", ")", "if", "neighbor_distances", "else", "0", "# Combined score emphasizing proximity and penalizing risk", "score", "=", "distance_to_next", "+", "distance_to_destination", "+", "(", "1.5", "*", "risk_penalty", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.31108144791347}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Estimated cost to average of remaining unvisited nodes", "if", "unvisited_nodes", ":", "average_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "/", "len", "(", "unvisited_nodes", ")", "else", ":", "average_remaining_distance", "=", "0", "# Divergence penalty: determine how much the current path deviates", "curved_penalty", "=", "0.5", "*", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Combined score emphasizing proximity, remaining cost, and path directness", "score", "=", "distance_to_next", "+", "average_remaining_distance", "+", "curved_penalty", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.398261776190935}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "score", "=", "(", "0.5", "*", "distance_to_next", ")", "+", "(", "0.5", "*", "avg_distance_to_unvisited", ")", "# Balanced score for immediate distance and future prospects", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# This algorithm selects the next node to visit by evaluating the potential for reducing overall travel distance ", "# while also considering the diversity of unvisited nodes based on their distances from the current node.", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "min_distance_to_unvisited", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "score", "=", "(", "total_distance", "/", "len", "(", "unvisited_nodes", ")", ")", "+", "distance_to_next", "-", "min_distance_to_unvisited", "# Encourages visiting nodes that are not only close but also strategically located", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_penalty_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty_factor", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "score", "=", "distance_to_next", "+", "penalty_factor", "# Combine distance and penalty", "if", "score", "<", "min_penalty_score", ":", "min_penalty_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate the heuristic value for each unvisited node", "heuristic_values", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "avg_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "heuristic_values", "[", "node", "]", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "avg_distance_to_remaining", "# Select the node with the minimum heuristic value", "next_node", "=", "min", "(", "heuristic_values", ",", "key", "=", "heuristic_values", ".", "get", ")", "return", "next_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "nearest_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "score", "=", "nearest_distance", "+", "average_distance", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# This algorithm uses a scoring system that balances total distance, potential future distance, ", "# and ensures that more connected nodes are prioritized depending on their connectivity levels.", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "scores", "=", "{", "}", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "connectivity_map", "=", "{", "node", ":", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "connectivity_map", "[", "node", "]", "remaining_nodes_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "0", "else", "1", ")", "# Prioritize nodes that have a higher connectivity and lower overall distance score", "scores", "[", "node", "]", "=", "(", "distance_to_node", "+", "remaining_nodes_score", ")", "/", "(", "connectivity_score", "+", "1", ")", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_factor", "=", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", ")", "if", "unvisited_nodes", "else", "0", "score", "=", "distance_to_node", "+", "heuristic_factor", "# Weighted score based on distance and connectivity", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "next_node", "=", "None", "lowest_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "# Calculate the cost of visiting the node", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Estimate the average distance to return to destination node after visiting 'node'", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "total_cost", "=", "distance_to_node", "+", "avg_distance_to_destination", "if", "total_cost", "<", "lowest_cost", ":", "lowest_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.4323878079629}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate a score for each unvisited node based on distance and average proximity to other unvisited nodes", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_others", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "scores", "[", "node", "]", "=", "distance_to_node", "+", "average_distance_to_others", "# Lower score is better", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 8.4323878079629}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_distance", "=", "0", "# Estimate remaining distance by averaging distances to other unvisited nodes", "for", "unvisited", "in", "unvisited_nodes", ":", "if", "unvisited", "!=", "node", ":", "remaining_distance", "+=", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "average_remaining_distance", "=", "remaining_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Calculate the heuristic score as a combination of direct distance and future travel potential", "score", "=", "distance_to_node", "+", "average_remaining_distance", "# Select the node with the minimum score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.4323878079629}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_combined_score", "=", "float", "(", "'inf'", ")", "alpha", "=", "0.5", "# Weight for distance score", "beta", "=", "0.5", "# Weight for connectivity score", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Average distance to all other unvisited nodes", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "/", "(", "num_unvisited", "-", "1", ")", "if", "num_unvisited", ">", "1", "else", "0", "# Connectivity score based on the number of close neighbors", "connectivity_score", "=", "len", "(", "[", "other_node", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "(", "distance_to_next", "+", "2", ")", "]", ")", "# Combined score for score calculation", "combined_score", "=", "(", "avg_distance_to_unvisited", "*", "beta", ")", "+", "(", "distance_to_next", "*", "alpha", ")", "-", "(", "connectivity_score", "*", "0.1", ")", "if", "combined_score", "<", "min_combined_score", ":", "min_combined_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.4323878079629}
{"code_tokens": ["# {This algorithm enhances the score calculation by incorporating a heuristic that prioritizes nodes that minimize the total distance to the starting point, while also considering connectivity and a penalty for longer distances to encourage exploring closer nodes first.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_start", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "connectivity_score", "=", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "10", "]", ")", "# Connectivity within a threshold", "score", "=", "distance_to_next", "+", "(", "total_distance_to_start", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", ")", "-", "connectivity_score", "# Lower score is better", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.442090034224456}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "decay_factor", "=", "0.9", "# Decay factor to reduce influence of distance over iterations", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "inverse_distances_sum", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "+", "1", ")", "for", "n", "in", "unvisited_nodes", ")", "score", "=", "(", "inverse_distances_sum", "*", "decay_factor", "**", "len", "(", "unvisited_nodes", ")", ")", "-", "distance_to_next", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.464188991554282}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# The design idea is to prioritize nodes that minimize the distance to the destination and have a balanced distance to other unvisited nodes, using a weighted scoring approach.", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "scores", "=", "{", "}", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "avg_distance_to_unvisited", "=", "total_distance", "/", "num_unvisited", "if", "num_unvisited", ">", "0", "else", "0", "# Scoring formula: minimize distance to destination and average distance penalties", "scores", "[", "node", "]", "=", "(", "distance_to_destination", "*", "1.5", ")", "+", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "-", "avg_distance_to_unvisited", ")", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 8.46985744010961}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "penalty_factor", "=", "1.5", "# Adjust this factor to introduce more or less penalty", "for", "node", "in", "unvisited_nodes", ":", "direct_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "indirect_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "penalty_factor", "total_cost", "=", "direct_cost", "+", "indirect_cost", "if", "total_cost", "<", "min_cost", ":", "min_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.46985744010961}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate a score for each unvisited node based on distance and penalty", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "scores", "[", "node", "]", "=", "distance_to_node", "+", "(", "distance_to_destination", "*", "1.5", ")", "# Penalty for distance to destination", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 8.46985744010961}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "heuristic_weight", "=", "1.5", "# You can adjust this weight for experimentation", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate the weighted score", "if", "distance_to_destination", ">", "0", ":", "# Avoid division by zero", "score", "=", "distance_to_node", "+", "heuristic_weight", "*", "distance_to_destination", "# Select the node with the minimum score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.46985744010961}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "# Calculate the centroid of the remaining unvisited nodes", "if", "unvisited_nodes", ":", "centroid_x", "=", "sum", "(", "node", "%", "len", "(", "distance_matrix", ")", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "centroid_y", "=", "sum", "(", "node", "//", "len", "(", "distance_matrix", ")", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_centroid", "=", "(", "(", "node", "%", "len", "(", "distance_matrix", ")", "-", "centroid_x", ")", "**", "2", "+", "(", "node", "//", "len", "(", "distance_matrix", ")", "-", "centroid_y", ")", "**", "2", ")", "**", "0.5", "weight_factor", "=", "1", "/", "(", "1", "+", "distance_to_next", ")", "# Prevent division by zero and balance influence", "score", "=", "(", "weight_factor", "*", "(", "1", "/", "(", "1", "+", "distance_to_centroid", ")", ")", ")", "-", "distance_to_next", "# Balance heuristic and immediate distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.47433870610569}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm incorporates a scoring mechanism that combines the distance to the next node, ", "# the sum of distances to all unvisited nodes, and an inverse of their average to determine ", "# proximity, adjusting the influence of the destination based on the remaining unvisited nodes.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "average_distance_to_unvisited", "=", "total_distance_to_unvisited", "/", "(", "len", "(", "unvisited_nodes", ")", ")", "if", "unvisited_nodes", "else", "0", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "average_distance_to_unvisited", "/", "(", "1", "+", "distance_to_next", ")", ")", "-", "(", "0.5", "*", "distance_to_destination", ")", "+", "(", "0.1", "*", "len", "(", "unvisited_nodes", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.479134306806891}
{"code_tokens": ["# {This algorithm modifies the scoring mechanism by incorporating a harmonic mean for averaging distances to remaining nodes, while adding a weight factor for intermediate distances to balance choices among unvisited nodes.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "intermediate_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "weight_factor", "=", "0.3", "*", "(", "intermediate_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Harmonic mean for average distance to remaining nodes", "harmonic_mean_distance", "=", "len", "(", "unvisited_nodes", ")", "/", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "*", "harmonic_mean_distance", "-", "weight_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.514302161140193}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm selects the next node based on a combination of the minimum distance to the next node, ", "# the maximum distance to unvisited nodes, and a penalty for node degree of connectivity, promoting ", "# visits to nodes that are both reachable and centrally located.}", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "max_distance_to_unvisited", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "connectivity_penalty", "=", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", "]", ")", "score", "=", "distance_to_next", "+", "max_distance_to_unvisited", "-", "connectivity_penalty", "# Lower score is better", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.535700438456931}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_combined_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate connectivity score as the number of connections to unvisited nodes", "connectivity_score", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "float", "(", "'inf'", ")", ")", "# Calculate the average distance to all other unvisited nodes", "average_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "/", "len", "(", "unvisited_nodes", ")", "# Combined score: balance between connectivity and distance criteria", "combined_score", "=", "connectivity_score", "-", "(", "0.5", "*", "distance_to_next", "+", "0.5", "*", "distance_to_destination", ")", "-", "(", "0.2", "*", "average_distance", ")", "if", "combined_score", ">", "max_combined_score", ":", "max_combined_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.544195543582784}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "total_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "# Calculate total cost: immediate distance to next node plus remaining distance to destination and penalty", "total_cost", "=", "distance_to_next", "+", "remaining_distance_to_destination", "+", "0.5", "*", "total_penalty", "if", "total_cost", "<", "best_cost", ":", "best_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.638255925482245}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "closest_distance_to_unvisited", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "distance_to_start", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "distance_to_next", "+", "(", "total_distance_to_unvisited", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", ")", ")", "+", "(", "0.3", "*", "distance_to_start", ")", "-", "(", "0.7", "*", "closest_distance_to_unvisited", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.659639755846989}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_modified_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "average_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max", "(", "1", ",", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "modified_distance", "=", "direct_distance", "+", "average_distance", "*", "0.5", "if", "modified_distance", "<", "min_modified_distance", ":", "min_modified_distance", "=", "modified_distance", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.685946007189195}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_modified_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "average_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max", "(", "1", ",", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "modified_distance", "=", "direct_distance", "+", "average_distance", "*", "0.5", "# Introduce randomness to select among the best candidates", "if", "modified_distance", "<", "min_modified_distance", ":", "min_modified_distance", "=", "modified_distance", "next_node", "=", "node", "# Random selection among the best options with similar modified distances", "candidates", "=", "[", "node", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "==", "min_modified_distance", "]", "if", "candidates", ":", "next_node", "=", "random", ".", "choice", "(", "candidates", ")", "# Randomly select one of the nearest", "return", "next_node"], "code_perf": 8.685946007189195}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate the total distance to all unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "# Use a penalty for highly connected nodes", "connectivity_penalty", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "1", "for", "n", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", "}", "nearest_node", "=", "None", "min_weighted_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Adjust the distance with a weight factor based on average distance and penalty", "weighted_distance", "=", "distance", "+", "(", "avg_distance", "-", "distance", ")", "*", "0.3", "+", "connectivity_penalty", "[", "node", "]", "*", "0.5", "if", "weighted_distance", "<", "min_weighted_distance", ":", "min_weighted_distance", "=", "weighted_distance", "nearest_node", "=", "node", "return", "nearest_node"], "code_perf": 8.71500265943235}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_effective_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "effective_distance", "=", "distance_to_next", "+", "(", "2", "*", "distance_to_destination", ")", "# Penalizing distant nodes", "if", "effective_distance", "<", "min_effective_distance", ":", "min_effective_distance", "=", "effective_distance", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.80356546673329}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "# Constants for weighting", "delta", "=", "0.5", "# Weight for average distance score", "epsilon", "=", "0.5", "# Weight for reachable nodes score", "# Calculate average distance to the remaining nodes", "average_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Reachable nodes score: count how many unvisited nodes can be reached within a threshold", "threshold", "=", "10", "# Example threshold distance", "reachable_nodes_count", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<=", "threshold", ")", "# Combined score incorporating average distance and reachable nodes score", "combined_score", "=", "(", "reachable_nodes_count", "*", "epsilon", "-", "distance_to_next", "*", "delta", "-", "distance_to_destination", ")", "if", "combined_score", ">", "best_score", ":", "best_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.80356546673329}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_combined_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate accessibility score based on the average distance to all other unvisited nodes", "if", "len", "(", "unvisited_nodes", ")", ">", "1", ":", "accessibility_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "else", ":", "accessibility_score", "=", "0", "# No other nodes to connect to", "# Combined score: prioritize closeness to next node and accessibility to others ", "combined_score", "=", "(", "1", "/", "(", "1", "+", "distance_to_next", ")", ")", "+", "(", "1", "/", "(", "1", "+", "accessibility_score", ")", ")", "-", "(", "0.5", "*", "distance_to_destination", ")", "if", "combined_score", ">", "max_combined_score", ":", "max_combined_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.874305764170124}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate scores for each unvisited node", "scores", "=", "{", "}", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "# Calculate penalty based on distance to destination", "penalty", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "total_distance_to_destination", "if", "total_distance_to_destination", ">", "0", "else", "0", "# Combine scores with weights", "scores", "[", "node", "]", "=", "(", "distance_score", "+", "penalty", ")", "/", "(", "connectivity_score", "+", "1", ")", "# Prevent division by zero", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 8.951882324620582}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Define risk factor for exploration reward", "risk_factor", "=", "0.3", "# Calculate scores based on distance and risk-reward mechanism", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_to_destination_score", "=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "# Risk-reward mechanism incorporates randomness and risk factor", "randomized_reward", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "*", "risk_factor", "scores", "[", "node", "]", "=", "(", "1", "-", "proximity_to_destination_score", ")", "+", "randomized_reward", "/", "distance", "# Select the unvisited node with the highest score (higher is better)", "next_node", "=", "max", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 9.144166480295118}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Score is calculated using a balance of the immediate distance and future distance potential", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "-", "(", "future_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "if", "unvisited_nodes", "else", "1", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.31625196692404}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm uses a balance of direct distance, predicted future distances based on unvisited node metrics, ", "# and a \"penalty\" term that accounts for visiting nodes that are farther away from the current path.}", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "# Calculate the total distance to all unvisited nodes", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Predictive factor: average distance to destination from unvisited nodes", "predicted_future_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "adj", "]", "for", "adj", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "# Penalty for traveling farther away from current path (to balance distant nodes)", "distance_penalty", "=", "abs", "(", "distance_to_node", "-", "(", "total_distance_to_unvisited", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", ")", ")", "# Combine metrics to compute weighted score using direct distance, predicted future distance, and distance penalty", "weighted_score", "=", "distance_to_node", "+", "0.8", "*", "predicted_future_distance", "+", "0.5", "*", "distance_penalty", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.320363359720218}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm combines a modified cost function with a bias toward nodes that are closer to the destination, promoting both efficiency in distance traveled and steering towards the final goal.}", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "clustering_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ",", "1", ")", "# New scoring mechanism that prefers nodes that reduce both immediate travel and overall route complexity", "score", "=", "(", "distance_to_next", "+", "clustering_penalty", "+", "distance_to_destination", ")", "*", "(", "1", "+", "(", "len", "(", "unvisited_nodes", ")", "/", "10", ")", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.392093580764584}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm incorporates a hybrid approach by factoring in not only travel distance and clustering penalties but also the overall remaining distance to the destination, promoting longer-term planning in node selection.}", "next_node", "=", "None", "min_total_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "clustering_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ",", "1", ")", "total_cost", "=", "distance_to_next", "+", "clustering_penalty", "+", "remaining_distance_to_destination", "if", "total_cost", "<", "min_total_cost", ":", "min_total_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.392093580764584}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "penalty_factor", "=", "1.2", "# Penalty for longer paths", "boosting_factor", "=", "1.8", "# Boost for nodes closer to destination", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "penalty_factor", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "boosting_factor", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "score", "=", "distance_to_next", "+", "distance_to_destination", "+", "(", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.440933038664742}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Define a penalty factor to avoid overly long paths", "penalty_factor", "=", "0.1", "for", "node", "in", "unvisited_nodes", ":", "# Calculate cost with penalty for unvisited nodes", "current_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", "if", "next_node", "!=", "node", ")", "adjusted_cost", "=", "current_cost", "+", "penalty_factor", "*", "future_cost", "if", "adjusted_cost", "<", "min_cost", ":", "min_cost", "=", "adjusted_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.508647255986432}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm introduces a hybrid scoring system that combines distance minimization with a penalty for visiting ", "# nodes that are too close to the current node to avoid local clustering and prioritize global path optimization.}", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "proximity_penalty", "=", "1", "/", "(", "distance_to_next", "+", "1", ")", "# Penalizes very short distances to encourage broader spread", "score", "=", "distance_to_next", "+", "distance_to_destination", "+", "proximity_penalty", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.515061030411713}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "score", "=", "(", "avg_distance_to_unvisited", "-", "distance_to_next", ")", "+", "(", "1", "/", "(", "distance_to_destination", "+", "1e-6", ")", ")", "# Adding a penalty for distance to destination", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.747630688280983}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "# Constants for weighting", "alpha", "=", "0.5", "# Weight for distance score", "beta", "=", "0.3", "# Weight for cluster potential score", "gamma", "=", "0.2", "# Weight for return distance penalty", "exploration_factor", "=", "0.1", "# Degree of randomness in scoring", "# Calculate total distances to the remaining nodes", "total_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Cluster potential score, weighted by closeness to remaining unvisited nodes", "cluster_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "+", "1", ")", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "# Combined score incorporating cluster potential and distance penalty, adjusted with exploration", "combined_score", "=", "(", "cluster_score", "*", "beta", "/", "total_distance_remaining", "-", "distance_to_destination", "*", "gamma", "-", "distance_to_next", "*", "alpha", ")", "combined_score", "+=", "random", ".", "uniform", "(", "-", "exploration_factor", ",", "exploration_factor", ")", "# Introducing randomness", "if", "combined_score", ">", "best_score", ":", "best_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.89660897176832}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "avg_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "# Attraction score based on proximity to destination", "attraction_score", "=", "distance_to_destination", "**", "-", "1", "if", "distance_to_destination", ">", "0", "else", "float", "(", "'inf'", ")", "# Risk factor representing the potential cost of visiting other nodes", "risk_factor", "=", "distance_to_next", "/", "(", "avg_distance_to_remaining", "+", "1", ")", "# Combined score", "score", "=", "attraction_score", "/", "(", "1", "+", "risk_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.91483687615865}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Penalty for longer paths", "long_path_penalty", "=", "1", "/", "(", "1", "+", "distance_to_next", ")", "# Score based on proximity to destination and the penalty for distance", "score", "=", "(", "1", "/", "(", "distance_to_destination", "+", "1", ")", ")", "*", "long_path_penalty", "# Adding randomness to encourage exploration", "exploration_factor", "=", "random", ".", "uniform", "(", "0.8", ",", "1.2", ")", "score", "*=", "exploration_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.975383097330099}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm enhances node selection by incorporating a weight factor based on the remaining unvisited nodes' distance and their mutual proximity.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "# Calculate total distance to remaining unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Calculate the number of unvisited nodes", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "direct_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Proximity score", "proximity_score", "=", "1", "/", "(", "direct_distance_to_destination", "+", "1", ")", "# Weight factor based on the remaining unvisited nodes' average distance", "remaining_weight", "=", "(", "total_distance", "-", "distance_to_next", ")", "/", "(", "max", "(", "num_unvisited", ",", "1", ")", "*", "(", "1", "+", "total_distance", ")", ")", "# New score integrating the weight factor", "score", "=", "proximity_score", "*", "(", "1", "-", "(", "distance_to_next", "/", "total_distance", ")", ")", "*", "remaining_weight", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.990099637535671}
{"code_tokens": ["# {This algorithm enhances the selection process by integrating a weighted distance factor and a heuristic that prioritizes nodes based on their average distance to unvisited nodes along with a penalty for distance traveled.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "weighted_distance", "=", "distance_to_next", "*", "(", "0.7", "+", "(", "len", "(", "unvisited_nodes", ")", "**", "-", "0.3", ")", ")", "# Weighted distance factor", "average_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "score", "=", "(", "1", "/", "(", "1", "+", "weighted_distance", ")", ")", "+", "(", "0.5", "*", "(", "1", "/", "(", "average_distance_to_remaining", "+", "0.1", ")", ")", ")", "# Heuristic scoring", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.143092188442038}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm integrates a scoring mechanism that prioritizes nodes based on their average distance to other unvisited nodes and their individual distance to the current node, while also considering an attractiveness score based on their proximity to the destination.}", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "# Average distance from the current node to all unvisited nodes", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Attractiveness factor: inversely proportional to the distance to the destination", "attractiveness_score", "=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1e-5", ")", "# Average distance from the node to all other unvisited nodes", "avg_distance_from_node", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "adj", "]", "for", "adj", "in", "unvisited_nodes", "if", "adj", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "# Combine metrics to compute a weighted score using distance to current, attractiveness, and average distance from node", "weighted_score", "=", "distance_to_node", "+", "avg_distance_from_node", "-", "(", "attractiveness_score", "*", "avg_distance_to_unvisited", ")", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.306667267438964}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm selects the next node based on a hybrid scoring system that rewards nodes not only for being closer to the current node but also for connecting to the destination node, while penalizing longer average distances to remaining unvisited nodes.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "score", "=", "(", "1", "/", "(", "1", "+", "distance_to_next", ")", ")", "+", "(", "1", "/", "(", "1", "+", "distance_to_destination", ")", ")", "-", "average_distance_to_unvisited", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.324400403716702}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "base_penalty", "=", "0.5", "*", "len", "(", "unvisited_nodes", ")", "# Base penalty for unvisited nodes", "total_penalty", "=", "len", "(", "unvisited_nodes", ")", "*", "0.1", "# Scalability with unvisited nodes", "randomness", "=", "random", ".", "uniform", "(", "-", "0.3", ",", "0.3", ")", "# Random factor to explore different paths", "weighted_score", "=", "distance", "+", "base_penalty", "+", "total_penalty", "+", "randomness", "# Combine metrics", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.375680912406636}
{"code_tokens": ["import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "# Calculate the average position of unvisited nodes", "avg_x", "=", "sum", "(", "node", "for", "node", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "avg_y", "=", "sum", "(", "node", "for", "node", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "# Temporal factor based on node index or timestamp (here simply using node index for illustrative purposes)", "decay_factor", "=", "0.5", "# Can be tuned; represents the degree of importance given to node age", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "direct_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Proximity score", "proximity_score", "=", "1", "/", "(", "distance_to_next", "+", "1", ")", "# Decay mechanism based on the idea that older unvisited nodes should be less favored", "age_score", "=", "math", ".", "exp", "(", "-", "decay_factor", "*", "distance_matrix", "[", "node", "]", "[", "current_node", "]", ")", "# Adjusting clustering score with respect to distance from average", "clustering_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "# New scoring mechanism with clustering and decay", "score", "=", "(", "proximity_score", "*", "age_score", "*", "(", "1", "/", "(", "1", "+", "direct_distance_to_destination", ")", ")", ")", "-", "clustering_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.437513488502693}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "mean_distance", "=", "sum", "(", "distances", ".", "values", "(", ")", ")", "/", "len", "(", "distances", ")", "score", "=", "{", "}", "for", "node", ",", "distance", "in", "distances", ".", "items", "(", ")", ":", "proximity_score", "=", "(", "mean_distance", "/", "(", "distance", "+", "1", ")", ")", "*", "0.5", "# Higher score for closer nodes", "unvisited_penalty", "=", "(", "len", "(", "unvisited_nodes", ")", "/", "len", "(", "distances", ")", ")", "*", "0.5", "# Less penalty for more unvisited nodes", "score", "[", "node", "]", "=", "proximity_score", "+", "unvisited_penalty", "+", "random", ".", "uniform", "(", "0", ",", "0.1", ")", "# Randomized for exploration", "next_node", "=", "max", "(", "score", ",", "key", "=", "score", ".", "get", ")", "# Select node with highest score", "return", "next_node"], "code_perf": 10.516953640203631}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "# Calculate immediate distances and remaining distances to destination", "immediate_distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "remaining_distances", "=", "{", "node", ":", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Average distance to unvisited nodes", "avg_distance", "=", "sum", "(", "immediate_distances", ".", "values", "(", ")", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "immediate_distances", "[", "node", "]", "# Penalty for being far from the average distance", "average_penalty", "=", "(", "distance", "-", "avg_distance", ")", "/", "(", "1", "+", "avg_distance", ")", "# Heuristic that encourages visiting less frequently visited nodes by applying a logarithmic factor", "visit_count_penalty", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "1", "+", "remaining_distances", "[", "node", "]", ")", "# Combine metrics to compute a weighted score", "weighted_score", "=", "distance", "+", "average_penalty", "+", "visit_count_penalty", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.758561327656416}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "increase_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "proximity", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "randomness_factor", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "# Random value between 0 and 1", "score", "=", "increase_cost", "+", "0.5", "*", "proximity", "+", "randomness_factor", "# Incorporating randomness", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.98730270215744}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm incorporates a hybrid scoring mechanism based on the inverse of the squared distance, a penalty for total distance to remaining nodes, and a bonus for direct distance to the destination.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_dest", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Hybrid scoring mechanism", "inverse_squared_distance", "=", "1", "/", "(", "distance_to_next", "**", "2", "+", "1", ")", "# Amplifying influence of proximity", "penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "*", "0.1", "# Penalty for overall distance to remaining nodes", "bonus", "=", "0.5", "*", "distance_to_dest", "# Bonus for closer proximity to final destination", "score", "=", "inverse_squared_distance", "+", "bonus", "-", "penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 11.44807838502673}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "randomness", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "# Introduce a random factor", "score", "=", "(", "average_distance_to_unvisited", "-", "distance_to_next", ")", "+", "randomness", "# Combination of factors", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 11.47710490958419}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Heuristic encouraging nodes closer to the destination", "heuristic_influence", "=", "1", "/", "(", "distance_to_destination", "+", "1", ")", "# Dynamic penalty for longer distances", "penalty", "=", "(", "distance_to_next", "**", "2", ")", "*", "0.1", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Score combines proximity to destination and penalty", "score", "=", "heuristic_influence", "-", "penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 11.628306531065363}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "proximity_scores", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "penalty_factor", "=", "1.2", "# Penalty for longer distances", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "proximity_scores", "[", "node", "]", "penalty", "=", "penalty_factor", "*", "distance", "# Apply penalty based on distance", "randomness", "=", "random", ".", "uniform", "(", "0", ",", "0.1", ")", "*", "(", "1", "/", "(", "proximity_score", "+", "1e-5", ")", ")", "# Random exploration factor", "weighted_score", "=", "penalty", "+", "randomness", "# Combine metrics", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 11.695039878738747}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm identifies the next node to visit based on a scoring system that combines the nearest unvisited node's distance, the total distance to all unvisited nodes, and a penalty term for visited nodes, creating a balance between exploration and exploitation.}", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "penalty_for_visited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "v", "]", "for", "v", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "v", "not", "in", "unvisited_nodes", ")", "score", "=", "distance_to_next", "+", "(", "total_distance_to_unvisited", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "+", "penalty_for_visited", "# Lower score preferred", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 11.840570099260535}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate the total distance to all unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Calculate the average distance", "average_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "# Select the next node with a weighted score combining distance and randomness", "scores", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "-", "average_distance", ")", "+", "random", ".", "uniform", "(", "0", ",", "1", ")", "for", "node", "in", "unvisited_nodes", "}", "# Choose the node with the lowest score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 12.240306525492695}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_cost", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "score", "=", "immediate_distance", "+", "future_cost", "*", "0.5", "+", "random", ".", "uniform", "(", "-", "0.5", ",", "0.5", ")", "# Adding randomness", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 12.545630680974632}
{"code_tokens": ["import", "numpy", "as", "np", "def", "calculate_centroid", "(", "cluster", ",", "distance_matrix", ")", ":", "if", "not", "cluster", ":", "return", "None", "cluster_coordinates", "=", "np", ".", "array", "(", "[", "distance_matrix", "[", "cluster_node", "]", "for", "cluster_node", "in", "cluster", "]", ")", "centroid", "=", "np", ".", "mean", "(", "cluster_coordinates", ",", "axis", "=", "0", ")", "closest_node", "=", "cluster", "[", "np", ".", "argmin", "(", "np", ".", "linalg", ".", "norm", "(", "cluster_coordinates", "-", "centroid", ",", "axis", "=", "1", ")", ")", "]", "return", "closest_node", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "clusters", "=", "[", "]", "cluster_size", "=", "2", "# Size of clusters to form", "unvisited_nodes", "=", "list", "(", "unvisited_nodes", ")", "for", "i", "in", "range", "(", "0", ",", "len", "(", "unvisited_nodes", ")", ",", "cluster_size", ")", ":", "clusters", ".", "append", "(", "unvisited_nodes", "[", "i", ":", "i", "+", "cluster_size", "]", ")", "nearest_cluster", "=", "None", "min_distance", "=", "float", "(", "'inf'", ")", "for", "cluster", "in", "clusters", ":", "centroid_node", "=", "calculate_centroid", "(", "cluster", ",", "distance_matrix", ")", "if", "centroid_node", "is", "not", "None", ":", "distance_to_centroid", "=", "distance_matrix", "[", "current_node", "]", "[", "centroid_node", "]", "if", "distance_to_centroid", "<", "min_distance", ":", "min_distance", "=", "distance_to_centroid", "nearest_cluster", "=", "cluster", "return", "nearest_cluster", "[", "0", "]", "if", "nearest_cluster", "else", "None"], "code_perf": 12.599394683640584}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "score_threshold", "=", "0.5", "# Score threshold for probabilistic selection", "scores", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "(", "1", "/", "distance_to_node", ")", "**", "2", "# Square of the inverse distance as a score", "scores", ".", "append", "(", "(", "node", ",", "score", ")", ")", "total_score", "=", "sum", "(", "score", "for", "_", ",", "score", "in", "scores", ")", "# Normalize scores and calculate probabilities", "probabilities", "=", "[", "(", "node", ",", "score", "/", "total_score", ")", "for", "node", ",", "score", "in", "scores", "]", "# Introduce randomness in selection based on probabilities", "r", "=", "random", ".", "random", "(", ")", "cumulative_probability", "=", "0.0", "for", "node", ",", "prob", "in", "probabilities", ":", "cumulative_probability", "+=", "prob", "if", "cumulative_probability", ">=", "r", ":", "return", "node", "return", "None", "# Fallback, shouldn't reach here"], "code_perf": 12.762494012767984}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Initialize pheromone levels and decay factor", "pheromone_levels", "=", "{", "node", ":", "1.0", "for", "node", "in", "unvisited_nodes", "}", "decay_factor", "=", "0.9", "# Calculate heuristic values based on distance", "heuristic_values", "=", "{", "node", ":", "1", "/", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Adjust pheromone levels dynamically based on completion heuristic", "total_length", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "completion_percentage", "=", "1", "-", "(", "total_length", "/", "(", "len", "(", "unvisited_nodes", ")", "*", "max", "(", "distance_matrix", ".", "flatten", "(", ")", ")", ")", ")", "# Compute probabilities incorporating pheromone decay and completion percentage", "probabilities", "=", "{", "}", "total_probability", "=", "0", "for", "node", "in", "unvisited_nodes", ":", "pheromone_effect", "=", "pheromone_levels", "[", "node", "]", "*", "(", "completion_percentage", "+", "0.1", ")", "# Avoid zero probability", "probabilities", "[", "node", "]", "=", "(", "pheromone_effect", "**", "1", ")", "*", "(", "heuristic_values", "[", "node", "]", "**", "2", ")", "total_probability", "+=", "probabilities", "[", "node", "]", "# Normalize probabilities", "for", "node", "in", "probabilities", ":", "probabilities", "[", "node", "]", "/=", "total_probability", "# Choose the next node based on computed probabilities", "rand", "=", "random", ".", "random", "(", ")", "cumulative_probability", "=", "0", "for", "node", ",", "prob", "in", "probabilities", ".", "items", "(", ")", ":", "cumulative_probability", "+=", "prob", "if", "rand", "<", "cumulative_probability", ":", "# Apply decay to pheromone levels after selection", "pheromone_levels", "[", "node", "]", "*=", "decay_factor", "return", "node", "return", "None"], "code_perf": 12.872874493533143}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "best_node", "=", "None", "best_tour_length", "=", "float", "(", "'inf'", ")", "# Function to calculate total tour distance", "def", "calculate_tour_length", "(", "tour", ")", ":", "total_distance", "=", "0", "for", "i", "in", "range", "(", "len", "(", "tour", ")", "-", "1", ")", ":", "total_distance", "+=", "distance_matrix", "[", "tour", "[", "i", "]", "]", "[", "tour", "[", "i", "+", "1", "]", "]", "total_distance", "+=", "distance_matrix", "[", "tour", "[", "-", "1", "]", "]", "[", "tour", "[", "0", "]", "]", "# Return to start", "return", "total_distance", "# Explore each unvisited node", "for", "node", "in", "unvisited_nodes", ":", "new_tour", "=", "[", "current_node", "]", "+", "list", "(", "unvisited_nodes", "-", "{", "node", "}", ")", "+", "[", "node", "]", "tour_length", "=", "calculate_tour_length", "(", "new_tour", ")", "if", "tour_length", "<", "best_tour_length", ":", "best_tour_length", "=", "tour_length", "best_node", "=", "node", "return", "best_node"], "code_perf": 12.931551189067505}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "pheromone_levels", "=", "{", "node", ":", "1.0", "for", "node", "in", "unvisited_nodes", "}", "# Initialize pheromone levels", "next_node", "=", "None", "# Calculate heuristic values based on inverse distance", "heuristic_values", "=", "{", "node", ":", "1", "/", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Compute probabilities for each unvisited node", "total_probability", "=", "0", "probabilities", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "probabilities", "[", "node", "]", "=", "(", "pheromone_levels", "[", "node", "]", "**", "1", ")", "*", "(", "heuristic_values", "[", "node", "]", "**", "2", ")", "total_probability", "+=", "probabilities", "[", "node", "]", "# Normalize probabilities", "for", "node", "in", "probabilities", ":", "probabilities", "[", "node", "]", "/=", "total_probability", "# Choose next node based on computed probabilities", "rand", "=", "random", ".", "random", "(", ")", "cumulative_probability", "=", "0", "for", "node", ",", "prob", "in", "probabilities", ".", "items", "(", ")", ":", "cumulative_probability", "+=", "prob", "if", "rand", "<", "cumulative_probability", ":", "next_node", "=", "node", "break", "return", "next_node"], "code_perf": 13.030614438214059}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Degree of connectivity: number of edges left to unvisited nodes", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "# Reward for proximity to destination", "proximity_score", "=", "1", "/", "(", "distance_to_destination", "+", "1", ")", "# Dynamic penalty for longer paths", "penalty_factor", "=", "1", "/", "(", "1", "+", "distance_to_next", ")", "# Combined score with risk-reward mechanism", "score", "=", "(", "proximity_score", "*", "connectivity_score", ")", "-", "(", "penalty_factor", "*", "distance_to_next", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 13.181442467294477}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "threshold", "=", "10", "# Maximum distance to consider for next node", "scores", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance_to_node", "<", "threshold", ":", "score", "=", "(", "1", "/", "distance_to_node", ")", "**", "2", "# Square of the inverse distance as a score", "scores", ".", "append", "(", "(", "node", ",", "score", ")", ")", "if", "not", "scores", ":", "# If no nodes within threshold, include all unvisited nodes and score them", "scores", "=", "[", "(", "node", ",", "(", "1", "/", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "**", "2", ")", "for", "node", "in", "unvisited_nodes", "]", "total_score", "=", "sum", "(", "score", "for", "_", ",", "score", "in", "scores", ")", "# Normalize scores and calculate probabilities", "probabilities", "=", "[", "(", "node", ",", "score", "/", "total_score", ")", "for", "node", ",", "score", "in", "scores", "]", "# Introduce randomness in selection based on probabilities", "r", "=", "random", ".", "random", "(", ")", "cumulative_probability", "=", "0.0", "for", "node", ",", "prob", "in", "probabilities", ":", "cumulative_probability", "+=", "prob", "if", "cumulative_probability", ">=", "r", ":", "return", "node", "return", "None", "# Fallback, shouldn't reach here"], "code_perf": 13.194628136092122}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "# Penalty for the total distance to the destination", "penalty_distance", "=", "distance_to_destination", "# Calculate cumulative distance to all remaining unvisited nodes", "future_distance_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "future_node", "]", "for", "future_node", "in", "unvisited_nodes", "if", "future_node", "!=", "node", ")", "# Combined score emphasizing immediate proximity and future cost", "score", "=", "distance_to_next", "+", "penalty_distance", "+", "(", "0.3", "*", "future_distance_score", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 13.403771075780126}
{"code_tokens": ["# {This algorithm uses a min-max scoring mechanism that considers the shortest distance to the next neighbor while penalizing nodes that have high connectivity to the unvisited nodes, promoting exploration of less connected nodes.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "# Total distance to unvisited nodes", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "distance_to_next", "+", "(", "0.3", "*", "connectivity_score", ")", "+", "(", "0.7", "*", "distance_to_destination", ")", "# Adjusting score based on connectivity", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 14.029413373574645}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate scores for each unvisited node", "scores", "=", "{", "}", "connectivity_penalty", "=", "{", "node", ":", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connection_factor", "=", "connectivity_penalty", "[", "node", "]", "euclidean_score", "=", "distance_to_node", "/", "(", "1", "+", "connection_factor", ")", "# Normalize by connectivity", "# Adding a penalty for how far the next node is to the final destination", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "scoring_factor", "=", "euclidean_score", "+", "distance_to_destination", "scores", "[", "node", "]", "=", "scoring_factor", "# Lower score is better", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 14.115707035213294}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm introduces a combination of distance metrics weighted by a heuristic factor based on upcoming unvisited nodes and their average distance to the destination.}", "next_node", "=", "None", "min_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "distance_to_next", "+", "(", "avg_distance_to_destination", "*", "len", "(", "unvisited_nodes", ")", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 14.115707035213294}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm employs a scoring mechanism that combines proximity to the destination with a penalty for revisiting nodes to promote exploration.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "penalty_for_revisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "*", "(", "1", "-", "(", "distance_to_destination", "/", "(", "distance_to_next", "+", "1", ")", ")", ")", "-", "(", "penalty_for_revisited", "/", "100", ")", "# Modify exploration based on unvisited closeness", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 14.231600391646523}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm introduces a scoring mechanism that not only considers the distance to the next node ", "# and the average distance to unvisited nodes but also incorporates a heuristic weight based on the number ", "# of unvisited nodes connected to the current node, incentivizing a path that encompasses clusters of nodes.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "# Calculate cluster connectivity based on distance to unvisited nodes", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "avg_distance_to_unvisited", ")", "# The score now includes a connectivity factor", "score", "=", "(", "avg_distance_to_unvisited", "-", "distance_to_next", ")", "+", "(", "connectivity_score", "*", "0.5", ")", "# Weight the connectivity", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 14.583738764088263}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {The algorithm employs a modified grouping strategy where distances are normalized, ", "# allowing the algorithm to weigh not only proximity but also the relative distance ", "# to the destination node when forming clusters and selecting the next node.}", "import", "numpy", "as", "np", "from", "collections", "import", "defaultdict", "# Normalize distances from the current node to all unvisited nodes", "distances", "=", "np", ".", "array", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "normalized_distances", "=", "distances", "/", "np", ".", "sum", "(", "distances", ")", "# Create clusters based on normalized distances", "clusters", "=", "defaultdict", "(", "list", ")", "for", "idx", ",", "node", "in", "enumerate", "(", "unvisited_nodes", ")", ":", "clusters", "[", "np", ".", "round", "(", "normalized_distances", "[", "idx", "]", ",", "2", ")", "]", ".", "append", "(", "node", ")", "# Select the cluster with the highest mean distance to the destination node", "target_distances", "=", "{", "cluster", ":", "np", ".", "mean", "(", "[", "distance_matrix", "[", "destination_node", "]", "[", "node", "]", "for", "node", "in", "nodes", "]", ")", "for", "cluster", ",", "nodes", "in", "clusters", ".", "items", "(", ")", "}", "farthest_cluster", "=", "max", "(", "target_distances", ",", "key", "=", "target_distances", ".", "get", ")", "# Select the closest node from the farthest cluster", "next_node", "=", "min", "(", "clusters", "[", "farthest_cluster", "]", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "return", "next_node"], "code_perf": 14.942636270561096}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "attractiveness_scores", "=", "{", "node", ":", "len", "(", "[", "other", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "avg_distance", "]", ")", "for", "node", "in", "unvisited_nodes", "}", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "attractiveness_bonus", "=", "attractiveness_scores", "[", "node", "]", "*", "0.1", "# Weight for attractiveness", "score", "=", "distance", "-", "attractiveness_bonus", "+", "random", ".", "uniform", "(", "-", "0.5", ",", "0.5", ")", "# Randomization", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 15.092031981220583}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_combined_score", "=", "float", "(", "'-inf'", ")", "# Calculate average distance to the next node", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate importance score based on connectivity to unvisited nodes", "importance_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "# Attractiveness factor to enhance efficient path selection", "attractiveness_factor", "=", "1", "/", "(", "1", "+", "distance_to_next", ")", "# Combined score: maximize importance while optimizing distances", "combined_score", "=", "(", "importance_score", "*", "attractiveness_factor", ")", "-", "(", "avg_distance_to_unvisited", "+", "0.5", "*", "distance_to_destination", ")", "if", "combined_score", ">", "max_combined_score", ":", "max_combined_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 15.143060062867413}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "visit_frequency", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "# Track visit counts", "for", "node", "in", "unvisited_nodes", ":", "visit_frequency", "[", "node", "]", "+=", "1", "# Increase frequency count for unvisited nodes", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "frequency_penalty", "=", "1", "/", "(", "visit_frequency", "[", "node", "]", "+", "1", ")", "# Reduce score for frequently visited nodes", "score", "=", "(", "distance", "*", "frequency_penalty", ")", "+", "random", ".", "uniform", "(", "0", ",", "1", ")", "# Adding randomness to the score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 15.22216954918948}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "total_distance_traveled", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "candidates", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "connectivity_factor", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "0", ")", "# Number of unvisited neighbors", "decay_factor", "=", "1", "/", "(", "1", "+", "total_distance_traveled", ")", "# Diminishing importance of distance traveled", "exploration_bonus", "=", "connectivity_factor", "/", "(", "1", "+", "distance_to_destination", ")", "# Higher for nodes with more connections", "score", "=", "(", "distance_to_node", "*", "decay_factor", "*", "0.5", ")", "+", "(", "distance_to_destination", "*", "0.3", ")", "-", "(", "exploration_bonus", "*", "0.2", ")", "candidates", ".", "append", "(", "(", "node", ",", "score", ")", ")", "next_node", "=", "min", "(", "candidates", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 15.38412015386094}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "sample_size", "=", "min", "(", "5", ",", "len", "(", "unvisited_nodes", ")", ")", "# Sample up to 5 unvisited nodes", "sampled_nodes", "=", "random", ".", "sample", "(", "unvisited_nodes", ",", "sample_size", ")", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "sampled_nodes", ":", "cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "cost", "<", "best_score", ":", "best_score", "=", "cost", "best_node", "=", "node", "return", "best_node"], "code_perf": 15.526103385516924}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "connectivity_score", "*", "0.4", ")", "-", "(", "distance_to_next", "*", "0.6", ")", "-", "(", "distance_to_destination", "*", "0.2", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 15.618442921349374}
{"code_tokens": ["# {The design idea focuses on balancing direct distance with a heuristic measure based on the inverse of unvisited node proximity, promoting nodes closer to the destination while considering their connectivity.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "# Direct distance to the node", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Heuristic for proximity to unvisited nodes (fewer connections = better)", "proximity_factor", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", ">", "0", "else", "float", "(", "'inf'", ")", ")", "for", "next", "in", "unvisited_nodes", ")", "# Distance to return to the destination", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# New scoring function taking proximity factor into consideration", "adjusted_score", "=", "(", "distance_to_node", "/", "(", "1", "+", "proximity_factor", ")", ")", "+", "distance_to_destination", "if", "adjusted_score", "<", "best_score", ":", "best_score", "=", "adjusted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 16.47235391033354}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "heuristic_factor", "=", "sum", "(", "distance_matrix", "[", "n", "]", "[", "destination_node", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "# Novel score calculation combining immediate distance, total unvisited distance, and heuristic factor", "score", "=", "(", "heuristic_factor", "*", "0.4", ")", "-", "(", "distance_to_next", "*", "0.4", ")", "-", "(", "total_distance_to_unvisited", "*", "0.2", ")", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 16.555495628879836}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# Randomly sample a subset of unvisited nodes", "sample_size", "=", "min", "(", "3", ",", "len", "(", "unvisited_nodes", ")", ")", "# Sample size of 3 or less if fewer nodes available", "sampled_nodes", "=", "random", ".", "sample", "(", "unvisited_nodes", ",", "sample_size", ")", "# Select the closest node from the sampled nodes", "next_node", "=", "min", "(", "sampled_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "return", "next_node"], "code_perf": 16.84916790502168}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "distance_to_next", "+", "(", "total_distance_remaining", "*", "0.5", ")", "# Weighted cost for remaining distances", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 16.945703872050153}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "# Calculate the direct distance to the node", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Evaluate the penalty based on the distances to remaining unvisited nodes", "distance_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "# Estimate the distance to return to the destination node", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Construct the score with a balance of proximity and penalty", "adjusted_score", "=", "(", "distance_to_node", "+", "distance_penalty", "*", "0.5", ")", "+", "distance_to_destination", "if", "adjusted_score", "<", "lowest_score", ":", "lowest_score", "=", "adjusted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 17.000453216879542}
{"code_tokens": ["import", "random", "import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "visit_frequency", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "# Track visit counts", "decay_factor", "=", "0.5", "# Can be tuned", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "visit_frequency", "[", "node", "]", "+=", "1", "# Increase frequency count for unvisited nodes", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "frequency_penalty", "=", "1", "/", "(", "visit_frequency", "[", "node", "]", "+", "1", ")", "# Reduce score for frequently visited nodes", "decay_score", "=", "math", ".", "exp", "(", "-", "decay_factor", "*", "visit_frequency", "[", "node", "]", ")", "score", "=", "(", "distance", "*", "frequency_penalty", "*", "decay_score", ")", "+", "random", ".", "uniform", "(", "0", ",", "1", ")", "# Adding randomness", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 17.198366744913375}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# Define a distance threshold to prioritize closer nodes", "distance_threshold", "=", "10", "# Adjust this threshold as needed", "# Filter unvisited nodes within the distance threshold", "close_nodes", "=", "[", "node", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<=", "distance_threshold", "]", "# If no close nodes are found, use all unvisited nodes", "nodes_to_consider", "=", "close_nodes", "if", "close_nodes", "else", "unvisited_nodes", "# Randomly sample a subset from the filtered nodes", "sample_size", "=", "min", "(", "3", ",", "len", "(", "nodes_to_consider", ")", ")", "# Sample size of 3 or less if fewer nodes available", "sampled_nodes", "=", "random", ".", "sample", "(", "nodes_to_consider", ",", "sample_size", ")", "# Select the closest node from the sampled nodes", "next_node", "=", "min", "(", "sampled_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "return", "next_node"], "code_perf": 17.222788173900682}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate connectivity score based on the reachable unvisited nodes with distance", "connectivity_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", ">", "0", ")", "# Combined score: prioritize proximity while enhancing connectivity", "score", "=", "connectivity_score", "/", "len", "(", "unvisited_nodes", ")", "-", "distance_to_next", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 17.499755192762866}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ",", "1", ")", "score", "=", "connectivity_score", "-", "distance_to_next", "# Higher scores for better connectivity and lower distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 17.854437372898275}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate distances to all unvisited nodes", "distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Find minimum distance", "min_distance", "=", "min", "(", "distances", ".", "values", "(", ")", ")", "# Calculate weights based on the distances and a hypothetical distance to destination", "weights", "=", "{", "node", ":", "(", "min_distance", "/", "dist", ")", "*", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "for", "node", ",", "dist", "in", "distances", ".", "items", "(", ")", "if", "dist", ">", "0", "}", "total_weight", "=", "sum", "(", "weights", ".", "values", "(", ")", ")", "if", "total_weight", "==", "0", ":", "return", "None", "# Normalize weights and select the next node based on randomized weighted choice", "random_value", "=", "random", ".", "uniform", "(", "0", ",", "total_weight", ")", "cumulative_weight", "=", "0", "for", "node", ",", "weight", "in", "weights", ".", "items", "(", ")", ":", "cumulative_weight", "+=", "weight", "if", "cumulative_weight", ">=", "random_value", ":", "return", "node", "return", "None"], "code_perf": 18.132410591377464}
{"code_tokens": ["import", "random", "import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "def", "calculate_total_distance", "(", "tour", ")", ":", "total_distance", "=", "0", "for", "i", "in", "range", "(", "len", "(", "tour", ")", "-", "1", ")", ":", "total_distance", "+=", "distance_matrix", "[", "tour", "[", "i", "]", "]", "[", "tour", "[", "i", "+", "1", "]", "]", "total_distance", "+=", "distance_matrix", "[", "tour", "[", "-", "1", "]", "]", "[", "tour", "[", "0", "]", "]", "# Return to start", "return", "total_distance", "current_tour", "=", "[", "current_node", "]", "+", "list", "(", "unvisited_nodes", ")", "current_distance", "=", "calculate_total_distance", "(", "current_tour", ")", "best_tour", "=", "current_tour", "[", ":", "]", "best_distance", "=", "current_distance", "temperature", "=", "1.0", "cooling_rate", "=", "0.95", "min_temperature", "=", "0.001", "iterations", "=", "100", "for", "_", "in", "range", "(", "iterations", ")", ":", "if", "temperature", "<", "min_temperature", ":", "break", "# Select a neighborhood and swap nodes", "new_tour", "=", "best_tour", "[", ":", "]", "if", "len", "(", "unvisited_nodes", ")", ">", "2", ":", "idx1", ",", "idx2", "=", "random", ".", "sample", "(", "range", "(", "1", ",", "len", "(", "new_tour", ")", ")", ",", "2", ")", "new_tour", "[", "idx1", "]", ",", "new_tour", "[", "idx2", "]", "=", "new_tour", "[", "idx2", "]", ",", "new_tour", "[", "idx1", "]", "new_distance", "=", "calculate_total_distance", "(", "new_tour", ")", "# Acceptance criteria", "if", "new_distance", "<", "current_distance", ":", "current_tour", "=", "new_tour", "current_distance", "=", "new_distance", "if", "new_distance", "<", "best_distance", ":", "best_tour", "=", "new_tour", "best_distance", "=", "new_distance", "else", ":", "acceptance_prob", "=", "math", ".", "exp", "(", "(", "current_distance", "-", "new_distance", ")", "/", "temperature", ")", "if", "random", ".", "random", "(", ")", "<", "acceptance_prob", ":", "current_tour", "=", "new_tour", "current_distance", "=", "new_distance", "# Adjust temperature based on stagnation", "if", "best_distance", "==", "current_distance", ":", "temperature", "*=", "cooling_rate", "# Cool down", "else", ":", "temperature", "=", "min", "(", "temperature", "/", "cooling_rate", ",", "1.0", ")", "# Reset if improved", "return", "best_tour", "[", "1", "]", "# Return the first unvisited node in the best tour"], "code_perf": 18.28059315502201}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "weights", "=", "[", "]", "total_weight", "=", "0", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "weight", "=", "1", "/", "distance", "if", "distance", ">", "0", "else", "float", "(", "'inf'", ")", "weights", ".", "append", "(", "(", "node", ",", "weight", ")", ")", "total_weight", "+=", "weight", "if", "total_weight", "==", "0", ":", "return", "None", "random_weight", "=", "random", ".", "uniform", "(", "0", ",", "total_weight", ")", "cumulative_weight", "=", "0", "for", "node", ",", "weight", "in", "weights", ":", "cumulative_weight", "+=", "weight", "if", "cumulative_weight", ">=", "random_weight", ":", "return", "node", "return", "None"], "code_perf": 19.03246408746135}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate the distances to unvisited nodes", "distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Find the minimum distance", "min_distance", "=", "min", "(", "distances", ".", "values", "(", ")", ")", "# Calculate probabilities based on inverse distances", "total_weight", "=", "sum", "(", "1", "/", "(", "distance", "+", "1e-6", ")", "for", "distance", "in", "distances", ".", "values", "(", ")", ")", "# Avoid division by zero", "probabilities", "=", "{", "node", ":", "(", "1", "/", "(", "distance", "+", "1e-6", ")", ")", "/", "total_weight", "for", "node", ",", "distance", "in", "distances", ".", "items", "(", ")", "}", "# Select the next node based on the calculated probabilities", "next_node", "=", "random", ".", "choices", "(", "list", "(", "probabilities", ".", "keys", "(", ")", ")", ",", "weights", "=", "list", "(", "probabilities", ".", "values", "(", ")", ")", ")", "[", "0", "]", "return", "next_node"], "code_perf": 19.043913331182765}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "distances", "=", "[", "(", "node", ",", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "for", "node", "in", "unvisited_nodes", "]", "# Calculate probabilities based on inverted distances", "total_probability", "=", "sum", "(", "1", "/", "distance", "for", "node", ",", "distance", "in", "distances", ")", "probabilities", "=", "[", "(", "node", ",", "(", "1", "/", "distance", ")", "/", "total_probability", ")", "for", "node", ",", "distance", "in", "distances", "]", "# Choose the next node based on weighted random selection", "random_choice", "=", "random", ".", "random", "(", ")", "cumulative_probability", "=", "0.0", "for", "node", ",", "probability", "in", "probabilities", ":", "cumulative_probability", "+=", "probability", "if", "cumulative_probability", ">=", "random_choice", ":", "return", "node", "return", "unvisited_nodes", "[", "0", "]", "# Fallback to first unvisited node if no selection is made"], "code_perf": 19.094920292439113}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Parameters for exploration", "total_distance_inverse", "=", "sum", "(", "1", "/", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ">", "0", ")", "# Select the next node based on adjusted probabilities", "probabilities", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ">", "0", ":", "probabilities", "[", "node", "]", "=", "(", "1", "/", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "/", "total_distance_inverse", "# Choose the next node based on the computed probabilities", "next_node", "=", "random", ".", "choices", "(", "list", "(", "probabilities", ".", "keys", "(", ")", ")", ",", "weights", "=", "probabilities", ".", "values", "(", ")", ")", "[", "0", "]", "return", "next_node"], "code_perf": 19.106256836729784}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "weights", "=", "[", "]", "total_weight", "=", "0", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "weight", "=", "(", "1", "/", "distance_to_node", ")", "*", "(", "1", "/", "(", "distance_to_destination", "+", "1", ")", ")", "if", "distance_to_node", ">", "0", "else", "float", "(", "'inf'", ")", "weights", ".", "append", "(", "(", "node", ",", "weight", ")", ")", "total_weight", "+=", "weight", "if", "total_weight", "==", "0", ":", "return", "None", "random_weight", "=", "random", ".", "uniform", "(", "0", ",", "total_weight", ")", "cumulative_weight", "=", "0", "for", "node", ",", "weight", "in", "weights", ":", "cumulative_weight", "+=", "weight", "if", "cumulative_weight", ">=", "random_weight", ":", "return", "node", "return", "None"], "code_perf": 19.193909561855627}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "total_weight", "=", "0", "weights", "=", "{", "}", "# Calculate weights based on inverse distance", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "weight", "=", "1", "/", "(", "distance_to_node", "+", "1e-6", ")", "# Adding a small constant to avoid division by zero", "weights", "[", "node", "]", "=", "weight", "total_weight", "+=", "weight", "# Normalize the weights to sum to 1", "for", "node", "in", "weights", ":", "weights", "[", "node", "]", "/=", "total_weight", "# Generate a random number and select the next node based on weight", "rand_value", "=", "random", ".", "random", "(", ")", "cumulative_probability", "=", "0.0", "for", "node", ",", "prob", "in", "weights", ".", "items", "(", ")", ":", "cumulative_probability", "+=", "prob", "if", "rand_value", "<", "cumulative_probability", ":", "return", "node", "return", "None", "# Fallback if no selection was made, though this should not occur"], "code_perf": 19.341591549238913}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate average distance to unvisited nodes", "total_distance", "=", "0", "for", "node", "in", "unvisited_nodes", ":", "total_distance", "+=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "# Introduce a weight factor for the desirability of nodes closer to the destination", "desirability_weight", "=", "0.6", "# Weight towards the potential path to the destination", "# Calculate scores for each unvisited node", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "average_distance", "*", "(", "1", "+", "random", ".", "uniform", "(", "0", ",", "0.5", ")", ")", ")", "+", "(", "desirability_weight", "*", "distance_to_destination", ")", "scores", "[", "node", "]", "=", "score", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 19.609861443145043}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "# Constants for weighting", "alpha", "=", "0.5", "# Weight for direct distance score", "beta", "=", "0.3", "# Weight for cluster score", "gamma", "=", "0.2", "# Weight for sequence penalty", "# Calculate total distances to the remaining nodes", "total_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Cluster score with additional emphasis on node diversity based on distance to other unvisited nodes", "cluster_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "+", "1e-6", ")", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "# Sequence penalty: penalizing based on the distance of recently visited nodes", "sequence_penalty", "=", "sum", "(", "distance_matrix", "[", "previous_node", "]", "[", "node", "]", "for", "previous_node", "in", "unvisited_nodes", "if", "previous_node", "in", "unvisited_nodes", ")", "# Combined score incorporating cluster potential and diverse penalties", "combined_score", "=", "(", "cluster_score", "*", "beta", "/", "total_distance_remaining", ")", "-", "(", "distance_to_destination", "*", "gamma", ")", "-", "(", "distance_to_next", "*", "alpha", ")", "-", "(", "sequence_penalty", "*", "0.1", ")", "if", "combined_score", ">", "best_score", ":", "best_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 19.755196089866416}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "decay_factor", "=", "0.9", "# Factor to reduce the importance of previous distances", "# Calculate total remaining distance", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Calculate an adjusted connectivity score", "connectivity_score", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "neighbour", "]", "for", "neighbour", "in", "unvisited_nodes", "if", "neighbour", "!=", "node", ")", "for", "node", "in", "unvisited_nodes", "}", "# Iterate through unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate a future cost based on neighboring distances", "future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "neighbour", "]", "for", "neighbour", "in", "unvisited_nodes", "if", "neighbour", "!=", "node", ")", "*", "decay_factor", "# Compute weighted score", "weighted_score", "=", "distance", "+", "(", "total_remaining_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", ")", "+", "future_cost", "-", "(", "connectivity_score", "[", "node", "]", "*", "0.1", ")", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 19.845679589015397}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# This algorithm incorporates a hybrid approach that balances both minimum distance and maximum proximity to previously visited nodes,", "# along with a penalty for visiting nodes that lead to long traversal times to unvisited nodes.", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_to_previous", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "prev", "]", "for", "prev", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "prev", "<", "current_node", ")", "penalty", "=", "len", "(", "unvisited_nodes", ")", "*", "(", "minimum_distance", ":=", "min", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", ")", "if", "unvisited_nodes", "else", "0", "score", "=", "distance_to_next", "+", "proximity_to_previous", "+", "penalty", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 19.918178980837062}
{"code_tokens": ["import", "random", "import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Initial parameters", "current_best_distance", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "temperature", "=", "1.0", "cooling_rate", "=", "0.99", "# Set a threshold for stopping the selection", "for", "i", "in", "range", "(", "100", ")", ":", "# Number of iterations for exploration", "potential_node", "=", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "# Randomly choose a node", "# Calculate the distance to the chosen node", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "potential_node", "]", "# Accept the node based on the current temperature", "if", "distance_to_node", "<", "current_best_distance", "or", "random", ".", "random", "(", ")", "<", "math", ".", "exp", "(", "-", "(", "distance_to_node", "-", "current_best_distance", ")", "/", "temperature", ")", ":", "current_best_distance", "=", "distance_to_node", "next_node", "=", "potential_node", "# Cool down the temperature", "temperature", "*=", "cooling_rate", "return", "next_node"], "code_perf": 19.973517491768202}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate the connectivity score (number of connections to other unvisited nodes)", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "# Calculate average distance to remaining unvisited nodes", "avg_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "# Introduce a backtracking penalty based on distance from the destination", "backtracking_penalty", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "(", "1", "+", "distance_to_next", ")", "# Score calculation combining distance, connectivity, and penalties", "score", "=", "(", "connectivity_score", "*", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "*", "(", "avg_distance_to_remaining", "-", "backtracking_penalty", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 20.130506198725378}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_penalty", "=", "float", "(", "'inf'", ")", "max_penalty_factor", "=", "0.3", "+", "(", "0.7", "*", "len", "(", "unvisited_nodes", ")", "/", "len", "(", "distance_matrix", ")", ")", "if", "unvisited_nodes", "else", "0.3", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "tour_penalty", "=", "(", "total_distance_to_unvisited", "*", "max_penalty_factor", ")", "+", "distance_to_next", "# Introducing a random factor to add variability", "random_factor", "=", "random", ".", "uniform", "(", "0.8", ",", "1.2", ")", "# Random multiplier between 0.8 and 1.2", "effective_penalty", "=", "tour_penalty", "*", "random_factor", "if", "effective_penalty", "<", "min_penalty", ":", "min_penalty", "=", "effective_penalty", "next_node", "=", "node", "return", "next_node"], "code_perf": 20.533406664314203}
{"code_tokens": ["# {This algorithm integrates a cost-adjusted heuristic that balances distance to the node, a weighted desirability factor based on neighboring nodes' proximity to the target, and a penalty mechanism for previously visited nodes to enhance exploration of less connected areas.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate the proximity weigh based on distance to destination", "proximity_weight", "=", "1", "/", "(", "distance_to_next", "+", "1", ")", "# Avoid division by zero", "# Desired connectivity influenced by the closeness of neighbors to the destination", "desirability_factor", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "+", "1", ")", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "# Apply a penalty based on distance to previous visitation (not implemented in this scope)", "penalty", "=", "-", "1", "if", "current_node", "in", "unvisited_nodes", "else", "0", "score", "=", "proximity_weight", "+", "desirability_factor", "+", "penalty", "# Higher score indicates a better choice", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 20.780454611905547}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm introduces a hybrid approach using a balance of distance minimization, an exponential decay function for penalty based on proximity to other unvisited nodes, and a heuristic inspired by the nearest neighbor approach to promote closer nodes.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Exponential decay penalty for proximity to other unvisited nodes", "clustering_penalty", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "+", "1", ")", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Weighting factors with modified scaling", "weight_distance", "=", "0.4", "weight_clustering", "=", "0.4", "weight_destination", "=", "0.2", "# Composite score calculation using exponential decay for clustering penalty", "score", "=", "(", "weight_distance", "/", "(", "distance_to_next", "+", "1", ")", ")", "+", "(", "weight_clustering", "*", "clustering_penalty", ")", "+", "(", "weight_destination", "/", "(", "distance_to_destination", "+", "1", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 21.12793150014802}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "total_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "# Penalty for remaining nodes", "score", "=", "distance_to_next", "+", "total_penalty", "-", "total_distance_to_destination", "# Balance immediate and overall route", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 21.229532185064613}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "iterations", "=", "100", "best_node", "=", "None", "best_distance", "=", "float", "(", "'inf'", ")", "for", "_", "in", "range", "(", "iterations", ")", ":", "# Randomly select a node from unvisited nodes", "candidate_node", "=", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "# Calculate the total distance through this candidate node", "total_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate_node", "]", "# Estimate a quick evaluation of upcoming unvisited node distances", "for", "next_node", "in", "unvisited_nodes", "-", "{", "candidate_node", "}", ":", "total_distance", "+=", "distance_matrix", "[", "candidate_node", "]", "[", "next_node", "]", "# Update best node if this is better", "if", "total_distance", "<", "best_distance", ":", "best_distance", "=", "total_distance", "best_node", "=", "candidate_node", "return", "best_node"], "code_perf": 21.491704208344608}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate distances to all unvisited nodes", "distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Calculate connectivity score for each candidate node", "connectivity_scores", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "for", "node", "in", "unvisited_nodes", "}", "# Calculate a weighted score: lower distance and higher connectivity are better", "scores", "=", "{", "node", ":", "(", "distances", "[", "node", "]", "+", "connectivity_scores", "[", "node", "]", ")", "for", "node", "in", "unvisited_nodes", "}", "# Find the minimum weighted score", "min_score", "=", "min", "(", "scores", ".", "values", "(", ")", ")", "# Filter candidates with minimum score", "candidates", "=", "[", "node", "for", "node", ",", "score", "in", "scores", ".", "items", "(", ")", "if", "score", "==", "min_score", "]", "# Introduce weighted randomness to select among the best candidates", "if", "candidates", ":", "total_weight", "=", "sum", "(", "1", "/", "distances", "[", "node", "]", "for", "node", "in", "candidates", ")", "# Inverse of distance as weight", "weights", "=", "[", "(", "1", "/", "distances", "[", "node", "]", ")", "/", "total_weight", "for", "node", "in", "candidates", "]", "# Normalize weights", "next_node", "=", "random", ".", "choices", "(", "candidates", ",", "weights", "=", "weights", ")", "[", "0", "]", "# Select based on weight", "else", ":", "next_node", "=", "None", "return", "next_node"], "code_perf": 21.51502557645197}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate distances to all unvisited nodes", "distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Calculate heuristic score based on total connected distance to other unvisited nodes", "heuristic_scores", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "for", "node", "in", "unvisited_nodes", "}", "# Calculate combined scores: lower distance and lower heuristic score are better", "scores", "=", "{", "node", ":", "(", "distances", "[", "node", "]", "+", "heuristic_scores", "[", "node", "]", ")", "for", "node", "in", "unvisited_nodes", "}", "# Find the minimum weighted score", "min_score", "=", "min", "(", "scores", ".", "values", "(", ")", ")", "# Filter candidates with minimum score", "candidates", "=", "[", "node", "for", "node", ",", "score", "in", "scores", ".", "items", "(", ")", "if", "score", "==", "min_score", "]", "# Introduce weighted randomness to select among the best candidates", "if", "candidates", ":", "total_weight", "=", "sum", "(", "1", "/", "(", "distances", "[", "node", "]", "+", "1e-6", ")", "for", "node", "in", "candidates", ")", "# Inverse of distance as weight", "weights", "=", "[", "(", "1", "/", "(", "distances", "[", "node", "]", "+", "1e-6", ")", ")", "/", "total_weight", "for", "node", "in", "candidates", "]", "# Normalize weights", "next_node", "=", "random", ".", "choices", "(", "candidates", ",", "weights", "=", "weights", ")", "[", "0", "]", "# Select based on weight", "else", ":", "next_node", "=", "None", "return", "next_node"], "code_perf": 21.51502557645197}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Step 1: Sort unvisited nodes based on their distance from the current node", "sorted_nodes", "=", "sorted", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "# Step 2: Estimate total distance for each sorted node considering future paths", "best_node", "=", "None", "lowest_estimated_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "sorted_nodes", ":", "# Simulate next step by calculating the distance to all remaining unvisited nodes", "total_future_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", "if", "next_node", "!=", "node", ")", "# Total estimated distance when choosing this node next", "estimated_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "total_future_distance", "if", "estimated_distance", "<", "lowest_estimated_distance", ":", "lowest_estimated_distance", "=", "estimated_distance", "best_node", "=", "node", "return", "best_node"], "code_perf": 21.51502557645197}
{"code_tokens": ["# {This algorithm uses a scoring system that factors in both the total distance traveled to all unvisited nodes and the nearest neighbor distance, prioritizing nodes that minimize these combined distances.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "nearest_neighbor_distance", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "score", "=", "(", "total_distance_to_unvisited", "+", "nearest_neighbor_distance", "+", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "# Lower score is better", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 21.51502557645197}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_node", "=", "None", "min_future_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Estimate future cost by summing distances to remaining unvisited nodes", "future_cost", "=", "direct_distance", "+", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", "if", "next_node", "!=", "node", ")", "# Find the node that minimizes the future cost", "if", "future_cost", "<", "min_future_cost", ":", "min_future_cost", "=", "future_cost", "best_node", "=", "node", "return", "best_node"], "code_perf": 21.51502557645197}
{"code_tokens": ["import", "random", "import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "def", "calculate_total_distance", "(", "tour", ")", ":", "total_distance", "=", "0", "for", "i", "in", "range", "(", "len", "(", "tour", ")", "-", "1", ")", ":", "total_distance", "+=", "distance_matrix", "[", "tour", "[", "i", "]", "]", "[", "tour", "[", "i", "+", "1", "]", "]", "total_distance", "+=", "distance_matrix", "[", "tour", "[", "-", "1", "]", "]", "[", "tour", "[", "0", "]", "]", "# Return to start", "return", "total_distance", "current_tour", "=", "[", "current_node", "]", "+", "list", "(", "unvisited_nodes", ")", "current_distance", "=", "calculate_total_distance", "(", "current_tour", ")", "temperature", "=", "1.0", "cooling_rate", "=", "0.99", "iterations", "=", "100", "for", "_", "in", "range", "(", "iterations", ")", ":", "# Swap two random unvisited nodes to generate a new solution", "new_tour", "=", "current_tour", "[", ":", "]", "if", "len", "(", "unvisited_nodes", ")", ">", "2", ":", "idx1", ",", "idx2", "=", "random", ".", "sample", "(", "range", "(", "1", ",", "len", "(", "new_tour", ")", ")", ",", "2", ")", "new_tour", "[", "idx1", "]", ",", "new_tour", "[", "idx2", "]", "=", "new_tour", "[", "idx2", "]", ",", "new_tour", "[", "idx1", "]", "new_distance", "=", "calculate_total_distance", "(", "new_tour", ")", "# Acceptance criteria", "if", "new_distance", "<", "current_distance", ":", "current_tour", "=", "new_tour", "current_distance", "=", "new_distance", "else", ":", "acceptance_prob", "=", "math", ".", "exp", "(", "(", "current_distance", "-", "new_distance", ")", "/", "temperature", ")", "if", "random", ".", "random", "(", ")", "<", "acceptance_prob", ":", "current_tour", "=", "new_tour", "current_distance", "=", "new_distance", "# Cool down", "temperature", "*=", "cooling_rate", "return", "current_tour", "[", "1", "]", "# Return the first unvisited node in the final tour"], "code_perf": 21.771147688102566}
{"code_tokens": ["# {This algorithm aims to integrate a combination of nearest neighbor heuristic and edge weight minimization by calculating the total cost for each potential next move, factoring in both direct distance and the cumulative cost of reaching subsequent unvisited nodes.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_cost_to_end", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Compute overall cost as a combination of direct distance and future costs", "overall_cost", "=", "distance_to_next", "+", "total_cost_to_end", "if", "overall_cost", "<", "min_cost", ":", "min_cost", "=", "overall_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 21.813812563750965}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Define a scoring function", "def", "score_node", "(", "node", ")", ":", "# Calculate distance to current node", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Count connections to other unvisited nodes", "connections_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "distance_matrix", "[", "current_node", "]", "[", "n", "]", ")", "return", "distance_score", "+", "connections_score", "# Lower is better", "# Select the node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "score_node", ")", "return", "next_node"], "code_perf": 22.289066434732277}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "dynamic_penalty", "=", "(", "len", "(", "unvisited_nodes", ")", "**", "0.5", ")", "*", "total_distance_to_remaining", "# Dynamic penalty based on unvisited count", "score", "=", "distance_to_next", "+", "(", "0.3", "*", "dynamic_penalty", ")", "# Introduce weight for direct distance and penalty", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 22.517180679652732}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "total_weight", "=", "0", "probabilities", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Weight calculation: closer nodes to current and destination should have higher probability", "weight", "=", "1", "/", "(", "distance_to_node", "+", "distance_to_destination", ")", "probabilities", "[", "node", "]", "=", "weight", "total_weight", "+=", "weight", "# Normalize probabilities", "normalized_probabilities", "=", "{", "node", ":", "weight", "/", "total_weight", "for", "node", ",", "weight", "in", "probabilities", ".", "items", "(", ")", "}", "# Select the next node based on weighted probabilities", "random_value", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "cumulative_probability", "=", "0", "for", "node", ",", "prob", "in", "normalized_probabilities", ".", "items", "(", ")", ":", "cumulative_probability", "+=", "prob", "if", "random_value", "<=", "cumulative_probability", ":", "return", "node", "return", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "# Fallback in case of rounding errors"], "code_perf": 23.156491783807546}
{"code_tokens": ["import", "random", "import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ",", "temperature", "=", "1.0", ",", "cooling_rate", "=", "0.99", ")", ":", "next_node", "=", "None", "best_cost", "=", "float", "(", "'inf'", ")", "# Explore the unvisited nodes based on current temperature", "for", "node", "in", "unvisited_nodes", ":", "cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Decide whether to accept this node based on cost and temperature", "if", "cost", "<", "best_cost", "or", "random", ".", "uniform", "(", "0", ",", "1", ")", "<", "math", ".", "exp", "(", "(", "best_cost", "-", "cost", ")", "/", "temperature", ")", ":", "best_cost", "=", "cost", "next_node", "=", "node", "# Cool down the temperature", "temperature", "*=", "cooling_rate", "return", "next_node"], "code_perf": 23.428504399401334}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_min_distance", "=", "-", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "min_distance_to_visited", "=", "float", "(", "'inf'", ")", "for", "visited_node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", ":", "if", "visited_node", "!=", "current_node", "and", "visited_node", "not", "in", "unvisited_nodes", ":", "min_distance_to_visited", "=", "min", "(", "min_distance_to_visited", ",", "distance_matrix", "[", "node", "]", "[", "visited_node", "]", ")", "if", "min_distance_to_visited", ">", "max_min_distance", ":", "max_min_distance", "=", "min_distance_to_visited", "next_node", "=", "node", "return", "next_node"], "code_perf": 23.64492312854192}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "2", "*", "distance_to_next", ")", "# Encourage nodes with more neighbors", "score", "=", "(", "connectivity_score", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", ")", "-", "distance_to_next", "# Balance between connectivity and distance", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 23.76803294874903}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "total_distance", "=", "0", "heuristic_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance", "+=", "distance", "heuristic_scores", "[", "node", "]", "=", "1", "/", "(", "distance", "+", "1", ")", "# Basic heuristic inversely proportional to distance", "# Normalize heuristic scores", "for", "node", "in", "heuristic_scores", ":", "heuristic_scores", "[", "node", "]", "/=", "total_distance", "# Choose next node probabilistically based on heuristic scores", "next_node", "=", "random", ".", "choices", "(", "population", "=", "list", "(", "unvisited_nodes", ")", ",", "weights", "=", "list", "(", "heuristic_scores", ".", "values", "(", ")", ")", ",", "k", "=", "1", ")", "[", "0", "]", "return", "next_node"], "code_perf": 24.231330273470604}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate total distance and average distance to unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "# Create a list of weighted nodes for selection", "weighted_nodes", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "weight", "=", "1", "/", "(", "distance", "+", "1", ")", "# Avoid division by zero and prioritize closer nodes", "weighted_nodes", ".", "append", "(", "(", "node", ",", "weight", ")", ")", "# Normalize weights", "total_weight", "=", "sum", "(", "weight", "for", "_", ",", "weight", "in", "weighted_nodes", ")", "normalized_weights", "=", "[", "(", "node", ",", "weight", "/", "total_weight", ")", "for", "node", ",", "weight", "in", "weighted_nodes", "]", "# Select the next node based on cumulative probability", "rand_value", "=", "random", ".", "random", "(", ")", "cumulative_probability", "=", "0.0", "for", "node", ",", "weight", "in", "normalized_weights", ":", "cumulative_probability", "+=", "weight", "if", "rand_value", "<=", "cumulative_probability", ":", "return", "node", "return", "unvisited_nodes", "[", "0", "]", "# Fallback in case of rounding errors"], "code_perf": 24.65478103524442}
{"code_tokens": ["import", "math", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "weights", "=", "[", "]", "total_weight", "=", "0", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "centralized_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "penalty", "=", "(", "1", "/", "(", "distance_to_node", "+", "1", ")", ")", "*", "(", "1", "/", "(", "centralized_distance", "+", "1", ")", ")", "weight", "=", "penalty", "*", "random", ".", "uniform", "(", "1", ",", "2", ")", "# Incorporating randomness to avoid deterministic choices", "weights", ".", "append", "(", "(", "node", ",", "weight", ")", ")", "total_weight", "+=", "weight", "if", "total_weight", "==", "0", ":", "return", "None", "random_weight", "=", "random", ".", "uniform", "(", "0", ",", "total_weight", ")", "cumulative_weight", "=", "0", "for", "node", ",", "weight", "in", "weights", ":", "cumulative_weight", "+=", "weight", "if", "cumulative_weight", ">=", "random_weight", ":", "return", "node", "return", "None"], "code_perf": 24.91924087953767}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate total distance and average distance to unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "# Create a list of weighted nodes for selection based on both distance and a random factor", "weighted_nodes", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "weight", "=", "(", "1", "/", "(", "distance", "+", "1", ")", ")", "+", "(", "1", "/", "(", "avg_distance", "+", "1", ")", ")", "# Balance distance and average distance", "weighted_nodes", ".", "append", "(", "(", "node", ",", "weight", ")", ")", "# Normalize weights", "total_weight", "=", "sum", "(", "weight", "for", "_", ",", "weight", "in", "weighted_nodes", ")", "normalized_weights", "=", "[", "(", "node", ",", "weight", "/", "total_weight", ")", "for", "node", ",", "weight", "in", "weighted_nodes", "]", "# Select the next node based on a random draw influenced by the weights", "rand_value", "=", "random", ".", "random", "(", ")", "cumulative_probability", "=", "0.0", "for", "node", ",", "weight", "in", "normalized_weights", ":", "cumulative_probability", "+=", "weight", "if", "rand_value", "<=", "cumulative_probability", ":", "return", "node", "return", "unvisited_nodes", "[", "0", "]", "# Fallback in case of rounding errors"], "code_perf": 25.033310464940655}
{"code_tokens": ["import", "random", "import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate the total distance from the starting node to current node", "total_distance", "=", "sum", "(", "distance_matrix", "[", "i", "]", "[", "j", "]", "for", "i", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "for", "j", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "i", "!=", "j", ")", "# Calculate a score for each unvisited node", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Use an exponential decay function to weigh the distance", "score", "=", "distance_to_node", "+", "(", "total_distance", "/", "(", "1", "+", "distance_to_destination", ")", ")", "scores", "[", "node", "]", "=", "score", "*", "math", ".", "exp", "(", "-", "0.1", "*", "distance_to_node", ")", "# Apply decay based on distance to node", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 25.265730791907608}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "def", "heuristic_score", "(", "node", ")", ":", "# Heuristic score: combines distance to destination with penalties for visited nodes", "distance_to_dest", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "penalty", "=", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1", ")", "if", "node", "in", "unvisited_nodes", "else", "0", "return", "distance_to_dest", "+", "penalty", "scores", "=", "{", "node", ":", "heuristic_score", "(", "node", ")", "for", "node", "in", "unvisited_nodes", "}", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 25.841994474117996}
{"code_tokens": ["import", "random", "import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "iterations", "=", "100", "best_node", "=", "None", "best_distance", "=", "float", "(", "'inf'", ")", "for", "_", "in", "range", "(", "iterations", ")", ":", "candidate_node", "=", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "total_distance", "=", "0", "# Calculate the distance from current to candidate", "total_distance", "+=", "distance_matrix", "[", "current_node", "]", "[", "candidate_node", "]", "# Include distances to other unvisited nodes", "remaining_nodes", "=", "unvisited_nodes", "-", "{", "candidate_node", "}", "for", "next_node", "in", "remaining_nodes", ":", "total_distance", "+=", "distance_matrix", "[", "candidate_node", "]", "[", "next_node", "]", "# Calculate cooling factor for accepting worse solutions", "cooling_factor", "=", "math", ".", "exp", "(", "-", "_", "/", "iterations", ")", "# Gradually decrease acceptance of worse solutions", "acceptance_threshold", "=", "best_distance", "*", "cooling_factor", "# Update best node if this candidate is better or meets acceptance threshold", "if", "total_distance", "<", "best_distance", "or", "(", "total_distance", ">", "best_distance", "and", "random", ".", "random", "(", ")", "<", "acceptance_threshold", ")", ":", "best_distance", "=", "total_distance", "best_node", "=", "candidate_node", "return", "best_node"], "code_perf": 25.855070920921968}
{"code_tokens": ["import", "random", "import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "iterations", "=", "100", "best_node", "=", "None", "best_distance", "=", "float", "(", "'inf'", ")", "# Temperature parameter for simulated annealing", "temperature", "=", "1000.0", "cooling_rate", "=", "0.99", "for", "_", "in", "range", "(", "iterations", ")", ":", "candidate_node", "=", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "total_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate_node", "]", "# Calculate estimated distance to remaining unvisited nodes", "temp_distance", "=", "total_distance", "for", "next_node", "in", "unvisited_nodes", "-", "{", "candidate_node", "}", ":", "temp_distance", "+=", "distance_matrix", "[", "candidate_node", "]", "[", "next_node", "]", "# Calculate acceptance probability", "if", "temp_distance", "<", "best_distance", ":", "best_distance", "=", "temp_distance", "best_node", "=", "candidate_node", "else", ":", "# Simulated annealing acceptance criterion", "acceptance_probability", "=", "math", ".", "exp", "(", "-", "(", "temp_distance", "-", "best_distance", ")", "/", "temperature", ")", "if", "random", ".", "random", "(", ")", "<", "acceptance_probability", ":", "best_node", "=", "candidate_node", "# Reduce temperature", "temperature", "*=", "cooling_rate", "return", "best_node"], "code_perf": 26.011753768469376}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm evaluates unvisited nodes based on a weighted scoring system that considers distance, proximity to the destination node, and clustering of remaining unvisited nodes.}", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Initialize the scores for each unvisited node", "scores", "=", "{", "}", "# Calculate the number of unvisited nodes for clustering score", "total_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "float", "(", "'inf'", ")", "clustering_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", ")", "/", "total_unvisited", "# Weighted score: prioritize smaller distance to next node and proximity to destination", "scores", "[", "node", "]", "=", "(", "distance_to_node", "*", "0.5", ")", "+", "(", "distance_to_destination", "*", "0.3", ")", "-", "(", "clustering_score", "*", "0.2", ")", "# Lower score is better", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 26.04202206317254}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "connectivity_scores", "=", "{", "node", ":", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", "}", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "visit_penalty", "=", "1", "/", "(", "1", "+", "(", "len", "(", "unvisited_nodes", ")", "-", "len", "(", "unvisited_nodes", ")", "//", "2", ")", ")", "# Penalize based on visits", "score", "=", "(", "distance", "*", "visit_penalty", ")", "-", "(", "connectivity_scores", "[", "node", "]", "*", "0.5", ")", "+", "random", ".", "uniform", "(", "0.85", ",", "1.15", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 26.04202206317254}
{"code_tokens": ["# {The new algorithm introduces a volatility score that decreases with fewer unvisited neighbors and balances it with a distance penalty to enhance exploration of less connected nodes.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_penalty", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "1.5", "# Emphasize distance", "volatility_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "/", "max", "(", "1", ",", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "heuristic_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "float", "(", "'inf'", ")", "scores", "[", "node", "]", "=", "distance_penalty", "-", "volatility_score", "+", "heuristic_cost", "# Adjusted score equation", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 26.04202206317254}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Function to calculate score combining distance and proximity to destination", "def", "calculate_score", "(", "node", ")", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "return", "distance_to_next", "+", "(", "1.5", "*", "distance_to_destination", ")", "# Weighting proximity to destination", "# Collect scores for all unvisited nodes", "scores", "=", "{", "node", ":", "calculate_score", "(", "node", ")", "for", "node", "in", "unvisited_nodes", "}", "# Normalize scores to a probability distribution", "total_score", "=", "sum", "(", "scores", ".", "values", "(", ")", ")", "probabilities", "=", "{", "node", ":", "score", "/", "total_score", "for", "node", ",", "score", "in", "scores", ".", "items", "(", ")", "}", "# Select the next node based on weighted probabilities", "next_node", "=", "random", ".", "choices", "(", "list", "(", "probabilities", ".", "keys", "(", ")", ")", ",", "weights", "=", "probabilities", ".", "values", "(", ")", ")", "[", "0", "]", "return", "next_node"], "code_perf": 26.939805865107573}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "# Constants for weighting", "alpha", "=", "0.4", "# Weight for distance score", "beta", "=", "0.4", "# Weight for neighbor attractiveness score", "gamma", "=", "0.2", "# Weight for angular penalty", "# Calculate total distances and angles to the remaining nodes", "total_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "def", "angular_penalty", "(", "node", ")", ":", "# Calculate the angle difference from current direction to this node", "return", "abs", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "-", "distance_matrix", "[", "destination_node", "]", "[", "node", "]", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Neighbor attractiveness score: based on the number of unvisited neighbors", "neighbor_count", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "distance_to_next", ")", "# Combined score incorporating attractiveness and angular penalty", "combined_score", "=", "(", "neighbor_count", "*", "beta", "/", "total_distance_remaining", "-", "distance_to_destination", "*", "gamma", "-", "distance_to_next", "*", "alpha", "-", "angular_penalty", "(", "node", ")", ")", "if", "combined_score", ">", "best_score", ":", "best_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 27.770910477761447}
{"code_tokens": ["import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "highest_score", "=", "float", "(", "'-inf'", ")", "# Define weights", "weight_distance", "=", "0.7", "# Weight for minimum distance", "weight_clustering", "=", "0.3", "# Weight for clustering score", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Clustering score: consider the sum of distances to all other unvisited nodes", "clustering_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "# Minimum distance to any unvisited node", "min_distance_to_unvisited", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Combined score: balance between minimum distance and clustering score", "combined_score", "=", "(", "min_distance_to_unvisited", "*", "weight_distance", ")", "-", "(", "clustering_score", "*", "weight_clustering", ")", "if", "combined_score", ">", "highest_score", ":", "highest_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 27.946708182593476}
{"code_tokens": ["# {This algorithm introduces a decay factor for distances based on the order of visiting nodes, enhancing the exploration while favoring less traveled nodes.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "decay_factor", "=", "0.9", "# Factor to decrease the weight of previous distances", "distances", "=", "[", "(", "node", ",", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "for", "node", "in", "unvisited_nodes", "]", "# Apply decay based on the order of distances", "distances", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "# Sort by distance", "weighted_distances", "=", "[", "(", "node", ",", "distance", "*", "(", "decay_factor", "**", "i", ")", ")", "for", "i", ",", "(", "node", ",", "distance", ")", "in", "enumerate", "(", "distances", ")", "]", "# Find the next node with the minimum weighted distance", "next_node", "=", "min", "(", "weighted_distances", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 28.187131555817025}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "decay_factor", "=", "0.9", "# Factor to decrease the weight of previous distances", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "connectivity_penalty", "=", "1", "if", "len", "(", "[", "node", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<", "10", "]", ")", "<", "1", "else", "0", "# Penalize if no nearby nodes", "distances", "=", "[", "(", "node", ",", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "for", "node", "in", "unvisited_nodes", "]", "# Apply decay based on the order of distances", "distances", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "# Sort by distance", "weighted_distances", "=", "[", "(", "node", ",", "distance", "*", "(", "decay_factor", "**", "i", ")", "+", "(", "total_distance_to_unvisited", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", ")", "+", "connectivity_penalty", ")", "for", "i", ",", "(", "node", ",", "distance", ")", "in", "enumerate", "(", "distances", ")", "]", "# Find the next node with the minimum weighted distance", "next_node", "=", "min", "(", "weighted_distances", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 28.187131555817025}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Score based on proximity and distance to the destination", "scores", "[", "node", "]", "=", "distance_to_node", "-", "distance_to_destination", "# Select the node with the highest score (lowest distance cost)", "next_node", "=", "max", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 28.256867359379942}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "# Constants for weighting", "alpha", "=", "0.5", "# Weight for distance score", "beta", "=", "0.3", "# Weight for connectivity score", "gamma", "=", "0.2", "# Weight for return distance penalty", "# Calculate total distances from the current node to all unvisited nodes", "total_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Connectivity score: based on the sum of distances to other unvisited nodes", "connectivity_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "+", "1e-6", ")", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "# Combined score incorporating connectivity and distance considerations", "combined_score", "=", "(", "connectivity_score", "*", "beta", "-", "distance_to_next", "*", "alpha", "-", "distance_to_destination", "*", "gamma", ")", "if", "combined_score", ">", "best_score", ":", "best_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.299468005409654}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "# Define a momentum factor based on the current node's previous decision", "momentum_factor", "=", "0.5", "# Adjust this value to influence exploration versus exploitation", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "# Calculate a clustering factor based on distance to other unvisited nodes", "clustering_factor", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "0", ")", "# Score calculation incorporating momentum and clustering factor", "score", "=", "(", "1", "-", "momentum_factor", ")", "*", "(", "avg_distance_to_remaining", "-", "distance_to_next", ")", "+", "momentum_factor", "*", "clustering_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.637900629114952}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "# Neighbor influence: add bonus for proximity to unvisited nodes", "neighbor_influence", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "0", ")", "# Adjusting score based on average distance and neighbor influence", "score", "=", "(", "avg_distance_to_unvisited", "-", "distance_to_next", ")", "+", "neighbor_influence", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.637900629114952}
{"code_tokens": ["# {The new algorithm introduces a multi-factorial scoring system that considers the direct distance to unvisited nodes, the closeness centrality of nodes, and a potential future distance penalty based on the remaining nodes to be visited.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate a score for each unvisited node", "scores", "=", "{", "}", "# Average distance to remaining unvisited nodes for future potential penalty", "total_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_future_penalty", "=", "total_distance_to_remaining", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "closeness_centrality", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "future_penalty_score", "=", "avg_future_penalty", "scores", "[", "node", "]", "=", "distance_score", "+", "(", "1", "-", "closeness_centrality", ")", "+", "future_penalty_score", "# Lower score is better", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 28.81442622590815}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate connectedness score based on distance to other unvisited nodes", "connectedness_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "+", "1e-6", ")", "for", "n", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Calculate penalty for long detours", "penalty_for_detour", "=", "max", "(", "0", ",", "distance_to_next", "-", "(", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "float", "(", "'inf'", ")", ")", ")", "# Combined scoring formula", "score", "=", "(", "connectedness_score", "-", "penalty_for_detour", ")", "-", "(", "0.5", "*", "distance_to_destination", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 29.1302048977454}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate distances and node degree (number of connections)", "distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "node_degrees", "=", "{", "node", ":", "sum", "(", "1", "for", "i", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "distance_matrix", "[", "node", "]", "[", "i", "]", "<", "float", "(", "'inf'", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "# Create weighted scores combining distance and inverted degree", "weights", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "if", "distances", "[", "node", "]", ">", "0", ":", "# Avoid division by zero", "weights", "[", "node", "]", "=", "distances", "[", "node", "]", "/", "node_degrees", "[", "node", "]", "# Normalize weights", "total_weight", "=", "sum", "(", "weights", ".", "values", "(", ")", ")", "if", "total_weight", "==", "0", ":", "return", "None", "# Cannot select next node", "normalized_weights", "=", "{", "node", ":", "weight", "/", "total_weight", "for", "node", ",", "weight", "in", "weights", ".", "items", "(", ")", "}", "# Introduce randomness through weighted selection", "rand_value", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "cumulative_weight", "=", "0.0", "for", "node", ",", "weight", "in", "normalized_weights", ".", "items", "(", ")", ":", "cumulative_weight", "+=", "weight", "if", "cumulative_weight", ">=", "rand_value", ":", "return", "node", "return", "None"], "code_perf": 29.30728034003411}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_modified_score", "=", "float", "(", "'inf'", ")", "penalty_factor", "=", "1.2", "# Penalty for direct distances", "boosting_factor", "=", "1.5", "# Boost for connectivity", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "penalty_factor", "connectivity_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "modified_score", "=", "direct_distance", "-", "(", "connectivity_score", "*", "boosting_factor", ")", "# Lower score is better", "if", "modified_score", "<", "min_modified_score", ":", "min_modified_score", "=", "modified_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 29.31375680476264}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate the distance to the destination from the current node", "distances_to_destination", "=", "{", "node", ":", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Introduce a dynamic penalty factor for previously visited nodes", "visited_penalty", "=", "1.5", "# Penalty factor to discourage revisiting nodes", "current_distances", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "# Calculate average distance to unvisited nodes", "average_distance", "=", "sum", "(", "current_distances", ")", "/", "len", "(", "current_distances", ")", "# Calculate scores for each unvisited node", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "desirability_score", "=", "1", "/", "(", "distances_to_destination", "[", "node", "]", "+", "1", ")", "# Adjust score based on the average distance and apply penalty", "penalty_score", "=", "visited_penalty", "*", "(", "distance_to_node", "<", "average_distance", ")", "scores", "[", "node", "]", "=", "(", "distance_to_node", "+", "penalty_score", ")", "-", "desirability_score", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 29.476417050792655}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "total_score", "=", "0", "attractiveness_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "distance_to_next", ")", "# Attractiveness score: higher for nodes with more connections and lower distances", "attractiveness_score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "*", "(", "connectivity_score", "+", "1", ")", "attractiveness_scores", "[", "node", "]", "=", "attractiveness_score", "total_score", "+=", "attractiveness_score", "# Select the next node probabilistically based on the attractiveness scores", "if", "total_score", ">", "0", ":", "selection_probability", "=", "{", "node", ":", "score", "/", "total_score", "for", "node", ",", "score", "in", "attractiveness_scores", ".", "items", "(", ")", "}", "r", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "cumulative_probability", "=", "0.0", "for", "node", ",", "probability", "in", "selection_probability", ".", "items", "(", ")", ":", "cumulative_probability", "+=", "probability", "if", "r", "<", "cumulative_probability", ":", "next_node", "=", "node", "break", "return", "next_node"], "code_perf": 29.74889925733399}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "# Encourage connection to well-connected nodes", "score", "=", "(", "1", "/", "(", "immediate_distance", "+", "1", ")", ")", "+", "connectivity_score", "# Balance between short distance and good connectivity", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 29.961865547673252}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {The algorithm employs a scoring mechanism focusing on both the distance to the next node and the overall connectivity of remaining nodes, integrating a decay factor for farther nodes to encourage visiting nearby clusters first.}", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Constants for weighting", "alpha", "=", "0.5", "# Weight for distance score", "beta", "=", "0.3", "# Weight for connectivity score", "gamma", "=", "0.2", "# Decay factor for distance influence", "# Calculate total distances to the remaining nodes", "total_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Connectivity score: based on the sum of distances from this node to all other unvisited nodes", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "# Combined score incorporating connectivity and distance with decay factor", "combined_score", "=", "(", "distance_to_next", "*", "alpha", "+", "connectivity_score", "*", "beta", ")", "/", "(", "1", "+", "gamma", "*", "distance_to_next", ")", "if", "combined_score", "<", "best_score", ":", "best_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 30.779938205325543}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate distances and importances", "distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Calculate the importance based on the distance to the destination", "importance", "=", "{", "node", ":", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ",", "distances", "[", "node", "]", ")", "for", "node", "in", "unvisited_nodes", "}", "# Compute a score based on distance and importance", "scores", "=", "{", "node", ":", "(", "0.5", "*", "dist", ")", "+", "(", "0.5", "*", "importance", "[", "node", "]", "[", "0", "]", ")", "for", "node", ",", "dist", "in", "distances", ".", "items", "(", ")", "}", "# Normalize scores to introduce variability", "score_min", "=", "min", "(", "scores", ".", "values", "(", ")", ")", "score_range", "=", "max", "(", "scores", ".", "values", "(", ")", ")", "-", "score_min", "if", "score_range", ">", "0", ":", "scores", "=", "{", "node", ":", "(", "score", "-", "score_min", ")", "/", "score_range", "for", "node", ",", "score", "in", "scores", ".", "items", "(", ")", "}", "# Introduce a random factor for selection", "weighted_candidates", "=", "[", "(", "node", ",", "random", ".", "uniform", "(", "0", ",", "scores", "[", "node", "]", ")", ")", "for", "node", "in", "unvisited_nodes", "]", "# Select the node with the highest weighted score", "next_node", "=", "max", "(", "weighted_candidates", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 30.960362717574803}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Weighted average distance to the unvisited nodes", "total_weighted_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "avg_weighted_distance", "=", "total_weighted_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "# Calculate connectivity score based on distances to unvisited nodes", "connectivity_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "0", ")", "# Combining distance and connectivity into the score", "score", "=", "(", "1", "/", "(", "1", "+", "distance_to_next", ")", ")", "+", "(", "0.5", "*", "connectivity_score", ")", "-", "(", "0.5", "*", "avg_weighted_distance", "/", "distance_to_next", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 31.52107744431179}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm prioritizes nodes that balance short distances without leading back towards visited areas, using a combination of distance minimization and a clustering avoidance factor.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "non_return_penalty", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "distance_matrix", "[", "node", "]", "[", "current_node", "]", ")", "# Penalty for returning to closer clusters", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "*", "(", "1", "+", "non_return_penalty", ")", "# Encourage visiting nodes while penalizing clustering", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 33.21511209059236}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm introduces a dynamic scoring mechanism that incorporates a penalty for long detours and a factor for the density of unvisited nodes to improve path selection.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Detour penalty (encourages direct paths)", "detour_penalty", "=", "max", "(", "0", ",", "distance_to_next", "-", "(", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", ")", ")", "# Density factor (promoting nodes with more unvisited neighbors)", "density_factor", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "distance_to_next", ")", "# Weighting factors", "weight_distance", "=", "0.4", "weight_detour", "=", "0.4", "weight_density", "=", "0.2", "# Composite score calculation", "score", "=", "(", "weight_distance", "/", "(", "distance_to_next", "+", "1", ")", ")", "-", "(", "weight_detour", "*", "detour_penalty", ")", "+", "(", "weight_density", "*", "density_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 33.373278314197705}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# Design idea: This algorithm uses a balance of direct distance, remaining unvisited node density, and a fatigue factor to promote exploration of closer groups of nodes while avoiding excessive distance increases.", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "# Constants for weighting", "alpha", "=", "0.5", "# Weight for direct distance score", "beta", "=", "0.3", "# Weight for density score", "gamma", "=", "0.2", "# Weight for fatigue adjustment", "# Calculate total distances to the remaining nodes", "total_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "max_distance_to_next", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Density score: based on the number of unvisited nodes within a certain radius", "density_score", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "distance_to_next", ")", "# Fatigue adjustment based on total distance traveled", "fatigue_adjustment", "=", "distance_to_next", "/", "(", "total_distance_remaining", "+", "1", ")", "# Prevent division by zero", "# Combined score incorporating distance, density, and fatigue", "combined_score", "=", "(", "density_score", "*", "beta", "+", "(", "max_distance_to_next", "-", "distance_to_next", ")", "*", "alpha", "-", "fatigue_adjustment", "*", "gamma", ")", "if", "combined_score", ">", "best_score", ":", "best_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 34.003011094449235}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Normalizing distances to create a scale between 0 and 1", "normalized_distance_to_next", "=", "1", "-", "(", "distance_to_next", "/", "(", "distance_to_next", "+", "distance_to_destination", "+", "1", ")", ")", "# Urgency score based on how many unvisited nodes remain", "urgency_score", "=", "1", "/", "(", "num_unvisited", "+", "1", ")", "# Penalty for longer paths (increase with distance to next node)", "penalty", "=", "1", "-", "(", "1", "/", "(", "1", "+", "distance_to_next", ")", ")", "# Combined score", "score", "=", "normalized_distance_to_next", "*", "urgency_score", "*", "penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 34.061368006589234}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "heuristic_factor", "=", "1", "+", "(", "len", "(", "distance_matrix", ")", "-", "len", "(", "unvisited_nodes", ")", ")", "/", "len", "(", "distance_matrix", ")", "if", "unvisited_nodes", "else", "1", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty_for_visited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "n", "not", "in", "unvisited_nodes", ")", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "heuristic_factor", "*", "(", "penalty_for_visited", "+", "distance_to_next", ")", "-", "distance_to_destination", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 34.3268708626092}
{"code_tokens": ["import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "centralized_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "score", "=", "(", "math", ".", "log", "(", "distance_to_next", "+", "1", ")", "+", "centralized_distance", ")", "*", "math", ".", "exp", "(", "-", "distance_to_next", "/", "10", ")", "# Hybrid scoring mechanism", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 34.65488517644664}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate average distance to unvisited nodes", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Calculate scores based on distances and average distance", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Score combines distance to the node with how it compares to average", "scores", "[", "node", "]", "=", "(", "0.7", "*", "distance", ")", "+", "(", "0.3", "*", "(", "avg_distance", "-", "distance", ")", ")", "# Normalize scores to add randomness", "score_min", "=", "min", "(", "scores", ".", "values", "(", ")", ")", "score_range", "=", "max", "(", "scores", ".", "values", "(", ")", ")", "-", "score_min", "if", "score_range", ">", "0", ":", "scores", "=", "{", "node", ":", "(", "score", "-", "score_min", ")", "/", "score_range", "for", "node", ",", "score", "in", "scores", ".", "items", "(", ")", "}", "# Introduce a random factor for selection", "weighted_candidates", "=", "[", "(", "node", ",", "random", ".", "uniform", "(", "0", ",", "scores", "[", "node", "]", ")", ")", "for", "node", "in", "unvisited_nodes", "]", "# Select the node with the highest weighted score", "next_node", "=", "max", "(", "weighted_candidates", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 34.93880952060201}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate average distance to unvisited nodes", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Calculate scores based on distances and average distance", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Score balances immediate distance with the penalty from the average distance", "scores", "[", "node", "]", "=", "distance", "+", "(", "avg_distance", "-", "distance", ")", "*", "0.5", "# 0.5 is a weighting factor", "# Normalize scores to add randomness", "score_min", "=", "min", "(", "scores", ".", "values", "(", ")", ")", "score_range", "=", "max", "(", "scores", ".", "values", "(", ")", ")", "-", "score_min", "if", "score_range", ">", "0", ":", "scores", "=", "{", "node", ":", "(", "score", "-", "score_min", ")", "/", "score_range", "for", "node", ",", "score", "in", "scores", ".", "items", "(", ")", "}", "# Introduce a random factor for selection", "weighted_candidates", "=", "[", "(", "node", ",", "random", ".", "uniform", "(", "0", ",", "scores", "[", "node", "]", ")", ")", "for", "node", "in", "unvisited_nodes", "]", "# Select the node with the highest weighted score", "next_node", "=", "max", "(", "weighted_candidates", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 35.01997863904046}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Attractive force towards the destination node", "attractive_force", "=", "1", "/", "(", "distance_to_destination", "+", "1", ")", "# Repulsive force from already visited nodes", "repulsive_force", "=", "sum", "(", "max", "(", "0", ",", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "+", "1", ")", ")", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "# Combine attractive and repulsive forces", "score", "=", "attractive_force", "-", "repulsive_force", "# Penalizing longer distances to encourage shorter paths", "score", "*=", "(", "1", "/", "(", "1", "+", "distance_to_next", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 35.179095634794876}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "candidates", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "strategic_penalty", "=", "len", "(", "unvisited_nodes", ")", "*", "distance_to_node", "# Penalizes longer paths by scaling with unvisited count", "randomness", "=", "random", ".", "uniform", "(", "0.85", ",", "1.15", ")", "# Introduce variation with a broader range", "score", "=", "(", "distance_to_node", "*", "0.4", ")", "+", "(", "distance_to_destination", "*", "0.4", ")", "-", "(", "strategic_penalty", "*", "0.1", ")", "*", "randomness", "candidates", ".", "append", "(", "(", "node", ",", "score", ")", ")", "next_node", "=", "min", "(", "candidates", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 35.57951134479413}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_weighted_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_nodes_count", "=", "len", "(", "unvisited_nodes", ")", "-", "1", "# exclude the next node", "weighted_cost", "=", "distance", "+", "(", "remaining_nodes_count", "*", "(", "1", "/", "(", "distance", "+", "1", ")", ")", ")", "# adding a penalty for unvisited nodes", "if", "weighted_cost", "<", "min_weighted_cost", ":", "min_weighted_cost", "=", "weighted_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 36.08107298243216}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm employs a scoring function that incorporates both an exponential decay factor for distance to the destination and a linear heuristic for remaining nodes, aiming to prioritize closer nodes while still considering overall path efficiency.}", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "# Exponential decay factor for distance to the destination", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "exp_decay_score", "=", "2", "**", "(", "-", "distance_to_destination", "/", "10", ")", "# Exponential decay factor", "# Calculate a linear penalty for far nodes based on maximum distance to any unvisited node", "max_distance_to_unvisited", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Linear penalty term based on distance to this node", "linear_penalty", "=", "(", "max_distance_to_unvisited", "-", "distance", ")", "*", "2", "# Score calculation combines exponential factor, linear penalty, and direct distance", "weighted_score", "=", "distance", "+", "linear_penalty", "+", "exp_decay_score", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 36.1397423465301}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_nodes", "=", "len", "(", "unvisited_nodes", ")", "exploration_penalty", "=", "(", "remaining_nodes", "**", "2", ")", "*", "0.05", "# Increased penalty for more unvisited nodes", "reward", "=", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "0.1", "# Reward for proximity to destination", "weighted_score", "=", "(", "1.5", "*", "direct_distance", ")", "+", "exploration_penalty", "+", "reward", "# Combine metrics", "if", "weighted_score", ">", "max_score", ":", "max_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 36.150644428250445}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm introduces a dynamic trade-off between local exploration and global awareness, with a focus on minimizing distance while considering overall route efficiency and a strategic lookahead to avoid clustering.}", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Local exploration: Cost to visit this node", "local_cost", "=", "distance_to_next", "# Global awareness: Average distance to remaining unvisited nodes", "avg_unvisited_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ",", "1", ")", "# Lookahead: Distance to destination, penalized for clustering", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "clustering_effect", "=", "len", "(", "unvisited_nodes", ")", "*", "(", "avg_unvisited_distance", "-", "distance_to_next", ")", "# Composite score calculation", "score", "=", "local_cost", "+", "clustering_effect", "+", "2", "*", "distance_to_destination", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 36.78309033261072}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "# Calculate the average distance to unvisited nodes", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "remaining_unvisited_count", "if", "remaining_unvisited_count", ">", "0", "else", "1", ")", "# Introducing a factor that weighs distance and count of unvisited nodes", "score", "=", "(", "avg_distance_to_unvisited", "/", "(", "distance_to_next", "+", "1e-5", ")", ")", "+", "(", "remaining_unvisited_count", "/", "(", "distance_to_next", "+", "1e-5", ")", ")", "# Avoid division by zero", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.909566175496844}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "geometric_mean_distance", "=", "(", "distance_to_next", "*", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "**", "(", "1", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", ")", ")", "**", "(", "1", "/", "2", ")", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "*", "geometric_mean_distance", "-", "distance_to_next", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.70211988419468}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm incorporates a dynamic scoring system that emphasizes both distance and a heuristic cost associated with the remaining unvisited nodes, encouraging a more balanced route.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ",", "1", ")", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "*", "(", "1", "/", "(", "avg_distance_to_remaining", "+", "1", ")", ")", "# Encourages shorter paths while considering the average distance to remaining nodes", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.178661666035703}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate a score for each unvisited node based on distance components and centrality", "scores", "=", "{", "}", "centrality_weight", "=", "1.0", "distance_to_destination_weight", "=", "1.5", "distance_from_current_weight", "=", "1.0", "for", "node", "in", "unvisited_nodes", ":", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "distance_from_current", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "centrality_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "+", "1e-6", ")", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "# Weighted score calculation", "total_score", "=", "(", "distance_to_destination_weight", "*", "distance_to_destination", ")", "+", "(", "distance_from_current_weight", "*", "distance_from_current", ")", "-", "(", "centrality_weight", "*", "centrality_score", ")", "scores", "[", "node", "]", "=", "total_score", "# Lower score is better", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 29.253206020802814}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm incorporates a scoring mechanism that balances distance to unvisited nodes with a decay factor based on the number of unvisited nodes, promoting exploration of closer nodes while considering overall proximity.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "1", "/", "(", "distance_to_next", "+", "1", ")", "# Closer nodes get higher scores", "# Weighted average distance to unvisited nodes with the count influencing the score", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "unvisited_count", "=", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "average_distance_to_unvisited", "=", "total_distance_to_unvisited", "/", "unvisited_count", "# Decay factor based on the number of unvisited nodes", "decay_factor", "=", "1", "/", "(", "unvisited_count", "**", "1.5", ")", "score", "=", "proximity_score", "*", "decay_factor", "-", "average_distance_to_unvisited", "# Combined scoring", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 30.86406535032461}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "total_distance_traveled", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Introduce a penalty for longer paths", "penalty", "=", "1", "/", "(", "1", "+", "distance_to_next", ")", "# Cumulative distance effect", "cumulative_score", "=", "1", "/", "(", "1", "+", "total_distance_traveled", ")", "# Random exploration factor", "exploration_factor", "=", "random", ".", "uniform", "(", "0.8", ",", "1.2", ")", "# Combined score", "score", "=", "cumulative_score", "*", "penalty", "*", "(", "exploration_factor", "/", "(", "distance_to_destination", "+", "1", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.179359713171213}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "variance_distance", "=", "sum", "(", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "-", "avg_distance_to_unvisited", ")", "**", "2", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "score", "=", "(", "avg_distance_to_unvisited", "-", "distance_to_next", ")", "+", "(", "1", "/", "(", "1", "+", "distance_to_destination", ")", ")", "-", "variance_distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.796497934241451}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm evaluates nodes by considering the minimum distance to the nearest unvisited node and a penalty for the distance to the destination, aiming to balance exploration and direct path optimization.}", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "distance_to_next", "+", "0.5", "*", "distance_to_destination", "# Combination of distance to next and penalty for distance to destination", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "scores", "=", "{", "}", "penalty_factor", "=", "0.5", "# A factor to penalize longer distances", "bonus_factor", "=", "2.0", "# A factor to reward nodes with more connections", "for", "node", "in", "unvisited_nodes", ":", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "penalty_factor", "connection_bonus", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "*", "bonus_factor", "indirect_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "scores", "[", "node", "]", "=", "distance_score", "-", "connection_bonus", "+", "indirect_distance", "# Lower score is better", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 10.131823712511094}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "min_distance_to_unvisited", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "distance_penalty", "=", "(", "min_distance_to_unvisited", "-", "distance_to_next", ")", "if", "min_distance_to_unvisited", ">", "distance_to_next", "else", "0", "# Modified score that emphasizes distance to the next node with a penalty for cluster proximity", "score", "=", "(", "1", "/", "distance_to_next", ")", "+", "(", "distance_penalty", "*", "0.25", ")", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["# {This algorithm enhances the original approach by introducing a weighted scoring mechanism that balances proximity with a penalty for visiting nodes that are farther from the destination, while also considering node centrality based on the total distance from that node to all unvisited nodes.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "total_distance_from_node", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "average_distance_to_unvisited", "=", "total_distance_from_node", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "# Calculate scores", "proximity_score", "=", "average_distance_to_unvisited", "-", "distance_to_next", "destination_penalty", "=", "-", "distance_to_destination", "# Penalize nodes further from the destination", "connectivity_score", "=", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "10", "]", ")", "# Example threshold for connectivity", "score", "=", "proximity_score", "+", "destination_penalty", "+", "connectivity_score", "# Combine scores", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.328751305099974}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "# Calculate the diversity score based on the degree of unvisited nodes", "diversity_scores", "=", "{", "node", ":", "len", "(", "unvisited_nodes", ")", "-", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "0", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "diversity_penalty", "=", "diversity_scores", "[", "node", "]", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "# New scoring equation that considers both distance and diversity", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "+", "(", "1", "/", "(", "distance_to_destination", "+", "1", ")", ")", "-", "diversity_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.6608569721620725}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "# Calculate average distance among unvisited nodes", "average_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "node", "in", "unvisited_nodes", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "**", "2", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "variance_penalty", "=", "sum", "(", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "-", "average_distance", ")", "**", "2", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "score", "=", "(", "average_distance", "-", "distance_to_next", ")", "-", "variance_penalty", "# Balance score with variance penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.314236173821003}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "max_distance_to_unvisited", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "total_distance_from_current_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "score", "=", "(", "1", "/", "(", "1", "+", "max_distance_to_unvisited", ")", ")", "+", "(", "0.5", "*", "(", "total_distance_from_current_to_unvisited", "/", "len", "(", "unvisited_nodes", ")", ")", ")", "-", "distance_to_next", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.370078776444652}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm incorporates a weighted score for each unvisited node based on both proximity and the collective potential distances to remaining nodes, seeking to balance immediate path efficiency with future exploration.}", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "avg_remaining_distance", "=", "total_remaining_distance", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "potential_distances", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "score", "=", "distance_to_next", "+", "(", "avg_remaining_distance", "+", "potential_distances", "/", "max", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ",", "1", ")", ")", "# Balance immediate distance with future potential", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.4323878079629}
{"code_tokens": ["# {This algorithm integrates a penalty mechanism for distant nodes, evaluates the proximity and connectivity of unvisited nodes, and applies a dynamic adjustment factor based on the overall map structure to enhance decision-making efficiency.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "# Calculate distances to all unvisited nodes and penalties for those farther from the destination", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "penalty_distance", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Adjust score based on proximity and the penalty for distance from the destination", "proximity_score", "=", "distance_to_node", "/", "(", "total_distance", "+", "1e-5", ")", "penalty_score", "=", "penalty_distance", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1e-5", ")", "# Connectivity factor: average distance from the candidate node to remaining unvisited nodes", "connectivity_effect", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "adj", "]", "for", "adj", "in", "unvisited_nodes", "if", "adj", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "# Compute overall score", "score", "=", "proximity_score", "+", "penalty_score", "+", "connectivity_effect", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 16.234211488764046}
{"code_tokens": ["# {This algorithm prioritizes not only proximity to the current node but also evaluates the remaining travel cost to the destination ", "# and integrates a desirability factor based on previously visited nodes to select the next node.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate the remaining distance to destination if this node is chosen", "remaining_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Desirability factor based on unvisited nodes proximity to the destination", "desirability_factor", "=", "0.5", "/", "(", "remaining_distance_to_destination", "+", "1", ")", "# New score calculation incorporating distance to next, average unvisited distance, and desirability factor", "total_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "avg_distance_to_remaining", "=", "total_distance_to_remaining", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "# Combined score", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "*", "avg_distance_to_remaining", "+", "desirability_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.529899262033295}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_unvisited", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_from_node", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "exploration_factor", "=", "random", ".", "uniform", "(", "1", ",", "1", "+", "(", "average_distance_from_node", "/", "100", ")", ")", "# Adaptive exploration", "score", "=", "distance", "*", "exploration_factor", "+", "(", "average_distance_to_unvisited", "*", "0.5", ")", "# Combine scores", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.9549182503372835}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm implements a scoring mechanism that balances the direct distance to the destination with a weighted factor based on the overall connectivity of unvisited nodes, encouraging exploration towards densely connected areas.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_unvisited", "=", "total_distance_to_unvisited", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "direct_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Connectivity score based on how well the node connects to other unvisited nodes", "connectivity_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "+", "1", ")", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "# Combining scores with a focus on minimizing total distance to the destination while exploring connectivity", "score", "=", "connectivity_score", "*", "(", "1", "/", "(", "direct_distance_to_destination", "+", "1", ")", ")", "+", "(", "avg_distance_to_unvisited", "-", "distance_to_next", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 14.194698617848594}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm aims to score potential next nodes based on their closeness to the destination and the density of the unvisited nodes around them.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "closeness_score", "=", "1", "/", "(", "distance_to_next", "+", "1", ")", "# Closer nodes yield higher scores", "density_factor", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "+", "1", ")", "for", "n", "in", "unvisited_nodes", ")", "# Score based on proximity to unvisited nodes", "score", "=", "closeness_score", "+", "density_factor", "-", "distance_to_destination", "# Combine scores for a final value", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 21.496305289016345}
