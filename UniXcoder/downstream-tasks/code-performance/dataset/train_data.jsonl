{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Start with positive infinity for minimization", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cost_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Proportional score based on distance and cost", "if", "direct_distance", "+", "cost_to_destination", ">", "0", ":", "# Avoid division by zero", "score", "=", "(", "direct_distance", "/", "(", "direct_distance", "+", "cost_to_destination", ")", ")", "*", "(", "1", "+", "direct_distance", ")", "else", ":", "score", "=", "float", "(", "'inf'", ")", "# Selecting the node that minimizes this score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.611912654495894}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "from", "scipy", ".", "sparse", ".", "csgraph", "import", "minimum_spanning_tree", "import", "numpy", "as", "np", "# Create a sub-matrix for unvisited nodes", "sub_matrix", "=", "np", ".", "array", "(", "[", "[", "distance_matrix", "[", "i", "]", "[", "j", "]", "for", "j", "in", "unvisited_nodes", "]", "for", "i", "in", "unvisited_nodes", "]", ")", "# Calculate the Minimum Spanning Tree for unvisited nodes", "mst", "=", "minimum_spanning_tree", "(", "sub_matrix", ")", ".", "toarray", "(", ")", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "idx", ",", "node", "in", "enumerate", "(", "unvisited_nodes", ")", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "# Calculate the connectivity score based on MST", "connectivity_score", "=", "np", ".", "sum", "(", "mst", "[", "idx", "]", ")", "# Total edge weight to connect to other nodes", "# Combined score emphasizing proximity and connectivity", "score", "=", "distance_to_next", "+", "distance_to_destination", "-", "(", "0.3", "*", "connectivity_score", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.087714784677612}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.4", "# Weight for the connectivity score", "risk_weight", "=", "0.2", "# Weight for risk assessment of distances", "# Calculate connectivity score based on the number of connections to unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "connectivity_score", "=", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "float", "(", "'inf'", ")", ")", "# Risk assessment based on distance fluctuation (i.e., how variable the distances are to unvisited nodes)", "distances", "=", "[", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "for", "unvisited", "in", "unvisited_nodes", "]", "distance_variation", "=", "max", "(", "distances", ")", "-", "min", "(", "distances", ")", "if", "distances", "else", "0", "# Direct distance to the current node", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Scoring function combining distances, connectivity, and risk", "score", "=", "-", "(", "distance_weight", "*", "direct_distance", ")", "+", "(", "connectivity_weight", "*", "connectivity_score", ")", "-", "(", "risk_weight", "*", "distance_variation", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.669134405884694}
{"code_tokens": ["# {The new algorithm introduces a scoring system that incorporates a penalty for longer distances and rewards for connectivity, while also considering the minimum distance to any unvisited node as an attraction factor.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate scores for each unvisited node", "scores", "=", "{", "}", "min_distance_to_unvisited", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_penalty", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "**", "2", "# Square of distance as penalty", "connectivity_reward", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "*", "2", "attraction_factor", "=", "min_distance_to_unvisited", "*", "0.5", "# Attraction based on the minimum distance to unvisited nodes", "scores", "[", "node", "]", "=", "distance_penalty", "-", "connectivity_reward", "+", "attraction_factor", "# Lower score is better", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "from", "collections", "import", "defaultdict", "import", "numpy", "as", "np", "# Calculate distance of unvisited nodes from the current node and the destination", "distances_to_current", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "distances_to_destination", "=", "{", "node", ":", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Create a priority score based on distance to current and distance to destination", "priority_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "priority_scores", "[", "node", "]", "=", "distances_to_current", "[", "node", "]", "+", "distances_to_destination", "[", "node", "]", "# Simple sum of both distances", "# Select next node based on the minimum priority score", "next_node", "=", "min", "(", "priority_scores", ",", "key", "=", "priority_scores", ".", "get", ")", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["import", "math", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "weights", "=", "[", "]", "total_weight", "=", "0", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "centralized_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "penalty", "=", "(", "1", "/", "(", "distance_to_node", "+", "1", ")", ")", "*", "(", "1", "/", "(", "centralized_distance", "+", "1", ")", ")", "weight", "=", "penalty", "*", "random", ".", "uniform", "(", "1", ",", "2", ")", "# Incorporating randomness to avoid deterministic choices", "weights", ".", "append", "(", "(", "node", ",", "weight", ")", ")", "total_weight", "+=", "weight", "if", "total_weight", "==", "0", ":", "return", "None", "random_weight", "=", "random", ".", "uniform", "(", "0", ",", "total_weight", ")", "cumulative_weight", "=", "0", "for", "node", ",", "weight", "in", "weights", ":", "cumulative_weight", "+=", "weight", "if", "cumulative_weight", ">=", "random_weight", ":", "return", "node", "return", "None"], "code_perf": 24.91924087953767}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for distance", "proximity_weight", "=", "0.4", "# Weight for proximity to unvisited nodes", "importance_weight", "=", "0.2", "# Weight for node importance based on future potential", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "+", "1e-6", ")", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", ")", "# Inverse distance", "importance_score", "=", "(", "len", "(", "unvisited_nodes", ")", "-", "len", "(", "[", "next", "for", "next", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "next", "in", "unvisited_nodes", "and", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", "]", ")", ")", "# Importance based on available connections", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "proximity_weight", "*", "proximity_score", "+", "importance_weight", "*", "importance_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.811288564013772}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "avg_distance_to_unvisited", "=", "total_distance_to_unvisited", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "# Weighted score based on current distance and average distance to unvisited nodes", "score", "=", "(", "avg_distance_to_unvisited", "*", "0.5", ")", "-", "(", "distance_to_next", "*", "0.5", ")", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.41724333977419}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "heuristic_factor", "=", "1", "+", "(", "len", "(", "distance_matrix", ")", "-", "len", "(", "unvisited_nodes", ")", ")", "/", "len", "(", "distance_matrix", ")", "if", "unvisited_nodes", "else", "1", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty_for_visited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "n", "not", "in", "unvisited_nodes", ")", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "heuristic_factor", "*", "(", "penalty_for_visited", "+", "distance_to_next", ")", "-", "distance_to_destination", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 34.3268708626092}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "closest_nodes", "=", "[", "]", "min_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "<", "min_distance", ":", "min_distance", "=", "distance", "closest_nodes", "=", "[", "node", "]", "elif", "distance", "==", "min_distance", ":", "closest_nodes", ".", "append", "(", "node", ")", "if", "not", "closest_nodes", ":", "return", "None", "# Introduce an exploration factor based on the number of unvisited nodes", "exploration_factor", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Simple normalization", "total_weight", "=", "sum", "(", "(", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1", ")", ")", "*", "exploration_factor", "for", "node", "in", "closest_nodes", ")", "weighted_probs", "=", "[", "(", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1", ")", "*", "exploration_factor", ")", "/", "total_weight", "for", "node", "in", "closest_nodes", "]", "next_node", "=", "random", ".", "choices", "(", "closest_nodes", ",", "weights", "=", "weighted_probs", ",", "k", "=", "1", ")", "[", "0", "]", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "base_distance_weight", "=", "0.6", "# Base weight for distance", "proximity_weight", "=", "0.4", "# Weight for proximity to destination", "visit_penalty_weight", "=", "0.2", "# Penalty for already visited connections", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "proximity_score", "=", "-", "distance_to_destination", "if", "distance_to_destination", "!=", "float", "(", "'inf'", ")", "else", "0", "visit_penalty_score", "=", "sum", "(", "1", "for", "next", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "next", "not", "in", "unvisited_nodes", "and", "distance_matrix", "[", "current_node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", ")", "# Penalty for visited connections", "score", "=", "-", "base_distance_weight", "*", "direct_distance", "+", "proximity_weight", "*", "proximity_score", "-", "visit_penalty_weight", "*", "visit_penalty_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.6490879527083395}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "adjusted_penalty_factor", "=", "(", "len", "(", "unvisited_nodes", ")", "**", "2", ")", "*", "0.1", "# Squared penalty for unvisited nodes", "proximity_weight", "=", "0.5", "# Weight for proximity to destination", "travel_time_weight", "=", "0.5", "# New weight for travel times to destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "time_cost", "=", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "# Average distance to remaining nodes", "if", "time_cost", ">", "0", ":", "time_component", "=", "travel_time_weight", "/", "time_cost", "# Inverse relation to average distance", "else", ":", "time_component", "=", "0", "score", "=", "-", "direct_distance", "-", "adjusted_penalty_factor", "+", "proximity_score", "+", "time_component", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.260081760112287}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_connections", "=", "len", "(", "unvisited_nodes", ")", "-", "1", "# Total unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "node_connections", "=", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "0", "]", ")", "total_distance_to_other_nodes", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "desirability_factor", "=", "node_connections", "/", "(", "1", "+", "total_connections", ")", "score", "=", "direct_distance", "+", "0.5", "*", "(", "total_distance_to_other_nodes", "-", "desirability_factor", ")", "# Combining factors", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 16.555495628879836}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance", "connectivity_weight", "=", "0.4", "# Weight for overall connectivity", "future_estimation_weight", "=", "0.3", "# Weight for estimating future distances", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Compute connectivity score based on distance to other unvisited nodes", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Heuristic future distance estimation based on average distance to destination from unvisited nodes", "heuristic_estimate", "=", "sum", "(", "distance_matrix", "[", "dest_node", "]", "[", "destination_node", "]", "for", "dest_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "connectivity_weight", "*", "-", "connectivity_score", ")", "+", "(", "future_estimation_weight", "*", "heuristic_estimate", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.064260559826401}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# This algorithm uses a scoring system that balances total distance, potential future distance, ", "# and ensures that more connected nodes are prioritized depending on their connectivity levels.", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "scores", "=", "{", "}", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "connectivity_map", "=", "{", "node", ":", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "connectivity_map", "[", "node", "]", "remaining_nodes_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "0", "else", "1", ")", "# Prioritize nodes that have a higher connectivity and lower overall distance score", "scores", "[", "node", "]", "=", "(", "distance_to_node", "+", "remaining_nodes_score", ")", "/", "(", "connectivity_score", "+", "1", ")", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the total distance to all unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Calculate scores for each unvisited node using a new hybrid formula", "scores", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "0.5", ")", "+", "(", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "*", "0.5", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the unvisited node with the minimum score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "exploration_factor", "=", "2.0", "# Incremental score for less connected nodes", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.6", "# Weight for direct distance", "connectivity_weight", "=", "0.2", "# Weight for connectivity to unvisited nodes", "proximity_weight", "=", "0.2", "# Weight for proximity to destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Proximity score considering the distance to the destination", "proximity_score", "=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", "# Avoid division by zero", "# Combined score highlighting both distance minimization and unexplored node attraction", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "(", "1", "-", "(", "connectivity_score", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", ")", "+", "proximity_weight", "*", "proximity_score", "# Amplifying the score for less connected nodes", "score", "*=", "(", "1", "+", "exploration_factor", "*", "(", "1", "/", "(", "connectivity_score", "+", "1", ")", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.309172658369173}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "historical_factor", "=", "np", ".", "zeros", "(", "len", "(", "distance_matrix", ")", ")", "# To track historical visits", "path_length", "=", "sum", "(", "distance_matrix", "[", "i", "]", "[", "j", "]", "for", "i", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "for", "j", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "i", "in", "unvisited_nodes", "and", "j", "in", "unvisited_nodes", ")", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "for", "candidate", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate", "]", "historical_penalty", "=", "historical_factor", "[", "candidate", "]", "*", "0.5", "# Applying historical penalty", "score", "=", "(", "immediate_distance", "*", "1.2", ")", "+", "historical_penalty", "-", "(", "np", ".", "log", "(", "len", "(", "unvisited_nodes", ")", ")", "*", "2", ")", "# Log factor reducing score with number of unvisited nodes", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "candidate", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "connectivity_factor", "=", "0.5", "# Factor to enhance connections among unvisited nodes", "return_to_start_factor", "=", "0.3", "# Weight to encourage proximity to origin", "if", "unvisited_nodes", ":", "base_cost_weight", "=", "0.4", "# Base weight for cost calculation", "nearby_nodes_weight", "=", "0.4", "# Weight for the connectivity score", "potential_path_weight", "=", "0.2", "# Encourage overall path potential", "for", "node", "in", "unvisited_nodes", ":", "direct_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate connectivity score among unvisited nodes", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", "if", "next_node", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "# Predictive path potential towards the destination considering return to starting point", "return_to_start_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combine scores into a single cost evaluation", "total_cost", "=", "(", "base_cost_weight", "*", "direct_cost", "+", "nearby_nodes_weight", "*", "connectivity_score", "-", "return_to_start_factor", "*", "return_to_start_score", ")", "if", "total_cost", "<", "min_cost", ":", "min_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.532018268130294}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "# Calculate triangle inequality component", "triangle_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate risk adjustment based on the farthest unvisited node", "max_distance_to_unvisited", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "for", "unvisited", "in", "unvisited_nodes", ")", "risk_factor", "=", "max_distance_to_unvisited", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "# Normalize by number of unvisited nodes", "# Combine scores", "score", "=", "triangle_score", "+", "risk_factor", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.19409459578442}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "closest_distance_to_unvisited", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "distance_to_start", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "distance_to_next", "+", "(", "total_distance_to_unvisited", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", ")", ")", "+", "(", "0.3", "*", "distance_to_start", ")", "-", "(", "0.7", "*", "closest_distance_to_unvisited", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.659639755846989}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "decay_factor", "=", "0.95", "# Factor to reduce the value of distant nodes", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Emphasis on direct distance", "local_weight", "=", "0.4", "# Weight for visiting local nodes", "completion_weight", "=", "0.2", "# Weight for route completion efficiency", "# Calculate potential completion score for reaching destination", "def", "completion_score", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "local_score", "=", "-", "direct_distance", "*", "decay_factor", "# Reduced distance impact", "completion_efficiency", "=", "completion_score", "(", "node", ")", "# Combined scoring mechanism with a competitive angle", "score", "=", "local_weight", "*", "local_score", "+", "completion_weight", "*", "completion_efficiency", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.407584644326318}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "cluster_weight", "=", "0.3", "# Weight for cluster potential savings", "detour_penalty_weight", "=", "0.2", "# Weight for detour penalties", "unvisited_count_weight", "=", "0.1", "# Weight for favoring unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "decay_factor", "=", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Decay factor related to the count of unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "adjusted_detour", "=", "max", "(", "0", ",", "direct_distance", "-", "total_distance_to_destination", ")", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "cluster_weight", "*", "cluster_average_distance", ")", "-", "(", "detour_penalty_weight", "*", "adjusted_detour", ")", "score", "*=", "(", "1", "+", "unvisited_count_weight", "*", "decay_factor", ")", "# Apply decay factor to score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.334687017776317}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate weighted distances for unvisited nodes", "weighted_distances", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_current", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "weighted_distance", "=", "distance_to_current", "+", "0.5", "*", "distance_to_destination", "# Adjust weighting as needed", "weighted_distances", "[", "node", "]", "=", "weighted_distance", "# Select the next node based on the minimum weighted distance", "next_node", "=", "min", "(", "weighted_distances", ",", "key", "=", "weighted_distances", ".", "get", ")", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_penalty_weight", "=", "0.5", "# Weight for direct distance with penalty", "centrality_weight", "=", "0.3", "# Weight for centrality score", "nearest_edge_weight", "=", "0.2", "# Weight for the nearest unvisited node edge", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "centrality_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "# Total distance to all other unvisited nodes", "nearest_edge_score", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Nearest edge to unvisited", "score", "=", "-", "distance_penalty_weight", "*", "direct_distance", "+", "centrality_weight", "*", "centrality_score", "+", "nearest_edge_weight", "*", "nearest_edge_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.856851353459207}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "distance_weight", "=", "0.5", "# Weight for direct distance", "frequency_weight", "=", "0.4", "# Weight based on node visit frequency", "risk_aversion_weight", "=", "0.1", "# Weight for risk aversion based on future distances", "visit_frequency", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "# Set a frequency count for unvisited nodes based on historical data", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Total distance to unvisited nodes", "avg_distance", "=", "total_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average distance", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "visit_score", "=", "visit_frequency", ".", "get", "(", "node", ",", "0", ")", "# Get the visit frequency (default to 0 if not visited)", "risk_penalty", "=", "(", "avg_distance", "-", "direct_distance", ")", "/", "(", "avg_distance", "+", "1", ")", "# Normalized risk based on average distance", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "frequency_weight", "*", "visit_score", "+", "risk_aversion_weight", "*", "risk_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance", "cluster_weight", "=", "0.2", "# Weight for cluster potential savings", "future_cost_weight", "=", "0.2", "# Weight for future travel estimation", "historical_penalty_weight", "=", "0.1", "# Weight for historical traversal penalty", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "unvisited_count", "or", "1", ")", "historical_penalty", "=", "min", "(", "direct_distance", ",", "total_distance_to_destination", ")", "# Favor nodes that have lesser previous distance", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "cluster_weight", "*", "future_cost", ")", "-", "(", "historical_penalty_weight", "*", "historical_penalty", ")", "score", "+=", "(", "future_cost_weight", "*", "(", "total_distance_to_destination", "-", "direct_distance", ")", ")", "# Future distance favoring", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.703629072066983}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "historical_traversal_data", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate centrality score based on neighbors in unvisited nodes", "centrality_score", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "# Desirability score inversely related to historical traversal", "desirability_score", "=", "historical_traversal_data", "[", "node", "]", "penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", ")", "score", "=", "direct_distance", "+", "(", "0.5", "*", "centrality_score", ")", "-", "desirability_score", "+", "penalty", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "# Update historical traversal data for the selected node", "if", "best_node", "is", "not", "None", ":", "historical_traversal_data", "[", "best_node", "]", "+=", "1", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "closest_nodes", "=", "[", "]", "min_distance", "=", "float", "(", "'inf'", ")", "# Find the minimum distance to the unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "<", "min_distance", ":", "min_distance", "=", "distance", "closest_nodes", "=", "[", "node", "]", "elif", "distance", "==", "min_distance", ":", "closest_nodes", ".", "append", "(", "node", ")", "# Estimate future distances with a heuristic approach", "heuristic_distance", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "total_weight", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1", ")", "for", "node", "in", "closest_nodes", ")", "weighted_probs", "=", "[", "(", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1", ")", "+", "0.5", "*", "heuristic_distance", ")", "/", "total_weight", "for", "node", "in", "closest_nodes", "]", "next_node", "=", "random", ".", "choices", "(", "closest_nodes", ",", "weights", "=", "weighted_probs", ",", "k", "=", "1", ")", "[", "0", "]", "if", "closest_nodes", "else", "None", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "density_weight", "=", "0.5", "# Weight for the density of unvisited nodes", "travel_cost_weight", "=", "0.5", "# Weight for direct travel cost", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "unvisited_density", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "10", ")", "# Example threshold for density", "density_penalty", "=", "unvisited_density", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "(", "(", "direct_distance", "+", "density_penalty", ")", "*", "travel_cost_weight", ")", "+", "(", "total_distance_to_destination", "*", "density_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "# Constants for weighting", "alpha", "=", "0.5", "# Weight for direct distance score", "beta", "=", "0.3", "# Weight for cluster score", "gamma", "=", "0.2", "# Weight for sequence penalty", "# Calculate total distances to the remaining nodes", "total_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Cluster score with additional emphasis on node diversity based on distance to other unvisited nodes", "cluster_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "+", "1e-6", ")", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "# Sequence penalty: penalizing based on the distance of recently visited nodes", "sequence_penalty", "=", "sum", "(", "distance_matrix", "[", "previous_node", "]", "[", "node", "]", "for", "previous_node", "in", "unvisited_nodes", "if", "previous_node", "in", "unvisited_nodes", ")", "# Combined score incorporating cluster potential and diverse penalties", "combined_score", "=", "(", "cluster_score", "*", "beta", "/", "total_distance_remaining", ")", "-", "(", "distance_to_destination", "*", "gamma", ")", "-", "(", "distance_to_next", "*", "alpha", ")", "-", "(", "sequence_penalty", "*", "0.1", ")", "if", "combined_score", ">", "best_score", ":", "best_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 19.755196089866416}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_factor", "=", "0.7", "# Weight for distance minimization", "density_factor", "=", "0.3", "# Weight for node density effect", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "density_bonus", "=", "(", "1", "/", "average_distance_to_unvisited", ")", "if", "average_distance_to_unvisited", ">", "0", "else", "0", "score", "=", "direct_distance", "+", "total_distance_to_destination", "*", "distance_factor", "-", "density_bonus", "*", "density_factor", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.628785703835865}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm introduces a dynamic trade-off between local exploration and global awareness, with a focus on minimizing distance while considering overall route efficiency and a strategic lookahead to avoid clustering.}", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Local exploration: Cost to visit this node", "local_cost", "=", "distance_to_next", "# Global awareness: Average distance to remaining unvisited nodes", "avg_unvisited_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ",", "1", ")", "# Lookahead: Distance to destination, penalized for clustering", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "clustering_effect", "=", "len", "(", "unvisited_nodes", ")", "*", "(", "avg_unvisited_distance", "-", "distance_to_next", ")", "# Composite score calculation", "score", "=", "local_cost", "+", "clustering_effect", "+", "2", "*", "distance_to_destination", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 36.78309033261072}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the degree of each node in the unvisited set", "node_degree", "=", "{", "node", ":", "sum", "(", "1", "for", "i", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "distance_matrix", "[", "node", "]", "[", "i", "]", ">", "0", ")", "for", "node", "in", "unvisited_nodes", "}", "# Calculate cluster count based on a defined radius", "cluster_radius", "=", "5", "# Defined distance threshold for cluster influence", "cluster_count", "=", "sum", "(", "1", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<=", "cluster_radius", ")", "# Calculate scores for each unvisited node", "scores", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "(", "1", "+", "(", "1", "/", "(", "node_degree", "[", "node", "]", "+", "1", ")", ")", ")", ")", "-", "0.5", "*", "cluster_count", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the unvisited node with the minimum score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate a score for each unvisited node based on distance, connectivity, and priority towards the destination", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "# Introducing a penalty based on the number of remaining unvisited neighbors", "remaining_neighbors", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "penalty", "=", "remaining_neighbors", "*", "0.5", "# Penalty factor", "# Combine scores: prioritize closer nodes to destination while considering connectivity and the penalty", "score", "=", "(", "distance_to_node", "+", "distance_to_destination", ")", "+", "connectivity_score", "-", "penalty", "scores", "[", "node", "]", "=", "score", "# Lower score is better", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_distance_weight", "=", "0.5", "# Weight for direct distance", "unvisited_concentration_weight", "=", "0.4", "# Weight for concentration of unvisited nodes", "future_cost_weight", "=", "0.2", "# Weight for the estimated cost of visiting other unvisited nodes", "time_penalty_weight", "=", "0.1", "# Weight for time-based penalty for longer paths", "# Function to calculate concentration score based on unvisited nodes nearby", "def", "calculate_concentration_score", "(", "node", ")", ":", "concentration_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "concentration_score", "+=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "+", "1e-9", ")", "# Avoid division by zero", "return", "concentration_score", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Function to estimate future cost", "def", "estimate_future_cost", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Function to calculate time penalty based on distance to the destination", "def", "calculate_time_penalty", "(", "node", ")", ":", "return", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "0.1", "# Basic penalty for further distances", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "concentration_score", "=", "calculate_concentration_score", "(", "node", ")", "future_cost", "=", "estimate_future_cost", "(", "node", ")", "time_penalty", "=", "calculate_time_penalty", "(", "node", ")", "# Combined scoring mechanism", "score", "=", "(", "-", "immediate_distance_weight", "*", "immediate_distance", "+", "unvisited_concentration_weight", "*", "concentration_score", "+", "future_cost_weight", "*", "future_cost", "-", "time_penalty_weight", "*", "time_penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.499627165516983}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "0.7", "+", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "0.2", ")", "+", "(", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "5", "]", ")", "*", "0.1", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.250766465982091}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "connectivity_factor", "=", "{", "node", ":", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "float", "(", "'inf'", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "average_distance", ")", "connectivity_score", "=", "connectivity_factor", "[", "node", "]", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "score", "=", "direct_distance", "+", "distance_penalty", "-", "connectivity_score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "candidates", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "strategic_penalty", "=", "len", "(", "unvisited_nodes", ")", "*", "distance_to_node", "# Penalizes longer paths by scaling with unvisited count", "randomness", "=", "random", ".", "uniform", "(", "0.85", ",", "1.15", ")", "# Introduce variation with a broader range", "score", "=", "(", "distance_to_node", "*", "0.4", ")", "+", "(", "distance_to_destination", "*", "0.4", ")", "-", "(", "strategic_penalty", "*", "0.1", ")", "*", "randomness", "candidates", ".", "append", "(", "(", "node", ",", "score", ")", ")", "next_node", "=", "min", "(", "candidates", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 35.57951134479413}
{"code_tokens": ["import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_combined_score", "=", "float", "(", "'-inf'", ")", "# Calculate constants for weighting", "alpha", "=", "0.6", "# Weight for distance score", "beta", "=", "0.4", "# Weight for cohesion score", "# Total number of unvisited nodes", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Cohesion score: average distance to all other unvisited nodes", "cohesion_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "/", "(", "num_unvisited", "-", "1", ")", "if", "num_unvisited", ">", "1", "else", "0", "# Heuristic score based on the connectivity density (higher is better)", "connectivity_density", "=", "len", "(", "[", "other_node", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "(", "distance_to_next", "+", "2", ")", "]", ")", "# Consider nodes 'close' to the current one", "# Combined score: balance between distance and cohesion with connectivity density", "combined_score", "=", "(", "cohesion_score", "*", "beta", "+", "(", "connectivity_density", "*", "distance_to_next", "*", "-", "1", ")", "*", "alpha", ")", "if", "combined_score", ">", "max_combined_score", ":", "max_combined_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.842236937616268}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "penalty_weight", "=", "0.4", "# Weight for penalty based on past path length", "future_gain_weight", "=", "0.2", "# Weight for potential future savings", "total_distance_so_far", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_future_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "penalty", "=", "total_distance_so_far", "*", "(", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "# Combined scoring mechanism", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "penalty_weight", "*", "penalty", "-", "future_gain_weight", "*", "average_future_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.622307843135376}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance", "heuristic_weight", "=", "0.3", "# Weight for heuristic distance to a random unvisited node", "savings_weight", "=", "0.2", "# Weight for potential future savings", "# Select a random unvisited node for heuristic calculation", "heuristic_target", "=", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "if", "unvisited_nodes", "else", "None", "# Function to calculate savings based on remaining nodes", "def", "calculate_savings", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "dest", "]", "for", "dest", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_distance", "=", "distance_matrix", "[", "node", "]", "[", "heuristic_target", "]", "if", "heuristic_target", "else", "0", "savings", "=", "calculate_savings", "(", "node", ")", "# Combined scoring mechanism", "score", "=", "(", "-", "direct_weight", "*", "direct_distance", "+", "heuristic_weight", "*", "heuristic_distance", "+", "savings_weight", "*", "savings", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.847471471244901}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "penalty_factor", "=", "1.2", "# Heuristic penalty for nodes farther from the destination", "if", "unvisited_nodes", ":", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "goal_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Cost is a combination of direct distance and the heuristic penalty based on distance to the destination", "total_cost", "=", "direct_distance", "+", "penalty_factor", "*", "goal_distance", "if", "total_cost", "<", "min_cost", ":", "min_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.260464032539938}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "unvisited_nodes", "=", "list", "(", "unvisited_nodes", ")", "def", "score", "(", "node", ")", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combine distance to next node and maximum distance left to destination", "return", "distance_to_node", "+", "remaining_distance_to_destination", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "score", ")", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.7", "# Weight for distance to unvisited nodes", "heuristic_weight", "=", "0.3", "# Weight for heuristic based on average distance", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_unvisited_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_distance", "*", "distance_weight", ")", "+", "(", "average_unvisited_distance", "*", "heuristic_weight", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.437843667925288}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_effect", "=", "average_distance", "/", "2", "penalty", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "4", "score", "=", "direct_distance", "+", "cluster_effect", "+", "penalty", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.223538322856397}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "penalty_factor", "=", "0.1", "# Penalty for visiting nodes that have been close to the current node", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "penalty", "=", "penalty_factor", "*", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Add penalty based on distance from current node", "score", "=", "direct_distance", "+", "proximity_to_destination", "+", "penalty", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.924932750374845}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "reward_factor", "=", "0.3", "# Weight for potential reward", "proximity_factor", "=", "0.5", "# Weight for proximity influence", "potential_reward_threshold", "=", "10", "# Threshold for considering potential rewards", "# Calculate total distances from unvisited nodes to destination", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_effect", "=", "1", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "# Effect of remaining nodes", "reward_effect", "=", "max", "(", "0", ",", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "potential_reward_threshold", ")", "# Combine scores with proximity and potential reward", "score", "=", "direct_distance", "+", "proximity_factor", "*", "proximity_effect", "-", "reward_factor", "*", "reward_effect", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.244455041163539}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the minimum distance and node degree", "min_distance", "=", "float", "(", "'inf'", ")", "next_nodes", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "node_degree", "=", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", "]", ")", "# Calculate a score incorporating distance and a penalty based on the degree", "score", "=", "distance", "+", "(", "1", "/", "(", "node_degree", "+", "1", ")", ")", "# Penalty inversely related to degree", "if", "score", "<", "min_distance", ":", "min_distance", "=", "score", "next_nodes", "=", "[", "node", "]", "elif", "score", "==", "min_distance", ":", "next_nodes", ".", "append", "(", "node", ")", "# Introduce random selection among the closest nodes for exploration", "if", "next_nodes", ":", "return", "random", ".", "choice", "(", "next_nodes", ")", "return", "None"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_distance_to_dest", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_dest", "=", "total_distance_to_dest", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_dest", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# New scoring function with total distance consideration and adjusted incentive", "score", "=", "(", "direct_distance", "+", "0.5", "*", "(", "distance_to_dest", "-", "avg_distance_to_dest", ")", "**", "2", ")", "*", "(", "1", "+", "(", "direct_distance", "/", "10", ")", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.083098697696693}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "decay_factor", "=", "0.5", "# Adjusts how much distant nodes influence the scoring", "if", "unvisited_nodes", ":", "# Calculate average distance to unvisited nodes", "avg_distance", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "# Calculate the urgency factor based on the remaining unvisited nodes", "urgency_factor", "=", "(", "1", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", ")", "**", "2", "# Diminishing returns as unvisited nodes decrease", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "weighted_remaining_distance", "=", "total_remaining_distance", "*", "decay_factor", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Combine scores using average distance, weighted remaining distance, and urgency factor", "score", "=", "(", "direct_distance", "*", "0.4", ")", "+", "(", "weighted_remaining_distance", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "*", "0.4", ")", "+", "(", "avg_distance", "*", "0.2", "*", "urgency_factor", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.131614624962722}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "penalty_factor", "=", "0.5", "# Penalty for increasing path length", "diversity_bonus_factor", "=", "1.5", "# Bonus for connecting to unvisited nodes", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.6", "# Weight for direct distance", "connection_weight", "=", "0.2", "# Weight for connection bonuses", "return_bonus_weight", "=", "0.2", "# Weight for return path optimization", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "return_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Score considering both distance and potential path reward", "score", "=", "-", "direct_distance_weight", "*", "direct_distance", "+", "return_bonus_weight", "*", "return_distance", "# Adding connection score based on the number of unvisited nodes the current node can reach", "connection_score", "=", "sum", "(", "1", "for", "next_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "<", "direct_distance", ")", "score", "+=", "connection_weight", "*", "connection_score", "*", "diversity_bonus_factor", "# Penalty for paths that extend beyond current direct distances or increase total path length", "penalty", "=", "penalty_factor", "*", "(", "direct_distance", "if", "connection_score", ">", "0", "else", "0", ")", "score", "-=", "penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 33.05291257020945}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm introduces a combination of distance metrics weighted by a heuristic factor based on upcoming unvisited nodes and their average distance to the destination.}", "next_node", "=", "None", "min_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "distance_to_next", "+", "(", "avg_distance_to_destination", "*", "len", "(", "unvisited_nodes", ")", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 14.115707035213294}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "savings_weight", "=", "0.6", "# Adjusted weight for cluster savings", "distance_weight", "=", "0.4", "# Adjusted weight for direct distance cost", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Dynamic penalty based on the number of unvisited nodes and direct distance", "dynamic_penalty", "=", "0.3", "*", "(", "len", "(", "unvisited_nodes", ")", "**", "2", ")", "/", "(", "direct_distance", "+", "1", ")", "# Avoid division by zero", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "(", "direct_distance", "+", "dynamic_penalty", ")", "+", "(", "savings_weight", "*", "cluster_average_distance", ")", "+", "(", "distance_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 36.00829799019978}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "time_weight", "=", "0.3", "# Weight for estimated travel time", "diversity_weight", "=", "0.2", "# Weight for diversity in visited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "estimated_time", "=", "direct_distance", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "# Example time estimation", "diversity_score", "=", "len", "(", "set", "(", "unvisited_nodes", ")", "-", "set", "(", "[", "node", "]", ")", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Diversity factor", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "time_weight", "*", "estimated_time", "+", "diversity_weight", "*", "diversity_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.126780114670813}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "potential_connections", "=", "sum", "(", "1", "for", "next_node", "in", "unvisited_nodes", "if", "next_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "<", "float", "(", "'inf'", ")", ")", "# Incorporating the probabilistic element", "scaling_factor", "=", "(", "1", "/", "(", "potential_connections", "+", "1", ")", ")", "if", "potential_connections", ">", "0", "else", "1", "total_cost", "=", "direct_distance", "*", "scaling_factor", "# Introduce randomness", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "# 50% chance to consider current cost", "total_cost", "+=", "direct_distance", "*", "0.1", "# Slightly increase cost with a small random factor", "if", "total_cost", "<", "min_cost", ":", "min_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.625724452292737}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "penalty_factor", "=", "0.5", "# Penalty for long jumps", "visited_nodes", "=", "[", "]", "# To keep track of visited nodes", "# Calculate the number of connections to visited nodes for each unvisited node", "for", "node", "in", "unvisited_nodes", ":", "visited_connections", "=", "sum", "(", "1", "for", "visited", "in", "visited_nodes", "if", "distance_matrix", "[", "visited", "]", "[", "node", "]", "<", "5", ")", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "long_jump_penalty", "=", "penalty_factor", "*", "(", "direct_distance", "-", "5", ")", "if", "direct_distance", ">", "5", "else", "0", "score", "=", "direct_distance", "-", "visited_connections", "+", "long_jump_penalty", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "if", "next_node", "is", "not", "None", ":", "visited_nodes", ".", "append", "(", "next_node", ")", "# Mark the next node as visited", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "proximity_bias", "=", "1.5", "# Factor to increase influence of nodes closer to the destination", "if", "unvisited_nodes", ":", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Cost is a combination of direct distance adjusted by proximity bias", "total_cost", "=", "direct_distance", "*", "(", "1", "+", "proximity_bias", "*", "(", "distance_to_destination", "/", "total_distance", ")", ")", "if", "total_cost", "<", "min_cost", ":", "min_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.043696675391052}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Start with positive infinity for minimization", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_destination", "=", "total_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", "total_scores", "=", "0", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "+", "average_distance_to_destination", "# Adding a bias based on the average distances of unvisited nodes", "distance_to_other_nodes", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "for", "unvisited", "in", "unvisited_nodes", ")", "average_distance_to_unvisited", "=", "distance_to_other_nodes", "/", "len", "(", "unvisited_nodes", ")", "# Introducing a decay factor impacting nodes farther away from the current node", "decay_factor", "=", "1", "/", "(", "1", "+", "average_distance_to_unvisited", ")", "score", "*=", "decay_factor", "scores", "[", "node", "]", "=", "score", "total_scores", "+=", "score", "# Randomly select from the best options weighted by their scores", "threshold", "=", "random", ".", "uniform", "(", "0", ",", "total_scores", ")", "cumulative_score", "=", "0", "for", "node", ",", "score", "in", "scores", ".", "items", "(", ")", ":", "cumulative_score", "+=", "score", "if", "cumulative_score", ">=", "threshold", ":", "return", "node", "# Fallback in case of an error", "return", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")"], "code_perf": 27.758402345788333}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity to unvisited nodes", "time_benefit_weight", "=", "0.3", "# Weight for closer connections to visited nodes", "cluster_factor", "=", "0.2", "# Factor to encourage visiting nearby clusters", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Score for proximity to unvisited nodes", "proximity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Time benefit score based on distance to a cluster of recently visited nodes", "recent_visited_nodes", "=", "[", "n", "for", "n", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "n", "not", "in", "unvisited_nodes", "and", "n", "!=", "current_node", "]", "time_benefit_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "visited_node", "]", "for", "visited_node", "in", "recent_visited_nodes", ")", "/", "(", "len", "(", "recent_visited_nodes", ")", "or", "1", ")", "# Calculating the final score with penalties and benefits", "score", "=", "(", "proximity_score", "*", "proximity_weight", ")", "+", "(", "time_benefit_score", "*", "time_benefit_weight", ")", "-", "direct_distance", "-", "(", "cluster_factor", "*", "proximity_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.509983493056131}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_direct_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "average_direct_distance", "=", "total_direct_distance", "/", "num_unvisited", "penalty_factor", "=", "1.5", "# Penalty for opting for farther nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "direct_distance", "+", "penalty_factor", "*", "distance_to_destination", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.46985744010961}
{"code_tokens": ["# {The algorithm utilizes a combined score based on the Euclidean distances to both unvisited nodes and the destination node, with an exploration factor that prioritizes nodes farther from the destination while balancing the nearest unvisited node.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "exploration_factor", "=", "(", "1", "+", "distance_to_destination", ")", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "# Encourage exploration based on remaining nodes", "scores", "[", "node", "]", "=", "distance_to_node", "*", "exploration_factor", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.146115673616158}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm combines distance with a desirability factor that prioritizes closer nodes but also accounts for the total distance to the destination, aiming for a balance between immediate proximity and the overall journey.}", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "total_distance", "=", "distance_to_next", "+", "distance_to_destination", "desirability", "=", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Favor nodes that reduce overall unvisited count", "score", "=", "total_distance", "*", "(", "1", "-", "desirability", ")", "# Encourage visiting nodes that lead to shorter total paths", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "node_scores", "=", "{", "}", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Calculate a score for each unvisited node based on distance and a dynamic exploration factor", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate exploration factor as a function of average distance to unvisited nodes", "exploration_factor", "=", "(", "avg_distance_to_unvisited", "-", "direct_distance", ")", "*", "0.3", "# Combine direct distance and exploration factor", "node_scores", "[", "node", "]", "=", "direct_distance", "+", "exploration_factor", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_ratio", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate the ratio of direct distance to distance to destination", "if", "distance_to_destination", ">", "0", ":", "# Avoid division by zero", "ratio", "=", "direct_distance", "/", "distance_to_destination", "else", ":", "ratio", "=", "float", "(", "'inf'", ")", "if", "ratio", "<", "best_ratio", ":", "best_ratio", "=", "ratio", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.831500052161287}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate the diversity factor as the average distance between unvisited nodes", "diversity_factor", "=", "sum", "(", "distance_matrix", "[", "a", "]", "[", "b", "]", "for", "a", "in", "unvisited_nodes", "for", "b", "in", "unvisited_nodes", "if", "a", "!=", "b", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "+", "1e-5", ")", "for", "node", "in", "unvisited_nodes", ":", "immediate_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "proximity_weight", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Combined score factoring immediate cost, diversity, and proximity", "score", "=", "(", "immediate_cost", "+", "remaining_cost", ")", "/", "(", "diversity_factor", "+", "1e-5", ")", "+", "proximity_weight", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.664923111935389}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for distance consideration", "importance_weight", "=", "0.6", "# Weight for node importance", "# Update importance based on visitation frequency (for simplicity, initialized here as 1)", "node_importance", "=", "{", "node", ":", "1", "for", "node", "in", "unvisited_nodes", "}", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "normalized_distance", "=", "direct_distance", "/", "total_distance_to_destination", "if", "total_distance_to_destination", "else", "0", "# Calculate importance score from visitation frequency (higher is better)", "importance_score", "=", "node_importance", "[", "node", "]", "# Calculate the score based on distance and importance", "score", "=", "(", "importance_weight", "*", "importance_score", ")", "-", "(", "distance_weight", "*", "normalized_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.389688567398596}
{"code_tokens": ["import", "numpy", "as", "np", "def", "calculate_centroid", "(", "cluster", ",", "distance_matrix", ")", ":", "if", "not", "cluster", ":", "return", "None", "cluster_coordinates", "=", "np", ".", "array", "(", "[", "distance_matrix", "[", "cluster_node", "]", "for", "cluster_node", "in", "cluster", "]", ")", "centroid", "=", "np", ".", "mean", "(", "cluster_coordinates", ",", "axis", "=", "0", ")", "closest_node", "=", "cluster", "[", "np", ".", "argmin", "(", "np", ".", "linalg", ".", "norm", "(", "cluster_coordinates", "-", "centroid", ",", "axis", "=", "1", ")", ")", "]", "return", "closest_node", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "clusters", "=", "[", "]", "cluster_size", "=", "2", "# Size of clusters to form", "unvisited_nodes", "=", "list", "(", "unvisited_nodes", ")", "for", "i", "in", "range", "(", "0", ",", "len", "(", "unvisited_nodes", ")", ",", "cluster_size", ")", ":", "clusters", ".", "append", "(", "unvisited_nodes", "[", "i", ":", "i", "+", "cluster_size", "]", ")", "nearest_cluster", "=", "None", "min_distance", "=", "float", "(", "'inf'", ")", "for", "cluster", "in", "clusters", ":", "centroid_node", "=", "calculate_centroid", "(", "cluster", ",", "distance_matrix", ")", "if", "centroid_node", "is", "not", "None", ":", "distance_to_centroid", "=", "distance_matrix", "[", "current_node", "]", "[", "centroid_node", "]", "if", "distance_to_centroid", "<", "min_distance", ":", "min_distance", "=", "distance_to_centroid", "nearest_cluster", "=", "cluster", "return", "nearest_cluster", "[", "0", "]", "if", "nearest_cluster", "else", "None"], "code_perf": 12.599394683640584}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate the distance to the destination from the current node", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Dynamic weighting factor based on the number of visited nodes", "total_nodes", "=", "len", "(", "distance_matrix", ")", "num_visited", "=", "total_nodes", "-", "len", "(", "unvisited_nodes", ")", "explore_weight", "=", "0.5", "+", "(", "0.5", "*", "(", "num_visited", "/", "total_nodes", ")", ")", "# Increases exploration weight with more visits", "optimize_weight", "=", "1.0", "-", "explore_weight", "# Adjust optimize weight accordingly", "# Calculate scores for each unvisited node", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "potential_efficient_score", "=", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", ")", "*", "(", "1", "+", "(", "num_visited", "/", "total_nodes", ")", ")", "# Compute the weighted score", "scores", "[", "node", "]", "=", "(", "explore_weight", "*", "distance_to_node", ")", "+", "(", "optimize_weight", "*", "potential_efficient_score", ")", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.911824453516497}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate accessibility score based on distances to other unvisited nodes", "accessibility_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "density_factor", "=", "len", "(", "[", "other", "for", "other", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "3", "]", ")", "# considers close-unvisited nodes", "# Combine direct distance with accessibility score and density factor", "score", "=", "direct_distance", "+", "(", "accessibility_score", "/", "(", "1", "+", "density_factor", ")", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.28547121499269}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight focused on direct proximity", "connectivity_weight", "=", "0.4", "# Weight for the density of connections to unvisited nodes", "penalty_weight", "=", "0.2", "# Penalty for revisiting previous nodes (if any)", "total_distance_from_node", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "-", "direct_distance", "# Total connections minus returning distance", "node_density", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "# Density of unvisited nodes relative to the current one", "penalty_score", "=", "0", "# Assume no penalty initially", "score", "=", "-", "proximity_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "*", "node_density", "-", "penalty_weight", "*", "penalty_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.554495963211346}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "score_dict", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "0.1", "*", "distance", "+", "(", "total_distance", "/", "len", "(", "unvisited_nodes", ")", ")", "*", "0.05", "# Dynamic penalty based on total distance", "score", "=", "distance", "+", "penalty", "score_dict", "[", "node", "]", "=", "score", "min_score", "=", "min", "(", "score_dict", ".", "values", "(", ")", ")", "best_candidates", "=", "[", "node", "for", "node", ",", "score", "in", "score_dict", ".", "items", "(", ")", "if", "score", "==", "min_score", "]", "if", "best_candidates", ":", "return", "random", ".", "choice", "(", "best_candidates", ")", "return", "None"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate average distance to the destination", "avg_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Compute cluster density scores", "cluster_density_scores", "=", "{", "node", ":", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "2", ")", "for", "node", "in", "unvisited_nodes", "}", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_density_penalty", "=", "1", "/", "(", "cluster_density_scores", "[", "node", "]", "+", "1", ")", "# Higher density, lower score", "score", "=", "(", "distance", "*", "0.6", "+", "avg_distance_to_destination", "*", "0.4", ")", "*", "cluster_density_penalty", "*", "random", ".", "uniform", "(", "0.95", ",", "1.05", ")", "# Adding randomness", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.0420421041191625}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "visit_frequency", "=", "{", "node", ":", "0", "for", "node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "}", "# Tracks how many times each node has been visited", "if", "unvisited_nodes", ":", "immediate_weight", "=", "0.5", "# Weight for immediate travel cost", "popularity_weight", "=", "0.2", "# Influence of node visit popularity", "complexity_weight", "=", "0.3", "# Weight for travel complexity", "randomness_weight", "=", "0.1", "# Influence of randomness factor to explore new paths", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average distance to remaining nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Popularity-based penalty for the frequency of visits", "popularity_penalty", "=", "visit_frequency", "[", "node", "]", "*", "0.2", "# Higher frequency means higher penalty", "# Complexity factor based on how far the remaining nodes are from the current node", "remaining_complexity", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "-", "direct_distance", "# Introduce randomness into the score to encourage exploration of nodes", "randomness", "=", "random", ".", "uniform", "(", "0", ",", "randomness_weight", ")", "score", "=", "(", "-", "immediate_weight", "*", "direct_distance", ")", "-", "popularity_penalty", "+", "(", "complexity_weight", "*", "remaining_complexity", ")", "+", "randomness", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "visit_frequency", "[", "next_node", "]", "+=", "1", "# Update visit frequency for the selected next node", "return", "next_node"], "code_perf": 9.976160932521326}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.35", "# Weight for direct distance", "cluster_weight", "=", "0.25", "# Weight for cluster potential savings", "risk_weight", "=", "0.2", "# Weight for risk consideration", "trend_weight", "=", "0.2", "# Weight for visitation trends", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Dummy trend data simulating which nodes have been visited more frequently (for demonstration)", "visit_trend", "=", "{", "node", ":", "1", "for", "node", "in", "unvisited_nodes", "}", "# Initialize trend counts", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "risk_factor", "=", "direct_distance", "/", "(", "total_distance_to_destination", "+", "1", ")", "# Simulating potential hazard", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "trend_factor", "=", "visit_trend", "[", "node", "]", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "cluster_weight", "*", "cluster_average_distance", ")", "-", "(", "risk_weight", "*", "risk_factor", ")", "+", "(", "trend_weight", "*", "trend_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.422308896805983}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "lowest_expected_cost", "=", "float", "(", "'inf'", ")", "# Convert unvisited_nodes to a list for indexing", "unvisited_nodes_list", "=", "list", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes_list", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate expected cost of visiting this node", "expected_cost", "=", "direct_distance", "# Compute potential future cost to destination based on remaining unvisited nodes", "for", "next_node", "in", "unvisited_nodes_list", ":", "if", "next_node", "!=", "node", ":", "expected_cost", "+=", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "/", "len", "(", "unvisited_nodes_list", ")", "# Add cost to the destination", "expected_cost", "+=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Evaluate if this node has the lowest expected cost", "if", "expected_cost", "<", "lowest_expected_cost", ":", "lowest_expected_cost", "=", "expected_cost", "best_node", "=", "node", "return", "best_node"], "code_perf": 9.242071761591692}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Normalizing distances to create a scale between 0 and 1", "normalized_distance_to_next", "=", "1", "-", "(", "distance_to_next", "/", "(", "distance_to_next", "+", "distance_to_destination", "+", "1", ")", ")", "# Urgency score based on how many unvisited nodes remain", "urgency_score", "=", "1", "/", "(", "num_unvisited", "+", "1", ")", "# Penalty for longer paths (increase with distance to next node)", "penalty", "=", "1", "-", "(", "1", "/", "(", "1", "+", "distance_to_next", ")", ")", "# Combined score", "score", "=", "normalized_distance_to_next", "*", "urgency_score", "*", "penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 34.061368006589234}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate a penalty based on the distance to the destination", "penalty", "=", "2", "*", "(", "distance_to_destination", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", ")", "# Calculate the score considering both direct distance and penalty", "score", "=", "direct_distance", "+", "penalty", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.200398563964161}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "historical_weight", "=", "0.4", "# Weight for historical travel efficiency", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.2", "# Weight for connectivity score", "if", "unvisited_nodes", ":", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Historical score based on distances to previously visited nodes", "historical_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "visited", "]", "for", "visited", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "visited", "not", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Calculate connectivity score based on remaining connections", "connectivity_score", "=", "len", "(", "[", "next", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", "]", ")", "# Combined score with added historical efficiency", "score", "=", "(", "-", "direct_distance_weight", "*", "direct_distance", "+", "historical_weight", "*", "historical_score", "+", "connectivity_weight", "*", "connectivity_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.572265478602726}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "connection_weight", "=", "0.5", "# Weight for connection factor", "distance_weight", "=", "0.5", "# Weight for distance factor", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connection_count", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "# Calculate strategic score based on distance and number of connections", "score", "=", "connection_weight", "*", "connection_count", "-", "distance_weight", "*", "direct_distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate the overall centrality of unvisited nodes", "centrality_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "centrality", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "+", "1e-6", ")", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "centrality_scores", "[", "node", "]", "=", "centrality", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate distance penalty based on average distance", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "distance_penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "average_distance", ")", "# Calculate the new heuristic score incorporating centrality", "heuristic_score", "=", "centrality_scores", "[", "node", "]", "score", "=", "direct_distance", "+", "distance_penalty", "-", "heuristic_score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 28.351623969242468}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm uses a combination of greedy selection based on distance and a spread-out factor that adjusts for the average distance of unvisited nodes, helping to both minimize immediate distance and explore unvisited nodes more effectively.}", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "spread_factor", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ",", "1", ")", "score", "=", "distance_to_next", "+", "(", "avg_distance", "-", "spread_factor", ")", "# Minimize the distance while maintaining exploration", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.424216980256856}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate scores for each unvisited node", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_penalty", "=", "len", "(", "unvisited_nodes", ")", "-", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "score", "=", "distance", "+", "(", "connectivity_penalty", "*", "0.5", ")", "scores", "[", "node", "]", "=", "score", "# Select the unvisited node with the minimum score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "min_distance_to_unvisited", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "connectivity_penalty", "=", "1.5", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_distance_from_node", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "connectivity_score", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "heuristic_score", "=", "0.5", "*", "(", "avg_distance_from_node", "-", "direct_distance", ")", "+", "0.5", "*", "(", "min_distance_to_unvisited", "-", "direct_distance", ")", "score", "=", "direct_distance", "+", "heuristic_score", "-", "(", "connectivity_penalty", "*", "(", "1", "/", "(", "connectivity_score", "+", "1", ")", ")", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 31.616956377461854}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the centroid of the unvisited nodes", "centroid_x", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "centroid_y", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "current_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "centroid_distance", "=", "(", "(", "centroid_x", "-", "node", ")", "**", "2", "+", "(", "centroid_y", "-", "node", ")", "**", "2", ")", "**", "0.5", "# Score is a combination of direct distance and a penalty based on centroid distance", "score", "=", "direct_distance", "+", "centroid_distance", "*", "0.5", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 25.584686028133333}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "penalty_factor", "=", "0.5", "# Penalty for selecting longer paths", "distance_weight", "=", "0.5", "# Weight for direct distance minimization", "future_path_weight", "=", "0.4", "# Weight for future path distance consideration", "loop_closure_weight", "=", "0.1", "# Weight for forming shorter loops", "if", "unvisited_nodes", ":", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "loop_closure_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate the combined score while considering a penalty for future path length", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "future_path_weight", "*", "future_distance", "+", "loop_closure_weight", "*", "loop_closure_score", "-", "penalty_factor", "*", "direct_distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.399869511517693}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "central_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", ")", "exploration_weight", "=", "0.5", "# Weight for encouraging visits to central nodes", "direct_influence_weight", "=", "0.5", "# Weight for direct distance influence", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "centrality_score", "=", "distance_matrix", "[", "central_node", "]", "[", "node", "]", "# Distance to central node", "score", "=", "(", "direct_influence_weight", "*", "direct_distance", ")", "+", "(", "exploration_weight", "*", "centrality_score", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 31.616956377461854}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm incorporates a blend of nearest neighbor and diversity incentives, where the next node selection is influenced by the distance to neighboring nodes and a diversity score that penalizes selecting nearby nodes in favor of more distant, unvisited ones.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "diversity_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "+", "1", ")", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "# Encourages selection of distant nodes", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "+", "(", "diversity_score", "/", "max", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ",", "1", ")", ")", "# Combine proximity and diversity", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.087230425545947}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.6", "# Weight for direct distance cost", "cluster_weight", "=", "0.4", "# Weight for clustering efficiency", "# Calculate total distance to destination", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Calculate the minimum spanning tree (MST) cost of unvisited nodes", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "if", "unvisited_count", ">", "1", ":", "mst_cost", "=", "sum", "(", "sorted", "(", "[", "min", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "for", "node", "in", "unvisited_nodes", "]", ")", ")", "/", "unvisited_count", "else", ":", "mst_cost", "=", "0", "# No MST cost if there's only one unvisited node", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "-", "(", "direct_distance", "*", "distance_weight", ")", "+", "(", "mst_cost", "*", "cluster_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "cluster_radius", "=", "5", "# Defined distance threshold for cluster influence", "cluster_count", "=", "sum", "(", "1", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<=", "cluster_radius", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_effect", "=", "cluster_count", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "# Normalize cluster influence", "score", "=", "direct_distance", "+", "0.5", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "-", "0.3", "*", "cluster_effect", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.450370583313572}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "base_distance_weight", "=", "0.5", "# Base weight for distance", "proximity_weight", "=", "0.4", "# Weight for attractiveness based on proximity to unvisited nodes", "randomness_weight", "=", "0.1", "# Factor for introducing randomness in node selection", "alignment_weight", "=", "0.1", "# Weight for alignment towards destination", "if", "unvisited_nodes", ":", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "total_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "alignment_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combining scores with a probabilistic influence", "score", "=", "(", "-", "base_distance_weight", "*", "direct_distance", "+", "proximity_weight", "*", "proximity_score", "+", "alignment_weight", "*", "alignment_score", "+", "randomness_weight", "*", "random", ".", "uniform", "(", "0", ",", "1", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.830433814725971}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate the average distance to unvisited nodes", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate a dynamic penalty based on average distance to unvisited nodes", "penalty", "=", "(", "average_distance", "-", "direct_distance", ")", "/", "average_distance", "if", "average_distance", ">", "0", "else", "0", "# Gradient incentive based on direction towards the destination", "direction_incentive", "=", "(", "1", "+", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "direct_distance", ")", "/", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ">", "0", "else", "1", "# Score combines direct distance, penalty, and direction incentive", "score", "=", "direct_distance", "*", "(", "1", "-", "penalty", ")", "*", "direction_incentive", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 10.64266366187639}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance to unvisited nodes", "neighbor_weight", "=", "0.3", "# Weight for similarity to nearby unvisited nodes", "attractiveness_weight", "=", "0.2", "# Weight for attractiveness to destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate the average nearest neighbor distance among unvisited nodes", "nearest_neighbors", "=", "[", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "]", "average_nearest_distance", "=", "sum", "(", "nearest_neighbors", ")", "/", "(", "len", "(", "nearest_neighbors", ")", "or", "1", ")", "score", "=", "(", "direct_distance", "*", "direct_weight", ")", "+", "(", "distance_to_destination", "*", "attractiveness_weight", ")", "-", "(", "average_nearest_distance", "*", "neighbor_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 35.59481868197062}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "score", "=", "(", "avg_distance_to_unvisited", "-", "distance_to_next", ")", "+", "(", "1", "/", "(", "distance_to_destination", "+", "1e-6", ")", ")", "# Adding a penalty for distance to destination", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.747630688280983}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the decaying factor based on the furthest unvisited node", "furthest_distance", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "decay_factor", "=", "1", "/", "(", "1", "+", "furthest_distance", ")", "node_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Penalize distant nodes using the decay factor", "score", "=", "direct_distance", "*", "decay_factor", "node_scores", "[", "node", "]", "=", "score", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediacy_weight", "=", "0.4", "# Weight for direct travel cost", "long_term_weight", "=", "0.6", "# Weight for future savings", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_next_node", "]", "for", "next_next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "total_score", "=", "-", "(", "direct_distance", "*", "immediacy_weight", ")", "+", "(", "(", "total_distance_to_destination", "+", "future_cost", ")", "*", "long_term_weight", ")", "if", "total_score", ">", "max_score", ":", "max_score", "=", "total_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.631844723016577}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "exploration_weight", "=", "0.4", "# Weight for exploration bias", "distance_weight", "=", "0.5", "# Weight for direct distance", "penalty_weight", "=", "0.1", "# Penalty for previously visited nodes", "if", "unvisited_nodes", ":", "# Calculate previously visited nodes for penalty", "penalty_score", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "direction_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate the overall score", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "exploration_weight", "*", "heuristic_score", "+", "direction_score", "-", "penalty_weight", "*", "penalty_score", ")", "# Introduce exploration randomness", "if", "random", ".", "random", "(", ")", "<", "0.1", ":", "# 10% chance to randomly select a node", "next_node", "=", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "return", "next_node", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 24.135534395145825}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "visibility_weight", "=", "0.7", "# Higher weight for visibility towards future nodes", "proximity_weight", "=", "0.3", "# Weight for proximity to destination", "direct_distance_factor", "=", "0.5", "# Factor for direct distance impact", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "visibility_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "next_candidate", "]", "for", "next_candidate", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next_candidate", "]", ">", "0", ")", "# 1/distance to future options", "proximity_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "visibility_weight", "*", "visibility_score", "-", "(", "direct_distance_factor", "*", "direct_distance", ")", "+", "(", "proximity_weight", "*", "proximity_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 29.147902451565415}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "import", "numpy", "as", "np", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "risk_weight", "=", "0.4", "# Weight for potential future risk", "exploration_weight", "=", "0.2", "# Weight for encouraging less-visited nodes", "# Function to calculate potential future risk based on unvisited nodes", "def", "calculate_future_risk", "(", "node", ")", ":", "return", "np", ".", "max", "(", "[", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "]", ")", "# Initialize visit counts for nodes if not present", "global", "node_visit_counts", "node_visit_counts", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "# Update visit counts at each call", "node_visit_counts", "[", "node", "]", "=", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", "+", "1", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_risk", "=", "calculate_future_risk", "(", "node", ")", "exploration_factor", "=", "1", "/", "(", "node_visit_counts", "[", "node", "]", "+", "1", ")", "# Encourage less-visited nodes", "# Combined scoring mechanism with risk and exploration factor", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "risk_weight", "*", "future_risk", "*", "exploration_factor", "-", "exploration_weight", "*", "node_visit_counts", "[", "node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.451445618429355}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance", "=", "total_distance_to_unvisited", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_score", "=", "abs", "(", "avg_distance", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "score", "=", "direct_distance", "+", "heuristic_score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.9915172757275315}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "pheromone_matrix", "=", "np", ".", "ones", "(", "distance_matrix", ".", "shape", ")", "# Initialize pheromone levels", "pheromone_decay", "=", "0.1", "# Pheromone decay factor", "alpha", "=", "1.0", "# Influence of pheromone", "beta", "=", "1.0", "# Influence of distance", "# Update pheromone levels based on previous path costs (dummy values for demonstration)", "for", "node", "in", "unvisited_nodes", ":", "if", "node", "!=", "current_node", ":", "pheromone_matrix", "[", "current_node", "]", "[", "node", "]", "*=", "(", "1", "-", "pheromone_decay", ")", "candidate_nodes", "=", "[", "node", "for", "node", "in", "unvisited_nodes", "if", "node", "!=", "current_node", "]", "if", "candidate_nodes", ":", "probabilities", "=", "[", "]", "total", "=", "0.0", "for", "node", "in", "candidate_nodes", ":", "pheromone", "=", "pheromone_matrix", "[", "current_node", "]", "[", "node", "]", "**", "alpha", "distance", "=", "(", "1", "/", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "**", "beta", "probability", "=", "pheromone", "*", "distance", "probabilities", ".", "append", "(", "probability", ")", "total", "+=", "probability", "probabilities", "=", "[", "p", "/", "total", "for", "p", "in", "probabilities", "]", "# Normalize probabilities", "# Select the next node according to the computed probabilities", "selected_node", "=", "np", ".", "random", ".", "choice", "(", "candidate_nodes", ",", "p", "=", "probabilities", ")", "# Update pheromone levels (for demonstration purposes, using a fixed increment)", "pheromone_matrix", "[", "current_node", "]", "[", "selected_node", "]", "+=", "0.1", "return", "selected_node", "return", "None"], "code_perf": 18.861006851699642}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for distance to unvisited nodes", "attractiveness_weight", "=", "0.3", "# Weight for attractiveness to destination", "exploration_incentive", "=", "0.2", "# Incentive for nodes with more unvisited neighbors", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Count unvisited neighbors", "unvisited_neighbors", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "1e6", ")", "neighbors_influence", "=", "unvisited_neighbors", "*", "exploration_incentive", "# Calculate score", "score", "=", "(", "1", "/", "(", "direct_distance", "+", "1e-6", ")", "*", "distance_weight", ")", "+", "(", "distance_to_destination", "*", "attractiveness_weight", ")", "+", "neighbors_influence", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.804517594120038}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "# Dynamic weights based on distance metrics", "distance_weight", "=", "0.4", "+", "random", ".", "uniform", "(", "-", "0.1", ",", "0.1", ")", "# Adjust distance weight dynamically", "future_pathweight", "=", "0.3", "+", "random", ".", "uniform", "(", "-", "0.05", ",", "0.05", ")", "# Slight random adjustment", "destination_alignment_weight", "=", "0.2", "proximity_weight", "=", "0.1", "# Lower weight to reduce the emphasis on proximity", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate potential future pathways based on unvisited connections", "future_pathway_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Estimate score for alignment towards the final destination", "destination_alignment_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate proximity to other unvisited nodes", "proximity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combined score evaluation with a random exploration factor", "random_factor", "=", "random", ".", "uniform", "(", "-", "0.1", ",", "0.1", ")", "# Introducing randomness", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "future_pathweight", "*", "future_pathway_score", "-", "(", "direct_distance", "-", "avg_distance_to_unvisited", ")", "+", "destination_alignment_weight", "*", "destination_alignment_score", "+", "proximity_weight", "*", "proximity_score", "+", "random_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.01624630599461}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "<", "min_distance", ":", "min_distance", "=", "distance", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_desirability", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "cluster_radius", "=", "15", "# Radius for clustering influence", "cluster_count", "=", "sum", "(", "1", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<=", "cluster_radius", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_value", "=", "(", "1", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", ")", "if", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ">", "0", "else", "float", "(", "'inf'", ")", "cluster_effect", "=", "cluster_count", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "# Normalize cluster influence", "desirability_score", "=", "(", "1.5", "*", "heuristic_value", ")", "-", "(", "0.5", "*", "direct_distance", ")", "+", "(", "0.3", "*", "cluster_effect", ")", "if", "desirability_score", ">", "max_desirability", ":", "max_desirability", "=", "desirability_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.322384816054981}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "exploration_weight", "=", "0.4", "# Weight for the exploration of unvisited density", "risk_reward_weight", "=", "0.2", "# Weight for risk-reward mechanism", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Exploration score based on density of unvisited nodes around the current node", "exploration_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "next", "]", "+", "1e-6", ")", "for", "next", "in", "unvisited_nodes", ")", "# Inverse distance", "# Risk-reward score based on potential paths to the destination", "risk_reward_score", "=", "(", "1", "-", "(", "direct_distance", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "+", "1e-6", ")", ")", ")", "if", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "else", "0", "# Calculate the combined score", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "exploration_weight", "*", "exploration_score", "+", "risk_reward_weight", "*", "risk_reward_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "minimal_adjusted_distance", "=", "float", "(", "'inf'", ")", "decay_factor", "=", "0.8", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "return_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "adjusted_distance", "=", "(", "direct_distance", "**", "decay_factor", ")", "+", "(", "return_distance", "*", "(", "1", "-", "decay_factor", ")", ")", "if", "adjusted_distance", "<", "minimal_adjusted_distance", ":", "minimal_adjusted_distance", "=", "adjusted_distance", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 7.182502646088455}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate total distance to destination for normalization", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "neighbor", "]", "[", "destination_node", "]", "for", "neighbor", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate connectivity score based on distances to all unvisited nodes", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "/", "len", "(", "unvisited_nodes", ")", "# New score combines direct distance and a factor based on connectivity", "score", "=", "direct_distance", "+", "connectivity_score", "*", "0.3", "# Weighted average of direct distance and connectivity", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.292635553042459}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "average_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "weight_factor", "=", "0.6", "# Weight for current distance", "vision_factor", "=", "0.4", "# Weight for average remaining distance", "random_factor", "=", "random", ".", "uniform", "(", "0.01", ",", "0.1", ")", "# Stochastic influence", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "(", "direct_distance", "*", "weight_factor", ")", "+", "(", "average_remaining_distance", "*", "vision_factor", ")", "+", "random_factor", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "from", "collections", "import", "defaultdict", "import", "numpy", "as", "np", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_cost_weight", "=", "0.4", "cluster_influence_weight", "=", "0.5", "distance_modifier_weight", "=", "0.1", "# Clustering unvisited nodes based on their proximity", "clusters", "=", "defaultdict", "(", "list", ")", "for", "node", "in", "unvisited_nodes", ":", "clusters", "[", "np", ".", "argmin", "(", "[", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "]", ")", "]", ".", "append", "(", "node", ")", "# Calculating cluster scores", "cluster_scores", "=", "{", "}", "for", "cluster", "in", "clusters", ".", "values", "(", ")", ":", "center_node", "=", "cluster", "[", "0", "]", "# Use the first node as the cluster center", "cluster_average_distance", "=", "sum", "(", "distance_matrix", "[", "center_node", "]", "[", "n", "]", "for", "n", "in", "cluster", ")", "/", "len", "(", "cluster", ")", "cluster_scores", "[", "center_node", "]", "=", "cluster_average_distance", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_score", "=", "-", "cluster_influence_weight", "*", "cluster_scores", "[", "node", "]", "if", "node", "in", "cluster_scores", "else", "0", "# Distance modifier (penalizes closer nodes less)", "distance_modifier", "=", "distance_modifier_weight", "*", "(", "1", "/", "(", "direct_distance", "+", "1", ")", ")", "score", "=", "-", "direct_cost_weight", "*", "direct_distance", "+", "cluster_score", "+", "distance_modifier", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "confidence_score", "=", "1", "-", "(", "len", "(", "distance_matrix", ")", "-", "len", "(", "unvisited_nodes", ")", ")", "/", "len", "(", "distance_matrix", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "adjusted_weight", "=", "confidence_score", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "score", "=", "direct_distance", "+", "adjusted_weight", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.775463327864889}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "average_distance", ")", "score", "=", "direct_distance", "+", "distance_penalty", "-", "(", "0.5", "*", "average_distance", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance to unvisited nodes", "attractiveness_weight", "=", "0.3", "# Weight for attractiveness to destination", "cluster_bridge_weight", "=", "0.2", "# Weight for bridging clusters", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "cluster_score", "=", "0", "bridge_nodes_count", "=", "0", "for", "other_node", "in", "unvisited_nodes", ":", "if", "other_node", "!=", "node", ":", "distance_to_other", "=", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "if", "distance_to_other", "<", "direct_distance", "*", "1.5", ":", "# Adjust threshold for cluster bridging", "bridge_nodes_count", "+=", "1", "cluster_score", "+=", "distance_to_other", "avg_bridge_score", "=", "(", "cluster_score", "/", "(", "bridge_nodes_count", "or", "1", ")", ")", "if", "bridge_nodes_count", ">", "0", "else", "0", "score", "=", "(", "direct_distance", "*", "direct_weight", ")", "+", "(", "distance_to_destination", "*", "attractiveness_weight", ")", "-", "avg_bridge_score", "*", "cluster_bridge_weight", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 34.20792917317287}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "distance_threshold", "=", "2", "# Maximum acceptable distance for selection", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance_score", ">", "distance_threshold", ":", "continue", "# Skip nodes that exceed the distance threshold", "neighbor_weight", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "proximity_score", "=", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", ")", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "# Combined score emphasizing low distance, high connectivity, and proximity to destination", "scores", "[", "node", "]", "=", "(", "1", "/", "distance_score", ")", "+", "neighbor_weight", "+", "(", "1", "-", "proximity_score", ")", "# Select the unvisited node with the highest score", "next_node", "=", "max", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", ".", "get", "(", "node", ",", "float", "(", "'-inf'", ")", ")", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "average_distance", "=", "total_remaining_distance", "/", "num_unvisited", "random_factor", "=", "random", ".", "uniform", "(", "0.1", ",", "0.3", ")", "# Random perturbation factor", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_penalty", "=", "(", "average_distance", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "*", "0.5", "# Penalty for average distance", "score", "=", "direct_distance", "+", "distance_penalty", "+", "random_factor", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.450370583313572}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "next_node", "=", "None", "min_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Composite cost calculation", "cost", "=", "distance_to_next", "+", "distance_to_destination", "if", "cost", "<", "min_cost", ":", "min_cost", "=", "cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_factor", "=", "1", "/", "(", "distance_to_next", "+", "1", ")", "# Influence of proximity", "total_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "avg_distance_to_remaining", "=", "total_distance_to_remaining", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "# Introduce penalty for visiting farther nodes", "penalty", "=", "distance_to_next", "*", "0.5", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "score", "=", "(", "proximity_factor", "*", "avg_distance_to_remaining", ")", "-", "penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.426468549276079}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "# Factors for scoring", "weight_immediate", "=", "0.7", "weight_heuristic", "=", "0.3", "temperature", "=", "1.0", "# Estimate of future distances based on the average distance to the destination node", "heuristic_distance", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate the score based on immediate distance and heuristic prediction", "score", "=", "(", "weight_immediate", "*", "immediate_distance", ")", "+", "(", "weight_heuristic", "*", "heuristic_distance", ")", "+", "random", ".", "uniform", "(", "0", ",", "temperature", ")", "# Dynamic adjustment of temperature", "temperature", "*=", "0.99", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 13.282452969371313}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "connection_weight", "=", "0.4", "# Weight for the count of connections to unvisited nodes", "recency_penalty_weight", "=", "0.2", "# Weight for recency of visits", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Connection score based on the number of direct connections to other unvisited nodes", "connection_score", "=", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "!=", "float", "(", "'inf'", ")", ")", "# Recency penalty for nodes that were recently visited", "recent_visits", "=", "[", "prev", "for", "prev", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "prev", "not", "in", "unvisited_nodes", "and", "prev", "!=", "current_node", "]", "recency_penalty", "=", "sum", "(", "(", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "prev", "]", "+", "1", ")", ")", "for", "prev", "in", "recent_visits", ")", "score", "=", "-", "direct_distance_weight", "*", "direct_distance", "+", "connection_weight", "*", "connection_score", "-", "recency_penalty_weight", "*", "recency_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "score", "=", "(", "avg_distance_to_unvisited", "-", "distance_to_next", ")", "# Higher score for nodes with lower average distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.41724333977419}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "# Dynamic weights can be adjusted based on certain conditions", "distance_weight", "=", "0.5", "# Weight for direct distance", "connectivity_weight", "=", "0.4", "# Weight for connectivity to unvisited nodes", "stability_weight", "=", "0.1", "# Weight for stability to prioritize consistent paths", "global", "node_visit_counts", "node_visit_counts", "=", "{", "}", "def", "calculate_connectivity_ratio", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "def", "calculate_stability_score", "(", "node", ")", ":", "return", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", "*", "0.5", "# Penalize frequently visited nodes", "for", "node", "in", "unvisited_nodes", ":", "node_visit_counts", "[", "node", "]", "=", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", "+", "1", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_ratio", "=", "calculate_connectivity_ratio", "(", "node", ")", "stability_score", "=", "calculate_stability_score", "(", "node", ")", "# Adjust score calculation with new elements", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_ratio", "-", "stability_weight", "*", "stability_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.358012720183544}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "max_distance_to_unvisited", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "safety_margin", "=", "(", "max_distance_to_unvisited", "-", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "*", "0.3", "score", "=", "direct_distance", "+", "safety_margin", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "\"\"\"This algorithm enhances the selection process by incorporating a scoring mechanism based on edge centrality and relative distance to not only favor dense regions but also prioritize nodes that connect multiple pathways.\"\"\"", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "sum_degree", "=", "sum", "(", "len", "(", "[", "node", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "neighbor", "]", "[", "node", "]", "<", "5", "]", ")", "for", "neighbor", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate centrality as the number of unvisited neighbors", "centrality_score", "=", "len", "(", "[", "neighbor", "for", "neighbor", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<", "5", "]", ")", "# Assess average distance to destination", "total_distance", "=", "sum", "(", "distance_matrix", "[", "other_node", "]", "[", "destination_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Combined score using weights to incorporate centrality and distance criteria", "score", "=", "direct_distance", "*", "0.6", "+", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "*", "0.3", "-", "centrality_score", "*", "0.1", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.450370583313572}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm enhances node selection by considering not only proximity but also the number of connections with unvisited nodes, allowing for a more strategic decision.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connection_count", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "0", ")", "score", "=", "(", "connection_count", "/", "(", "distance_to_next", "+", "1", ")", ")", "# Higher score for nodes with more connections and shorter distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.6", "# Weight for direct distance", "average_distance_weight", "=", "0.3", "# Weight for average distance to unvisited nodes", "penalty_weight", "=", "0.1", "# Weight for penalty on cumulative distance", "previous_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "prev_node", "]", "for", "prev_node", "in", "unvisited_nodes", "if", "prev_node", "!=", "current_node", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_distance_weight", "*", "(", "-", "direct_distance", ")", "+", "average_distance_weight", "*", "average_distance_to_unvisited", "-", "penalty_weight", "*", "previous_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.4597365709491275}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm selects the next node by considering the combination of the minimum distance to the next node, ", "# the average distance to unvisited nodes, and a penalty for far nodes relative to the destination.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# New scoring mechanism that incorporates a penalty for distance to the destination", "score", "=", "(", "average_distance_to_unvisited", "-", "distance_to_next", ")", "-", "(", "distance_to_destination", "/", "2", ")", "# Minimizing distance to both unvisited and destination", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.791674262630402}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "avg_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_proximity", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "visited", "]", "for", "visited", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "visited", "!=", "current_node", "and", "visited", "not", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "penalty_for_distance", "=", "max", "(", "0", ",", "avg_distance_to_remaining", "-", "distance_to_next", ")", "# Penalize for far distances", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "*", "(", "heuristic_proximity", "+", "penalty_for_distance", ")", "# Combine factors", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.892514570726942}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_weight", "=", "0.4", "# Weight for immediate travel cost", "exploration_reward_weight", "=", "0.4", "# Reward for exploring new nodes", "clustering_factor_weight", "=", "0.2", "# Weight for clustering of unvisited nodes", "# Calculate the average distance to remaining unvisited nodes", "avg_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Measure the clustering effect based on distance between the current node and all unvisited nodes", "clustering_factor", "=", "sum", "(", "1", "for", "next_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "next_node", "]", "<", "avg_distance_to_remaining", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Calculate the score", "score", "=", "(", "-", "immediate_weight", "*", "direct_distance", ")", "+", "(", "exploration_reward_weight", "*", "clustering_factor", ")", "-", "(", "clustering_factor_weight", "*", "(", "direct_distance", "-", "avg_distance_to_remaining", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "clustering_weight", "=", "0.3", "# Weight for clustering potential", "direction_weight", "=", "0.4", "# Weight for alignment towards destination", "# Calculate clustering score based on closest unvisited nodes", "clustering_score", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Estimate score for alignment towards the final destination", "direction_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score considering clustering and direction", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "clustering_weight", "*", "clustering_score", "[", "node", "]", "+", "direction_weight", "*", "direction_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 11.289615524116655}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Create a score dictionary for each unvisited node using regret penalty", "score_dict", "=", "{", "}", "total_visits", "=", "len", "(", "distance_matrix", ")", "-", "len", "(", "unvisited_nodes", ")", "# Number of nodes visited so far", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "regret_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Average distance to unvisited nodes", "score", "=", "distance", "+", "regret_penalty", "# Total score considers distance and regret penalty", "score_dict", "[", "node", "]", "=", "score", "# Find the nodes with the minimum score", "min_score", "=", "min", "(", "score_dict", ".", "values", "(", ")", ")", "best_candidates", "=", "[", "node", "for", "node", ",", "score", "in", "score_dict", ".", "items", "(", ")", "if", "score", "==", "min_score", "]", "# Introduce weighted randomness towards unexplored nodes", "if", "best_candidates", ":", "weights", "=", "[", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1", ")", "for", "node", "in", "best_candidates", "]", "total_weight", "=", "sum", "(", "weights", ")", "probabilities", "=", "[", "weight", "/", "total_weight", "for", "weight", "in", "weights", "]", "return", "random", ".", "choices", "(", "best_candidates", ",", "weights", "=", "probabilities", ")", "[", "0", "]", "# Weighted random selection from candidates", "return", "None"], "code_perf": 8.406859942200565}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance", "cluster_weight", "=", "0.3", "# Weight for cluster potential savings", "pheromone_weight", "=", "0.1", "# Weight for pheromone-like attraction to unvisited nodes", "detour_penalty_weight", "=", "0.1", "# Weight for detour penalties", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Calculate pheromone levels based on proximity to the current node", "pheromone_levels", "=", "{", "node", ":", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "potential_savings", "=", "total_distance_to_destination", "-", "direct_distance", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "cluster_weight", "*", "cluster_average_distance", ")", "+", "(", "pheromone_weight", "*", "pheromone_levels", "[", "node", "]", ")", "-", "(", "detour_penalty_weight", "*", "max", "(", "0", ",", "direct_distance", "-", "potential_savings", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.4480974775362885}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "decay_factor", "=", "0.5", "**", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "# Exponential decay based on remaining nodes", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_destination", "=", "total_distance_to_unvisited", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "+", "decay_factor", "*", "average_distance_to_destination", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Emphasis on direct distance", "cluster_weight", "=", "0.3", "# Weight for proximity to clusters of unvisited nodes", "penalty_weight", "=", "0.2", "# Penalty for selecting nodes with the longest direct distance", "heuristic_weight", "=", "0.1", "# Weight for overall spatial positioning of unvisited nodes", "def", "calculate_cluster_score", "(", "node", ")", ":", "cluster_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "cluster_score", "+=", "distance_matrix", "[", "node", "]", "[", "other", "]", "return", "cluster_score", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "longest_direct_distance", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_score", "=", "calculate_cluster_score", "(", "node", ")", "heuristic_score", "=", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combined scoring mechanism with penalty", "penalty_score", "=", "longest_direct_distance", "-", "direct_distance", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "cluster_weight", "*", "cluster_score", "+", "penalty_weight", "*", "penalty_score", "+", "heuristic_weight", "*", "heuristic_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.424671222018382}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "# Constants for weighting", "alpha", "=", "0.5", "# Weight for distance score", "beta", "=", "0.3", "# Weight for connectivity score", "gamma", "=", "0.2", "# Weight for return distance penalty", "# Calculate total distances from the current node to all unvisited nodes", "total_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Connectivity score: based on the sum of distances to other unvisited nodes", "connectivity_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "+", "1e-6", ")", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "# Combined score incorporating connectivity and distance considerations", "combined_score", "=", "(", "connectivity_score", "*", "beta", "-", "distance_to_next", "*", "alpha", "-", "distance_to_destination", "*", "gamma", ")", "if", "combined_score", ">", "best_score", ":", "best_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.299468005409654}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_unvisited_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "avg_unvisited_distance", "=", "total_unvisited_distance", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "*", "(", "total_unvisited_distance", "+", "avg_unvisited_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.391431511815483}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for distance to unvisited node", "destination_penalty", "=", "0.4", "# Penalty for moving away from destination", "cluster_weight", "=", "0.2", "# Weight for cluster potential", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "cluster_connection_score", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "direct_distance", ")", "connectivity_bonus", "=", "cluster_connection_score", "*", "0.1", "# Bonus for being connected to other nodes", "score", "=", "(", "distance_weight", "*", "-", "direct_distance", ")", "+", "(", "destination_penalty", "*", "-", "distance_to_destination", ")", "+", "(", "cluster_weight", "*", "connectivity_bonus", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 21.199507469058354}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "# Calculate an estimated distance to the destination from the farthest unvisited node", "max_future_distance", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Score combining immediate distance and a fraction of the maximum future distance", "score", "=", "direct_distance", "+", "(", "max_future_distance", "*", "0.2", ")", "# weight for future distance", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for distance", "time_weight", "=", "0.4", "# Weight for temporal heuristic", "connectivity_weight", "=", "0.2", "# Weight for connectivity of unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "time_score", "=", "1", "/", "(", "1", "+", "direct_distance", ")", "# Temporal score inversely related to distance", "connectivity_score", "=", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", ")", "# Number of unvisited connections", "# Exponential decay on distance", "distance_penalty", "=", "1", "/", "(", "1", "+", "direct_distance", "**", "2", ")", "score", "=", "-", "distance_weight", "*", "distance_penalty", "+", "time_weight", "*", "time_score", "+", "connectivity_weight", "*", "connectivity_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.35360430179405}
{"code_tokens": ["import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "# Calculate the average position of unvisited nodes", "average_position", "=", "[", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "_", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "]", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate the number of edges (connections) to the remaining unvisited nodes", "edge_count", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "float", "(", "'inf'", ")", ")", "# Novel scoring mechanism: leverage average position heuristic and edge count", "score", "=", "(", "average_position", "[", "node", "]", "/", "(", "distance_to_next", "+", "1", ")", ")", "*", "edge_count", "-", "(", "distance_to_destination", "*", "0.5", "+", "distance_to_next", "*", "0.5", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.158924458202568}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Penalty for the most recently visited node", "recent_node_penalty", "=", "1.5", "# Distance to destination provides attraction", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Calculate the potential cost for each unvisited node", "costs", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_from_current", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "recent_node_penalty", "if", "node", "==", "current_node", "else", "1", "# Adjust penalty", "# Combine factors: distance to destination and current distance with penalty", "total_cost", "=", "distance_from_current", "*", "penalty", "-", "(", "distance_to_destination", "/", "2", ")", "costs", "[", "node", "]", "=", "total_cost", "# Select the next node with the minimum calculated cost", "next_node", "=", "min", "(", "costs", ",", "key", "=", "costs", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "locality_factor", "=", "0.6", "# Weight for remaining proximity", "penalty_factor", "=", "2.0", "# Weight for distance penalty", "proximity_threshold", "=", "10", "# Distance threshold for considering nearby nodes", "nearby_nodes", "=", "[", "node", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<=", "proximity_threshold", "]", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_effect", "=", "(", "len", "(", "nearby_nodes", ")", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", ")", "if", "nearby_nodes", "else", "0", "distance_penalty", "=", "penalty_factor", "*", "(", "direct_distance", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", ")", "score", "=", "direct_distance", "+", "locality_factor", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "-", "proximity_effect", "+", "distance_penalty", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.510084177067245}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate distances to the nearest unvisited node", "nearest_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Calculate a penalty based on the total distance of remaining unvisited nodes", "total_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "scores", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "(", "total_penalty", "/", "len", "(", "unvisited_nodes", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_penalty_weight", "=", "0.6", "# Heavier weight for direct distance", "centrality_bonus_weight", "=", "0.4", "# Weight for visiting centrally located nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate a centrality score based on closeness to other unvisited nodes", "centrality_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "-", "direct_distance", "score", "=", "-", "distance_penalty_weight", "*", "direct_distance", "+", "centrality_bonus_weight", "*", "centrality_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.032529844514729}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate distances to all unvisited nodes", "distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Sort unvisited nodes by distance", "sorted_nodes", "=", "sorted", "(", "distances", ".", "items", "(", ")", ",", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", ")", "# Select the two nearest nodes", "nearest_nodes", "=", "[", "node", "for", "node", ",", "_", "in", "sorted_nodes", "[", ":", "2", "]", "]", "# Introduce randomness to select between the nearest nodes", "next_node", "=", "random", ".", "choice", "(", "nearest_nodes", ")", "return", "next_node"], "code_perf": 9.280378715074033}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "avg_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_dest", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# New scoring function with additional penalties and premiums", "score", "=", "direct_distance", "+", "0.4", "*", "(", "avg_distance_remaining", "-", "distance_to_dest", ")", "-", "0.2", "*", "(", "distance_to_dest", "/", "(", "1", "+", "direct_distance", ")", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.454207900161812}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate total distance and average distance to unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "# Create a list of weighted nodes for selection", "weighted_nodes", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "weight", "=", "1", "/", "(", "distance", "+", "1", ")", "# Avoid division by zero and prioritize closer nodes", "weighted_nodes", ".", "append", "(", "(", "node", ",", "weight", ")", ")", "# Normalize weights", "total_weight", "=", "sum", "(", "weight", "for", "_", ",", "weight", "in", "weighted_nodes", ")", "normalized_weights", "=", "[", "(", "node", ",", "weight", "/", "total_weight", ")", "for", "node", ",", "weight", "in", "weighted_nodes", "]", "# Select the next node based on cumulative probability", "rand_value", "=", "random", ".", "random", "(", ")", "cumulative_probability", "=", "0.0", "for", "node", ",", "weight", "in", "normalized_weights", ":", "cumulative_probability", "+=", "weight", "if", "rand_value", "<=", "cumulative_probability", ":", "return", "node", "return", "unvisited_nodes", "[", "0", "]", "# Fallback in case of rounding errors"], "code_perf": 24.65478103524442}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for the distance to the unvisited node", "destination_weight", "=", "0.4", "# Weight for the proximity to the destination", "penalty_weight", "=", "0.2", "# Weight for the penalty based on distance from average", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "direct_distance", "*", "direct_weight", ")", "+", "(", "distance_to_destination", "*", "destination_weight", ")", "-", "(", "average_distance_to_unvisited", "*", "penalty_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 32.168871541775395}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_distance_weight", "=", "0.7", "# Weight for immediate distance to next node", "proximity_influence_weight", "=", "0.3", "# Weight for influence based on remaining unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_next_node", "]", "**", "2", "for", "next_next_node", "in", "unvisited_nodes", "if", "next_next_node", "!=", "node", ")", "adjusted_proximity_score", "=", "proximity_score", "**", "0.5", "# Adjust proximity for exponential decay effect", "cost_score", "=", "(", "immediate_distance", "+", "total_distance_to_destination", ")", "*", "immediate_distance_weight", "+", "(", "adjusted_proximity_score", "*", "proximity_influence_weight", ")", "if", "cost_score", "<", "min_cost", ":", "min_cost", "=", "cost_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.347550754211397}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "average_near_score_weight", "=", "0.4", "# Weight for average distance to unvisited nodes", "total_distance_penalty_weight", "=", "0.2", "# Weight for penalty based on total distance of unvisited nodes", "# Function to calculate average distance to unvisited nodes", "def", "calculate_average_distance", "(", ")", ":", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "return", "total_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Function to calculate total distance penalty for unvisited nodes", "def", "calculate_total_distance_penalty", "(", ")", ":", "total_distance", "=", "sum", "(", "min", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ")", "return", "total_distance", "average_distance", "=", "calculate_average_distance", "(", ")", "total_distance_penalty", "=", "calculate_total_distance_penalty", "(", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Combined scoring mechanism with penalties and average distance consideration", "score", "=", "(", "-", "direct_distance_weight", "*", "direct_distance", "+", "average_near_score_weight", "*", "average_distance", "-", "total_distance_penalty_weight", "*", "total_distance_penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "from", "collections", "import", "defaultdict", "import", "math", "def", "compute_connectivity_score", "(", "node", ",", "unvisited", ",", "distance_matrix", ")", ":", "score", "=", "0", "for", "other", "in", "unvisited", ":", "if", "node", "!=", "other", ":", "score", "+=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "+", "1e-9", ")", "# Avoid division by zero", "return", "score", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "alignment_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "connectivity_score", "=", "compute_connectivity_score", "(", "node", ",", "unvisited_nodes", ",", "distance_matrix", ")", "# New scoring formula integrating connectivity with weights", "score", "=", "(", "-", "0.4", "*", "direct_distance", "+", "0.4", "*", "connectivity_score", "+", "0.2", "*", "alignment_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.644456555581716}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "time_decay_factor", "=", "0.3", "# Factor to incentivize quicker visits", "cluster_weight", "=", "0.5", "# Weight for synergy of clusters of unvisited nodes", "immediate_cost_weight", "=", "0.4", "# Weight for immediate travel cost", "synergy_penalty_weight", "=", "0.2", "# Penalty based on clustering effect", "# Create clusters based on proximity to current node", "clusters", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "not", "in", "clusters", ":", "clusters", "[", "distance", "]", "=", "[", "]", "clusters", "[", "distance", "]", ".", "append", "(", "node", ")", "for", "distance", ",", "cluster", "in", "clusters", ".", "items", "(", ")", ":", "for", "node", "in", "cluster", ":", "synergy_score", "=", "len", "(", "cluster", ")", "*", "cluster_weight", "# Higher score for larger clusters", "immediate_cost", "=", "immediate_cost_weight", "*", "distance", "time_decay_penalty", "=", "time_decay_factor", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "len", "(", "cluster", ")", ")", "# Penalize if nodes are far away", "score", "=", "synergy_score", "-", "immediate_cost", "-", "time_decay_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "total_direct_distances", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_direct_distance", "=", "total_direct_distances", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Heuristic: score based on current distance, average distance, and distance to destination", "score", "=", "direct_distance", "+", "0.5", "*", "(", "avg_direct_distance", "-", "distance_to_destination", ")", "+", "0.5", "*", "distance_to_destination", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "from", "scipy", ".", "sparse", ".", "csgraph", "import", "minimum_spanning_tree", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Create a submatrix for unvisited nodes", "indices", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "i", "in", "unvisited_nodes", "]", "sub_distance_matrix", "=", "distance_matrix", "[", "np", ".", "ix_", "(", "indices", ",", "indices", ")", "]", "# Calculate minimum spanning tree and its total cost", "mst", "=", "minimum_spanning_tree", "(", "sub_distance_matrix", ")", "mst_cost", "=", "mst", ".", "sum", "(", ")", "# Score nodes based on their direct distance and the contribution to the MST cost", "node_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Each node's score considers its direct distance and its influence on the MST cost", "score", "=", "direct_distance", "+", "(", "mst_cost", "/", "len", "(", "unvisited_nodes", ")", ")", "node_scores", "[", "node", "]", "=", "score", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_weight", "=", "0.4", "# Weight for immediate travel distance", "cluster_weight", "=", "0.3", "# Weight for clustering advantage", "destination_weight", "=", "0.3", "# Weight for proximity to destination", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "clustering_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", "if", "node", "!=", "next_node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "score", "=", "-", "(", "immediate_weight", "*", "immediate_distance", ")", "+", "(", "cluster_weight", "*", "clustering_score", ")", "+", "(", "destination_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 15.702987660016518}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_distance_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_unvisited", "=", "total_distance_unvisited", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "# Direct distance to the current node", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Penalty based on how far the current node is from the average distance of unvisited nodes", "distance_penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "average_distance_unvisited", ")", "# Heuristic based on total distance to destination from unvisited nodes", "heuristic_importance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "dest", "]", "for", "dest", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Score combining direct distance, distance penalty, and heuristic importance", "score", "=", "direct_distance", "+", "0.4", "*", "distance_penalty", "+", "0.3", "*", "heuristic_importance", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.292635553042459}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "urgency_factor", "=", "0.4", "# Weight for urgency rating of unvisited nodes", "historical_time_weight", "=", "0.6", "# Weight for historical travel times", "if", "unvisited_nodes", ":", "# Calculate urgency score for unvisited nodes (could be based on priority)", "urgency_scores", "=", "{", "node", ":", "(", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1e-5", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "# Calculate historical travel time based on the distance and assumed average speed", "historical_times", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "/", "1.0", ")", "for", "node", "in", "unvisited_nodes", "}", "# Assuming average speed of 1 unit", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate the impact score based on urgency and historical times", "urgency_score", "=", "urgency_scores", "[", "node", "]", "historical_time_score", "=", "historical_times", "[", "node", "]", "# Combined score considering urgency and historical travel time", "score", "=", "urgency_factor", "*", "urgency_score", "-", "historical_time_weight", "*", "historical_time_score", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.7", "# Weight for direct distance minimization", "cluster_effect_weight", "=", "0.3", "# Weight for clustering advantage", "# Evaluate the distance to the destination for added efficiency", "destination_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_distance_weight", "*", "(", "1", "/", "direct_distance", ")", ")", "-", "(", "cluster_effect_weight", "*", "cluster_average_distance", ")", "+", "(", "1", "/", "(", "1", "+", "destination_distance", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.965907353728854}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_remaining_distance", "=", "total_remaining_distance", "/", "len", "(", "unvisited_nodes", ")", "distance_penalty_weight", "=", "0.5", "# Weight for penalizing far nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_distance_penalty", "=", "distance_penalty_weight", "*", "(", "average_remaining_distance", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "score", "=", "direct_distance", "+", "remaining_distance_penalty", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.450370583313572}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "future_savings_weight", "=", "0.4", "# Weight for potential future savings", "cluster_proximity_weight", "=", "0.2", "# Weight for closeness to clusters of unvisited nodes", "# Calculate cluster proximity score", "def", "calculate_proximity_score", "(", "node", ")", ":", "proximity_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "+", "1e-6", ")", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "return", "proximity_score", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "calculate_proximity_score", "(", "node", ")", "# Estimate future cost savings based on remaining unvisited nodes", "future_savings", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combined scoring mechanism with penalties for longer distances", "score", "=", "-", "direct_distance_weight", "*", "direct_distance", "+", "future_savings_weight", "*", "(", "1", "/", "(", "future_savings", "+", "1e-6", ")", ")", "+", "cluster_proximity_weight", "*", "proximity_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.239003945048143}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for distance", "visibility_weight", "=", "0.4", "# Weight for visibility based on unvisited connections", "adaptability_weight", "=", "0.2", "# Adaptability factor based on remaining unvisited nodes", "adaptability_factor", "=", "(", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "distance_matrix", ")", "or", "1", ")", ")", "**", "2", "# Dynamic adaptability", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "visibility_score", "=", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", ")", "# Count of visible unvisited nodes", "adaptability_score", "=", "(", "1", "if", "node", "==", "destination_node", "else", "0", ")", "*", "adaptability_factor", "# Increase score if it's the destination", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "visibility_weight", "*", "visibility_score", "+", "adaptability_weight", "*", "adaptability_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "# Calculate the average distance to remaining unvisited nodes", "average_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "destination_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Score is calculated by combining savings and distance to average", "score", "=", "(", "average_remaining_distance", "-", "future_distance", ")", "-", "direct_distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "visit_frequency", "=", "{", "node", ":", "0", "for", "node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "}", "# Tracks how many times each node has been visited", "if", "unvisited_nodes", ":", "immediate_distance_weight", "=", "0.5", "# Weight for immediate travel cost", "visit_penalty_weight", "=", "0.25", "# Influence of node visit popularity", "connectivity_weight", "=", "0.25", "# Weight for node connectivity potential", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connection_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "+", "1", ")", "for", "next", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "next", "in", "unvisited_nodes", ")", "# Connection potential to unvisited nodes", "# Popularity penalty based on visit frequency", "visit_penalty", "=", "visit_frequency", "[", "node", "]", "*", "0.3", "# Higher frequency means higher penalty", "score", "=", "(", "-", "immediate_distance_weight", "*", "direct_distance", ")", "-", "(", "visit_penalty_weight", "*", "visit_penalty", ")", "+", "(", "connectivity_weight", "*", "connection_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "visit_frequency", "[", "next_node", "]", "+=", "1", "# Update visit frequency for the selected next node", "return", "next_node"], "code_perf": 11.882841212432876}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate a score for each unvisited node based on distance to destination, connectivity, and distance to unvisited nodes", "scores", "=", "{", "}", "connectivity_weight", "=", "0.5", "distance_to_destination_weight", "=", "1.5", "for", "node", "in", "unvisited_nodes", ":", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Weighted score calculation", "total_score", "=", "(", "distance_to_destination_weight", "*", "distance_score", ")", "+", "(", "connectivity_weight", "*", "connectivity_score", ")", "-", "avg_distance_to_unvisited", "scores", "[", "node", "]", "=", "total_score", "# Lower score is better", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.35828255629592}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "historical_cost_weight", "=", "0.3", "# Weight for historical travel costs", "proximity_weight", "=", "0.2", "# Weight for proximity to the closest unvisited node", "# Function to calculate the average distance to previously visited nodes", "def", "calculate_historical_cost", "(", "current_node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "visited", "]", "for", "visited", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "visited", "!=", "current_node", ")", "/", "(", "len", "(", "distance_matrix", ")", "-", "1", ")", "if", "len", "(", "distance_matrix", ")", ">", "1", "else", "0", "# Function to find the closest unvisited node", "def", "find_closest_unvisited_node", "(", ")", ":", "return", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "historical_cost", "=", "calculate_historical_cost", "(", "current_node", ")", "closest_node", "=", "find_closest_unvisited_node", "(", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "distance_matrix", "[", "current_node", "]", "[", "closest_node", "]", "# Combined scoring mechanism with historical cost and proximity", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "historical_cost_weight", "*", "historical_cost", "-", "proximity_weight", "*", "proximity_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_node", "=", "None", "min_future_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Estimate future cost by summing distances to remaining unvisited nodes", "future_cost", "=", "direct_distance", "+", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", "if", "next_node", "!=", "node", ")", "# Find the node that minimizes the future cost", "if", "future_cost", "<", "min_future_cost", ":", "min_future_cost", "=", "future_cost", "best_node", "=", "node", "return", "best_node"], "code_perf": 21.51502557645197}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "density_weight", "=", "0.3", "# Weight for node density in relation to unvisited nodes", "destination_proximity_weight", "=", "0.2", "# Weight for proximity to destination", "# Function to calculate density score based on proximity to unvisited nodes", "def", "calculate_density_score", "(", "node", ")", ":", "density_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "density_score", "+=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "+", "1e-9", ")", "# Avoid division by zero", "return", "density_score", "# Function to calculate distance penalty based on proximity to destination", "def", "calculate_destination_penalty", "(", "node", ")", ":", "return", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "density_score", "=", "calculate_density_score", "(", "node", ")", "destination_penalty", "=", "calculate_destination_penalty", "(", "node", ")", "# Combined scoring mechanism with distance penalty", "score", "=", "(", "density_weight", "*", "density_score", "-", "distance_weight", "*", "direct_distance", "-", "destination_proximity_weight", "*", "destination_penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.299468005409654}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity to destination", "neighbor_weight", "=", "0.3", "# Weight for neighboring node distance", "past_visit_weight", "=", "0.2", "# Weight for removed nodes' distance", "adaptation_factor", "=", "0.1", "# Weight for adapting based on previous visits", "# Calculate average distance to neighboring nodes", "neighbor_distances", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "average_neighbor_distance", "=", "sum", "(", "neighbor_distances", ")", "/", "(", "len", "(", "neighbor_distances", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "(", "average_neighbor_distance", "*", "neighbor_weight", ")", "-", "(", "direct_distance", "*", "adaptation_factor", ")", "-", "(", "direct_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "*", "past_visit_weight", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.987783512632092}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "exploration_factor", "=", "0.5", "# Probability of exploring a less promising node", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.5", "# Weight for direct distance", "connectivity_weight", "=", "0.3", "# Weight for connectivity to unvisited nodes", "loop_closure_weight", "=", "0.2", "# Weight for loop closure potential", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "loop_closure_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combined score incorporating exploration factor", "score", "=", "-", "direct_distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "loop_closure_weight", "*", "loop_closure_score", "# Introduce probabilistic exploration", "if", "random", ".", "random", "(", ")", "<", "exploration_factor", ":", "score", "+=", "random", ".", "uniform", "(", "-", "1", ",", "1", ")", "# Random adjustment to encourage exploration", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 20.27399821443295}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "base_distance_weight", "=", "0.5", "# Base weight for direct distance", "base_connectivity_weight", "=", "0.3", "# Base weight for connectivity to unvisited nodes", "base_heuristic_weight", "=", "0.2", "# Base weight for heuristic positioning of unvisited nodes", "# Adjust weights based on the number of unvisited nodes", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "distance_weight", "=", "base_distance_weight", "*", "(", "num_unvisited", "/", "(", "num_unvisited", "+", "1", ")", ")", "connectivity_weight", "=", "base_connectivity_weight", "*", "(", "1", "/", "(", "num_unvisited", "+", "1", ")", ")", "heuristic_weight", "=", "base_heuristic_weight", "*", "(", "1", "/", "(", "num_unvisited", "+", "1", ")", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "num_unvisited", "or", "1", ")", "# Average connectivity", "heuristic_score", "=", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "num_unvisited", "or", "1", ")", "# Average distance to destination", "# Penalty for nodes that are significantly farther away", "penalty", "=", "direct_distance", "*", "0.1", "if", "direct_distance", ">", "1.5", "*", "(", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "num_unvisited", ")", "else", "0", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "heuristic_weight", "*", "heuristic_score", "-", "penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.864894281513159}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "cluster_density_weight", "=", "0.3", "# Weight for cluster density", "average_return_distance_weight", "=", "0.3", "# Weight for average return distance", "# Calculate average distance to visited nodes for potential return path", "average_return_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "node", "not", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "[", "node", "for", "node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "node", "not", "in", "unvisited_nodes", "]", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate cluster density based on unvisited nodes in proximity", "cluster_density", "=", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "5", ")", "# Threshold distance for clustering", "# Calculate combined score", "score", "=", "-", "direct_distance_weight", "*", "direct_distance", "+", "cluster_density_weight", "*", "cluster_density", "+", "average_return_distance_weight", "*", "average_return_distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "distance_weight", "=", "0.4", "+", "0.1", "*", "(", "num_unvisited", "-", "1", ")", "# Adjust based on remaining unvisited nodes", "connectivity_weight", "=", "0.3", "# Constant weight for connectivity", "future_gain_weight", "=", "0.3", "-", "0.1", "*", "(", "num_unvisited", "-", "1", ")", "# Decrease importance with more unvisited nodes", "# Function to calculate the average connectivity score based on unvisited nodes", "def", "calculate_average_connectivity", "(", "node", ")", ":", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "return", "total_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_connectivity_score", "=", "calculate_average_connectivity", "(", "node", ")", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined scoring mechanism with penalties for distance to destination", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "average_connectivity_score", "-", "future_gain_weight", "*", "distance_to_destination", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.659505275047669}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "total_distance_traveled", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Introduce a penalty for longer paths", "penalty", "=", "1", "/", "(", "1", "+", "distance_to_next", ")", "# Cumulative distance effect", "cumulative_score", "=", "1", "/", "(", "1", "+", "total_distance_traveled", ")", "# Random exploration factor", "exploration_factor", "=", "random", ".", "uniform", "(", "0.8", ",", "1.2", ")", "# Combined score", "score", "=", "cumulative_score", "*", "penalty", "*", "(", "exploration_factor", "/", "(", "distance_to_destination", "+", "1", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.179359713171213}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "cluster_weight", "=", "0.3", "# Weight for proximity to clusters of unvisited nodes", "exploration_weight", "=", "0.2", "# Weight for exploration of less visited nodes", "historical_cost_weight", "=", "0.1", "# Weight for historical path costs", "# Function to calculate cluster score based on unvisited nodes", "def", "calculate_cluster_score", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Function to calculate historical path cost", "def", "calculate_historical_cost", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "visited", "]", "for", "visited", "in", "unvisited_nodes", "if", "visited", "<", "node", ")", "# Example of historical paths", "# Function to encourage exploration of less visited nodes", "def", "calculate_exploration_score", "(", "node", ")", ":", "return", "1", "/", "(", "1", "+", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_score", "=", "calculate_cluster_score", "(", "node", ")", "historical_cost", "=", "calculate_historical_cost", "(", "node", ")", "exploration_score", "=", "calculate_exploration_score", "(", "node", ")", "# Combined scoring mechanism", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "cluster_weight", "*", "cluster_score", "+", "exploration_weight", "*", "exploration_score", "-", "historical_cost_weight", "*", "historical_cost", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 16.038278494735792}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "proximity_weight", "=", "0.4", "path_contribution_weight", "=", "0.2", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "1", "/", "(", "direct_distance", "+", "1e-6", ")", "# Avoid division by zero", "path_contribution_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "+", "1e-6", ")", "for", "next", "in", "unvisited_nodes", ")", "# Contribution potential", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "proximity_weight", "*", "proximity_score", "+", "path_contribution_weight", "*", "path_contribution_score", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 14.939797701069846}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "cluster_factor", "=", "0.5", "# Weight for the clustering attractiveness", "distance_influence", "=", "0.5", "# Weight for distance influence", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "if", "num_unvisited", "==", "0", ":", "return", "None", "# Calculate the average distance to the destination", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "num_unvisited", "# Cluster attractiveness calculation", "cluster_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "cluster_score", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "10", ")", "cluster_scores", "[", "node", "]", "=", "cluster_score", "/", "num_unvisited", "# Normalize by number of unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "(", "distance_influence", "*", "direct_distance", ")", "+", "(", "1", "-", "distance_influence", ")", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "cluster_factor", "*", "cluster_scores", "[", "node", "]", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.075273577958541}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "potential_nodes", "=", "[", "]", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "average_distance", ")", "*", "0.5", "# Penalize nodes beyond average distance", "score", "=", "direct_distance", "+", "penalty", "potential_nodes", ".", "append", "(", "(", "node", ",", "score", ")", ")", "# Select the node with the least score (distance + penalty)", "next_node", "=", "min", "(", "potential_nodes", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.6", "# Weight for immediate travel cost", "exploration_weight", "=", "0.4", "# Weight for exploration of next potential nodes", "node_influence_factor", "=", "0.3", "# Factor influencing overall scoring based on node proximity", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "exploration_score", "=", "exploration_weight", "*", "(", "average_distance", "-", "direct_distance", ")", "# Encourages visiting closer nodes", "total_influence", "=", "node_influence_factor", "*", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", ")", "# Influence by remaining nodes", "score", "=", "(", "-", "proximity_weight", "*", "direct_distance", ")", "+", "exploration_score", "+", "total_influence", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.653213705086567}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "risk_beta", "=", "1.2", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "exploration_incentive", "=", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "/", "(", "connectivity_score", "+", "1", ")", "risk_score", "=", "risk_beta", "*", "(", "1", "/", "(", "connectivity_score", "+", "1", ")", ")", "score", "=", "direct_distance", "+", "exploration_incentive", "+", "risk_score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.7950214267763425}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "radius", "=", "10", "# Define a search radius", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance_to_node", "<=", "radius", ":", "# Only consider nodes within the radius", "penalty", "=", "0", "# No penalty for nodes within the radius", "else", ":", "penalty", "=", "(", "distance_to_node", "-", "radius", ")", "# Apply penalty for being outside the radius", "score", "=", "-", "distance_to_node", "+", "penalty", "# Higher score for closer nodes", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "historical_visit_count", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "randomness_factor", "=", "0.1", "# Introduce randomness to encourage exploration", "# Calculate the mean distance to destination", "mean_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "euclidean_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_measure", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "# Cluster penalty based on historical visit count", "cluster_penalty", "=", "(", "historical_visit_count", "[", "node", "]", "/", "max", "(", "1", ",", "len", "(", "unvisited_nodes", ")", ")", ")", "*", "2", "# Randomness to stir the selection process", "randomness_score", "=", "random", ".", "uniform", "(", "0", ",", "randomness_factor", ")", "# New scoring function combining distance, connectivity, and penalties", "score", "=", "(", "0.5", "*", "(", "mean_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "0.3", "*", "(", "connectivity_measure", "-", "1", ")", "+", "cluster_penalty", "+", "randomness_score", "+", "euclidean_distance", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "historical_visit_count", "[", "node", "]", "+=", "1", "# Update historical visit count", "return", "best_node"], "code_perf": 6.770525815951583}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "future_cost_weight", "=", "0.7", "# Weight for future cost estimation", "distance_weight", "=", "0.3", "# Weight for direct distance cost", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "dynamic_penalty", "=", "0.5", "*", "(", "len", "(", "unvisited_nodes", ")", "**", "2", ")", "# Dynamic penalty for route length", "future_cost_estimate", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "cost", "=", "(", "distance_weight", "*", "direct_distance", ")", "+", "(", "future_cost_weight", "*", "future_cost_estimate", ")", "+", "dynamic_penalty", "if", "cost", "<", "min_cost", ":", "min_cost", "=", "cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.588855737901095}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Define a penalty factor based on the distance to the destination node", "penalty_factor", "=", "0.5", "# Adjust this value to weigh the influence of the penalty", "# Calculate scores for each unvisited node combining distance to current and penalty", "node_scores", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "penalty_factor", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Select the node with the minimum score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate the average distance to unvisited nodes", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Calculate the connectivity index for each unvisited node", "connectivity_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "connectivity_scores", "[", "node", "]", "=", "total_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "average_distance", ")", "# Calculate the new heuristic score with connectivity", "heuristic_score", "=", "connectivity_scores", "[", "node", "]", "score", "=", "direct_distance", "+", "distance_penalty", "-", "heuristic_score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.421289537639743}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "decay_factor", "=", "0.9", "# Decay factor to reduce influence of distance over iterations", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "inverse_distances_sum", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "+", "1", ")", "for", "n", "in", "unvisited_nodes", ")", "score", "=", "(", "inverse_distances_sum", "*", "decay_factor", "**", "len", "(", "unvisited_nodes", ")", ")", "-", "distance_to_next", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.464188991554282}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "median_distance_to_unvisited", "=", "sorted", "(", "[", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "]", ")", "[", "len", "(", "unvisited_nodes", ")", "//", "2", "]", "if", "unvisited_nodes", "else", "0", "# Introducing a collaborative score based on median distance", "score", "=", "(", "median_distance_to_unvisited", "-", "distance_to_next", ")", "*", "0.5", "+", "(", "1", "/", "(", "distance_to_next", "+", "1e-5", ")", ")", "# Avoid division by zero", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.854218353906577}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "heuristic_penalty_factor", "=", "0.8", "# Penalty factor for proximity to visited nodes", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "heuristic_edge_weight", "=", "0.4", "# Weight for edge significance based on past paths", "future_connectivity_weight", "=", "0.2", "# Weight for potential future connections", "visited_nodes", "=", "{", "i", "for", "i", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "}", "-", "set", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "edge_significance", "=", "sum", "(", "distance_matrix", "[", "prev", "]", "[", "node", "]", "for", "prev", "in", "visited_nodes", ")", "/", "(", "len", "(", "visited_nodes", ")", "or", "1", ")", "# Combining scores with a penalty for nodes too close to visited ones", "proximity_penalty", "=", "sum", "(", "distance_matrix", "[", "prev", "]", "[", "node", "]", "for", "prev", "in", "visited_nodes", ")", "*", "heuristic_penalty_factor", "# Future connectivity potential considering unvisited nodes", "future_connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Final score calculation", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "heuristic_edge_weight", "*", "edge_significance", "-", "proximity_penalty", "+", "future_connectivity_weight", "*", "future_connectivity_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 12.098370177731557}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "distances_to_unvisited", "=", "np", ".", "array", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "average_distance", "=", "np", ".", "mean", "(", "distances_to_unvisited", ")", "local_density", "=", "sum", "(", "1", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<", "average_distance", ")", "/", "len", "(", "unvisited_nodes", ")", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "for", "candidate", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate", "]", "score", "=", "(", "immediate_distance", "*", "1.5", ")", "+", "(", "average_distance", "*", "0.5", ")", "-", "(", "local_density", "*", "10", ")", "# Adjusted scoring with local density", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "candidate", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_from_node", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", ")", "average_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "direct_distance", "*", "0.5", ")", "+", "(", "total_distance_from_node", "*", "0.3", ")", "+", "(", "average_distance_to_destination", "*", "0.2", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 17.895240312218753}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "# Effective distance considering remaining unvisited nodes", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "weight_factor", "=", "1", "/", "max", "(", "num_unvisited", ",", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "direct_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Proximity score", "proximity_score", "=", "1", "/", "(", "direct_distance_to_destination", "+", "1", ")", "# Sum of distances to remaining unvisited nodes for influence of density", "total_distance_to_cluster", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "avg_distance_to_cluster", "=", "total_distance_to_cluster", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "# Incorporate density and proximity into the new score", "score", "=", "proximity_score", "*", "(", "2", "*", "avg_distance_to_cluster", "-", "distance_to_next", ")", "*", "weight_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.778534199268217}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "cumulative_travel_penalty", "=", "sum", "(", "distance_matrix", "[", "i", "]", "[", "j", "]", "for", "i", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "for", "j", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "i", "!=", "j", "and", "i", "not", "in", "unvisited_nodes", "and", "j", "in", "unvisited_nodes", ")", "total_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_remaining", "=", "total_distance_to_remaining", "/", "len", "(", "unvisited_nodes", ")", "immediate_weight", "=", "0.5", "future_weight", "=", "0.5", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "(", "immediate_weight", "*", "direct_distance", ")", "+", "(", "future_weight", "*", "(", "average_distance_to_remaining", "+", "cumulative_travel_penalty", ")", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "alpha", "=", "0.6", "# Weight for clustering benefit", "beta", "=", "0.4", "# Weight for distance cost", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "route_length_penalty", "=", "(", "len", "(", "unvisited_nodes", ")", "**", "1.5", ")", "*", "0.1", "# Penalty for number of unvisited nodes", "clustering_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_distance", "+", "route_length_penalty", ")", "*", "(", "1", "-", "alpha", ")", "+", "(", "clustering_cost", "*", "alpha", ")", "+", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "beta", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.07021657313443}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate cumulative direct distances to all unvisited nodes", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "# Scale the connectivity score by the average distance to encourage visiting connected nodes next", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "composite_score", "=", "direct_distance", "+", "(", "connectivity_score", "/", "average_distance_to_unvisited", "if", "average_distance_to_unvisited", ">", "0", "else", "0", ")", "if", "composite_score", "<", "best_score", ":", "best_score", "=", "composite_score", "best_node", "=", "node", "return", "best_node"], "code_perf": 9.20412418094351}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "distance_threshold", "=", "10", "# Example threshold value", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "to_destination_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "distance", "<=", "distance_threshold", ":", "score", "=", "distance", "+", "0.5", "*", "to_destination_distance", "# Penalize based on distance to destination", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance minimization", "density_weight", "=", "0.3", "# Weight for local density evaluation", "penalty_weight", "=", "0.2", "# Penalty for returning to previously visited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Calculate the local density - sum of distances to unvisited nodes", "density_sum", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "local_density", "=", "density_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "-", "(", "direct_distance", "*", "distance_weight", ")", "+", "(", "local_density", "*", "density_weight", ")", "-", "(", "penalty_weight", "*", "(", "distance_matrix", "[", "node", "]", "[", "current_node", "]", "if", "node", "in", "unvisited_nodes", "else", "0", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Start with an initial weight", "remaining_nodes", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "# Dynamic adjustment of proximity weight based on unvisited nodes", "dynamic_weight", "=", "proximity_weight", "/", "remaining_nodes", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "remaining_nodes", "score", "=", "direct_distance", "*", "(", "1", "-", "dynamic_weight", ")", "+", "heuristic_distance", "*", "dynamic_weight", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.954691209383228}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_cost_weight", "=", "0.6", "future_efficiency_weight", "=", "0.3", "diversity_score_weight", "=", "0.1", "# Encourages visiting nodes with more connections", "for", "node", "in", "unvisited_nodes", ":", "immediate_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Future efficiency based on min distance to the destination from unvisited nodes", "future_efficiency", "=", "future_efficiency_weight", "*", "min", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "# Diversity score: encourages visiting nodes that are less connected", "diversity_score", "=", "diversity_score_weight", "*", "(", "1", "/", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "+", "1", ")", ")", "score", "=", "immediate_cost_weight", "*", "immediate_cost", "+", "future_efficiency", "+", "diversity_score", "if", "score", "<", "best_score", ":", "# Minimize the score", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.854177515729649}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_distance", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "future_connection_weight", "=", "0.5", "# Weight for potential connections to other unvisited nodes", "# Evaluate potential for creating connections to unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate future potential score based on connection to unvisited nodes", "future_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "# Combined scoring considering both direct distance and future score", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "future_connection_weight", "*", "future_score", "if", "score", "<", "min_distance", ":", "min_distance", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 36.778419822834636}
{"code_tokens": ["# {This algorithm integrates a cost-adjusted heuristic that balances distance to the node, a weighted desirability factor based on neighboring nodes' proximity to the target, and a penalty mechanism for previously visited nodes to enhance exploration of less connected areas.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate the proximity weigh based on distance to destination", "proximity_weight", "=", "1", "/", "(", "distance_to_next", "+", "1", ")", "# Avoid division by zero", "# Desired connectivity influenced by the closeness of neighbors to the destination", "desirability_factor", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "+", "1", ")", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "# Apply a penalty based on distance to previous visitation (not implemented in this scope)", "penalty", "=", "-", "1", "if", "current_node", "in", "unvisited_nodes", "else", "0", "score", "=", "proximity_weight", "+", "desirability_factor", "+", "penalty", "# Higher score indicates a better choice", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 20.780454611905547}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "connection_weights", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "cluster_factor", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "# Count the number of direct connections to unvisited nodes within a certain radius", "connection_count", "=", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<=", "5", ")", "connection_weights", "[", "node", "]", "=", "connection_count", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "# Calculate clustering coefficient", "cluster_score", "=", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "neighbor", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<=", "5", ")", "cluster_factor", "[", "node", "]", "=", "cluster_score", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connection_weight", "=", "connection_weights", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "clustering_effect", "=", "cluster_factor", "[", "node", "]", "# Introduce a randomness factor", "randomness", "=", "random", ".", "uniform", "(", "-", "0.5", ",", "0.5", ")", "score", "=", "(", "direct_distance", "+", "0.5", "*", "(", "avg_distance_to_destination", "-", "distance_to_destination", ")", "-", "0.3", "*", "connection_weight", "+", "0.2", "*", "clustering_effect", "+", "randomness", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 11.694738321850703}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Emphasis on direct distance", "cluster_weight", "=", "0.3", "# Weight for proximity to clusters", "future_distance_weight", "=", "0.2", "# Weight for future travel considerations", "# Calculate dynamic weights based on unvisited nodes distribution", "def", "calculate_dynamic_weights", "(", ")", ":", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "if", "num_unvisited", "<", "5", ":", "return", "distance_weight", ",", "cluster_weight", ",", "future_distance_weight", "elif", "num_unvisited", "<", "10", ":", "return", "distance_weight", "*", "0.8", ",", "cluster_weight", "*", "1.1", ",", "future_distance_weight", "*", "1.1", "else", ":", "return", "distance_weight", "*", "0.6", ",", "cluster_weight", "*", "1.2", ",", "future_distance_weight", "*", "1.2", "distance_weight", ",", "cluster_weight", ",", "future_distance_weight", "=", "calculate_dynamic_weights", "(", ")", "# Calculate cluster score", "def", "calculate_cluster_score", "(", "node", ")", ":", "cluster_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "cluster_score", "+=", "distance_matrix", "[", "node", "]", "[", "other", "]", "return", "cluster_score", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_score", "=", "calculate_cluster_score", "(", "node", ")", "future_distance_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combined scoring mechanism", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "cluster_weight", "*", "cluster_score", "-", "future_distance_weight", "*", "future_distance_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.491457106415497}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "penalty_factor", "=", "max", "(", "0", ",", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "*", "0.1", ")", "# Increasing penalty for deeper routes", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "*", "(", "1", "/", "(", "distance_to_destination", "+", "1", ")", ")", "-", "penalty_factor", "# Evaluate immediate and future travel, penalizing longer unvisited nodes", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.862738108318953}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "unique_factor", "=", "1.0", "/", "(", "1", "+", "len", "(", "[", "node", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "==", "1", "]", ")", ")", "# Example uniqueness measure", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "+", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "/", "2", "-", "unique_factor", "*", "direct_distance", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 18.704820740310076}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Start with positive infinity for minimization", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_destination", "=", "total_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "# Calculate the direct distance to the current node", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Score based on a combination of direct distance and average distance to the destination", "score", "=", "direct_distance", "+", "average_distance_to_destination", "# Selecting the node that minimizes this score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.35", "# Weight for direct distance", "cluster_penalty_weight", "=", "0.25", "# Weight to discourage visiting dense clusters", "completion_reward_weight", "=", "0.20", "# Weight for potential loop completion", "novelty_weight", "=", "0.10", "# Weight for node visitation history", "stability_weight", "=", "0.10", "# Weight for favoring stable options", "def", "calculate_cluster_penalty", "(", "node", ")", ":", "return", "-", "len", "(", "[", "other", "for", "other", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "2", "]", ")", "# Penalize for nearby unvisited nodes", "def", "calculate_completion_reward", "(", "node", ")", ":", "return", "1", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "# Reward for nodes closer to the destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_penalty", "=", "calculate_cluster_penalty", "(", "node", ")", "completion_reward", "=", "calculate_completion_reward", "(", "node", ")", "# Updated scoring equation", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "cluster_penalty_weight", "*", "cluster_penalty", "+", "completion_reward_weight", "*", "completion_reward", "+", "novelty_weight", "*", "(", "0.1", "if", "node", "in", "unvisited_nodes", "else", "0", ")", "+", "stability_weight", "*", "(", "0.1", "if", "node", "==", "max", "(", "unvisited_nodes", ",", "key", "=", "lambda", "x", ":", "distance_matrix", "[", "current_node", "]", "[", "x", "]", ")", "else", "0", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.175777349584548}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "isolation_penalty_factor", "=", "0.5", "# Penalty for selecting isolated nodes", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "remaining_distance_weight", "=", "0.2", "# Weight for distance to remaining nodes", "clustering_weight", "=", "0.3", "# Weight for clustering of unvisited nodes", "alignment_weight", "=", "0.1", "# Weight for alignment towards destination", "# Calculate average distance to unvisited nodes for isolation metric", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate average remaining distance to other unvisited nodes", "remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Calculate clustering score based on distances to unvisited neighbors", "clustering_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", ">", "0", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Estimate score for alignment towards the final destination", "alignment_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score with isolation penalty for distant nodes", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "remaining_distance_weight", "*", "remaining_distance", "+", "clustering_weight", "*", "clustering_score", "-", "isolation_penalty_factor", "*", "(", "avg_distance_to_unvisited", "-", "direct_distance", ")", "+", "alignment_weight", "*", "alignment_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 33.075197167929204}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "# Calculate the maximum distance to any unvisited node for penalty", "max_distance_remaining", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Proximity factor based on the distance to the destination", "proximity_factor", "=", "1", "-", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "max_distance_remaining", ")", "# Score incorporates immediate distance and the proximity factor", "score", "=", "distance_to_node", "-", "proximity_factor", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 8.20718583006699}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "historical_weight", "=", "0.3", "# Weight for historical travel cost", "potential_weight", "=", "0.3", "# Weight for future potential based on nearest unvisited node", "average_cost", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "historical_score", "=", "average_cost", "# Use average cost as a historical score", "# Potential score based on shortest distance to nearest unvisited node", "closest_distance", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "dest", "]", "for", "dest", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Exponential decay factor to prioritize closer nodes", "decay_factor", "=", "0.9", "**", "direct_distance", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "historical_weight", "*", "historical_score", "+", "potential_weight", "*", "closest_distance", "*", "decay_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "from", "collections", "import", "defaultdict", "import", "math", "def", "cluster_nodes", "(", "unvisited", ",", "distance_matrix", ")", ":", "clusters", "=", "defaultdict", "(", "list", ")", "cluster_threshold", "=", "10", "# Adjustable threshold based on proximity", "for", "i", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", ":", "if", "i", "in", "unvisited", ":", "for", "j", "in", "unvisited", ":", "if", "i", "!=", "j", "and", "distance_matrix", "[", "i", "]", "[", "j", "]", "<", "cluster_threshold", ":", "clusters", "[", "i", "]", ".", "append", "(", "j", ")", "return", "clusters", "def", "calculate_centrality", "(", "node", ",", "cluster", ",", "distance_matrix", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "for", "neighbor", "in", "cluster", ")", "/", "len", "(", "cluster", ")", "if", "cluster", "else", "float", "(", "'inf'", ")", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "clusters", "=", "cluster_nodes", "(", "unvisited_nodes", ",", "distance_matrix", ")", "for", "node", "in", "unvisited_nodes", ":", "cluster", "=", "clusters", "[", "node", "]", "centrality_score", "=", "calculate_centrality", "(", "node", ",", "cluster", ",", "distance_matrix", ")", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "destination_penalty", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "**", "2", "# Squared to emphasize distance", "score", "=", "(", "-", "0.4", "*", "direct_distance", "+", "0.4", "*", "centrality_score", "-", "0.2", "*", "destination_penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.912624529184385}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm prioritizes nodes based on a gradient descent-like approach that combines", "# proximity to the current node and the potential future path length to the destination.}", "next_node", "=", "None", "min_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "estimated_cost_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "heuristic_score", "=", "(", "distance_to_next", "+", "estimated_cost_to_destination", ")", "*", "(", "len", "(", "unvisited_nodes", ")", "**", "0.5", ")", "# Weighting by the number of unvisited nodes", "if", "heuristic_score", "<", "min_cost", ":", "min_cost", "=", "heuristic_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "urgency_weight", "=", "0.3", "# Weight for urgency based on remaining nodes", "future_savings_weight", "=", "0.2", "# Weight for potential future savings", "deviation_penalty_weight", "=", "0.1", "# Penalty for deviating from the main route", "# Function to calculate future savings based on unvisited nodes", "def", "calculate_future_savings", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Function to determine urgency based on remaining unvisited nodes", "def", "calculate_urgency", "(", ")", ":", "return", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Function to calculate deviation from the direct route to destination", "def", "calculate_deviation", "(", "node", ")", ":", "return", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "node", "!=", "destination_node", "else", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_savings", "=", "calculate_future_savings", "(", "node", ")", "urgency", "=", "calculate_urgency", "(", ")", "deviation_penalty", "=", "calculate_deviation", "(", "node", ")", "# Combined scoring mechanism", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "urgency_weight", "*", "urgency", "-", "future_savings_weight", "*", "future_savings", "-", "deviation_penalty_weight", "*", "deviation_penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.207670756898343}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "min_distance_to_visited", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "geometric_spread_score", "=", "(", "avg_distance_to_destination", "-", "direct_distance", ")", "**", "2", "penalty_score", "=", "0.7", "*", "(", "min_distance_to_visited", "-", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<", "min_distance_to_visited", "else", "0", "score", "=", "direct_distance", "-", "(", "0.5", "*", "geometric_spread_score", ")", "-", "penalty_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 36.1397423465301}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the degree of each unvisited node", "node_degrees", "=", "{", "node", ":", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "float", "(", "'inf'", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "# Evaluate the weighted scores for each unvisited node", "weighted_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "degree_penalty", "=", "node_degrees", "[", "node", "]", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Normalize degree", "weighted_scores", "[", "node", "]", "=", "distance", "+", "degree_penalty", "# Select the node with the minimum weighted score", "next_node", "=", "min", "(", "weighted_scores", ",", "key", "=", "weighted_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_cost_weight", "=", "0.4", "future_cost_weight", "=", "0.4", "clustering_weight", "=", "0.2", "# Weight for promoting nodes within a cluster", "# Calculate average connection distance for clustering score", "unvisited_distances", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "avg_distance", "=", "sum", "(", "unvisited_distances", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Future cost based on expected remaining distance to destination", "future_cost", "=", "future_cost_weight", "*", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", ")", "# Clustering score: inverse of the average distance to remaining nodes", "clustering_score", "=", "clustering_weight", "*", "(", "1", "/", "(", "avg_distance", "+", "1", ")", ")", "score", "=", "-", "direct_cost_weight", "*", "direct_distance", "+", "future_cost", "+", "clustering_score", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.535277849329557}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "historical_visit_frequency", "=", "{", "node", ":", "1", "for", "node", "in", "unvisited_nodes", "}", "# Placeholder for frequency data", "if", "unvisited_nodes", ":", "distance_penalty_weight", "=", "0.4", "# Weight for direct distance from the current node", "visit_frequency_weight", "=", "0.3", "# Weight for visit frequency", "estimated_time_to_destination_weight", "=", "0.3", "# Weight for estimated time to destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "frequency_score", "=", "historical_visit_frequency", "[", "node", "]", "# Assume more frequent visits have higher scores", "estimated_time_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "(", "frequency_score", "or", "1", ")", "# Combined score taking all aspects into account", "score", "=", "-", "distance_penalty_weight", "*", "direct_distance", "+", "visit_frequency_weight", "*", "frequency_score", "-", "estimated_time_to_destination_weight", "*", "estimated_time_to_destination", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.7290456301202415}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.3", "# Weight for connectivity to unvisited nodes", "risk_weight", "=", "0.2", "# Weight for potential risk from long edges", "cooperative_weight", "=", "0.1", "# Weight for cooperative score with respect to destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average connectivity", "risk_factor", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Longest distance to any unvisited node", "cooperative_score", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Closeness to destination", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "-", "risk_weight", "*", "risk_factor", "+", "cooperative_weight", "*", "cooperative_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.80255961117258}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "distance_variance", "=", "sum", "(", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "avg_distance_to_destination", ")", "**", "2", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "+", "0.5", "*", "(", "distance_variance", "+", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.450370583313572}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.3", "# Weight for direct distance", "connectivity_weight", "=", "0.4", "# Weight for node connectivity", "potential_reward_weight", "=", "0.2", "# Reward for lower connectivity to other unvisited nodes", "historical_efficiency_weight", "=", "0.1", "# Penalizing recently traveled paths", "reevaluation_weight", "=", "0.1", "# Reevaluation impact on overall route", "def", "calculate_connectivity_score", "(", "node", ")", ":", "return", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "2", ")", "# Nodes within a distance threshold", "def", "calculate_historical_efficiency", "(", "node", ")", ":", "# Assume a function or a list that tracks traversal history (not implemented here)", "return", "0.1", "if", "node", "in", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "calculate_connectivity_score", "(", "node", ")", "historical_efficiency", "=", "calculate_historical_efficiency", "(", "node", ")", "# Calculate potential reward for choosing this node based on remaining unvisited nodes' connectivity", "potential_reward", "=", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", ">", "2", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "-", "direct_distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "potential_reward_weight", "*", "potential_reward", "-", "historical_efficiency_weight", "*", "historical_efficiency", "+", "reevaluation_weight", "*", "(", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate distances to the destination and unvisited nodes", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "distances_to_unvisited", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "# Calculate variance to introduce diversity in selection", "mean_distance_to_unvisited", "=", "sum", "(", "distances_to_unvisited", ")", "/", "len", "(", "distances_to_unvisited", ")", "variance_distance", "=", "sum", "(", "(", "distance", "-", "mean_distance_to_unvisited", ")", "**", "2", "for", "distance", "in", "distances_to_unvisited", ")", "/", "len", "(", "distances_to_unvisited", ")", "diversity_score", "=", "variance_distance", "**", "0.5", "# Standard deviation for diversity measure", "# Define weighting schemes", "distance_weight", "=", "1.5", "diversity_weight", "=", "0.5", "# Calculate scores incorporating distance and diversity", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "scores", "[", "node", "]", "=", "(", "distance_weight", "*", "distance_to_node", ")", "+", "(", "diversity_weight", "*", "(", "distance_to_node", "/", "(", "diversity_score", "+", "1", ")", ")", ")", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "clusters", "=", "{", "}", "# Step 1: Cluster unvisited nodes based on distance", "for", "node", "in", "unvisited_nodes", ":", "distance_to_current", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_key", "=", "int", "(", "distance_to_current", "//", "5", ")", "# Create clusters of radius 5", "if", "cluster_key", "not", "in", "clusters", ":", "clusters", "[", "cluster_key", "]", "=", "[", "]", "clusters", "[", "cluster_key", "]", ".", "append", "(", "node", ")", "# Step 2: Select the cluster with the nearest node", "nearest_node", "=", "None", "smallest_distance", "=", "float", "(", "'inf'", ")", "for", "cluster", "in", "clusters", ".", "values", "(", ")", ":", "for", "node", "in", "cluster", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "direct_distance", "<", "smallest_distance", ":", "smallest_distance", "=", "direct_distance", "nearest_node", "=", "node", "return", "nearest_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the heuristic distances to all unvisited nodes", "distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Introduce a randomness factor to encourage exploration", "exploration_factor", "=", "random", ".", "uniform", "(", "0", ",", "0.1", ")", "# adjust the range to tune exploration", "# Select the next node by minimizing distances with the exploration considered", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distances", "[", "node", "]", "+", "exploration_factor", "*", "random", ".", "random", "(", ")", ")", "return", "next_node"], "code_perf": 7.1349729559927715}
{"code_tokens": ["import", "random", "import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "visit_frequency", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "# Track visit counts", "decay_factor", "=", "0.5", "# Can be tuned", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "visit_frequency", "[", "node", "]", "+=", "1", "# Increase frequency count for unvisited nodes", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "frequency_penalty", "=", "1", "/", "(", "visit_frequency", "[", "node", "]", "+", "1", ")", "# Reduce score for frequently visited nodes", "decay_score", "=", "math", ".", "exp", "(", "-", "decay_factor", "*", "visit_frequency", "[", "node", "]", ")", "score", "=", "(", "distance", "*", "frequency_penalty", "*", "decay_score", ")", "+", "random", ".", "uniform", "(", "0", ",", "1", ")", "# Adding randomness", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 17.198366744913375}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "distance_weight", "=", "0.4", "/", "num_unvisited", "# Adjusted weight for direct distance based on unvisited count", "connectivity_weight", "=", "0.3", "# Weight for connectivity to unvisited nodes", "efficiency_weight", "=", "0.2", "# Weight for route efficiency", "destination_weight", "=", "0.1", "# Weight for proximity to destination", "penalty_weight", "=", "0.1", "# Penalty for average distance to other nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average connectivity", "# Efficiency score considering the average distance from current node to unvisited nodes", "efficiency_score", "=", "(", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "if", "unvisited_nodes", "else", "0", "# Proximity score based on distance to destination", "proximity_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "# Penalty score for average distance of the node to all other unvisited nodes", "penalty_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "efficiency_weight", "*", "efficiency_score", "-", "destination_weight", "*", "proximity_score", "-", "penalty_weight", "*", "penalty_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.496924056171565}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity to destination", "clustering_weight", "=", "0.5", "# Weight for clustering savings", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "nearest_neighbor_distance", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", ")", "+", "(", "nearest_neighbor_distance", "*", "clustering_weight", ")", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.414938683489259}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_cumulative_cost", "=", "float", "(", "'inf'", ")", "# Calculate cumulative costs for unvisited nodes", "cumulative_costs", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "cumulative_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Introduce a penalty for frequently visited nodes (assuming some criteria)", "penalty", "=", "0.1", "if", "node", "in", "unvisited_nodes", "else", "0", "cumulative_cost", "+=", "penalty", "cumulative_costs", "[", "node", "]", "=", "cumulative_cost", "if", "cumulative_cost", "<", "min_cumulative_cost", ":", "min_cumulative_cost", "=", "cumulative_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Scoring for each unvisited node based on distance and a heuristic", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_score", "=", "np", ".", "min", "(", "[", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", "if", "next_node", "!=", "node", "]", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "scores", "[", "node", "]", "=", "distance_to_node", "+", "heuristic_score", "# Selecting the node with the lowest score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 8.301930936042854}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "cluster_weight", "=", "0.4", "# Weight for attractiveness of node clusters", "destination_bonus", "=", "0.2", "# Bonus for proximity to destination", "novelty_weight", "=", "0.1", "# Weight for novelty of nodes visited less frequently", "# Calculate the cluster score", "cluster_scores", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "for", "unvisited", "in", "unvisited_nodes", ":", "cluster_scores", "[", "node", "]", "+=", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "# Calculate visit frequency (inverse of visit count)", "visit_frequency", "=", "{", "node", ":", "1", "for", "node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "}", "for", "visited", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", ":", "if", "visited", "not", "in", "unvisited_nodes", ":", "visit_frequency", "[", "visited", "]", "+=", "1", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_score", "=", "cluster_scores", "[", "node", "]", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Bonus for proximity to destination", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "proximity_bonus", "=", "-", "distance_to_destination", "# Novelty score based on visit frequency", "novelty_score", "=", "1", "/", "visit_frequency", "[", "node", "]", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "cluster_weight", "*", "cluster_score", "+", "destination_bonus", "*", "proximity_bonus", "+", "novelty_weight", "*", "novelty_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.791674262630402}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate average distance to unvisited nodes", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Find the nearest node with respect to the average distance", "nearest_node", "=", "None", "min_weighted_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Adjust the distance with a weight factor based on the average distance", "weighted_distance", "=", "distance", "+", "(", "avg_distance", "-", "distance", ")", "*", "0.5", "if", "weighted_distance", "<", "min_weighted_distance", ":", "min_weighted_distance", "=", "weighted_distance", "nearest_node", "=", "node", "return", "nearest_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_weight", "=", "0.4", "# Weight for immediate travel cost", "close_proximity_weight", "=", "0.3", "# Weight for proximity to current node", "distance_variance_weight", "=", "0.3", "# Weight for variance in distances to unvisited nodes", "distances", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "average_distance", "=", "sum", "(", "distances", ")", "/", "(", "len", "(", "distances", ")", "or", "1", ")", "distance_variance", "=", "sum", "(", "(", "d", "-", "average_distance", ")", "**", "2", "for", "d", "in", "distances", ")", "/", "(", "len", "(", "distances", ")", "or", "1", ")", "**", "0.5", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "close_proximity_weight", "*", "(", "1", "/", "(", "1", "+", "direct_distance", ")", ")", "# Reward for being closer", "distance_variance_score", "=", "distance_variance_weight", "*", "(", "distance_variance", "-", "direct_distance", ")", "# Encourage exploration of nodes with diverse distances", "score", "=", "(", "-", "immediate_weight", "*", "direct_distance", ")", "+", "proximity_score", "+", "distance_variance_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "total_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "# Calculate total cost: immediate distance to next node plus remaining distance to destination and penalty", "total_cost", "=", "distance_to_next", "+", "remaining_distance_to_destination", "+", "0.5", "*", "total_penalty", "if", "total_cost", "<", "best_cost", ":", "best_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.638255925482245}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm uses a combination of a modified scoring system that factors in the minimum distance to unvisited nodes, ", "# potential travel time based on perceived urgency, and a balancing mechanism to prevent local traps by considering the ", "# distance to the furthest unvisited node.}", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "urgency_factor", "=", "1.2", "# Factor to emphasize urgency based on time constraints", "if", "unvisited_nodes", ":", "min_distance_weight", "=", "0.4", "# Weight for the minimum distance to unvisited nodes", "average_distance_weight", "=", "0.3", "# Weight for average distance of unvisited nodes", "distance_to_furthest_weight", "=", "0.3", "# Weight for the distance to the furthest unvisited node", "min_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "max_distance", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Score that combines components to balance urgency and exploration", "score", "=", "-", "min_distance_weight", "*", "min_distance", "+", "average_distance_weight", "*", "average_distance", "-", "urgency_factor", "*", "direct_distance", "+", "distance_to_furthest_weight", "*", "max_distance", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate connectivity score based on the reachable unvisited nodes with distance", "connectivity_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", ">", "0", ")", "# Combined score: prioritize proximity while enhancing connectivity", "score", "=", "connectivity_score", "/", "len", "(", "unvisited_nodes", ")", "-", "distance_to_next", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 17.499755192762866}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "density_weight", "=", "0.4", "# Weight for node density", "risk_assessment_weight", "=", "0.2", "# Weight for detour risk", "# Function to calculate node density based on unvisited nodes", "def", "calculate_density_score", "(", "node", ")", ":", "density_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "density_score", "+=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "+", "1", ")", "# Inverse distance to avoid division by zero", "return", "density_score", "# Function to calculate risk assessment for potential detours", "def", "calculate_detour_risk", "(", "node", ")", ":", "indirect_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "return", "indirect_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "density_score", "=", "calculate_density_score", "(", "node", ")", "detour_risk", "=", "calculate_detour_risk", "(", "node", ")", "# Combined scoring mechanism", "score", "=", "(", "-", "direct_distance_weight", "*", "direct_distance", "+", "density_weight", "*", "density_score", "-", "risk_assessment_weight", "*", "detour_risk", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 16.31495133143794}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "direct_distance", ">", "0", ":", "# To avoid division by zero", "score", "=", "1", "/", "direct_distance", "# Encourage selection of closer nodes", "# Update best node based on the score", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Clustering the unvisited nodes into groups based on their distance to the current node", "clusters", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_key", "=", "round", "(", "distance", "//", "10", ")", "# Group by distance ranges (e.g., 0-10, 10-20)", "if", "cluster_key", "not", "in", "clusters", ":", "clusters", "[", "cluster_key", "]", "=", "[", "]", "clusters", "[", "cluster_key", "]", ".", "append", "(", "node", ")", "# Evaluating nodes within clusters", "for", "cluster", "in", "clusters", ".", "values", "(", ")", ":", "if", "cluster", ":", "min_distance_node", "=", "min", "(", "cluster", ",", "key", "=", "lambda", "n", ":", "distance_matrix", "[", "current_node", "]", "[", "n", "]", ")", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "min_distance_node", "]", "# Weighted score that favors intra-cluster proximity while penalizing distance to destination", "weight_factor", "=", "1", "/", "(", "1", "+", "len", "(", "cluster", ")", ")", "distance_to_dest", "=", "distance_matrix", "[", "min_distance_node", "]", "[", "destination_node", "]", "score", "=", "direct_distance", "*", "weight_factor", "+", "distance_to_dest", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "min_distance_node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity to destination", "connectivity_weight", "=", "0.3", "# Weight for connectivity potential", "cumulative_distance_weight", "=", "0.2", "# Weight for cumulative distance penalty", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "prev_node", "]", "for", "prev_node", "in", "unvisited_nodes", "if", "prev_node", "!=", "current_node", ")", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "or", "1", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "direct_distance", ")", "score", "=", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "connectivity_weight", "*", "connectivity_score", "-", "(", "cumulative_distance", "*", "cumulative_distance_weight", ")", "-", "direct_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 33.22485089475872}
{"code_tokens": ["import", "random", "import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "max_distance", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "decay_factor", "=", "math", ".", "exp", "(", "-", "direct_distance", "/", "max_distance", ")", "# Decay based on distance", "# Score considering both direct and destination distances", "score", "=", "-", "direct_distance", "+", "distance_to_destination", "*", "decay_factor", "scores", "[", "node", "]", "=", "score", "# Select the node with the highest score", "next_node", "=", "max", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.537440356476019}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "average_distance_to_destination", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "immediate_distance", "+", "(", "average_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 7.058807637206086}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity to destination", "historical_weight", "=", "0.5", "# Weight for historical cost efficiency", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "max_historical_cost", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "# Worst case historical cost", "score", "=", "(", "direct_distance", "*", "proximity_weight", ")", "+", "(", "max_historical_cost", "*", "historical_weight", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.535700438456931}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "node_scores", "=", "{", "}", "# Determine a balance of proximity to the current node and potential for future connections", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "# Combine direct distance and connectivity score with a weighting factor", "node_scores", "[", "node", "]", "=", "direct_distance", "*", "0.7", "-", "connectivity_score", "*", "0.3", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 27.291397631403463}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate cumulative distance traveled so far", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Introduce a dynamic exploration factor based on cumulative distance", "exploration_factor", "=", "random", ".", "uniform", "(", "0.5", ",", "2.0", ")", "# Select the next node with a bias towards nodes that are farther away, applying the exploration factor", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "exploration_factor", ")", "-", "(", "cumulative_distance", "/", "len", "(", "unvisited_nodes", ")", ")", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.6", "time_factor_weight", "=", "0.3", "clustering_weight", "=", "0.1", "# Calculate the average distance to the destination for clustering", "avg_destination_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Time factor based on the distance to the nearest critical node (destination in this case)", "time_factor", "=", "time_factor_weight", "*", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "# Clustering heuristic: higher score for nodes that are closer to others in the unvisited list", "clustering_score", "=", "clustering_weight", "*", "(", "1", "/", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "+", "1", ")", ")", "score", "=", "-", "direct_distance_weight", "*", "direct_distance", "+", "time_factor", "+", "clustering_score", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.9474936112808985}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "adaptive_penalty", "=", "(", "num_unvisited", "-", "1", ")", "*", "(", "1", "+", "distance_to_destination", "/", "(", "total_distance", "if", "total_distance", "else", "1", ")", ")", "# Adaptive penalty", "avg_distance_to_unvisited", "=", "total_distance", "/", "num_unvisited", "score", "=", "(", "direct_distance", "*", "0.5", ")", "+", "(", "adaptive_penalty", "*", "0.2", ")", "+", "(", "avg_distance_to_unvisited", "*", "0.3", ")", "# New hybrid score", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.740217525135948}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to unvisited nodes", "destination_weight", "=", "0.3", "# Weight for distance to destination", "connectivity_weight", "=", "0.3", "# Weight for connectivity based on degree of visitable nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "connectivity_score", "=", "len", "(", "[", "other_node", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "2", "*", "direct_distance", "]", ")", "score", "=", "(", "connectivity_score", "*", "connectivity_weight", ")", "-", "(", "direct_distance", "*", "proximity_weight", ")", "-", "(", "distance_to_destination", "*", "destination_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 26.819600510886616}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "novelty_weight", "=", "0.4", "# Weight for favoring unvisited nodes", "penalty_weight", "=", "0.2", "# Weight for penalizing recent visits", "# Calculate the total distance to all unvisited nodes to derive accessibility", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Novelty score based on how many unvisited nodes are directly reachable", "novelty_score", "=", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "]", ")", "# Penalty based on the distance from previously visited nodes", "penalty", "=", "sum", "(", "(", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "prev", "]", "+", "1", ")", ")", "for", "prev", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "prev", "not", "in", "unvisited_nodes", ")", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "novelty_weight", "*", "novelty_score", "-", "penalty_weight", "*", "penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 23.718505884822548}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "# Calculate the average distance to the destination for the unvisited nodes", "avg_cluster_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Heuristic for nearest neighbor with dynamic weighting from average distance", "score", "=", "direct_distance", "+", "0.5", "*", "avg_cluster_distance", "-", "0.5", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.450370583313572}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "visit_counts", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "visit_penalty", "=", "visit_counts", "[", "node", "]", "/", "(", "1", "+", "visit_counts", "[", "node", "]", ")", "# Dynamic penalty based on visit frequency", "# New scoring mechanism considering distance and visit penalty", "score", "=", "(", "direct_distance", "+", "0.5", "*", "(", "avg_distance_to_destination", "-", "distance_to_destination", ")", "+", "visit_penalty", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "# Increment visit count for the next node if found", "if", "next_node", ":", "visit_counts", "[", "next_node", "]", "+=", "1", "return", "next_node"], "code_perf": 6.450370583313572}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "memory_weight", "=", "0.4", "# Weight for visited nodes proximity", "destination_weight", "=", "0.2", "# Weight based on distance to the destination", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "memory_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "visited_node", "]", "for", "visited_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "memory_weight", "*", "-", "memory_distance", ")", "+", "(", "destination_weight", "*", "total_distance_to_destination", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate scores based on distance to the node and the distance to the destination", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "scores", "[", "node", "]", "=", "distance_to_node", "+", "0.5", "*", "distance_to_destination", "# Weighting the distance to the destination", "# Select the node with the lowest score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["# {This algorithm enhances the original approach by introducing a weighted scoring mechanism that balances proximity with a penalty for visiting nodes that are farther from the destination, while also considering node centrality based on the total distance from that node to all unvisited nodes.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "total_distance_from_node", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "average_distance_to_unvisited", "=", "total_distance_from_node", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "# Calculate scores", "proximity_score", "=", "average_distance_to_unvisited", "-", "distance_to_next", "destination_penalty", "=", "-", "distance_to_destination", "# Penalize nodes further from the destination", "connectivity_score", "=", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "10", "]", ")", "# Example threshold for connectivity", "score", "=", "proximity_score", "+", "destination_penalty", "+", "connectivity_score", "# Combine scores", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.328751305099974}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "max_attractiveness_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "min_distance_to_unvisited", "=", "min", "(", "[", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "]", ",", "default", "=", "float", "(", "'inf'", ")", ")", "connectivity_score", "=", "len", "(", "[", "n", "for", "n", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "0", "]", ")", "attractiveness_score", "=", "(", "1", "/", "(", "distance_to_node", "+", "1e-9", ")", ")", "*", "(", "1", "+", "min_distance_to_unvisited", ")", "*", "(", "1", "+", "connectivity_score", ")", "if", "attractiveness_score", ">", "max_attractiveness_score", ":", "max_attractiveness_score", "=", "attractiveness_score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.883569747919271}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Sort unvisited nodes based on distance from the current node", "sorted_nodes", "=", "sorted", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "# Select the nearest node", "next_node", "=", "sorted_nodes", "[", "0", "]", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Distance to destination", "score", "=", "1", "/", "distance", "+", "1", "/", "(", "remaining_distance", "+", "1e-6", ")", "# Avoid division by zero", "scores", "[", "node", "]", "=", "score", "# Introduce randomness", "total_score", "=", "sum", "(", "scores", ".", "values", "(", ")", ")", "probabilities", "=", "{", "node", ":", "score", "/", "total_score", "for", "node", ",", "score", "in", "scores", ".", "items", "(", ")", "}", "# Define a randomness factor", "exploration_factor", "=", "0.1", "# Adjust this value to favor exploration", "if", "random", ".", "random", "(", ")", "<", "exploration_factor", ":", "next_node", "=", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "else", ":", "next_node", "=", "random", ".", "choices", "(", "list", "(", "probabilities", ".", "keys", "(", ")", ")", ",", "weights", "=", "probabilities", ".", "values", "(", ")", ")", "[", "0", "]", "return", "next_node"], "code_perf": 21.931628010095007}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Adjusted weight for proximity to destination", "cost_efficiency_weight", "=", "0.5", "# Adjusted weight for cost efficiency", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cumulative_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "# Cumulative cost for unvisited nodes", "average_cost", "=", "cumulative_cost", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "average_cost", "*", "cost_efficiency_weight", ")", "-", "(", "direct_distance", "*", "proximity_weight", ")", "-", "(", "total_distance_to_destination", "/", "2", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.41724333977419}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate nearest unvisited node for future potential", "nearest_unvisited_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_distance", "=", "distance_matrix", "[", "node", "]", "[", "nearest_unvisited_node", "]", "score", "=", "direct_distance", "+", "(", "0.5", "*", "future_distance", ")", "# Combined distance metric", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "risk_factor", "=", "0.8", "# Factor representing distance variability consideration", "if", "unvisited_nodes", ":", "primary_distance_weight", "=", "0.4", "# Weight for direct distance", "exploration_weight", "=", "0.4", "# Weight for minimum distance to unvisited nodes", "synergy_weight", "=", "0.2", "# Weight for synergy among unvisited nodes", "# Calculate the minimum distance to unvisited nodes for exploration factor", "min_distance_to_unvisited", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate synergy score based on average distance to all unvisited nodes", "synergy_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combined score incorporating risk factor adjustment", "score", "=", "-", "primary_distance_weight", "*", "direct_distance", "+", "exploration_weight", "*", "(", "min_distance_to_unvisited", "-", "direct_distance", ")", "+", "synergy_weight", "*", "synergy_score", "# Risk adjustment for nodes with high direct distance", "risk_adjustment", "=", "risk_factor", "*", "(", "direct_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "score", "-=", "risk_adjustment", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.696565158514999}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "total_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Score combines the distance to next node and the average distance to remaining nodes", "scores", "[", "node", "]", "=", "distance_to_node", "+", "total_distance_to_remaining", "*", "0.5", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate average time to all unvisited nodes (assuming uniform travel speed)", "avg_time_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "# Direct distance to current node", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Estimated time to reach the destination from this node", "time_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Score based on direct distance, average time to other unvisited nodes, and time to destination", "score", "=", "direct_distance", "+", "avg_time_to_unvisited", "+", "time_to_destination", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.6", "# Higher weight for direct distance", "heuristic_weight", "=", "0.4", "# Weight for potential future path savings", "# Length of the current path to the destination node", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_value", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "heuristic_weight", "*", "heuristic_value", ")", "# Introducing a new factor for nodes that could serve as an effective hub for other unvisited nodes", "hub_bonus", "=", "len", "(", "[", "other_node", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "total_distance_to_destination", "]", ")", "*", "0.3", "score", "+=", "hub_bonus", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 20.204518445110267}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the best score for unvisited nodes considering distance, node degree, and heuristic", "best_score", "=", "float", "(", "'inf'", ")", "best_nodes", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "node_degree", "=", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", "]", ")", "# Heuristic: distance to the destination", "heuristic", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate a combined score", "score", "=", "distance", "+", "(", "1", "/", "(", "node_degree", "+", "1", ")", ")", "+", "heuristic", "*", "0.5", "# Adjusting the weight of heuristic", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_nodes", "=", "[", "node", "]", "elif", "score", "==", "best_score", ":", "best_nodes", ".", "append", "(", "node", ")", "# Random selection among the best nodes for diversity", "if", "best_nodes", ":", "return", "random", ".", "choice", "(", "best_nodes", ")", "return", "None"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the closest unvisited node", "closest_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Calculate the score for each unvisited node considering direct distance and proximity to the closest node", "scores", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "0.6", ")", "+", "(", "closest_distance", "*", "0.4", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the unvisited node with the minimum score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "density_weight", "=", "0.4", "# Weight for density of unvisited nodes", "revisit_penalty", "=", "0.2", "# Penalty for proximity to already visited nodes", "# Calculate node density score for unvisited nodes", "def", "calculate_density_score", "(", "node", ")", ":", "density_score", "=", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "5", ")", "# Example threshold", "return", "density_score", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "density_score", "=", "calculate_density_score", "(", "node", ")", "# Evaluating a revisitation penalty (assuming a simple last visited structure)", "revisit_penalty_score", "=", "-", "revisit_penalty", "*", "(", "1", "if", "node", "in", "unvisited_nodes", "else", "0", ")", "# Combined scoring mechanism", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "density_weight", "*", "density_score", "+", "revisit_penalty_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the minimum spanning tree cost based on unvisited nodes", "from", "scipy", ".", "sparse", ".", "csgraph", "import", "minimum_spanning_tree", "import", "numpy", "as", "np", "sub_matrix", "=", "np", ".", "array", "(", "[", "[", "distance_matrix", "[", "i", "]", "[", "j", "]", "if", "j", "in", "unvisited_nodes", "else", "float", "(", "'inf'", ")", "for", "j", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "]", "for", "i", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "]", ")", "# Compute the MST cost", "mst", "=", "minimum_spanning_tree", "(", "sub_matrix", ")", "mst_cost", "=", "mst", ".", "sum", "(", ")", "# Calculate the average distances to all unvisited nodes", "avg_distance", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "# Select the next node with a combination of MST cost and average distance", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "(", "mst_cost", "/", "len", "(", "unvisited_nodes", ")", ")", ")", "-", "avg_distance", "*", "0.1", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "density_weight", "=", "0.5", "# Weight for density of unvisited nodes", "distance_weight", "=", "0.5", "# Weight for distance penalty", "# Calculate the density of unvisited nodes in the vicinity", "neighborhood_size", "=", "0", "density_effect", "=", "0", "for", "node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", ":", "if", "node", "in", "unvisited_nodes", "and", "node", "!=", "current_node", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "<=", "10", ":", "# Consider nodes within a certain distance as nearby", "density_effect", "+=", "1", "neighborhood_size", "+=", "1", "density_effect", "/=", "(", "neighborhood_size", "or", "1", ")", "# Normalize density", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_from_start", "=", "distance_matrix", "[", "0", "]", "[", "node", "]", "# Assuming the start is at index 0", "score", "=", "(", "density_weight", "*", "density_effect", ")", "-", "(", "distance_weight", "*", "direct_distance", ")", "+", "(", "distance_from_start", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.234144832125022}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "attractiveness_scores", "=", "{", "node", ":", "len", "(", "[", "other", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "avg_distance", "]", ")", "for", "node", "in", "unvisited_nodes", "}", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "attractiveness_bonus", "=", "attractiveness_scores", "[", "node", "]", "*", "0.1", "# Weight for attractiveness", "score", "=", "distance", "-", "attractiveness_bonus", "+", "random", ".", "uniform", "(", "-", "0.5", ",", "0.5", ")", "# Randomization", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 15.092031981220583}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate the normalized distance to destination", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Calculate the attractiveness factor based on remaining unvisited nodes", "attractiveness_factor", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Calculate scores for each unvisited node", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cost_score", "=", "(", "distance_to_node", "/", "(", "distance_to_destination", "+", "1", ")", ")", "*", "attractiveness_factor", "scores", "[", "node", "]", "=", "cost_score", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "max_distance_threshold", "=", "10", "# Maximum distance considered for selection", "clustering_factor", "=", "0.6", "# Weight to favor nearby clusters", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.3", "# Weight for direct distance", "clustering_weight", "=", "0.5", "# Weight for nodes within the distance threshold", "destination_alignment_weight", "=", "0.2", "# Weight for alignment towards the destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Clustering score for nearby nodes", "nearby_nodes", "=", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<=", "max_distance_threshold", "]", "clustering_score", "=", "len", "(", "nearby_nodes", ")", "*", "clustering_factor", "# Estimate score for alignment towards the final destination", "destination_alignment_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "clustering_score", "+", "destination_alignment_weight", "*", "destination_alignment_score", "# Random factor to encourage exploration", "if", "random", ".", "random", "(", ")", "<", "0.3", ":", "# 30% chance to randomly explore", "score", "+=", "random", ".", "uniform", "(", "-", "max_distance_threshold", ",", "max_distance_threshold", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 24.233114244202685}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "cumulative_influence_factor", "=", "0.3", "# Weight for cumulative influence", "proximity_threshold", "=", "10", "# Proximity threshold for enhanced influence", "total_cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_effect", "=", "1", "if", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "<=", "proximity_threshold", "else", "0", "score", "=", "direct_distance", "+", "cumulative_influence_factor", "*", "(", "total_cumulative_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "-", "proximity_effect", "*", "2", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.80356546673329}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the minimum distance to unvisited nodes", "min_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Calculate a heuristic value based on the proportion of unvisited nodes", "heuristic_value", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "distance_matrix", ")", "-", "1", ")", "# Normalize by total nodes excluding the starting node", "# Select the next node considering both minimum distance and heuristic value", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "(", "1", "-", "heuristic_value", "*", "0.2", ")", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm incorporates a hybrid approach by factoring in not only travel distance and clustering penalties but also the overall remaining distance to the destination, promoting longer-term planning in node selection.}", "next_node", "=", "None", "min_total_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "clustering_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ",", "1", ")", "total_cost", "=", "distance_to_next", "+", "clustering_penalty", "+", "remaining_distance_to_destination", "if", "total_cost", "<", "min_total_cost", ":", "min_total_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.392093580764584}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "minimal_weighted_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "weighted_distance", "=", "distance_to_node", "+", "0.5", "*", "distance_to_destination", "# Weighing the distance to the destination", "if", "weighted_distance", "<", "minimal_weighted_distance", ":", "minimal_weighted_distance", "=", "weighted_distance", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_penalty_weight", "=", "0.6", "# Heavier penalty for longer distances", "exploration_bonus_weight", "=", "0.3", "# Bonus for nodes that connect to more unvisited nodes", "future_potential_weight", "=", "0.1", "# Weight for potential of future pathways", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "exploration_bonus", "=", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "(", "direct_distance", "+", "1", ")", ")", "future_potential", "=", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average distance to destination", "score", "=", "-", "distance_penalty_weight", "*", "direct_distance", "+", "exploration_bonus_weight", "*", "exploration_bonus", "+", "future_potential_weight", "*", "future_potential", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.625690549760282}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm employs a heuristic that combines a penalty based on the proximity of unvisited nodes and a factor related to the furthest node remaining, providing a dynamic balance to prioritize both immediate and distant nodes.}", "max_cost", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "furthest_node_distance", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "proximity_factor", "=", "0.6", "# Weight for favoring proximity to the destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty_score", "=", "proximity_factor", "*", "(", "furthest_node_distance", "-", "direct_distance", ")", "score", "=", "direct_distance", "-", "penalty_score", "if", "score", ">", "max_cost", ":", "max_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 36.1397423465301}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "# Calculate the direct distance to each unvisited node", "distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Calculate a connectivity score based on how many unvisited nodes each node can reach", "connectivity_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "connectivity_scores", "[", "node", "]", "=", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", ")", "# Select the node based on a combined score of direct distance and connectivity", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distances", "[", "node", "]", "connectivity_score", "=", "connectivity_scores", "[", "node", "]", "score", "=", "direct_distance", "-", "(", "0.3", "*", "connectivity_score", ")", "# Weight the connectivity influence", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to destination", "clustering_weight", "=", "0.3", "# Weight for clustering savings", "cumulative_distance_weight", "=", "0.2", "# Weight for cumulative distance", "temporal_decay_weight", "=", "0.1", "# Weight for recent node visitation", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "prev_node", "]", "for", "prev_node", "in", "unvisited_nodes", "if", "prev_node", "!=", "current_node", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Introducing temporal decay based on the direct distance to the destination", "temporal_decay", "=", "direct_distance", "/", "(", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "+", "1", ")", "score", "=", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "(", "cluster_average_distance", "*", "clustering_weight", ")", "-", "(", "cumulative_distance", "*", "cumulative_distance_weight", ")", "-", "(", "temporal_decay", "*", "temporal_decay_weight", ")", "-", "direct_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.290384053032696}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_weight", "=", "0.4", "# Weight for immediate travel cost", "future_potential_weight", "=", "0.4", "# Potential future gains weight", "risk_penalty_weight", "=", "0.2", "# Risk penalty for distant nodes", "adaptability_factor", "=", "1.0", "/", "(", "len", "(", "unvisited_nodes", ")", "**", "0.5", "or", "1", ")", "# Increased sensitivity to number of unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "potential_future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average cost to remaining nodes", "risk_penalty", "=", "risk_penalty_weight", "*", "max", "(", "0", ",", "direct_distance", "-", "potential_future_cost", ")", "# Penalty if direct distance is significantly greater", "score", "=", "(", "-", "immediate_weight", "*", "direct_distance", ")", "+", "(", "future_potential_weight", "*", "potential_future_cost", "*", "adaptability_factor", ")", "-", "risk_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.738648760375694}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.5", "cluster_weight", "=", "0.5", "# Weight for favoring clusters of unvisited nodes", "penalty_factor", "=", "len", "(", "unvisited_nodes", ")", "*", "0.2", "# Penalty for remaining unvisited nodes", "# Calculate average distance to remaining unvisited nodes", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_score", "=", "-", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "# Average distance to unvisited nodes", "score", "=", "-", "direct_distance", "*", "direct_distance_weight", "-", "penalty_factor", "+", "cluster_score", "*", "cluster_weight", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.4323878079629}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate the average distance to all unvisited nodes", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "# Direct distance to the current node", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Estimation combining direct distance and average distance for a future cost minimization", "score", "=", "direct_distance", "+", "(", "avg_distance", "*", "0.1", ")", "# Adjusting factor can be fine-tuned", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "visit_counts", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "visit_penalty", "=", "visit_counts", "[", "node", "]", "*", "(", "0.5", "/", "(", "visit_counts", "[", "node", "]", "+", "1", ")", ")", "# Adjusted diminishing penalty", "# Heuristic exploration factor", "closeness_factor", "=", "(", "1", "/", "(", "1", "+", "direct_distance", ")", ")", "*", "3", "# Favor nearby nodes", "# Randomization to promote exploration", "randomness", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "*", "0.5", "# Random factor between 0 and 0.5", "score", "=", "direct_distance", "+", "(", "avg_distance_to_destination", "-", "distance_to_destination", ")", "+", "visit_penalty", "+", "closeness_factor", "-", "randomness", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "# Increment visit count for the next node if it's not None", "if", "next_node", ":", "visit_counts", "[", "next_node", "]", "+=", "1", "return", "next_node"], "code_perf": 26.244243469379835}
{"code_tokens": ["import", "random", "import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "temperature", "=", "1.0", "cooling_rate", "=", "0.995", "iterations", "=", "100", "best_node", "=", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "best_score", "=", "float", "(", "'inf'", ")", "for", "_", "in", "range", "(", "iterations", ")", ":", "candidate_node", "=", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "current_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate_node", "]", "remaining_distance", "=", "distance_matrix", "[", "candidate_node", "]", "[", "destination_node", "]", "score", "=", "current_distance", "+", "remaining_distance", "# Simple score based on distance", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "candidate_node", "else", ":", "acceptance_probability", "=", "math", ".", "exp", "(", "(", "best_score", "-", "score", ")", "/", "temperature", ")", "if", "random", ".", "random", "(", ")", "<", "acceptance_probability", ":", "best_score", "=", "score", "best_node", "=", "candidate_node", "temperature", "*=", "cooling_rate", "return", "best_node"], "code_perf": 21.843264694838886}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "base_penalty", "=", "0.5", "*", "len", "(", "unvisited_nodes", ")", "# Base penalty for unvisited nodes", "total_penalty", "=", "len", "(", "unvisited_nodes", ")", "*", "0.1", "# Scalability with unvisited nodes", "randomness", "=", "random", ".", "uniform", "(", "-", "0.3", ",", "0.3", ")", "# Random factor to explore different paths", "weighted_score", "=", "distance", "+", "base_penalty", "+", "total_penalty", "+", "randomness", "# Combine metrics", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.375680912406636}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Penalty factor and randomness coefficient", "penalty_factor", "=", "0.3", "randomness_factor", "=", "0.1", "best_next_node", "=", "None", "best_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "last_visited_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Calculate total cost with a dynamic penalty and randomness", "dynamic_penalty", "=", "penalty_factor", "*", "last_visited_distance", "randomness", "=", "random", ".", "uniform", "(", "0", ",", "randomness_factor", "*", "direct_distance", ")", "total_cost", "=", "direct_distance", "+", "dynamic_penalty", "+", "randomness", "if", "total_cost", "<", "best_cost", ":", "best_cost", "=", "total_cost", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 7.022153082041616}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate a new score considering both the direct distance and how it compares to the average distance", "if", "distance_to_destination", ">", "0", ":", "# Avoid division by zero", "score", "=", "(", "direct_distance", "+", "average_distance", ")", "/", "distance_to_destination", "else", ":", "score", "=", "float", "(", "'inf'", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.862942458484051}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate distances to all unvisited nodes", "distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Calculate heuristic score based on total connected distance to other unvisited nodes", "heuristic_scores", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "for", "node", "in", "unvisited_nodes", "}", "# Calculate combined scores: lower distance and lower heuristic score are better", "scores", "=", "{", "node", ":", "(", "distances", "[", "node", "]", "+", "heuristic_scores", "[", "node", "]", ")", "for", "node", "in", "unvisited_nodes", "}", "# Find the minimum weighted score", "min_score", "=", "min", "(", "scores", ".", "values", "(", ")", ")", "# Filter candidates with minimum score", "candidates", "=", "[", "node", "for", "node", ",", "score", "in", "scores", ".", "items", "(", ")", "if", "score", "==", "min_score", "]", "# Introduce weighted randomness to select among the best candidates", "if", "candidates", ":", "total_weight", "=", "sum", "(", "1", "/", "(", "distances", "[", "node", "]", "+", "1e-6", ")", "for", "node", "in", "candidates", ")", "# Inverse of distance as weight", "weights", "=", "[", "(", "1", "/", "(", "distances", "[", "node", "]", "+", "1e-6", ")", ")", "/", "total_weight", "for", "node", "in", "candidates", "]", "# Normalize weights", "next_node", "=", "random", ".", "choices", "(", "candidates", ",", "weights", "=", "weights", ")", "[", "0", "]", "# Select based on weight", "else", ":", "next_node", "=", "None", "return", "next_node"], "code_perf": 21.51502557645197}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "average_distance_to_unvisited", "-", "distance_to_next", ")", "-", "(", "0.5", "*", "distance_to_destination", ")", "# Balance between average, immediate, and destination distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.791674262630402}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "travel_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "centrality_score", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "exploration_balance", "=", "(", "1", "-", "(", "len", "(", "unvisited_nodes", ")", "/", "len", "(", "distance_matrix", ")", ")", ")", "*", "0.5", "score", "=", "(", "0.5", "*", "travel_distance", "+", "0.3", "*", "(", "centrality_score", "/", "len", "(", "distance_matrix", ")", ")", "+", "0.2", "*", "(", "avg_distance", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "exploration_balance", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.466511785330852}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_modified_score", "=", "float", "(", "'inf'", ")", "penalty_factor", "=", "1.2", "# Penalty for direct distances", "boosting_factor", "=", "1.5", "# Boost for connectivity", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "penalty_factor", "connectivity_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "modified_score", "=", "direct_distance", "-", "(", "connectivity_score", "*", "boosting_factor", ")", "# Lower score is better", "if", "modified_score", "<", "min_modified_score", ":", "min_modified_score", "=", "modified_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 29.31375680476264}
{"code_tokens": ["import", "random", "import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "randomness_factor", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "# Randomness to encourage exploration", "previous_node_weight", "=", "0.5", "if", "current_node", "in", "unvisited_nodes", "else", "0", "# Bias towards the last node", "# Combined scoring metric", "scores", "[", "node", "]", "=", "(", "1", "/", "(", "1", "+", "distance_score", ")", ")", "*", "(", "total_distance", "/", "distance_score", ")", "*", "randomness_factor", "+", "previous_node_weight", "# Select the node with the highest score", "next_node", "=", "max", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 8.879396534298966}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Calculate clustering score", "clustering_score", "=", "sum", "(", "distance_matrix", "[", "node1", "]", "[", "node2", "]", "for", "node1", "in", "unvisited_nodes", "for", "node2", "in", "unvisited_nodes", "if", "node1", "!=", "node2", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "+", "0.3", "*", "(", "clustering_score", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.583058552198324}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "minimal_weighted_distance", "=", "float", "(", "'inf'", ")", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_unvisited", "=", "total_distance_to_unvisited", "/", "len", "(", "unvisited_nodes", ")", "visit_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "decay_factor", "=", "(", "0.5", "**", "(", "visit_count", "/", "len", "(", "distance_matrix", ")", ")", ")", "# Dynamic decay based on unvisited count", "weighted_distance", "=", "distance", "*", "decay_factor", "+", "average_distance_to_unvisited", "*", "(", "1", "-", "decay_factor", ")", "if", "weighted_distance", "<", "minimal_weighted_distance", ":", "minimal_weighted_distance", "=", "weighted_distance", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "distance", "+", "heuristic_cost", "# Total score combining distance and heuristic", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "weighted_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "# Penalty for close nodes", "weight", "=", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "# Weight based on remaining nodes and distance to destination", "weighted_scores", "[", "node", "]", "=", "(", "distance_to_node", "+", "penalty", ")", "*", "weight", "next_node", "=", "min", "(", "weighted_scores", ",", "key", "=", "weighted_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.699237951584123}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate the connectivity score", "connectivity_score", "=", "{", "node", ":", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "node", "!=", "other", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<=", "5", ")", "for", "node", "in", "unvisited_nodes", "}", "# Calculate metrics related to the destination", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "# Combine connectivity, distance, and penalty", "score", "=", "direct_distance", "+", "(", "0.5", "*", "penalty", ")", "-", "(", "0.5", "*", "connectivity_score", "[", "node", "]", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.844208061586528}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "connectivity_weight", "=", "0.5", "# Weight for the potential connectivity of unvisited nodes", "proximity_weight", "=", "0.5", "# Weight for proximity to the destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "connectivity_score", "=", "connectivity_weight", "*", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "# Average distance to remaining nodes", "score", "=", "-", "direct_distance", "+", "proximity_score", "-", "connectivity_score", "# Modified scoring equation", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.925023624569427}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "avg_distance_to_unvisited", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "adjusted_cost", "=", "direct_distance", "+", "(", "0.5", "*", "avg_distance_to_unvisited", ")", "# Weighted average adjustment", "if", "adjusted_cost", "<", "min_cost", ":", "min_cost", "=", "adjusted_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance to unvisited nodes", "attractiveness_weight", "=", "0.5", "# Weight for attractiveness to destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "average_distance_to_unvisited", "*", "direct_weight", ")", "+", "(", "distance_to_destination", "*", "attractiveness_weight", ")", "-", "direct_distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.292595875030693}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Emphasis on direct distance", "future_distance_weight", "=", "0.4", "# Weight for potential distances to remaining nodes", "distribution_weight", "=", "0.2", "# Weight for distribution of unvisited nodes", "def", "calculate_distribution_score", "(", "node", ")", ":", "distribution_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "# Geometric distance (usually euclidean) as a proxy for distribution", "distribution_score", "+=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "+", "1e-6", ")", "# Prevent division by zero", "return", "distribution_score", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Future distance score considering the remaining unvisited nodes", "future_distance_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "distribution_score", "=", "calculate_distribution_score", "(", "node", ")", "# Combined scoring mechanism with dynamic ajustarment of weights", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "future_distance_weight", "*", "future_distance_score", "+", "distribution_weight", "*", "distribution_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 12.917081363145119}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "current_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "exploration_factor", "=", "len", "(", "unvisited_nodes", ")", "*", "0.5", "# Promotes exploration based on remaining nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "exploration_penalty", "=", "avg_distance", "*", "exploration_factor", "score", "=", "direct_distance", "+", "exploration_penalty", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "connectivity_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "+", "1", ")", "for", "n", "in", "unvisited_nodes", ")", "# Encourages selection of less connected nodes", "score", "=", "(", "connectivity_score", "/", "unvisited_count", ")", "-", "distance_to_next", "# Combine connectivity and distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.417064959405391}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "importance_weight", "=", "0.5", "# Weight for node importance", "# Function to calculate importance of a node", "def", "calculate_importance", "(", "node", ")", ":", "degree_sum", "=", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "float", "(", "'inf'", ")", ")", "return", "degree_sum", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "degree_sum", ">", "0", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "node_importance", "=", "calculate_importance", "(", "node", ")", "# Combined scoring mechanism", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "importance_weight", "*", "node_importance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 11.879778066246008}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "next_node", "=", "None", "lowest_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "0.5", "# Apply a penalty based on distance to destination", "cost", "=", "direct_distance", "+", "penalty", "if", "cost", "<", "lowest_cost", ":", "lowest_cost", "=", "cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance to unvisited nodes", "attractiveness_weight", "=", "0.3", "# Weight for attractiveness to destination", "novelty_weight", "=", "0.2", "# Weight for favoring less explored nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Novelty score for the unvisited node based on distance to other unvisited nodes", "novelty_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "cluster_center_distance", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "# Overall score calculation", "score", "=", "(", "1", "/", "(", "direct_distance", "+", "1", ")", ")", "*", "direct_weight", "+", "(", "distance_to_destination", "*", "attractiveness_weight", ")", "-", "(", "novelty_score", "*", "novelty_weight", ")", "+", "(", "1", "/", "(", "cluster_center_distance", "+", "1", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.0251762424709785}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the average distance to unvisited nodes", "avg_distance", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "# Score nodes based on their direct distance, distance to destination, and the average distance", "node_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Score adjustment: lower direct distance, lower distance to destination, and average distance", "score", "=", "direct_distance", "+", "distance_to_destination", "-", "(", "avg_distance", "*", "0.5", ")", "node_scores", "[", "node", "]", "=", "score", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "cluster_factor", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "direct_distance", "+", "cluster_factor", "-", "cluster_distance", "/", "2", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.450370583313572}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance to next node", "cluster_weight", "=", "0.5", "# Weight for average distance savings among unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "1", "/", "(", "direct_distance", "+", "1", ")", ")", "*", "direct_weight", "+", "(", "cluster_average_distance", "*", "cluster_weight", ")", "-", "(", "total_distance_to_destination", "*", "0.2", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.636340427227218}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "-", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "penalty_factor", "=", "1.5", "# Factor to adjust the penalty based on distance to destination", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "penalty_factor", "*", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "avg_distance_to_destination", ")", "score", "=", "-", "(", "direct_distance", "-", "penalty", ")", "# Maximizing the score while minimizing distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.768431081957852}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "randomness_factor", "=", "0.3", "# Factor to introduce randomness to avoid local optima", "trend_weight", "=", "0.2", "# Weight for revisiting nodes that were part of previous paths", "exploration_weight", "=", "0.5", "# Weight for exploratory paths", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.4", "# Weight for connectivity to unvisited nodes", "loop_closure_weight", "=", "0.2", "# Weight for possible loop closures", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Score for potential loop closure based on closeness to destination", "loop_closure_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Trend-following score based on prior paths", "trend_score", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "*", "trend_weight", "# Stochastic exploration of trends", "# Combined score", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "loop_closure_weight", "*", "loop_closure_score", "+", "trend_score", "# Introduce randomness to diversify choices", "score", "+=", "random", ".", "uniform", "(", "-", "randomness_factor", ",", "randomness_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 13.80644075137458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate total distances to unvisited nodes for normalization", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "convergence_score", "=", "sum", "(", "distance_matrix", "[", "other_node", "]", "[", "node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "# Heuristic weighting factors", "immediate_weight", "=", "1", "/", "(", "1", "+", "direct_distance", ")", "convergence_weight", "=", "1", "/", "(", "1", "+", "convergence_score", ")", "# Combined score accounting for immediate distance and convergence of unvisited nodes", "score", "=", "direct_distance", "*", "immediate_weight", "+", "convergence_weight", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.763619628742249}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for distance", "proximity_weight", "=", "0.4", "# Weight for proximity score", "chaining_reward", "=", "0.2", "# Reward for chaining to nearby unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "+", "1", ")", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", ")", "# Proximity score (inverse distance)", "chaining_score", "=", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "10", ")", "# Reward for chaining to nearby unvisited nodes within a threshold", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "proximity_weight", "*", "proximity_score", "+", "chaining_reward", "*", "chaining_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 15.69011470172758}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate a score combining distance and a random factor", "if", "distance_to_destination", ">", "0", ":", "# Avoid division by zero", "score", "=", "direct_distance", "+", "(", "random", ".", "uniform", "(", "0", ",", "1", ")", "*", "distance_to_destination", ")", "else", ":", "score", "=", "float", "(", "'inf'", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 10.08049602785821}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Randomly sample a subset of unvisited nodes", "sample_size", "=", "min", "(", "3", ",", "len", "(", "unvisited_nodes", ")", ")", "# Sample up to 3 nodes", "sampled_nodes", "=", "random", ".", "sample", "(", "unvisited_nodes", ",", "sample_size", ")", "best_next_node", "=", "None", "best_total_distance", "=", "float", "(", "'inf'", ")", "# Evaluate the sampled nodes", "for", "node", "in", "sampled_nodes", ":", "total_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Distance to the candidate node", "# Include distances to remaining unvisited nodes", "total_distance", "+=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "nn", "]", "for", "nn", "in", "unvisited_nodes", "if", "nn", "!=", "node", ")", "if", "total_distance", "<", "best_total_distance", ":", "best_total_distance", "=", "total_distance", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 24.386116704281037}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "# Calculate the direct distance to the current node", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate the distance to the final destination", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Score based on the distance to the destination with a penalty for direct distance", "score", "=", "-", "direct_distance", "+", "distance_to_destination", "# Selecting the node that maximizes this score", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.078385722187273}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate a score based on the reciprocal of distances", "score", "=", "(", "1", "/", "(", "distance_to_node", "+", "1", ")", ")", "+", "(", "1", "/", "(", "distance_to_destination", "+", "1", ")", ")", "# Select the node with the maximum score", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.6608569721620725}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "i", ",", "node", "in", "enumerate", "(", "unvisited_nodes", ")", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Introducing rotational score based on the current index in the unvisited list", "rotation_penalty", "=", "(", "i", "+", "1", ")", "*", "(", "1", "/", "num_unvisited", ")", "score", "=", "direct_distance", "+", "rotation_penalty", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 12.734278472668759}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate distances to unvisited nodes", "distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Calculate average distance", "average_distance", "=", "sum", "(", "distances", ".", "values", "(", ")", ")", "/", "len", "(", "unvisited_nodes", ")", "# Calculate desirability based on density of remaining nodes", "desirability", "=", "{", "}", "total_distance_to_others", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "node", "in", "unvisited_nodes", "for", "other", "in", "unvisited_nodes", "if", "node", "!=", "other", ")", "for", "node", "in", "unvisited_nodes", ":", "density_score", "=", "total_distance_to_others", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "desirability", "[", "node", "]", "=", "density_score", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distances", "[", "node", "]", "distance_penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "average_distance", ")", "# Calculate the new heuristic score with a weighted desirability", "heuristic_score", "=", "desirability", "[", "node", "]", "score", "=", "direct_distance", "+", "distance_penalty", "-", "(", "0.5", "*", "heuristic_score", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "total_nodes", "=", "len", "(", "distance_matrix", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Compute cluster density penalty: How isolated the node is", "isolation_penalty", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "total_nodes", ")", "if", "neighbor", "not", "in", "unvisited_nodes", "and", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<", "10", ")", "# Arbitrary distance threshold", "# Dynamic visit frequency: higher score for recently visited nodes", "visit_frequency_score", "=", "1", "# This would typically be updated based on external visit counts", "decay_factor", "=", "0.9", "# Decay for the visit frequency, to be adjusted dynamically", "visit_frequency_score", "*=", "decay_factor", "# New scoring mechanism", "score", "=", "(", "direct_distance", "*", "0.5", "+", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "*", "0.3", "+", "isolation_penalty", "*", "0.1", "+", "visit_frequency_score", "*", "0.1", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.4257563991146025}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "closeness_weight", "=", "0.4", "# Weight for proximity to destination", "historical_weight", "=", "0.3", "# Weight for historical cost", "diversity_weight", "=", "0.3", "# Weight for promoting diversity in the path", "max_distance_considered", "=", "5", "# Radius to consider for diversity", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "historical_cost", "=", "(", "total_distance_to_destination", "+", "direct_distance", ")", "/", "2", "# Simple historical cost estimation", "# Calculate the diversity factor", "diversity_factor", "=", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", ">", "max_distance_considered", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Score computation", "score", "=", "-", "(", "direct_distance", "+", "historical_cost", ")", "*", "historical_weight", "+", "(", "total_distance_to_destination", "-", "direct_distance", ")", "*", "closeness_weight", "+", "diversity_factor", "*", "diversity_weight", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity to destination", "mutual_distance_weight", "=", "0.4", "# Weight for average mutual distance among unvisited nodes", "exploration_weight", "=", "0.1", "# Weight for exploratory randomness", "# Calculate the average distance to all unvisited nodes from the current node", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Calculate mutual distances among unvisited nodes for clustering influence", "mutual_distances", "=", "[", "(", "node", ",", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", ")", "for", "node", "in", "unvisited_nodes", "]", "for", "node", ",", "mutual_distance_sum", "in", "mutual_distances", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "mutual_average_distance", "=", "mutual_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "score", "=", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "mutual_average_distance", "*", "mutual_distance_weight", "-", "direct_distance", "+", "random", ".", "uniform", "(", "-", "exploration_weight", ",", "exploration_weight", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.284861489867975}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.6", "# Increased weight for direct distance", "future_path_weight", "=", "0.3", "# Adjusted weight for potential future path minimization", "unvisited_count_weight", "=", "0.1", "# Weight for favoring unvisited nodes", "# Length of the current path to the destination node", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Calculate the average distance to unvisited nodes", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_future_savings", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Dynamic balancing factor based on unvisited nodes", "balancing_factor", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "future_path_weight", "*", "avg_future_savings", ")", "+", "(", "unvisited_count_weight", "*", "balancing_factor", ")", "# Apply a penalty if the node's direct distance exceeds a set threshold (2x the average)", "if", "direct_distance", ">", "2", "*", "avg_distance_to_unvisited", ":", "score", "-=", "(", "direct_distance", "-", "2", "*", "avg_distance_to_unvisited", ")", "*", "0.1", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.4597365709491275}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_distance", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "urgency_factor", "=", "total_distance_to_unvisited", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "# Avoid division by zero", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "urgency_score", "=", "urgency_factor", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "direct_distance", "+", "urgency_score", "if", "score", "<", "max_distance", "or", "next_node", "is", "None", ":", "max_distance", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.0647958752346804}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "closeness_weight", "=", "0.4", "# Weight for distance to unvisited nodes", "entropy_weight", "=", "0.6", "# Weight for entropy of unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "number_of_unvisited", "=", "len", "(", "unvisited_nodes", ")", "# Calculate entropy of the unvisited nodes based on distances", "entropy", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "node", "in", "unvisited_nodes", "for", "other_node", "in", "unvisited_nodes", "if", "node", "!=", "other_node", ")", "/", "(", "number_of_unvisited", "*", "(", "number_of_unvisited", "-", "1", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "-", "direct_distance", "+", "(", "closeness_weight", "*", "(", "1", "/", "(", "direct_distance", "+", "1e-6", ")", ")", ")", "+", "(", "entropy_weight", "*", "entropy", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "potential_nodes", "=", "[", "]", "total_distance_from_destination", "=", "sum", "(", "distance_matrix", "[", "destination_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance_from_destination", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "-", "average_distance", ")", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ">", "average_distance", "else", "0", "heuristic_value", "=", "total_distance_from_destination", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Average heuristic distance", "estimated_cost", "=", "direct_distance", "+", "heuristic_value", "+", "penalty", "# Cost includes direct distance, heuristic, and penalty", "potential_nodes", ".", "append", "(", "(", "node", ",", "estimated_cost", ")", ")", "next_node", "=", "min", "(", "potential_nodes", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_connections_to_unvisited", "=", "{", "node", ":", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_connections", "=", "total_connections_to_unvisited", "[", "node", "]", "decay_factor", "=", "1", "/", "(", "1", "+", "remaining_connections", ")", "# Decay factor inversely proportional to connections", "proximity_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "decay_factor", "score", "=", "direct_distance", "+", "proximity_score", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.101442436613793}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate a relevance score based on distance to the destination", "relevance_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "distance_from_current", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Weight the distance to destination more heavily", "relevance_scores", "[", "node", "]", "=", "distance_from_current", "+", "0.5", "*", "distance_to_destination", "# Select the node with the lowest relevance score", "next_node", "=", "min", "(", "relevance_scores", ",", "key", "=", "relevance_scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "num_nodes", "=", "len", "(", "unvisited_nodes", ")", "avg_proximity", "=", "total_distance", "/", "num_nodes", "if", "num_nodes", ">", "0", "else", "float", "(", "'inf'", ")", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "visit_count", "=", "{", "node", ":", "1", "for", "node", "in", "unvisited_nodes", "}", "# Initialize visit counts", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "visit_penalty", "=", "1", "/", "(", "visit_count", "[", "node", "]", "**", "0.5", ")", "# Penalty increases with visits", "score", "=", "(", "distance", "+", "(", "avg_proximity", "*", "0.3", ")", ")", "*", "visit_penalty", "*", "random", ".", "uniform", "(", "0.95", ",", "1.05", ")", "# Random adjustment", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "# Update visit count for the selected node", "visit_count", "[", "next_node", "]", "+=", "1", "if", "next_node", "else", "0", "return", "next_node"], "code_perf": 7.09863514426538}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "average_distance_to_unvisited", "=", "total_distance_to_unvisited", "/", "len", "(", "unvisited_nodes", ")", "# Calculate a score combining direct distance and average distance to unvisited", "score", "=", "direct_distance", "+", "average_distance_to_unvisited", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Convert unvisited nodes to a numpy array for easier manipulation", "unvisited_nodes", "=", "np", ".", "array", "(", "list", "(", "unvisited_nodes", ")", ")", "# Calculate distances from the current node to all unvisited nodes", "distances", "=", "distance_matrix", "[", "current_node", ",", "unvisited_nodes", "]", "# Calculate distances from the unvisited nodes to the destination node", "to_destination_distances", "=", "distance_matrix", "[", "unvisited_nodes", ",", "destination_node", "]", "# Decay factor based on the number of unvisited nodes to increase exploration", "decay_factor", "=", "len", "(", "unvisited_nodes", ")", "/", "len", "(", "distance_matrix", ")", "adjusted_distances", "=", "distances", "*", "decay_factor", "# Calculate a logarithmic penalty for the density of unvisited neighbors", "density_penalty", "=", "np", ".", "log1p", "(", "np", ".", "array", "(", "[", "np", ".", "sum", "(", "distance_matrix", "[", "node", ",", ":", "]", ">", "0", ")", "for", "node", "in", "unvisited_nodes", "]", ")", ")", "# Compute a combined score: adjusted distance + weight for destination proximity + density penalty", "scores", "=", "adjusted_distances", "+", "to_destination_distances", "+", "density_penalty", "# Select the node with the minimum score", "next_node", "=", "unvisited_nodes", "[", "np", ".", "argmin", "(", "scores", ")", "]", "return", "next_node"], "code_perf": 9.483570498700532}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate the average distance to all unvisited nodes to gauge their connectivity", "average_connectivity", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "node", "in", "unvisited_nodes", "for", "other_node", "in", "unvisited_nodes", "if", "node", "!=", "other_node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate score as a combination of direct distance and connectivity", "score", "=", "direct_distance", "+", "average_connectivity", "/", "len", "(", "unvisited_nodes", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "efficiency_weight", "=", "0.3", "# Weight for cost-efficiency of choosing the next node", "adjustment_weight", "=", "0.2", "# Weight for adjustment factor based on overall path length", "# Function to calculate cost-efficiency score based on remaining unvisited nodes", "def", "calculate_efficiency_score", "(", "node", ")", ":", "remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "node_efficiency", "=", "remaining_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "return", "1", "/", "(", "node_efficiency", "+", "1", ")", "# Inverse to prioritize lower costs", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "efficiency_score", "=", "calculate_efficiency_score", "(", "node", ")", "# Adjustment factor based on the additional length incurred by choosing this node", "adjustment_factor", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combined scoring mechanism adapting to new conditions", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "efficiency_weight", "*", "efficiency_score", "-", "adjustment_weight", "*", "adjustment_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.477883276052975}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1e-5", ")", ")", "+", "(", "random", ".", "random", "(", ")", "*", "(", "average_distance_to_unvisited", "/", "(", "distance_to_next", "+", "1e-5", ")", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.220590506328902}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "avg_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "# Weighting based on proximity to the destination node", "proximity_score", "=", "1", "/", "(", "distance_to_destination", "+", "1", ")", "# Introducing a decay factor to favor shorter paths", "decay_factor", "=", "1", "/", "(", "1", "+", "distance_to_next", ")", "# Combined score", "score", "=", "proximity_score", "*", "decay_factor", "*", "(", "avg_distance_to_remaining", "-", "distance_to_next", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.409390305033564}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Find the unvisited node closest to the current node", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "total_nodes", "=", "len", "(", "distance_matrix", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Centrality score for the node, based on connections to other unvisited nodes", "centrality_score", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "total_nodes", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<", "10", ")", "# Arbitrary distance threshold", "# Dynamic clustering influence: adjusts based on unvisited neighboring nodes", "clustering_influence", "=", "len", "(", "[", "neighbor", "for", "neighbor", "in", "range", "(", "total_nodes", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<", "10", "]", ")", "dynamic_weight", "=", "0.2", "+", "(", "0.5", "*", "(", "clustering_influence", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", ")", "# Avoid division by zero", "# New scoring mechanism", "score", "=", "(", "direct_distance", "*", "0.4", "+", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "*", "0.3", "+", "centrality_score", "*", "0.2", "+", "dynamic_weight", "*", "0.1", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.501505956627025}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate distances to all unvisited nodes", "distances", "=", "np", ".", "array", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "# Calculate weighted average distance to unvisited nodes", "weighted_avg_distance", "=", "np", ".", "average", "(", "distances", ",", "weights", "=", "1", "/", "(", "distances", "+", "1e-6", ")", ")", "# Avoid division by zero", "# Compute proximity factor", "proximity_factor", "=", "np", ".", "min", "(", "distances", ")", "if", "len", "(", "distances", ")", ">", "0", "else", "float", "(", "'inf'", ")", "# Compute scores for unvisited nodes using a combined score with dynamic weights", "node_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Introduce a new scoring mechanism that accounts for total node proximity", "score", "=", "(", "direct_distance", "*", "0.5", ")", "+", "(", "weighted_avg_distance", "*", "0.3", ")", "+", "(", "distance_to_destination", "*", "0.2", ")", "+", "(", "proximity_factor", "*", "0.1", ")", "node_scores", "[", "node", "]", "=", "score", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.331995111188165}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate the total distance to all unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Calculate the average distance", "average_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "# Select the next node with a weighted score combining distance and randomness", "scores", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "-", "average_distance", ")", "+", "random", ".", "uniform", "(", "0", ",", "1", ")", "for", "node", "in", "unvisited_nodes", "}", "# Choose the node with the lowest score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 12.240306525492695}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", "if", "next_node", "!=", "node", ")", "score", "=", "immediate_distance", "+", "(", "cumulative_distance", "/", "len", "(", "unvisited_nodes", ")", ")", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.6", "# Emphasis on direct distance", "future_benefit_weight", "=", "0.4", "# Weight for potential benefits of visiting remaining nodes", "# Calculate future benefits for unvisited nodes", "def", "calculate_future_benefit", "(", "node", ")", ":", "future_benefit_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "future_benefit_score", "+=", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other", "]", ")", "# Higher score for closer nodes", "return", "future_benefit_score", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_benefit", "=", "calculate_future_benefit", "(", "node", ")", "# Combined scoring mechanism emphasizing distance and future benefits", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "future_benefit_weight", "*", "future_benefit", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.315490431967753}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Group unvisited nodes into clusters based on proximity", "clusters", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "not", "in", "clusters", ":", "clusters", "[", "distance", "]", "=", "[", "]", "clusters", "[", "distance", "]", ".", "append", "(", "node", ")", "# Find the closest cluster", "closest_distance", "=", "min", "(", "clusters", ".", "keys", "(", ")", ")", "closest_cluster", "=", "clusters", "[", "closest_distance", "]", "# From the closest cluster, select the node with the minimum distance to the destination", "next_node", "=", "min", "(", "closest_cluster", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Weighting based on remaining distance to the destination", "proximity_score", "=", "1", "/", "(", "distance_to_destination", "+", "1", ")", "# Clustering factor that encourages visiting less connected nodes", "clustering_score", "=", "1", "/", "(", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "10", "]", ")", "+", "1", ")", "# Combined score", "score", "=", "proximity_score", "*", "(", "clustering_score", "+", "1", ")", "/", "(", "1", "+", "distance_to_next", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.862738108318953}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "density_weight", "=", "0.5", "# Weight for unvisited node density", "distance_weight", "=", "0.5", "# Weight for inverse distance", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "inverse_distance", "=", "1", "/", "(", "direct_distance", "+", "1e-6", ")", "# Avoid division by zero", "unvisited_density", "=", "sum", "(", "1", "for", "next_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "<", "total_distance_to_destination", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_distance", "*", "distance_weight", ")", "-", "(", "inverse_distance", "+", "unvisited_density", "*", "density_weight", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.0227797544738735}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.4", "# Weight for connectivity to unvisited nodes", "penalty_weight", "=", "0.2", "# Weight for depth penalty based on distance to unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average connectivity", "# Penalty based on the distance to the farthest unvisited node", "max_penalty", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Clustering score based on proximity of remaining nodes", "clustering_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "+", "1", ")", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", ">", "0", ")", "# Prefer nodes closer to others", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "-", "penalty_weight", "*", "max_penalty", "+", "clustering_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 22.256397197665564}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.6", "# Weight for direct distance", "proximity_weight", "=", "0.4", "# Weight for proximity to the nearest unvisited node", "exploration_factor", "=", "0.5", "# Factor to encourage exploration", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Proximity score based on distance to the nearest unvisited node", "nearest_distance", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "for", "unvisited", "in", "unvisited_nodes", ")", "# Exploration score based on distance from the current path", "exploration_score", "=", "(", "1", "/", "(", "direct_distance", "+", "1", ")", ")", "*", "exploration_factor", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "proximity_weight", "*", "nearest_distance", "+", "exploration_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "proximity_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "weight_score", "=", "avg_distance_to_destination", "score", "=", "proximity_score", "+", "weight_score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate the distances to unvisited nodes", "distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Find the minimum distance", "min_distance", "=", "min", "(", "distances", ".", "values", "(", ")", ")", "# Calculate probabilities based on inverse distances", "total_weight", "=", "sum", "(", "1", "/", "(", "distance", "+", "1e-6", ")", "for", "distance", "in", "distances", ".", "values", "(", ")", ")", "# Avoid division by zero", "probabilities", "=", "{", "node", ":", "(", "1", "/", "(", "distance", "+", "1e-6", ")", ")", "/", "total_weight", "for", "node", ",", "distance", "in", "distances", ".", "items", "(", ")", "}", "# Select the next node based on the calculated probabilities", "next_node", "=", "random", ".", "choices", "(", "list", "(", "probabilities", ".", "keys", "(", ")", ")", ",", "weights", "=", "list", "(", "probabilities", ".", "values", "(", ")", ")", ")", "[", "0", "]", "return", "next_node"], "code_perf": 19.043913331182765}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "diversity_weight", "=", "0.3", "# Weight for encouraging diversity in choices", "heuristic_weight", "=", "0.2", "# Weight for heuristic towards destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Diversity score based on variance in distances to other unvisited nodes", "diversity_score", "=", "1.0", "/", "(", "1", "+", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", ")", "# Heuristic score based on reduced distance to destination", "heuristic_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "**", "2", "/", "(", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "**", "2", ")", "# Exponential decay function adapting to the distance to the destination", "exponent_decay", "=", "1", "/", "(", "1", "+", "(", "0.05", "*", "direct_distance", ")", ")", "# Calculate combined score", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "diversity_weight", "*", "diversity_score", "+", "heuristic_weight", "*", "heuristic_score", ")", "*", "exponent_decay", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.115104067250993}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.6", "# Emphasis on direct distance", "risk_weight", "=", "0.4", "# Factor for risk of backtracking", "# Calculate the risk of using a node based on future distances", "def", "calculate_risk_score", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "risk_score", "=", "calculate_risk_score", "(", "node", ")", "# Combined scoring mechanism", "score", "=", "-", "direct_distance_weight", "*", "direct_distance", "+", "risk_weight", "*", "(", "1", "/", "(", "risk_score", "+", "1e-9", ")", ")", "# Avoid division by zero", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.111275685697427}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "exploration_weight", "=", "0.4", "# Weight for exploration potential", "distance_weight", "=", "0.6", "# Weight for direct distance", "if", "unvisited_nodes", ":", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Explore neighbors to assess their impact on future paths", "neighbor_scores", "=", "[", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "for", "neighbor", "in", "unvisited_nodes", "if", "neighbor", "!=", "node", "]", "avg_neighbor_score", "=", "sum", "(", "neighbor_scores", ")", "/", "(", "len", "(", "neighbor_scores", ")", "or", "1", ")", "# Combined score considering exploration potential against direct distance", "score", "=", "distance_weight", "*", "direct_distance", "-", "exploration_weight", "*", "avg_neighbor_score", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.368214238744789}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm evaluates nodes by balancing the shortest direct distance to the next node and the average distance to the destination node among unvisited nodes, thus providing both immediate proximity and a future strategic goal.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "average_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "n", "]", "[", "destination_node", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "score", "=", "(", "average_distance_to_destination", "-", "direct_distance", ")", "+", "(", "1", "/", "(", "1", "+", "distance_to_destination", ")", ")", "# Incorporating both direct distance and future potential", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.373133925713997}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Cluster the unvisited nodes based on distance", "clusters", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "distance_to_destination", "not", "in", "clusters", ":", "clusters", "[", "distance_to_destination", "]", "=", "[", "]", "clusters", "[", "distance_to_destination", "]", ".", "append", "(", "node", ")", "# Select the cluster closest to the destination", "closest_cluster_distance", "=", "min", "(", "clusters", ".", "keys", "(", ")", ")", "closest_cluster", "=", "clusters", "[", "closest_cluster_distance", "]", "# Select the nearest node from the closest cluster to the current node", "next_node", "=", "min", "(", "closest_cluster", ",", "key", "=", "lambda", "x", ":", "distance_matrix", "[", "current_node", "]", "[", "x", "]", ")", "return", "next_node"], "code_perf": 18.704820740310073}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "cluster_weight", "=", "0.5", "# Weight for cluster connectivity", "# Function to calculate adaptive cluster-centric score", "def", "calculate_adaptive_cluster_score", "(", "node", ")", ":", "cluster_score", "=", "0", "proximity_count", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "proximity_count", "+=", "1", "cluster_score", "+=", "1", "/", "distance_matrix", "[", "node", "]", "[", "other", "]", "# Inverse distance for connection within a cluster", "return", "cluster_score", "/", "proximity_count", "if", "proximity_count", ">", "0", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_score", "=", "calculate_adaptive_cluster_score", "(", "node", ")", "# Combined scoring mechanism with dynamic adjustments", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "cluster_weight", "*", "cluster_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 17.854437372898275}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "neighbor_count", "=", "sum", "(", "1", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "<", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "attractiveness", "=", "neighbor_count", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "# Influence of neighboring unvisited nodes", "cost_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# New scoring formula combining direct distance, attractiveness, and distance to destination", "score", "=", "direct_distance", "+", "0.5", "*", "cost_to_destination", "-", "0.5", "*", "attractiveness", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate the degree of each node", "node_degree", "=", "{", "node", ":", "sum", "(", "1", "for", "i", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "distance_matrix", "[", "node", "]", "[", "i", "]", ">", "0", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate score as a combination of distance and inverse degree", "score", "=", "(", "direct_distance", "/", "(", "node_degree", "[", "node", "]", "+", "1", ")", ")", "+", "distance_to_destination", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 16.260420887845605}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Create a list of (node, distance) tuples for unvisited nodes", "distances", "=", "[", "(", "node", ",", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "for", "node", "in", "unvisited_nodes", "]", "# Sort unvisited nodes by their direct distance from the current node", "distances", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "# Calculate the cumulative distance for each node to estimate future path costs", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", ",", "direct_distance", "in", "distances", ":", "future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "total_score", "=", "direct_distance", "+", "future_cost", "if", "total_score", "<", "min_score", ":", "min_score", "=", "total_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 21.51502557645197}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Emphasis on direct distance", "cluster_weight", "=", "0.4", "# Weight for proximity to clusters of unvisited nodes", "penalty_weight", "=", "0.2", "# Penalty for distance from destination", "def", "calculate_cluster_centrality", "(", "node", ")", ":", "centrality_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "return", "centrality_score", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "centrality_score", "=", "calculate_cluster_centrality", "(", "node", ")", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined scoring mechanism", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "cluster_weight", "*", "centrality_score", "-", "penalty_weight", "*", "distance_to_destination", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.7794802341537}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "connectivity_scores", "=", "{", "node", ":", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "!=", "float", "(", "'inf'", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "closeness_factor", "=", "0.3", "# Factor to increase score for closer nodes", "maximum_connectivity", "=", "max", "(", "connectivity_scores", ".", "values", "(", ")", ")", "if", "connectivity_scores", "else", "1", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "estimated_tour_length", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "connectivity_score", "=", "connectivity_scores", "[", "node", "]", "/", "maximum_connectivity", "closeness_score", "=", "closeness_factor", "/", "(", "1", "+", "direct_distance", ")", "score", "=", "direct_distance", "+", "estimated_tour_length", "-", "(", "closeness_score", "+", "connectivity_score", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "reciprocal_distance_factor", "=", "1.5", "# Weight for reciprocal influence", "total_inverse_distance", "=", "sum", "(", "1", "/", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ">", "0", ")", "avg_inverse_distance", "=", "total_inverse_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "reciprocal_effect", "=", "avg_inverse_distance", "/", "(", "1", "+", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", ")", "if", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ">", "0", "else", "0", "score", "=", "direct_distance", "+", "reciprocal_distance_factor", "*", "reciprocal_effect", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.89094660028788}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "distance_weight", "=", "0.5", "# Weight for direct distance", "penalty_weight", "=", "0.5", "# Weight for long time penalties", "# Calculate average distance to destination for unvisited nodes", "average_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Dynamic penalty if the node has been unvisited for long (time factor is inversely proportional to direct distance)", "time_penalty", "=", "1", "/", "(", "direct_distance", "+", "1", ")", "# Score calculation considering direct distance and penalty for unvisited nodes", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "penalty_weight", "*", "time_penalty", "-", "average_distance_to_destination", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["# {The new algorithm introduces a hybrid score combining distance, normalized closeness to the destination, and an exploration factor that favors unvisited nodes with a high degree.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the degree of each unvisited node", "node_degree", "=", "{", "node", ":", "sum", "(", "1", "for", "i", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "distance_matrix", "[", "node", "]", "[", "i", "]", ">", "0", ")", "for", "node", "in", "unvisited_nodes", "}", "# Calculate the normalized closeness to the destination for each unvisited node", "norm_closeness", "=", "{", "node", ":", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "sum", "(", "distance_matrix", "[", "node", "]", ")", "for", "node", "in", "unvisited_nodes", "}", "# Calculate scores for each unvisited node based on distance, closeness, and exploration factors", "scores", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "2", ")", "+", "(", "norm_closeness", "[", "node", "]", "*", "3", ")", "+", "(", "1", "/", "(", "node_degree", "[", "node", "]", "+", "1", ")", ")", "*", "0.5", "for", "node", "in", "unvisited_nodes", "}", "# Select the unvisited node with the minimum score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.019552240592937}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "novelty_weight", "=", "0.3", "# Weight for exploring less-visited nodes", "clustering_weight", "=", "0.4", "# Weight for local clustering preference", "backtrack_penalty_weight", "=", "0.3", "# Penalty for backtracking", "if", "unvisited_nodes", ":", "# Calculate unvisited nodes' clustering score based on proximity", "clustering_scores", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate backtrack penalty based on distance to visited nodes (if any)", "backtrack_penalty", "=", "min", "(", "(", "distance_matrix", "[", "node", "]", "[", "visited", "]", "for", "visited", "in", "unvisited_nodes", "if", "visited", "!=", "node", ")", ",", "default", "=", "0", ")", "# Novelty score based on the inverse of how often the node has been visited", "novelty_score", "=", "len", "(", "unvisited_nodes", ")", "-", "clustering_scores", "[", "node", "]", "# Combined score factoring in distance, novelty, clustering, and backtrack penalty", "score", "=", "-", "direct_distance", "+", "novelty_weight", "*", "novelty_score", "-", "backtrack_penalty_weight", "*", "backtrack_penalty", "+", "clustering_weight", "*", "clustering_scores", "[", "node", "]", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.580130072707661}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "exploration_weight", "=", "0.4", "# Weight for exploration of unvisited nodes", "proximity_weight", "=", "0.4", "# Weight for proximity to destination", "visit_frequency_weight", "=", "0.2", "# Weight for encouraging less frequently visited nodes", "global", "node_visit_counts", "node_visit_counts", "=", "{", "}", "def", "calculate_proximity_score", "(", "node", ")", ":", "return", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "def", "calculate_visit_frequency_score", "(", "node", ")", ":", "return", "1", "/", "(", "1", "+", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", ")", "for", "node", "in", "unvisited_nodes", ":", "node_visit_counts", "[", "node", "]", "=", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", "+", "1", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "calculate_proximity_score", "(", "node", ")", "frequency_score", "=", "calculate_visit_frequency_score", "(", "node", ")", "score", "=", "(", "-", "exploration_weight", "*", "direct_distance", "+", "-", "proximity_weight", "*", "proximity_score", "+", "visit_frequency_weight", "*", "frequency_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_total_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "total_cost", "=", "direct_distance", "+", "total_distance_to_destination", "if", "total_cost", "<", "min_total_cost", ":", "min_total_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_distance_visited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "# Direct distance to the current node", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Modified average distance to already visited nodes", "average_distance_visited", "=", "total_distance_visited", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "if", "unvisited_nodes", "else", "0", "# Estimated future cost to reach destination from the unvisited node", "future_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Score based on a combination of direct distance, average distance, and future cost", "score", "=", "direct_distance", "+", "0.5", "*", "average_distance_visited", "+", "0.3", "*", "future_cost", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.244455041163539}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "closest_nodes", "=", "[", "]", "weighted_choice", "=", "[", "]", "# Find the minimum distance and prepare for weighted selection", "min_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "<", "min_distance", ":", "min_distance", "=", "distance", "closest_nodes", "=", "[", "node", "]", "weighted_choice", "=", "[", "1", "/", "distance", "]", "# Initialize weight based on inverse distance", "elif", "distance", "==", "min_distance", ":", "closest_nodes", ".", "append", "(", "node", ")", "weighted_choice", ".", "append", "(", "1", "/", "distance", ")", "# Same weight for equal closest nodes", "# Introduce variability through weighted random selection", "if", "closest_nodes", ":", "total_weight", "=", "sum", "(", "weighted_choice", ")", "probabilities", "=", "[", "weight", "/", "total_weight", "for", "weight", "in", "weighted_choice", "]", "next_node", "=", "random", ".", "choices", "(", "closest_nodes", ",", "probabilities", ")", "[", "0", "]", "return", "next_node", "return", "None"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "cluster_weight", "=", "0.6", "# Weight for clustering advantage", "proximity_weight", "=", "0.4", "# Weight for proximity to visited nodes", "# Evaluating visited nodes for potential proximity benefit", "proximity_effect", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "node", "not", "in", "unvisited_nodes", ")", "proximity_penalty", "=", "proximity_effect", "/", "(", "len", "(", "distance_matrix", ")", "-", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "cluster_weight", "*", "cluster_average_distance", ")", "-", "(", "direct_distance", "+", "proximity_penalty", ")", "+", "(", "proximity_weight", "*", "proximity_effect", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.349781351250228}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.6", "# Increased weight on direct distance", "cluster_weight", "=", "0.4", "# Weight for cluster potential", "isolation_penalty_weight", "=", "0.2", "# Penalty for isolated nodes", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "total_distance_from_node", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "+", "1e-6", ")", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", ")", "# Inverse distance as cluster potential", "isolation_penalty", "=", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "/", "(", "total_distance_from_node", "+", "1e-6", ")", "# Penalty based on isolation from other nodes", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "cluster_weight", "*", "cluster_score", "-", "isolation_penalty_weight", "*", "isolation_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.315490431967753}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Heuristic weightings", "distance_weight", "=", "0.7", "promising_node_weight", "=", "0.2", "penalty_weight", "=", "0.1", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate potential contribution to total distance", "contribution_to_total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination", "]", "for", "destination", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Penalty for distance from destination", "distance_penalty", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "(", "1", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", ")", "# Weighted score calculation", "score", "=", "(", "distance_weight", "*", "direct_distance", "+", "promising_node_weight", "*", "contribution_to_total_distance", "+", "penalty_weight", "*", "distance_penalty", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.476566756058439}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "cluster_weight", "=", "0.5", "# Weight for connectivity", "potential_saving_weight", "=", "0.3", "# Weight for potential savings", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "savings_potential", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "-", "direct_distance", "connectivity_score", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "1", "+", "direct_distance", ")", "# Encouraging visits to close clusters", "score", "=", "(", "direct_weight", "*", "direct_distance", ")", "+", "(", "cluster_weight", "*", "connectivity_score", ")", "-", "(", "potential_saving_weight", "*", "savings_potential", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 34.63061477196436}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "unvisited_nodes", "=", "np", ".", "array", "(", "list", "(", "unvisited_nodes", ")", ")", "distances", "=", "distance_matrix", "[", "current_node", ",", "unvisited_nodes", "]", "destination_distances", "=", "distance_matrix", "[", "unvisited_nodes", ",", "destination_node", "]", "# Introduce attractiveness score based on proximity of unvisited nodes to the current node", "attractiveness_scores", "=", "1", "/", "(", "1", "+", "distances", ")", "# Thresholding dynamic weight to emphasize closer unvisited nodes", "dynamic_weight", "=", "np", ".", "clip", "(", "(", "np", ".", "mean", "(", "destination_distances", ")", "-", "destination_distances", ")", ",", "0", ",", "None", ")", "# Combine scores: distance + attractiveness + adjusted dynamic weight", "scores", "=", "distances", "+", "(", "1", "/", "(", "attractiveness_scores", "+", "1", ")", ")", "+", "dynamic_weight", "next_node", "=", "unvisited_nodes", "[", "np", ".", "argmin", "(", "scores", ")", "]", "return", "next_node"], "code_perf": 7.085674518562437}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate the average distance to unvisited nodes for normalization", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "num_unvisited", "if", "num_unvisited", ">", "0", "else", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Decay function to promote nodes with a lower degree of exploration (unvisited nodes)", "exploration_factor", "=", "1", "/", "(", "1", "+", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", ")", "# Ratio score, incorporating both immediate distance and exploration", "score", "=", "(", "direct_distance", "/", "(", "average_distance_to_unvisited", "+", "1e-6", ")", ")", "*", "exploration_factor", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "clustering_weight", "=", "0.5", "# Weight for clusters of unvisited nodes", "distance_weight", "=", "0.3", "# Weight for direct distance", "future_opportunity_weight", "=", "0.2", "# Weight for future potential pathways", "if", "unvisited_nodes", ":", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate clustering score based on proximity of unvisited nodes", "clustering_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Calculate potential future opportunities based on remaining unvisited nodes", "future_opportunity_score", "=", "(", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "# Combined score for decision making", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "clustering_weight", "*", "clustering_score", "+", "future_opportunity_weight", "*", "future_opportunity_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.786777275745054}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "decay_factor", "=", "0.7", "# Weight to diminish the influence of distant nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "ranked_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "remaining_node", "]", "for", "remaining_node", "in", "unvisited_nodes", "if", "remaining_node", "!=", "node", ")", "ranked_distance_average", "=", "ranked_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "score", "=", "direct_distance", "+", "(", "decay_factor", "*", "ranked_distance_average", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.990611808069186}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Select the next node based on the minimum distance", "min_distance", "=", "float", "(", "'inf'", ")", "next_nodes", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<", "min_distance", ":", "min_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "next_nodes", "=", "[", "node", "]", "elif", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "==", "min_distance", ":", "next_nodes", ".", "append", "(", "node", ")", "# Introduce random selection among the closest nodes to allow for exploration", "if", "next_nodes", ":", "return", "random", ".", "choice", "(", "next_nodes", ")", "return", "None"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "if", "unvisited_count", ">", "0", ":", "potential_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "unvisited_count", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "+", "(", "potential_distance", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "/", "(", "unvisited_count", "if", "unvisited_count", ">", "0", "else", "1", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.7950214267763425}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "clustering_weight", "=", "0.4", "# Weight to prioritize nodes in proximity ", "distance_weight", "=", "0.5", "# Weight for direct distance", "future_cost_weight", "=", "0.1", "# Weight for estimated future costs", "if", "unvisited_nodes", ":", "cluster_score_threshold", "=", "2", "# Minimum nodes in proximity to consider clustering", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate proximity clustering score", "neighboring_cluster_count", "=", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "cluster_score_threshold", ")", "clustering_score", "=", "neighboring_cluster_count", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Estimate potential future cost based on distances to other unvisited nodes", "future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combined score prioritizing clustering and minimizing future costs", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "clustering_weight", "*", "clustering_score", "-", "future_cost_weight", "*", "future_cost", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.18927770011158}
{"code_tokens": ["# {This algorithm uses a hybrid approach that combines a greedy selection of the closest nodes with a decay factor based on their distances and a randomization mechanism to promote exploration of less obvious paths.}", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "closest_nodes", "=", "[", "]", "min_distance", "=", "float", "(", "'inf'", ")", "# Find the closest nodes", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "<", "min_distance", ":", "min_distance", "=", "distance", "closest_nodes", "=", "[", "node", "]", "elif", "distance", "==", "min_distance", ":", "closest_nodes", ".", "append", "(", "node", ")", "# Introduce a decay factor based on distance", "decay_factors", "=", "[", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "**", "0.5", ")", "for", "node", "in", "closest_nodes", "]", "total_decay", "=", "sum", "(", "decay_factors", ")", "# Compute weighted probabilities using decay factors", "weighted_probs", "=", "[", "decay_factor", "/", "total_decay", "for", "decay_factor", "in", "decay_factors", "]", "# Randomly select a next node based on weighted probabilities", "next_node", "=", "random", ".", "choices", "(", "closest_nodes", ",", "weights", "=", "weighted_probs", ",", "k", "=", "1", ")", "[", "0", "]", "if", "closest_nodes", "else", "None", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "historical_weight", "=", "0.6", "# Weight for historical path costs", "future_potential_weight", "=", "0.4", "# Weight for future path benefits", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Historical cost calculation, assuming some penalty based on the path taken", "historical_cost", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "prev_node", "]", "for", "prev_node", "in", "unvisited_nodes", "if", "prev_node", "!=", "node", ")", "*", "0.3", "# Future potential based on the distance to other unvisited nodes", "future_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "future_average_distance", "=", "future_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", ")", "+", "(", "future_average_distance", "*", "future_potential_weight", ")", "-", "(", "historical_cost", "*", "historical_weight", ")", "+", "(", "total_distance_to_destination", "*", "0.2", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.4799888670160275}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "0.1", "*", "(", "1", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", ")", "# penalty based on distance to destination", "score", "=", "distance", "+", "penalty", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "if", "random", ".", "random", "(", ")", "<", "0.1", ":", "# introduce a 10% chance to randomly select an unvisited node", "return", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "return", "next_node"], "code_perf": 9.069890740581407}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "minimal_round_trip_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "round_trip_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "round_trip_distance", "<", "minimal_round_trip_distance", ":", "minimal_round_trip_distance", "=", "round_trip_distance", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "cluster_weight", "=", "0.3", "# Weight for proximity to clusters of unvisited nodes", "connectivity_weight", "=", "0.2", "# Weight for node connectivity", "risk_penalty_weight", "=", "0.1", "# Penalty for high-risk choices", "# Function to calculate cluster score based on unvisited nodes", "def", "calculate_cluster_score", "(", "node", ")", ":", "if", "len", "(", "unvisited_nodes", ")", "==", "0", ":", "return", "0", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Function to calculate connectivity score for potential next node", "def", "calculate_connectivity_score", "(", "node", ")", ":", "return", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "10", ")", "# Assume 10 as a connectivity threshold", "# Function to calculate risk score for longer paths", "def", "calculate_risk_penalty", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_score", "=", "calculate_cluster_score", "(", "node", ")", "connectivity_score", "=", "calculate_connectivity_score", "(", "node", ")", "risk_penalty", "=", "calculate_risk_penalty", "(", "node", ")", "# Combined scoring mechanism with risk penalty", "score", "=", "(", "-", "(", "distance_weight", "*", "direct_distance", ")", "+", "(", "cluster_weight", "*", "cluster_score", ")", "+", "(", "connectivity_weight", "*", "connectivity_score", ")", "-", "(", "risk_penalty_weight", "*", "risk_penalty", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.582021334684685}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "avg_distance_weight", "=", "0.4", "# Weight for average distance to unvisited nodes", "distance_gap_penalty", "=", "0.2", "# Weight for penalty on large gaps", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "distance_gap", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "-", "direct_distance", "score", "=", "(", "direct_weight", "*", "direct_distance", ")", "+", "(", "avg_distance_weight", "*", "avg_distance_to_unvisited", ")", "+", "(", "distance_gap_penalty", "*", "distance_gap", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.131823712511094}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.6", "# Weight for direct distance", "cluster_savings_weight", "=", "0.3", "# Weight for cluster savings", "distance_penalty_weight", "=", "0.1", "# Weight for penalizing distance to destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_min_distance", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "direct_distance_weight", "*", "direct_distance", ")", "+", "(", "cluster_savings_weight", "*", "cluster_min_distance", ")", "+", "(", "distance_penalty_weight", "*", "distance_to_destination", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.201324179271486}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance to the next node", "historical_weight", "=", "0.3", "# Weight for historical travel costs", "prediction_weight", "=", "0.2", "# Weight for potential future travel impact", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_historical_cost", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "potential_next_cost", "=", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "*", "prediction_weight", "score", "=", "-", "(", "(", "direct_weight", "*", "direct_distance", ")", "+", "(", "historical_weight", "*", "average_historical_cost", ")", "+", "(", "potential_next_cost", ")", ")", "+", "(", "total_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.222773612630416}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_neighbors", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "0", ")", "score", "=", "distance", "+", "(", "1", "/", "(", "remaining_neighbors", "+", "1", ")", ")", "# More neighbors give a higher score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 36.1397423465301}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_attractiveness", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "visibility_factor", "=", "len", "(", "unvisited_nodes", ")", "# More attractive if there are many unvisited nodes", "immediate_cost_weight", "=", "0.4", "# Weight for immediate travel cost", "future_proximity_weight", "=", "0.4", "# Weight for proximity to future nodes", "visibility_weight", "=", "0.2", "# Weight for the number of options", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_next", "]", "for", "next_next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Proximity to remaining nodes", "visibility_score", "=", "visibility_factor", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "# Inverse relationship with total unvisited nodes", "attractiveness", "=", "(", "-", "immediate_cost_weight", "*", "direct_distance", ")", "+", "(", "future_proximity_weight", "*", "proximity_score", ")", "+", "(", "visibility_weight", "*", "visibility_score", ")", "if", "attractiveness", ">", "max_attractiveness", ":", "max_attractiveness", "=", "attractiveness", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.41724333977419}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Parameters for exploration", "total_distance_inverse", "=", "sum", "(", "1", "/", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ">", "0", ")", "# Select the next node based on adjusted probabilities", "probabilities", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ">", "0", ":", "probabilities", "[", "node", "]", "=", "(", "1", "/", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "/", "total_distance_inverse", "# Choose the next node based on the computed probabilities", "next_node", "=", "random", ".", "choices", "(", "list", "(", "probabilities", ".", "keys", "(", ")", ")", ",", "weights", "=", "probabilities", ".", "values", "(", ")", ")", "[", "0", "]", "return", "next_node"], "code_perf": 19.106256836729784}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "# Constants for weighting", "alpha", "=", "0.5", "# Influence of direct travel distance", "beta", "=", "0.3", "# Influence of cluster connectivity", "gamma", "=", "0.2", "# Penalty for distance to destination", "# Total distances and connectability", "total_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "connectivity_scores", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "connectivity_scores", "[", "node", "]", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "5", ")", "# arbitrary threshold for local connectivity", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Local connectability score weighted by current node distance", "local_connectivity_score", "=", "connectivity_scores", "[", "node", "]", "/", "total_distance_remaining", "# Combined score", "combined_score", "=", "(", "local_connectivity_score", "*", "beta", "-", "distance_to_next", "*", "alpha", "-", "distance_to_destination", "*", "gamma", ")", "if", "combined_score", ">", "best_score", ":", "best_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.331995111188165}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.4", "# Weight for connectivity to unvisited nodes", "heuristic_weight", "=", "0.2", "# Weight for heuristic towards destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Heuristic score based on reduced distance to destination", "heuristic_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Apply a time-based decay factor to encourage earlier node visits", "time_decay_factor", "=", "1", "/", "(", "1", "+", "(", "0.1", "*", "len", "(", "unvisited_nodes", ")", ")", ")", "# Calculate combined score", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "heuristic_weight", "*", "heuristic_score", ")", "*", "time_decay_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.362381088576832}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_combined_score", "=", "float", "(", "'-inf'", ")", "# Calculate average distance to the next node", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate importance score based on connectivity to unvisited nodes", "importance_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "# Attractiveness factor to enhance efficient path selection", "attractiveness_factor", "=", "1", "/", "(", "1", "+", "distance_to_next", ")", "# Combined score: maximize importance while optimizing distances", "combined_score", "=", "(", "importance_score", "*", "attractiveness_factor", ")", "-", "(", "avg_distance_to_unvisited", "+", "0.5", "*", "distance_to_destination", ")", "if", "combined_score", ">", "max_combined_score", ":", "max_combined_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 15.143060062867413}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_factor", "=", "0.6", "# Factor for distance-based scoring", "attractiveness_factor", "=", "0.4", "# Factor for attractiveness scoring", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "historical_visits", "=", "random", ".", "randint", "(", "1", ",", "10", ")", "# Simulating historical visit frequency", "attractiveness_score", "=", "1", "/", "(", "1", "+", "historical_visits", ")", "score", "=", "(", "attractiveness_score", "*", "attractiveness_factor", ")", "/", "(", "direct_distance", "*", "distance_factor", "+", "1", ")", "+", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "distance_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 16.926171425070212}
{"code_tokens": ["import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_combined_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Cohesion score: variance of distances to all other unvisited nodes", "cohesion_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Penalty for longer paths (10% of longest distance found)", "penalty", "=", "0.1", "*", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "# Combined score: balance between cohesion, distance, and penalty", "combined_score", "=", "cohesion_score", "-", "(", "distance_to_next", "*", "0.6", "+", "distance_to_destination", "*", "0.4", "+", "penalty", ")", "if", "combined_score", ">", "max_combined_score", ":", "max_combined_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.974625230625187}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "connectivity_counts", "=", "{", "node", ":", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "float", "(", "'inf'", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_factor", "=", "connectivity_counts", "[", "node", "]", "**", "2", "if", "connectivity_counts", "[", "node", "]", ">", "0", "else", "0", "heuristic_weight", "=", "1", "/", "(", "1", "+", "connectivity_counts", "[", "node", "]", ")", "# Increasing weight for nodes with fewer connections", "score", "=", "direct_distance", "+", "heuristic_weight", "*", "connectivity_factor", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "history_weight", "=", "0.6", "# Weight for historical travel time", "average_distance_weight", "=", "0.4", "# Weight for inverse of average distance", "historical_travel_time", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "travel_time", "=", "historical_travel_time", "[", "node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "inverse_average_distance", "=", "1", "/", "(", "average_distance_to_unvisited", "+", "1e-10", ")", "# Avoid division by zero", "score", "=", "(", "travel_time", "*", "history_weight", ")", "+", "(", "inverse_average_distance", "*", "average_distance_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 36.52378693981037}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.7", "# Weight for proximity to destination", "distance_penalty_weight", "=", "0.3", "# Weight for penalizing distant nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "distance_penalty", "=", "max", "(", "0", ",", "distance_to_destination", "-", "total_distance_to_destination", ")", "*", "distance_penalty_weight", "score", "=", "direct_distance", "+", "distance_penalty", "-", "(", "proximity_weight", "*", "distance_to_destination", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.4222139419506155}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Moderate emphasis on direct distance", "variance_weight", "=", "0.4", "# Weight for the variance of distances to unvisited nodes", "momentum_weight", "=", "0.2", "# Weight for previously explored paths to encourage continuity", "# Calculate distance variance for unvisited nodes", "def", "calculate_distance_variance", "(", ")", ":", "distances", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "mean_distance", "=", "sum", "(", "distances", ")", "/", "len", "(", "distances", ")", "variance", "=", "sum", "(", "(", "d", "-", "mean_distance", ")", "**", "2", "for", "d", "in", "distances", ")", "/", "len", "(", "distances", ")", "if", "distances", "else", "0", "return", "variance", "# Calculate momentum based on the last visited node (if any)", "def", "calculate_momentum_score", "(", "node", ")", ":", "return", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "current_node", "!=", "node", "else", "0", "distance_variance", "=", "calculate_distance_variance", "(", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "momentum_score", "=", "calculate_momentum_score", "(", "node", ")", "# Combined scoring mechanism", "score", "=", "-", "direct_distance_weight", "*", "direct_distance", "+", "variance_weight", "*", "distance_variance", "+", "momentum_weight", "*", "momentum_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "potential_nodes", "=", "[", "]", "total_distances", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distances", "/", "len", "(", "unvisited_nodes", ")", "total_visited_distance", "=", "sum", "(", "distance_matrix", "[", "destination_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_ratio", "=", "direct_distance", "/", "(", "average_distance", "+", "1e-9", ")", "# Avoid division by zero", "cumulative_weight", "=", "total_visited_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Weight based on total distance traveled", "# Score includes proximity, average distance influence, and cumulative distance", "score", "=", "direct_distance", "*", "distance_ratio", "+", "cumulative_weight", "*", "direct_distance", "potential_nodes", ".", "append", "(", "(", "node", ",", "score", ")", ")", "next_node", "=", "min", "(", "potential_nodes", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_weight", "=", "0.4", "# Weight for immediate travel distance", "future_cost_weight", "=", "0.4", "# Weight for future travel cost to remaining nodes", "cluster_density_weight", "=", "0.2", "# Weight for cluster density of unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "cluster_density", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "1", "+", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "+", "1", ")", "for", "next_node", "in", "unvisited_nodes", ")", ")", "# Simple clustering heuristic", "score", "=", "(", "immediate_weight", "*", "-", "immediate_distance", ")", "+", "(", "future_cost_weight", "*", "-", "future_cost", ")", "+", "(", "cluster_density_weight", "*", "cluster_density", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.717898729273731}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "1.5", "-", "(", "len", "(", "unvisited_nodes", ")", "/", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "+", "1e-6", ")", ")", "*", "0.5", ")", "for", "node", "in", "unvisited_nodes", "}", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 8.920398941366887}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_cost_weight", "=", "0.4", "clustering_weight", "=", "0.4", "future_cost_weight", "=", "0.2", "# Calculate average distance to unvisited nodes", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Clustering score: higher if many unvisited nodes are close to the current node", "clustering_score", "=", "clustering_weight", "*", "(", "1", "/", "(", "1", "+", "avg_distance_to_unvisited", ")", ")", "# Future cost based on remaining unvisited nodes", "future_cost", "=", "future_cost_weight", "*", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "# Combine scores to get the final score", "score", "=", "-", "immediate_cost_weight", "*", "immediate_distance", "+", "clustering_score", "-", "future_cost", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.526271790227707}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.50", "# Weight for direct distance", "visit_frequency_weight", "=", "0.30", "# Weight for historical visit frequency", "future_distance_weight", "=", "0.20", "# Weight for distance to unvisited nodes", "def", "calculate_visit_frequency", "(", "node", ")", ":", "# Simulated historical visit frequency (lower is better)", "return", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "==", "node", ")", "def", "calculate_future_average_distance", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "visit_frequency", "=", "calculate_visit_frequency", "(", "node", ")", "future_distance", "=", "calculate_future_average_distance", "(", "node", ")", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "visit_frequency_weight", "*", "(", "1", "/", "(", "1", "+", "visit_frequency", ")", ")", "+", "future_distance_weight", "*", "future_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.582021334684685}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_penalty", "=", "0.6", "# Weight that penalizes longer direct paths", "travel_optimism", "=", "0.4", "# Weight that favors proximity to the destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "distance_penalty", "*", "direct_distance", "+", "travel_optimism", "*", "distance_to_destination", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.6490879527083395}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "node_weights", "=", "{", "}", "# Calculate the weights based on distances and connectivity", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "distance", ")", "# Weight formula: lower distance + effect of connectivity", "weight", "=", "distance", "+", "random", ".", "uniform", "(", "0", ",", "1", ")", "*", "(", "connectivity", "+", "1", ")", "node_weights", "[", "node", "]", "=", "weight", "# Select the node with the minimum weight", "next_node", "=", "min", "(", "node_weights", ",", "key", "=", "node_weights", ".", "get", ")", "if", "node_weights", "else", "None", "return", "next_node"], "code_perf": 11.017011100886993}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm introduces a hybrid approach using a balance of distance minimization, an exponential decay function for penalty based on proximity to other unvisited nodes, and a heuristic inspired by the nearest neighbor approach to promote closer nodes.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Exponential decay penalty for proximity to other unvisited nodes", "clustering_penalty", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "+", "1", ")", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Weighting factors with modified scaling", "weight_distance", "=", "0.4", "weight_clustering", "=", "0.4", "weight_destination", "=", "0.2", "# Composite score calculation using exponential decay for clustering penalty", "score", "=", "(", "weight_distance", "/", "(", "distance_to_next", "+", "1", ")", ")", "+", "(", "weight_clustering", "*", "clustering_penalty", ")", "+", "(", "weight_destination", "/", "(", "distance_to_destination", "+", "1", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 21.12793150014802}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Weight factors", "direct_distance_weight", "=", "0.4", "cluster_weight", "=", "0.3", "detour_penalty_weight", "=", "0.3", "min_connections", "=", "1", "# minimum connections for density rating", "# Average distance to unvisited nodes", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Cluster density", "connections", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "cluster_density_score", "=", "connections", "/", "max", "(", "min_connections", ",", "len", "(", "unvisited_nodes", ")", ")", "# Detour evaluation (penalty based on deviation from the path to the destination)", "detour_penalty", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "avg_distance_to_unvisited", "# Calculate the weighted score", "weighted_score", "=", "(", "direct_distance_weight", "*", "direct_distance", "+", "cluster_weight", "*", "cluster_density_score", "+", "detour_penalty_weight", "*", "max", "(", "detour_penalty", ",", "0", ")", ")", "if", "weighted_score", "<", "best_score", ":", "best_score", "=", "weighted_score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.468186808482357}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "base_weight", "=", "1.0", "# Base weight for scoring", "historical_cost_weight", "=", "0.5", "# Weight for historical cost to visited nodes", "proximity_weight", "=", "0.3", "# Weight for proximity to destination", "future_saving_weight", "=", "0.2", "# Weight for future distance savings", "distance_penalty_factor", "=", "2.0", "# Penalty factor for direct distances", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "historical_cost", "=", "historical_cost_weight", "*", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "future_distance_saving", "=", "future_saving_weight", "*", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", ")", "score", "=", "(", "base_weight", "*", "direct_distance", "*", "distance_penalty_factor", ")", "+", "historical_cost", "-", "proximity_score", "+", "future_distance_saving", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.827923339467594}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Compute distance to the destination", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate a penalty that increases with the distance to the destination", "penalty", "=", "(", "distance_to_destination", "*", "0.5", ")", "/", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ">", "0", "else", "0", "# Introduce a factor to encourage exploring nodes further away", "exploration_factor", "=", "1.0", "+", "(", "direct_distance", "/", "len", "(", "unvisited_nodes", ")", ")", "# Score combines direct distance, penalty, and exploration factor", "score", "=", "direct_distance", "+", "penalty", "*", "exploration_factor", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.921866256062806}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "total_distance", "=", "0", "heuristic_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance", "+=", "distance", "heuristic_scores", "[", "node", "]", "=", "1", "/", "(", "distance", "+", "1", ")", "# Basic heuristic inversely proportional to distance", "# Normalize heuristic scores", "for", "node", "in", "heuristic_scores", ":", "heuristic_scores", "[", "node", "]", "/=", "total_distance", "# Choose next node probabilistically based on heuristic scores", "next_node", "=", "random", ".", "choices", "(", "population", "=", "list", "(", "unvisited_nodes", ")", ",", "weights", "=", "list", "(", "heuristic_scores", ".", "values", "(", ")", ")", ",", "k", "=", "1", ")", "[", "0", "]", "return", "next_node"], "code_perf": 24.231330273470604}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "nearest_neighbor_weight", "=", "0.5", "# Weight for minimum distance to the next unvisited node", "remaining_penalty_weight", "=", "0.5", "# Weight for penalty based on distance to unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_distance", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "score", "=", "-", "(", "direct_distance", ")", "+", "(", "remaining_distance", "*", "remaining_penalty_weight", ")", "-", "(", "direct_distance", "*", "nearest_neighbor_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.882803226790685}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "node_scores", "=", "{", "}", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_destination", "=", "total_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate a score based on direct distance and its distance to the average distance to destination", "score", "=", "direct_distance", "-", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "average_distance_to_destination", ")", "*", "0.1", "node_scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.81210580490953}
{"code_tokens": ["# {This algorithm dynamically adjusts the selection of the next node by incorporating a dynamic scoring system based on the average distance to unvisited nodes, the proximity to the destination, and a randomness factor to encourage exploration of different paths.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "# Calculate average distance to unvisited nodes", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "# Adjusting the proximity to the destination", "proximity_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Randomness factor to diversify search: gives a small chance to explore less probable nodes", "randomness_factor", "=", "0.1", "*", "(", "distance", "/", "(", "average_distance_to_unvisited", "+", "1e-5", ")", ")", "# Weighted score incorporating randomness, proximity, and average distance", "weighted_score", "=", "(", "distance", "*", "(", "1", "+", "randomness_factor", ")", "+", "proximity_to_destination", "/", "(", "average_distance_to_unvisited", "+", "1e-5", ")", ")", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "connectivity_weight", "=", "1.5", "total_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "strategic_importance", "=", "(", "1", "-", "(", "charging_factor", ":=", "0.5", ")", ")", "*", "(", "total_distance_to_remaining", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "charging_factor", "*", "connectivity_score", "score", "=", "direct_distance", "+", "strategic_importance", "-", "(", "connectivity_weight", "*", "connectivity_score", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.450370583313572}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "cluster_weight", "=", "0.5", "# Weight for cluster potential savings", "urgency_weight", "=", "0.2", "# Weight for urgency based on remaining nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate potential savings based on nearby unvisited nodes", "potential_savings", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "average_potential_savings", "=", "potential_savings", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "# Urgency score based on how far this node is from the remaining unvisited nodes", "urgency_score", "=", "1", "/", "(", "1", "+", "direct_distance", ")", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "cluster_weight", "*", "average_potential_savings", ")", "+", "(", "urgency_weight", "*", "urgency_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.414379480431397}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "clustering_weight", "=", "0.4", "# Weight for clustering of unvisited nodes", "urgency_weight", "=", "0.6", "# Weight for urgency based on distance to destination", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "clustering_factor", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next_node", "]", ">", "0", ")", "urgency_factor", "=", "1", "/", "(", "1", "+", "total_distance_to_destination", ")", "# Using inverse for urgency", "score", "=", "(", "1", "/", "direct_distance", "*", "(", "1", "-", "clustering_weight", ")", ")", "+", "(", "clustering_factor", "*", "clustering_weight", ")", "+", "(", "urgency_factor", "*", "urgency_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 16.970979120514784}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "clustering_weight", "=", "0.4", "# Weight for local clustering potential", "drawback_weight", "=", "0.2", "# Weight for distance from destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Clustering score based on the number of nearby unvisited nodes", "clustering_score", "=", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "2", ")", "# Count nearby unvisited nodes", "# Penalty score based on distance to the destination", "drawback_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "clustering_weight", "*", "clustering_score", "-", "drawback_weight", "*", "drawback_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Emphasis on direct distance", "cluster_proximity_weight", "=", "0.4", "# Weight for proximity to clusters of unvisited nodes", "future_distance_weight", "=", "0.2", "# Weight for potential future distances", "def", "calculate_cluster_proximity", "(", "node", ")", ":", "proximity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "return", "proximity_score", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "def", "estimate_future_distance", "(", "node", ")", ":", "future_distance_score", "=", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "return", "future_distance_score", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_proximity_score", "=", "calculate_cluster_proximity", "(", "node", ")", "future_distance_score", "=", "estimate_future_distance", "(", "node", ")", "# Combined scoring mechanism", "score", "=", "-", "direct_distance_weight", "*", "direct_distance", "+", "cluster_proximity_weight", "*", "cluster_proximity_score", "-", "future_distance_weight", "*", "future_distance_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.41724333977419}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for proximity to destination", "travel_distance_weight", "=", "0.4", "# Weight for minimizing overall travel distance", "cluster_weight", "=", "0.2", "# Weight for clustering benefits", "baseline_score", "=", "10", "# Baseline score to reduce outlier influence", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_contribution", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "score", "=", "(", "baseline_score", "-", "direct_distance", ")", "*", "distance_weight", "+", "(", "cluster_contribution", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "*", "cluster_weight", ")", "-", "(", "direct_distance", "-", "average_distance", ")", "*", "travel_distance_weight", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.694396629126081}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_density", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "cluster_density", "=", "{", "}", "# Calculate cluster density based on the distance to remaining unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "cluster_density", "[", "node", "]", "=", "1", "/", "total_distance", "if", "total_distance", ">", "0", "else", "float", "(", "'inf'", ")", "# Find the node with maximum density", "highest_density_node", "=", "max", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "cluster_density", "[", "node", "]", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_effect", "=", "cluster_density", "[", "highest_density_node", "]", "# Modified score function with a cluster density reward", "score", "=", "direct_distance", "-", "0.3", "*", "cluster_effect", "if", "next_node", "is", "None", "or", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Score is calculated using a balance of the immediate distance and future distance potential", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "-", "(", "future_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "if", "unvisited_nodes", "else", "1", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.31625196692404}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "dead_end_penalty_weight", "=", "0.3", "# Weight for future dead end risk", "connectivity_weight", "=", "0.3", "# Weight for connectivity to unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Dead end risk based on the number of connections to other unvisited nodes", "dead_end_risk", "=", "len", "(", "unvisited_nodes", ")", "-", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", ")", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average connectivity", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "dead_end_penalty_weight", "*", "dead_end_risk", "+", "connectivity_weight", "*", "connectivity_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.37815587401459}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "congestion_penalty_factor", "=", "0.5", "# Factor to penalize nodes with high congestion", "if", "unvisited_nodes", ":", "future_value_weight", "=", "0.4", "# Weight for potential future value", "current_distance_weight", "=", "0.3", "# Weight for current distance to each unvisited node", "destination_proximity_weight", "=", "0.3", "# Weight for proximity to the destination", "# Count connections for congestion penalty", "node_connection_counts", "=", "{", "node", ":", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate future value score based on potential distances to unvisited nodes from the current node", "future_value_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "# Calculate congestion score", "congestion_score", "=", "node_connection_counts", "[", "node", "]", "*", "congestion_penalty_factor", "# Estimate score for proximity to destination", "destination_proximity_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score incorporating all factors", "score", "=", "future_value_weight", "*", "future_value_score", "-", "current_distance_weight", "*", "direct_distance", "-", "congestion_score", "+", "destination_proximity_weight", "*", "destination_proximity_score", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.67526836894238}
{"code_tokens": ["import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "# Penalty for long distances to make closer nodes more favorable", "penalty", "=", "math", ".", "exp", "(", "distance_to_next", "/", "10", ")", "# Can adjust the divisor for sensitivity", "# Weighted score based on proximity and penalty", "score", "=", "(", "distance_to_next", "*", "penalty", ")", "+", "distance_to_destination", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "weighted_nodes", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Weight the node's selection by the inverse distances", "weight", "=", "(", "1", "/", "(", "direct_distance", "+", "1e-6", ")", ")", "*", "(", "1", "/", "(", "distance_to_destination", "+", "1e-6", ")", ")", "weighted_nodes", ".", "append", "(", "(", "node", ",", "weight", ")", ")", "# Normalize weights", "total_weight", "=", "sum", "(", "weight", "for", "_", ",", "weight", "in", "weighted_nodes", ")", "if", "total_weight", ">", "0", ":", "normalized_nodes", "=", "[", "(", "node", ",", "weight", "/", "total_weight", ")", "for", "node", ",", "weight", "in", "weighted_nodes", "]", "else", ":", "normalized_nodes", "=", "[", "(", "node", ",", "1", "/", "len", "(", "unvisited_nodes", ")", ")", "for", "node", "in", "unvisited_nodes", "]", "# Randomly select the next node based on weights", "random_value", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "cumulative_weight", "=", "0.0", "for", "node", ",", "weight", "in", "normalized_nodes", ":", "cumulative_weight", "+=", "weight", "if", "cumulative_weight", ">=", "random_value", ":", "return", "node", "return", "unvisited_nodes", ".", "pop", "(", ")", "# Fallback to return a random unvisited node"], "code_perf": 18.378708175305896}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm introduces a multi-faceted scoring system that factors in the closeness of the next node to the current node, ", "# the average distance to the destination, and the nearest unvisited node to create a more balanced selection for the next node.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "avg_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "nearest_unvisited_distance", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "+", "(", "1", "/", "(", "distance_to_destination", "+", "1", ")", ")", "+", "(", "avg_distance_to_remaining", "-", "nearest_unvisited_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957224461305669}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Calculate clustering factors and penalties for unvisited nodes", "total_clustering_penalty", "=", "0", "node_spacings", "=", "[", "]", "for", "node1", "in", "unvisited_nodes", ":", "spacing", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node1", "]", "[", "node2", "]", "+", "1", ")", "for", "node2", "in", "unvisited_nodes", "if", "node1", "!=", "node2", ")", "total_clustering_penalty", "+=", "spacing", "node_spacings", ".", "append", "(", "(", "node1", ",", "spacing", ")", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Dynamic clustering adjustment", "clustering_factor", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "+", "1", ")", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "# Assess average direct distance to destination", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "other_node", "]", "[", "destination_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Incorporate a penalty for visiting nodes that are too close to each other dynamically", "spacing_penalty", "=", "total_clustering_penalty", "/", "len", "(", "unvisited_nodes", ")", "# Combined score with new weights for clustering adjustment and diversity", "score", "=", "(", "direct_distance", "*", "0.4", "+", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "*", "0.3", "+", "clustering_factor", "*", "0.2", "+", "spacing_penalty", "*", "0.1", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.93337944671591}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the distances to all unvisited nodes", "distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Calculate the average distance to unvisited nodes", "average_distance", "=", "sum", "(", "distances", ".", "values", "(", ")", ")", "/", "len", "(", "distances", ")", "# Calculate a dynamic exploration factor based on distance to destination", "exploration_factor", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "*", "0.1", "# Arbitrary exploration multiplier", "# Select the next node by minimizing the adjusted distance (distance + avg_distance - exploration_factor)", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distances", "[", "node", "]", "+", "average_distance", "-", "exploration_factor", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "nearest_neighbor_weight", "=", "0.5", "# Weight for immediate distance to next node", "destination_proximity_weight", "=", "0.5", "# Weight for the proximity to the destination", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "nearest_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "cost_score", "=", "(", "nearest_distance", "*", "nearest_neighbor_weight", ")", "+", "(", "distance_to_destination", "*", "destination_proximity_weight", ")", "if", "cost_score", "<", "min_cost", ":", "min_cost", "=", "cost_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "connectivity_bonus_factor", "=", "1.0", "# Bonus factor for nodes with higher connectivity", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.5", "# Weight for direct distance", "potential_benefit_weight", "=", "0.3", "# Weight for potential future benefits", "connectivity_weight", "=", "0.2", "# Weight for connectivity bonus", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate potential benefits of future pathways based on remaining connections", "potential_benefit_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Calculate connectivity score based on how many unvisited nodes can be reached", "connectivity_score", "=", "len", "(", "[", "next", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", "]", ")", "# Combined score with added connectivity bonus", "score", "=", "(", "-", "direct_distance_weight", "*", "direct_distance", "+", "potential_benefit_weight", "*", "potential_benefit_score", "+", "connectivity_weight", "*", "connectivity_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.349781351250228}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_factor", "=", "average_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "0", "else", "1", ")", "score", "=", "direct_distance", "+", "heuristic_factor", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate total distance from the current node to the destination via each unvisited node", "total_distances", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "total_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "total_distances", "[", "node", "]", "=", "total_distance", "# Select the node with the minimum total distance", "next_node", "=", "min", "(", "total_distances", ",", "key", "=", "total_distances", ".", "get", ")", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "base_distance_weight", "=", "0.4", "# Base weight for distance", "base_density_weight", "=", "0.4", "# Base weight for density of unvisited connections", "base_penalty_weight", "=", "0.2", "# Base penalty for already visited nodes", "distance_weight", "=", "base_distance_weight", "*", "(", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "distance_matrix", ")", "-", "1", ")", ")", "# Dynamic adjustment", "density_weight", "=", "base_density_weight", "*", "(", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "distance_matrix", ")", "-", "1", ")", ")", "penalty_weight", "=", "base_penalty_weight", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "density_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average density", "penalty_score", "=", "sum", "(", "1", "for", "next", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "next", "not", "in", "unvisited_nodes", "and", "distance_matrix", "[", "current_node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", ")", "# Penalty for visited node connections", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "density_weight", "*", "density_score", "-", "penalty_weight", "*", "penalty_score", "# Introduce randomness for exploration", "score", "+=", "random", ".", "uniform", "(", "-", "0.1", ",", "0.1", ")", "# Small random factor to promote exploration", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 11.66585056469195}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.3", "# Weight for connectivity to unvisited nodes", "efficiency_weight", "=", "0.2", "# Weight for route efficiency", "destination_weight", "=", "0.1", "# Weight for proximity to destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average connectivity", "# Efficiency score considering the average distance from current node to unvisited nodes", "efficiency_score", "=", "(", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "if", "unvisited_nodes", "else", "0", "# Proximity score based on distance to destination", "proximity_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "efficiency_weight", "*", "efficiency_score", "-", "destination_weight", "*", "proximity_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.37815587401459}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "proximity_scores", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "penalty_factor", "=", "1.2", "# Penalty for longer distances", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "proximity_scores", "[", "node", "]", "penalty", "=", "penalty_factor", "*", "distance", "# Apply penalty based on distance", "randomness", "=", "random", ".", "uniform", "(", "0", ",", "0.1", ")", "*", "(", "1", "/", "(", "proximity_score", "+", "1e-5", ")", ")", "# Random exploration factor", "weighted_score", "=", "penalty", "+", "randomness", "# Combine metrics", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 11.695039878738747}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# This algorithm incorporates a scoring mechanism that combines direct distance, proximity to unvisited nodes, and a heuristic score based on the clustering of unvisited neighbors to prioritize visits to nodes in closer groups.", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "close_neighbors_radius", "=", "3", "# Radius to consider neighboring nodes for score adjustment", "cluster_weight", "=", "0.6", "# Weight for the cluster effect", "# Calculate the number of close unvisited neighbors", "close_neighbors", "=", "sum", "(", "1", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<=", "close_neighbors_radius", ")", "# Calculate the average distance to the destination from unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate clustering effect based on distance to other unvisited neighbors", "cluster_effect", "=", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "neighbor", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<=", "close_neighbors_radius", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# New score equation that incorporates distance, average distance, and clustering effect", "score", "=", "direct_distance", "+", "0.4", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "cluster_weight", "*", "cluster_effect", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.466511785330852}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "cluster_density_weight", "=", "0.7", "# Weight for cluster density influence", "max_distance_for_density", "=", "15", "# Max distance to consider for density calculation", "# Calculate densities of unvisited nodes", "density_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "density", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "node", "!=", "other_node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<=", "max_distance_for_density", ")", "density_scores", "[", "node", "]", "=", "density", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "density_effect", "=", "cluster_density_weight", "*", "density_scores", "[", "node", "]", "score", "=", "direct_distance", "+", "density_effect", "-", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Generate initial candidates based on unvisited nodes", "candidates", "=", "list", "(", "unvisited_nodes", ")", "random", ".", "shuffle", "(", "candidates", ")", "# Evaluate candidates based on a weighted score", "scored_candidates", "=", "[", "]", "for", "node", "in", "candidates", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Weighting strategy: prefer shorter direct distances but account for future connections", "score", "=", "(", "1", "/", "(", "direct_distance", "+", "1e-5", ")", ")", "+", "(", "1", "/", "(", "distance_to_destination", "+", "1e-5", ")", ")", "scored_candidates", ".", "append", "(", "(", "node", ",", "score", ")", ")", "# Sort candidates by score, picking the one with the highest score", "scored_candidates", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "# Select the best candidate", "return", "scored_candidates", "[", "0", "]", "[", "0", "]"], "code_perf": 7.572785716456387}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "cluster_weight", "=", "0.4", "# Weight for proximity to clusters of unvisited nodes", "adaptability_weight", "=", "0.2", "# Weight for adaptability based on node density", "density_factor", "=", "0.2", "# Adjusts based on the density of unvisited nodes", "# Calculate density score", "def", "calculate_density_score", "(", "node", ")", ":", "nearby_count", "=", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "10", ")", "# Adjustable threshold", "return", "nearby_count", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "1", ")", "adaptability_score", "=", "calculate_density_score", "(", "node", ")", "# Combined scoring mechanism", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "cluster_weight", "*", "cluster_score", "+", "adaptability_weight", "*", "adaptability_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.424216980256856}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "distance_to_next", "+", "(", "distance_to_destination", "*", "0.5", ")", "# Combine distance to next and to destination", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate a score for each unvisited node based on distance and connectivity", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "scores", "[", "node", "]", "=", "distance_score", "-", "connectivity_score", "# Lower score is better", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "diversity_factor", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "/", "len", "(", "unvisited_nodes", ")", "score", "=", "(", "1.5", "*", "direct_distance", ")", "+", "(", "avg_distance_to_destination", "-", "distance_to_destination", ")", "+", "(", "0.5", "*", "diversity_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 33.72962698840702}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "# Lower distance should yield a higher score (we use the inverse)", "# The penalty discourages moving away from the destination", "scores", "[", "node", "]", "=", "(", "1", "/", "(", "distance_to_node", "+", "1e-6", ")", ")", "+", "connectivity_score", "-", "(", "1", "/", "(", "distance_to_destination", "+", "1e-6", ")", ")", "next_node", "=", "max", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 7.15844878700375}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "connectivity_beta", "=", "1.5", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "weighted_heuristic", "=", "(", "0.7", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "0.3", "*", "(", "connectivity_score", "-", "1", ")", ")", "penalty", "=", "connectivity_beta", "*", "(", "1", "/", "(", "connectivity_score", "+", "1", ")", ")", "score", "=", "direct_distance", "+", "weighted_heuristic", "+", "penalty", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.438127015117454}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cumulative_distance", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "# Calculate the cumulative distance if the next move is to the current node", "cumulative_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "other_node", "in", "unvisited_nodes", ":", "if", "other_node", "!=", "node", ":", "cumulative_distance", "+=", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "# Return to the starting node", "cumulative_distance", "+=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "cumulative_distance", "<", "min_cumulative_distance", ":", "min_cumulative_distance", "=", "cumulative_distance", "next_node", "=", "node", "return", "next_node"], "code_perf": 21.813812563750965}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "future_distance_weight", "=", "0.4", "# Weight for future predicted distance", "penalty_weight", "=", "0.2", "# Penalty for already visited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_distance_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average future distance", "penalty_score", "=", "sum", "(", "1", "for", "next", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "next", "not", "in", "unvisited_nodes", "and", "distance_matrix", "[", "current_node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", ")", "# Penalty for visited node connections", "score", "=", "-", "direct_distance_weight", "*", "direct_distance", "-", "future_distance_weight", "*", "future_distance_score", "+", "penalty_weight", "*", "penalty_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "importance_weight", "=", "0.5", "# Weight for importance of unvisited nodes", "diversity_factor", "=", "0.3", "# Probability influence for diversification", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "importance_effect", "=", "importance_weight", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "score", "=", "direct_distance", "+", "importance_effect", "if", "random", ".", "random", "(", ")", "<", "diversity_factor", ":", "# Randomly select a node for diversity", "score", "+=", "random", ".", "uniform", "(", "0", ",", "10", ")", "# Random boost to score for diversity", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.180927506889196}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm employs a hybrid scoring system that combines nearest neighbor distance with a penalty for detours caused by unvisited nodes.}", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "penalty", "=", "len", "(", "unvisited_nodes", ")", "*", "0.1", "*", "distance_to_next", "# Introducing a penalty for longer distances", "score", "=", "distance_to_next", "+", "(", "total_remaining_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "+", "penalty", "# Consider distance to next and penalty", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.31823627587317}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "inverse_distance_weight", "=", "0.6", "# Weight for inverse distance to unvisited nodes", "penalty_weight", "=", "0.2", "# Weight for cumulative distance penalty from visited nodes", "proximity_weight", "=", "0.2", "# Weight for clustering proximity", "total_penalty", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "visited", "]", "for", "visited", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "inverse_distance", "=", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1e-5", ")", "# Adding a small value to prevent division by zero", "proximity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "inverse_distance_weight", "*", "inverse_distance", ")", "-", "(", "penalty_weight", "*", "total_penalty", ")", "+", "(", "proximity_weight", "*", "proximity_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.885791953731784}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.6", "# Weight for direct distance", "centrality_weight", "=", "0.3", "# Weight for centrality contribution", "risk_factor_weight", "=", "0.1", "# Weight for risk of longer paths", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "centrality_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "risk_factor", "=", "max", "(", "0", ",", "(", "total_distance_to_destination", "+", "direct_distance", ")", "-", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", ")", "score", "=", "(", "direct_weight", "*", "direct_distance", ")", "+", "(", "centrality_weight", "*", "centrality_score", ")", "+", "(", "risk_factor_weight", "*", "risk_factor", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.526271790227707}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance", "cluster_weight", "=", "0.2", "# Weight for cluster savings potential", "detour_penalty_weight", "=", "0.1", "# Weight for detour penalties", "exploration_weight", "=", "0.1", "# Weight for exploration randomness", "time_decay_weight", "=", "0.1", "# Weight for time decay of previously visited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Simulated visit trend data with decay factor", "visit_trend", "=", "{", "node", ":", "max", "(", "1", "-", "(", "0.05", "*", "(", "node", "in", "unvisited_nodes", ")", ")", ",", "0", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "adjusted_detour", "=", "max", "(", "0", ",", "direct_distance", "-", "total_distance_to_destination", ")", "# Calculate cluster average distance", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Random exploration influence", "randomness", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "# Time decay influence", "time_decay", "=", "visit_trend", "[", "node", "]", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "cluster_weight", "*", "cluster_average_distance", ")", "-", "(", "detour_penalty_weight", "*", "adjusted_detour", ")", "+", "(", "exploration_weight", "*", "randomness", ")", "+", "(", "time_decay_weight", "*", "time_decay", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.4798754684704125}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_weight", "=", "0.5", "# Weight for immediate travel distance", "penalty_weight", "=", "0.2", "# Weight for time penalty based on unvisited nodes", "risk_weight", "=", "0.3", "# Weight for risk based on maximum distance to unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "time_penalty", "=", "len", "(", "unvisited_nodes", ")", "*", "total_distance_to_destination", "# Penalty for the number of unvisited nodes", "max_distance_to_unvisited", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "risk", "=", "max_distance_to_unvisited", "-", "direct_distance", "score", "=", "(", "direct_distance", "*", "immediate_weight", ")", "+", "(", "time_penalty", "*", "penalty_weight", ")", "+", "(", "risk", "*", "risk_weight", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.221753628945685}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm employs a weighted scoring system that incorporates distance to the nearest unvisited node, a novelty score for previously visited nodes, and a risk factor based on distance variance to select the next node.}", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "novelty_weight", "=", "0.2", "# Weight for novelty of unvisited nodes", "risk_weight", "=", "0.3", "# Weight for distance variance (risk factor)", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "float", "(", "'inf'", ")", "# Novelty score for unvisited nodes (lower if close to already visited nodes)", "novelty_score", "=", "-", "min", "(", "distance_matrix", "[", "node", "]", "[", "visited", "]", "for", "visited", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "visited", "not", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Risk factor based on distance variance", "variance_score", "=", "sum", "(", "(", "distance_matrix", "[", "current_node", "]", "[", "next", "]", "-", "direct_distance", ")", "**", "2", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "novelty_weight", "*", "novelty_score", "-", "risk_weight", "*", "variance_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.0444276226378895}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "candidates", "=", "list", "(", "unvisited_nodes", ")", "scored_candidates", "=", "[", "]", "# Calculate total distance to unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "candidates", ")", "# Introduce a randomness factor to encourage exploration", "exploration_factor", "=", "random", ".", "uniform", "(", "0.05", ",", "0.15", ")", "for", "node", "in", "candidates", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "(", "direct_distance", "*", "(", "1", "+", "exploration_factor", ")", ")", "+", "(", "total_distance", "/", "len", "(", "candidates", ")", ")", "scored_candidates", ".", "append", "(", "(", "node", ",", "score", ")", ")", "scored_candidates", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "return", "scored_candidates", "[", "0", "]", "[", "0", "]"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "connectivity_penalty", "=", "0.3", "# Penalty factor for exploring less connected areas", "# Calculate the direct distance and connectivity score for each unvisited node", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Connectivity score based on distances to all other unvisited nodes", "connectivity_score", "=", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "5", ")", "weighted_avg_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Modify the score based on the connectivity and distance to destination", "score", "=", "direct_distance", "+", "connectivity_penalty", "*", "(", "weighted_avg_distance", "-", "1", "/", "(", "connectivity_score", "+", "1", ")", ")", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.448030159267825}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Calculate the connectivity score", "connectivity_score", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "connectivity_score", "[", "node", "]", "=", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "node", "!=", "other", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<=", "5", ")", "# Calculate the total travel cost from the current node to the destination", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Introduce a penalty based on the overall distance to the destination", "penalty", "=", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "score", "=", "direct_distance", "+", "(", "0.6", "*", "penalty", ")", "-", "(", "0.4", "*", "connectivity_score", "[", "node", "]", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.836336561953939}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "penalty_weight", "=", "0.7", "# Weight for penalizing nodes with higher average distance", "decay_factor", "=", "0.8", "# Decay factor to emphasize proximity", "total_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_remaining", "=", "total_distance_to_remaining", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "penalty_weight", "*", "(", "average_distance_to_remaining", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "*", "decay_factor", "score", "=", "direct_distance", "+", "penalty", "*", "(", "1", "-", "decay_factor", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.8202305917467365}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Adjusted weight for direct distance", "connectivity_weight", "=", "0.4", "# Increased weight for connectivity to unvisited nodes", "potential_weight", "=", "0.2", "# Weight for potential based on connections to other unvisited nodes", "total_distance_from_node", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average connectivity", "potential_score", "=", "len", "(", "[", "next", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", "]", ")", "# Count of connections to unvisited nodes", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "potential_weight", "*", "potential_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.41724333977419}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.4", "# Weight for potential connectivity to other nodes", "time_penalty_weight", "=", "0.2", "# Weight for recently visited nodes penalty", "# Calculate connectivity potential based on unvisited neighbors", "connectivity_scores", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "connectivity_scores", "[", "node", "]", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "for", "unvisited", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Enhanced connectivity score", "connectivity_score", "=", "connectivity_scores", "[", "node", "]", "# Time-based penalty for nodes recently visited", "recent_visits_penalty", "=", "sum", "(", "(", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "prev", "]", "+", "1", ")", ")", "for", "prev", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "prev", "not", "in", "unvisited_nodes", ")", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "-", "time_penalty_weight", "*", "recent_visits_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 11.766825752183726}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "# Dynamic weights calculated based on the number of unvisited nodes", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "distance_weight", "=", "0.5", "/", "num_unvisited", "if", "num_unvisited", ">", "0", "else", "0", "connectivity_weight", "=", "0.25", "diversity_weight", "=", "0.25", "exploration_factor", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "# Randomized exploration factor", "# Initialize visit counts for nodes if not present", "global", "node_visit_counts", "node_visit_counts", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "# Update visit counts at each call", "node_visit_counts", "[", "node", "]", "=", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", "+", "1", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "diversity_score", "=", "1", "/", "(", "1", "+", "node_visit_counts", "[", "node", "]", ")", "# Combined scoring mechanism with exploration factor", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "diversity_weight", "*", "diversity_score", "+", "exploration_factor", "*", "random", ".", "uniform", "(", "0", ",", "1", ")", "# Adding exploration randomness", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 17.079770420226822}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Calculate average distance to remaining unvisited nodes", "average_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Dynamic estimated tour length based on unvisited nodes", "estimated_tour_length", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Variance calculation", "distance_variance", "=", "sum", "(", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "-", "average_distance", ")", "**", "2", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "urgency_factor", "=", "1.0", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "# Higher when closer to destination", "# Combined score", "score", "=", "direct_distance", "+", "estimated_tour_length", "+", "(", "distance_variance", "*", "0.2", ")", "*", "urgency_factor", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.92839713707268}
{"code_tokens": ["import", "random", "import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate the total distance from the starting node to current node", "total_distance", "=", "sum", "(", "distance_matrix", "[", "i", "]", "[", "j", "]", "for", "i", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "for", "j", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "i", "!=", "j", ")", "# Calculate a score for each unvisited node", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Use an exponential decay function to weigh the distance", "score", "=", "distance_to_node", "+", "(", "total_distance", "/", "(", "1", "+", "distance_to_destination", ")", ")", "scores", "[", "node", "]", "=", "score", "*", "math", ".", "exp", "(", "-", "0.1", "*", "distance_to_node", ")", "# Apply decay based on distance to node", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 25.265730791907608}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.3", "# Weight for direct distance", "connectivity_weight", "=", "0.3", "# Weight for connectivity to unvisited nodes", "diversity_weight", "=", "0.3", "# Weight for encouraging less frequently visited nodes", "novelty_weight", "=", "0.1", "# Weight for novelty based on path length", "global", "node_visit_counts", "node_visit_counts", "=", "{", "}", "total_path_length", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "def", "calculate_connectivity_score", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "def", "calculate_visit_frequency_score", "(", "node", ")", ":", "return", "1", "/", "(", "1", "+", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", ")", "for", "node", "in", "unvisited_nodes", ":", "node_visit_counts", "[", "node", "]", "=", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", "+", "1", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "calculate_connectivity_score", "(", "node", ")", "diversity_score", "=", "calculate_visit_frequency_score", "(", "node", ")", "novelty_score", "=", "(", "total_path_length", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "-", "direct_distance", "# Encourage longer paths to diversify exploration", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "diversity_weight", "*", "diversity_score", "+", "novelty_weight", "*", "novelty_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.355321178255981}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Calculate the total distance for potential routes", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Compute centrality as the number of direct connections to unvisited nodes", "centrality_score", "=", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "neighbor", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<", "10", ")", "# Circuitous route penalty: penalize if any unvisited node is far from the current node", "circuitous_penalty", "=", "sum", "(", "max", "(", "0", ",", "distance_matrix", "[", "current_node", "]", "[", "other_node", "]", "-", "10", ")", "for", "other_node", "in", "unvisited_nodes", ")", "# Spatial coverage benefit: reward selecting nodes with a higher average distance from others", "avg_distance_between_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "coverage_benefit", "=", "avg_distance_between_unvisited", "# Combined score using weights", "score", "=", "(", "direct_distance", "*", "0.4", ")", "+", "(", "(", "total_distance_to_destination", "-", "direct_distance", ")", "*", "0.3", ")", "+", "(", "centrality_score", "*", "0.2", ")", "-", "(", "circuitous_penalty", "*", "0.2", ")", "+", "(", "coverage_benefit", "*", "0.1", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.4323878079629}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "immediate_distances", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "avg_immediate_distance", "=", "np", ".", "mean", "(", "immediate_distances", ")", "# Calculate a risk factor based on distance to the destination", "risk_factor", "=", "np", ".", "std", "(", "[", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# New score calculation with added risk factor to encourage selection of closer nodes", "score", "=", "immediate_distance", "+", "risk_factor", "+", "(", "avg_immediate_distance", "-", "immediate_distance", ")", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 27.692728143090072}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.5", "# Weight for direct distance", "historical_cost_weight", "=", "0.3", "# Weight for historical cost influence", "centrality_weight", "=", "0.2", "# Weight for the centrality of the candidate node", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Dynamic historical cost based on previous visits", "historical_cost", "=", "sum", "(", "distance_matrix", "[", "previous_node", "]", "[", "node", "]", "for", "previous_node", "in", "unvisited_nodes", "if", "previous_node", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "# Calculate centrality based on degree of connection (number of edges to other unvisited nodes)", "connectivity_score", "=", "sum", "(", "1", "for", "next_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next_node", "]", ">", "0", ")", "score", "=", "(", "1", "/", "(", "direct_distance", "+", "1", ")", ")", "*", "direct_distance_weight", "-", "(", "historical_cost", "*", "historical_cost_weight", ")", "+", "(", "connectivity_score", "*", "centrality_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.73584553541615}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.5", "cluster_density_weight", "=", "0.2", "unvisited_influence_weight", "=", "0.2", "short_path_bonus_weight", "=", "0.1", "def", "calculate_cluster_density", "(", "node", ")", ":", "return", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "15", "]", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "def", "calculate_unvisited_influence", "(", "node", ")", ":", "return", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "0", ")", "def", "calculate_short_path_bonus", "(", "node", ")", ":", "return", "1", "/", "(", "1", "+", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_density", "=", "calculate_cluster_density", "(", "node", ")", "unvisited_influence", "=", "calculate_unvisited_influence", "(", "node", ")", "short_path_bonus", "=", "calculate_short_path_bonus", "(", "node", ")", "score", "=", "(", "-", "direct_distance_weight", "*", "direct_distance", "+", "cluster_density_weight", "*", "cluster_density", "+", "unvisited_influence_weight", "*", "unvisited_influence", "+", "short_path_bonus_weight", "*", "short_path_bonus", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 27.082637595423876}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "density_weight", "=", "0.4", "# Weight for density of unvisited nodes", "penalty_weight", "=", "0.2", "# Weight for recent visits", "# Calculate unvisited node density and penalties", "density_scores", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "for", "other", "in", "unvisited_nodes", ":", "if", "node", "!=", "other", ":", "density_scores", "[", "node", "]", "+=", "1", "/", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "density_score", "=", "density_scores", "[", "node", "]", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "1", ")", "# Penalty for recently visited nodes", "recent_penalty", "=", "sum", "(", "(", "1", "/", "(", "distance_matrix", "[", "prev", "]", "[", "current_node", "]", "+", "1", ")", ")", "for", "prev", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "prev", "not", "in", "unvisited_nodes", ")", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "density_weight", "*", "density_score", "-", "penalty_weight", "*", "recent_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 17.854437372898275}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for distance", "time_penalty_weight", "=", "0.4", "# Weight for potential time delays", "visited_penalty_weight", "=", "0.2", "# Penalty for already visited connections", "destination_proximity_weight", "=", "0.3", "# Weight for proximity to the destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "time_penalty", "=", "direct_distance", "/", "max", "(", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", ",", "1", ")", "# Estimated time penalty based on distance", "visited_penalty", "=", "sum", "(", "1", "for", "next", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "next", "not", "in", "unvisited_nodes", "and", "distance_matrix", "[", "current_node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", ")", "# Penalty for visited connections", "destination_proximity_score", "=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1e-9", ")", "# Reward for being close to the destination", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "time_penalty_weight", "*", "time_penalty", "-", "visited_penalty_weight", "*", "visited_penalty", "+", "destination_proximity_weight", "*", "destination_proximity_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.105226833105897}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate distances to all unvisited nodes", "distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Calculate connectivity score for each candidate node", "connectivity_scores", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "for", "node", "in", "unvisited_nodes", "}", "# Calculate a weighted score: lower distance and higher connectivity are better", "scores", "=", "{", "node", ":", "(", "distances", "[", "node", "]", "+", "connectivity_scores", "[", "node", "]", ")", "for", "node", "in", "unvisited_nodes", "}", "# Find the minimum weighted score", "min_score", "=", "min", "(", "scores", ".", "values", "(", ")", ")", "# Filter candidates with minimum score", "candidates", "=", "[", "node", "for", "node", ",", "score", "in", "scores", ".", "items", "(", ")", "if", "score", "==", "min_score", "]", "# Introduce weighted randomness to select among the best candidates", "if", "candidates", ":", "total_weight", "=", "sum", "(", "1", "/", "distances", "[", "node", "]", "for", "node", "in", "candidates", ")", "# Inverse of distance as weight", "weights", "=", "[", "(", "1", "/", "distances", "[", "node", "]", ")", "/", "total_weight", "for", "node", "in", "candidates", "]", "# Normalize weights", "next_node", "=", "random", ".", "choices", "(", "candidates", ",", "weights", "=", "weights", ")", "[", "0", "]", "# Select based on weight", "else", ":", "next_node", "=", "None", "return", "next_node"], "code_perf": 21.51502557645197}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "density_penalty_weight", "=", "0.3", "# Penalty for high density of unvisited nodes nearby", "future_connection_weight", "=", "0.3", "# Weight for potential connections to other unvisited nodes", "# Calculate the center of the unvisited nodes to assess density", "unvisited_coords", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "density_score", "=", "sum", "(", "unvisited_coords", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Scoring based on distance and negative impact of nearby density", "score", "=", "-", "distance_weight", "*", "direct_distance", "-", "density_penalty_weight", "*", "density_score", "+", "future_connection_weight", "*", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.37815587401459}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate total direct distance to destination", "total_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Local deviation factor encouraging exploration of less direct paths", "deviation_factor", "=", "abs", "(", "(", "total_to_destination", "-", "(", "direct_distance", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", ")", ")", "# Assess centrality as the number of unvisited neighbors within a distance", "centrality_score", "=", "len", "(", "[", "neighbor", "for", "neighbor", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<", "5", "]", ")", "# Combined score using weights to include direct distance, deviation factor, and centrality", "score", "=", "direct_distance", "*", "0.4", "+", "deviation_factor", "*", "0.4", "+", "centrality_score", "*", "0.2", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# Design idea: This algorithm uses a balance of direct distance, remaining unvisited node density, and a fatigue factor to promote exploration of closer groups of nodes while avoiding excessive distance increases.", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "# Constants for weighting", "alpha", "=", "0.5", "# Weight for direct distance score", "beta", "=", "0.3", "# Weight for density score", "gamma", "=", "0.2", "# Weight for fatigue adjustment", "# Calculate total distances to the remaining nodes", "total_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "max_distance_to_next", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Density score: based on the number of unvisited nodes within a certain radius", "density_score", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "distance_to_next", ")", "# Fatigue adjustment based on total distance traveled", "fatigue_adjustment", "=", "distance_to_next", "/", "(", "total_distance_remaining", "+", "1", ")", "# Prevent division by zero", "# Combined score incorporating distance, density, and fatigue", "combined_score", "=", "(", "density_score", "*", "beta", "+", "(", "max_distance_to_next", "-", "distance_to_next", ")", "*", "alpha", "-", "fatigue_adjustment", "*", "gamma", ")", "if", "combined_score", ">", "best_score", ":", "best_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 34.003011094449235}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for distance", "future_distance_weight", "=", "0.4", "# Weight for future distance to destination", "penalty_weight", "=", "0.2", "# Penalty for already visited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Distance to the destination from this node", "penalty_score", "=", "sum", "(", "1", "for", "next", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "next", "not", "in", "unvisited_nodes", "and", "distance_matrix", "[", "current_node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", ")", "# Penalty for visited node connections", "score", "=", "-", "distance_weight", "*", "direct_distance", "-", "future_distance_weight", "*", "future_distance", "+", "penalty_weight", "*", "penalty_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for distance", "urgency_weight", "=", "0.4", "# Weight for urgency based on proximity", "reward_weight", "=", "0.2", "# Weight for reward of nodes near the destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "urgency_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", ">", "0", ")", "# Inverse distance score", "reward_score", "=", "-", "abs", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "direct_distance", ")", "# Reward for nodes near the path to destination", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "urgency_weight", "*", "urgency_score", "+", "reward_weight", "*", "reward_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.675452489179435}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "euclidean_distance", "=", "(", "(", "distance_matrix", "[", "node", "]", "[", "0", "]", "-", "distance_matrix", "[", "destination_node", "]", "[", "0", "]", ")", "**", "2", "+", "(", "distance_matrix", "[", "node", "]", "[", "1", "]", "-", "distance_matrix", "[", "destination_node", "]", "[", "1", "]", ")", "**", "2", ")", "**", "0.5", "manhattan_distance", "=", "abs", "(", "distance_matrix", "[", "node", "]", "[", "0", "]", "-", "distance_matrix", "[", "destination_node", "]", "[", "0", "]", ")", "+", "abs", "(", "distance_matrix", "[", "node", "]", "[", "1", "]", "-", "distance_matrix", "[", "destination_node", "]", "[", "1", "]", ")", "score", "=", "direct_distance", "+", "0.5", "*", "euclidean_distance", "+", "0.5", "*", "manhattan_distance", "# Apply a penalty for nodes further from the destination", "if", "node", "!=", "destination_node", ":", "penalty", "=", "0.1", "*", "euclidean_distance", "score", "+=", "penalty", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.432429126734364}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for distance", "density_weight", "=", "0.3", "# Weight for density of unvisited connections", "penalty_weight", "=", "0.2", "# Penalty for already visited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "density_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average density", "penalty_score", "=", "sum", "(", "1", "for", "next", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "next", "not", "in", "unvisited_nodes", "and", "distance_matrix", "[", "current_node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", ")", "# Penalty for visited node connections", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "density_weight", "*", "density_score", "-", "penalty_weight", "*", "penalty_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.349781351250228}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "density_weight", "=", "0.4", "# Weight for the density of connections", "dynamic_distance_weight", "=", "0.4", "# Weight for direct distance with dynamic adjustment", "future_distance_penalty_weight", "=", "0.2", "# Penalty for estimating future path lengths", "if", "unvisited_nodes", ":", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Density score based on the proximity of unvisited nodes", "density_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Future distance penalty estimation based on remaining unvisited nodes", "future_distance_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combined score", "score", "=", "-", "dynamic_distance_weight", "*", "direct_distance", "+", "density_weight", "*", "density_score", "-", "future_distance_penalty_weight", "*", "future_distance_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 17.96659048700144}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "num_unvisited", "if", "num_unvisited", ">", "0", "else", "1", ")", "# Reward for selecting closer nodes", "proximity_reward", "=", "(", "1", "/", "distance_to_next", ")", "if", "distance_to_next", ">", "0", "else", "0", "score", "=", "(", "avg_distance_to_unvisited", "-", "distance_to_next", ")", "+", "proximity_reward", "*", "(", "1", "+", "(", "num_unvisited", "/", "2", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.917486537475675}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "# Cost to reach this node from the current node", "travel_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate clustering effect: the variance of distances to unvisited nodes", "cluster_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "for", "neighbor", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Add extra penalty for nodes that are further from the destination", "penalty_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "# Calculate total score based on the costs", "score", "=", "travel_cost", "+", "0.5", "*", "cluster_cost", "+", "penalty_to_destination", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.70220081219753}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "connectivity_score", "=", "{", "node", ":", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "neighbor", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<", "10", ")", "for", "node", "in", "unvisited_nodes", "}", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "exploration_factor", "=", "min", "(", "1.0", ",", "1.0", "/", "(", "num_unvisited", "+", "1", ")", ")", "# Adaptive exploration", "for", "node", "in", "unvisited_nodes", ":", "euclidean_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "distance_penalty", "=", "(", "1", "/", "(", "1", "+", "distance_to_destination", ")", ")", "*", "0.5", "# Penalty based on distance to destination", "exploration_bonus", "=", "exploration_factor", "*", "random", ".", "uniform", "(", "0.05", ",", "0.2", ")", "# Exploration component", "score", "=", "(", "1", "/", "(", "1", "+", "euclidean_distance", ")", ")", "+", "(", "0.5", "*", "connectivity_score", "[", "node", "]", ")", "-", "distance_penalty", "-", "exploration_bonus", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.627225808786598}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm aims to score potential next nodes based on their closeness to the destination and the density of the unvisited nodes around them.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "closeness_score", "=", "1", "/", "(", "distance_to_next", "+", "1", ")", "# Closer nodes yield higher scores", "density_factor", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "+", "1", ")", "for", "n", "in", "unvisited_nodes", ")", "# Score based on proximity to unvisited nodes", "score", "=", "closeness_score", "+", "density_factor", "-", "distance_to_destination", "# Combine scores for a final value", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 21.496305289016345}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "cumulative_attractiveness", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate the cumulative attractiveness score", "attractiveness_score", "=", "(", "direct_distance", "+", "distance_to_destination", ")", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "attractiveness_score", "+=", "(", "cumulative_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "cumulative_attractiveness", "[", "node", "]", "=", "attractiveness_score", "if", "cumulative_attractiveness", "[", "node", "]", "<", "min_cost", ":", "min_cost", "=", "cumulative_attractiveness", "[", "node", "]", "next_node", "=", "node", "return", "next_node"], "code_perf": 23.23580852804566}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "scaling_factor", "=", "1", "/", "(", "num_unvisited", "**", "0.5", ")", "# Increase impact of distances as unvisited count decreases", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "distance_to_destination", ")", "*", "scaling_factor", "score", "=", "direct_distance", "+", "penalty", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.350707488066143}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_distance_weight", "=", "0.4", "# Weight for the immediate travel cost", "future_cost_weight", "=", "0.4", "# Weight for the future estimated cost", "clustering_weight", "=", "0.2", "# Weight for the clustering effectiveness among unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "clustering_score", "=", "sum", "(", "1", "for", "next_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "<", "10", ")", "# Example threshold for clustering", "score", "=", "(", "immediate_distance_weight", "*", "direct_distance", ")", "+", "(", "future_cost_weight", "*", "future_cost", ")", "-", "(", "clustering_weight", "*", "clustering_score", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "path_length", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "cluster_weight", "=", "0.3", "revisit_penalty_weight", "=", "0.2", "dynamic_decay_weight", "=", "0.1", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "decay_factor", "=", "1", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", "*", "0.5", "+", "path_length", "*", "0.01", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "revisit_penalty", "=", "distance_matrix", "[", "node", "]", "[", "current_node", "]", "if", "node", "in", "unvisited_nodes", "else", "0", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "cluster_weight", "*", "-", "cluster_average_distance", ")", "-", "(", "revisit_penalty_weight", "*", "revisit_penalty", ")", "score", "*=", "(", "1", "+", "dynamic_decay_weight", "*", "decay_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.526271790227707}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "# Calculate the direct distance to the current node", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Estimate the distance to the final destination", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate the number of connections (degrees of freedom) to other unvisited nodes", "degree_of_freedom", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "0", ")", "# Enhanced cost score: balancing direct distance with penalties for more degrees of freedom", "cost_score", "=", "direct_distance", "+", "distance_to_destination", "-", "(", "degree_of_freedom", "*", "0.1", ")", "# Selecting the node with the lowest cost score", "if", "cost_score", "<", "best_score", ":", "best_score", "=", "cost_score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "closest_nodes", "=", "[", "]", "min_distance", "=", "float", "(", "'inf'", ")", "# Find the minimum distance", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "<", "min_distance", ":", "min_distance", "=", "distance", "closest_nodes", "=", "[", "node", "]", "elif", "distance", "==", "min_distance", ":", "closest_nodes", ".", "append", "(", "node", ")", "# Randomly choose a node from the closest ones", "next_node", "=", "random", ".", "choice", "(", "closest_nodes", ")", "if", "closest_nodes", "else", "None", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the distances to all unvisited nodes", "distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Calculate the average distance to unvisited nodes", "average_distance", "=", "sum", "(", "distances", ".", "values", "(", ")", ")", "/", "len", "(", "distances", ")", "# Apply a decay factor to prioritize closer nodes", "decay_factor", "=", "0.5", "decay_influence", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "*", "decay_factor", "# Select the next node by minimizing distance influenced by average_distance and decay_influence", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distances", "[", "node", "]", "+", "average_distance", "+", "decay_influence", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", ")", "return", "next_node"], "code_perf": 8.131614624962722}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity to destination", "future_distance_weight", "=", "0.5", "# Weight for estimated future distances", "discount_factor", "=", "0.8", "# Factor for amortizing future distances", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "estimated_future_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_distance", "+", "discount_factor", "*", "estimated_future_distance", ")", "-", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.321828198070936}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance", "cluster_weight", "=", "0.5", "# Weight for proximity to clusters", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Calculate the centroid of unvisited nodes for cluster proximity", "centroid_x", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "centroid_y", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "current_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_proximity", "=", "-", "(", "(", "centroid_x", "-", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "**", "2", "+", "(", "centroid_y", "-", "distance_matrix", "[", "node", "]", "[", "current_node", "]", ")", "**", "2", ")", "**", "0.5", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "cluster_weight", "*", "cluster_proximity", ")", "# Introduce a penalty for nodes that are further away from the destination", "if", "direct_distance", ">", "total_distance_to_destination", ":", "score", "-=", "(", "direct_distance", "-", "total_distance_to_destination", ")", "*", "0.3", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 20.04466154432059}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "# Calculate the total distance to unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_ratio", "=", "direct_distance", "/", "average_distance", "if", "average_distance", ">", "0", "else", "0", "# Calculate a future connectivity potential score", "future_connectivity", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", ">", "0", ")", "# Calculate the new heuristic score", "heuristic_score", "=", "future_connectivity", "-", "distance_ratio", "if", "heuristic_score", ">", "best_score", ":", "best_score", "=", "heuristic_score", "best_node", "=", "node", "return", "best_node"], "code_perf": 28.286343931205877}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_clustering_factor", "=", "1.5", "# Factor to enhance influence of closely clustered nodes", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "cluster_penalty", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "current_node", "]", "+", "1e-9", ")", "for", "node", "in", "unvisited_nodes", ")", "# Avoid division by zero", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "clustering_score", "=", "max_clustering_factor", "*", "cluster_penalty", "score", "=", "direct_distance", "+", "distance_to_destination", "+", "clustering_score", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate distances to all unvisited nodes from the current node", "distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Sort unvisited nodes by distance", "sorted_nodes", "=", "sorted", "(", "distances", ",", "key", "=", "distances", ".", "get", ")", "# Implement a greedy selection with a random exploration factor", "best_candidate", "=", "sorted_nodes", "[", "0", "]", "# Start with the closest node", "exploration_factor", "=", "min", "(", "1.0", ",", "1.0", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "# Randomly select to either choose the nearest or explore another option", "if", "random", ".", "random", "(", ")", "<", "exploration_factor", ":", "best_candidate", "=", "random", ".", "choice", "(", "sorted_nodes", ")", "# Randomly choose from sorted nodes", "return", "best_candidate"], "code_perf": 7.877804766128964}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_distance", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "connection_bonus_weight", "=", "0.3", "# Weight for the connection bonus", "random_factor_weight", "=", "0.1", "# Weight for the randomness factor", "if", "unvisited_nodes", ":", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connection_count", "=", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", ")", "connection_bonus", "=", "connection_bonus_weight", "/", "(", "1", "+", "connection_count", ")", "# Fewer connections yield a higher bonus", "# Calculate final score using the distance and connection bonus", "score", "=", "-", "direct_distance", "+", "connection_bonus", "+", "random", ".", "uniform", "(", "0", ",", "random_factor_weight", ")", "if", "score", "<", "min_distance", ":", "# Minimize distance", "min_distance", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 36.01242704558308}
{"code_tokens": ["import", "random", "import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "total_distance", "=", "0", "node_weights", "=", "{", "}", "# Calculate weights based on distance to introduce variability", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "weight", "=", "math", ".", "exp", "(", "-", "distance", ")", "# Exponential decay function", "node_weights", "[", "node", "]", "=", "weight", "total_distance", "+=", "weight", "# Normalize weights to get probabilities", "probabilities", "=", "{", "node", ":", "weight", "/", "total_distance", "for", "node", ",", "weight", "in", "node_weights", ".", "items", "(", ")", "}", "# Randomly select the next node based on weighted probabilities", "rand_value", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "cumulative_probability", "=", "0.0", "for", "node", ",", "probability", "in", "probabilities", ".", "items", "(", ")", ":", "cumulative_probability", "+=", "probability", "if", "rand_value", "<=", "cumulative_probability", ":", "return", "node", "return", "None"], "code_perf": 23.98655847187011}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "cluster_weight", "=", "0.5", "# Weight for clustering advantage", "distance_weight", "=", "0.4", "# Weight for direct distance", "recent_visit_penalty", "=", "0.1", "# Penalty for visiting nodes that were recently unvisited", "# Regularization for dynamic adjustment", "penalty_factor", "=", "1", "/", "(", "len", "(", "distance_matrix", ")", "-", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate clustering score", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Compute recent visit penalty based on distance to visited nodes", "recent_visits_penalty", "=", "sum", "(", "recent_visit_penalty", "*", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "other_node", "not", "in", "unvisited_nodes", ")", "score", "=", "(", "cluster_weight", "*", "cluster_average_distance", ")", "-", "(", "distance_weight", "*", "direct_distance", ")", "+", "recent_visits_penalty", "*", "penalty_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.613991884483905}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Adjusted weight focused on direct distance", "connectivity_weight", "=", "0.3", "# Weight for connectivity to unvisited nodes", "heuristic_weight", "=", "0.3", "# Weight for overall spatial positioning of unvisited nodes", "previous_distance_weight", "=", "0.1", "# Weight for the distance of previously visited nodes", "total_distance_from_node", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average connectivity", "heuristic_score", "=", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average distance to destination", "previous_distance_penalty", "=", "(", "total_distance_from_node", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "# Influence from previous distances", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "heuristic_weight", "*", "heuristic_score", "-", "previous_distance_weight", "*", "previous_distance_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.37815587401459}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "remaining_distances", "=", "[", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "]", "min_remaining_distance", "=", "min", "(", "remaining_distances", ")", "penalty_weight", "=", "0.3", "# Fixed penalty weight for remaining distance", "average_direct_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_distance_penalty", "=", "penalty_weight", "*", "(", "min_remaining_distance", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "score", "=", "direct_distance", "+", "remaining_distance_penalty", "+", "average_direct_distance", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.583058552198324}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "connectivity_score", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "connectivity_score", "[", "node", "]", "=", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "node", "!=", "other", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "10", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connection_penalty", "=", "1", "/", "(", "1", "+", "connectivity_score", "[", "node", "]", ")", "# Lower penalty for highly connected nodes", "score", "=", "direct_distance", "+", "0.5", "*", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "*", "connection_penalty", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.014600797071769}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to destination", "clustering_weight", "=", "0.3", "# Weight for clustering savings", "cumulative_distance_weight", "=", "0.2", "# Weight for cumulative distance traveled", "attractiveness_weight", "=", "0.1", "# Weight for attractiveness of the node", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "prev_node", "]", "for", "prev_node", "in", "unvisited_nodes", "if", "prev_node", "!=", "current_node", ")", "nearest_neighbor_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "attractiveness_score", "=", "1", "/", "(", "1", "+", "direct_distance", ")", "# higher score for nearer nodes", "score", "=", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "(", "cluster_average_distance", "*", "clustering_weight", ")", "-", "(", "cumulative_distance", "*", "cumulative_distance_weight", ")", "-", "(", "direct_distance", "*", "0.5", ")", "+", "# penalizing longer direct distance", "(", "attractiveness_weight", "*", "attractiveness_score", ")", ")", "if", "score", ">", "max_score", "or", "(", "score", "==", "max_score", "and", "direct_distance", "<", "nearest_neighbor_distance", ")", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.6967957320694484}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.6", "# Weight for distance", "connectivity_weight", "=", "0.4", "# Weight for connectivity of unvisited connections", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "inverse_distance_score", "=", "1", "/", "(", "direct_distance", "+", "1e-6", ")", "# Avoid division by zero using a small epsilon", "connectivity_score", "=", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", ")", "# Count of reachable unvisited nodes", "score", "=", "distance_weight", "*", "inverse_distance_score", "+", "connectivity_weight", "*", "connectivity_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "future_cost_weight", "=", "0.4", "# Weight for estimated future path cost", "diversity_weight", "=", "0.2", "# Weight for encouraging less frequently visited nodes", "global", "node_visit_counts", "node_visit_counts", "=", "{", "}", "def", "calculate_future_cost", "(", "node", ")", ":", "return", "min", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "def", "calculate_visit_frequency_score", "(", "node", ")", ":", "return", "1", "/", "(", "1", "+", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", ")", "for", "node", "in", "unvisited_nodes", ":", "node_visit_counts", "[", "node", "]", "=", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", "+", "1", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_cost", "=", "calculate_future_cost", "(", "node", ")", "diversity_score", "=", "calculate_visit_frequency_score", "(", "node", ")", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "future_cost_weight", "*", "future_cost", "-", "diversity_weight", "*", "diversity_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "visit_frequency", "=", "{", "node", ":", "0", "for", "node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "}", "if", "unvisited_nodes", ":", "immediate_weight", "=", "0.4", "popularity_weight", "=", "0.3", "comfort_factor_weight", "=", "0.2", "# Weight for cumulative comfort factor", "penalty_distance_threshold", "=", "5", "# Threshold for far distance penalties", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "prev_node", "]", "[", "node", "]", "for", "prev_node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "visit_frequency", "[", "prev_node", "]", ">", "0", ")", "# Penalty for nodes exceeding a certain distance threshold", "distance_penalty", "=", "0.5", "*", "direct_distance", "if", "direct_distance", ">", "penalty_distance_threshold", "else", "0", "# Popularity-based penalty for frequency of visits", "popularity_penalty", "=", "visit_frequency", "[", "node", "]", "*", "0.2", "score", "=", "(", "-", "immediate_weight", "*", "direct_distance", ")", "-", "popularity_penalty", "+", "(", "comfort_factor_weight", "*", "cumulative_distance", ")", "-", "distance_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "visit_frequency", "[", "next_node", "]", "+=", "1", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_cost_weight", "=", "0.3", "clustering_weight", "=", "0.4", "future_cost_weight", "=", "0.2", "penalty_weight", "=", "0.1", "# Calculate average distance to unvisited nodes", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "clustering_score", "=", "clustering_weight", "*", "(", "1", "/", "(", "1", "+", "avg_distance_to_unvisited", ")", ")", "future_cost", "=", "future_cost_weight", "*", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "penalty_score", "=", "penalty_weight", "*", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "score", "=", "-", "immediate_cost_weight", "*", "immediate_distance", "+", "clustering_score", "-", "future_cost", "-", "penalty_score", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "clustering_factor", "=", "0.6", "# Weight for clustering", "exploration_bonus_weight", "=", "0.3", "# Weight for exploration bonus", "# Count close nodes within a certain range for potential clustering", "close_nodes_count", "=", "sum", "(", "1", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<=", "3", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "exploration_bonus", "=", "(", "1", "/", "(", "1", "+", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", ")", "*", "exploration_bonus_weight", "# Clustering influence based on proximity to current node", "clustering_score", "=", "(", "close_nodes_count", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", ")", "*", "clustering_factor", "# Overall score combines direct distance, clustering, and exploration factors", "score", "=", "direct_distance", "-", "clustering_score", "+", "exploration_bonus", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity to destination", "historical_weight", "=", "0.3", "# Weight for historical travel cost", "unvisited_count_penalty", "=", "0.2", "# Weight for the count of unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "historical_cost", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "neighbor", "]", "for", "neighbor", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "penalty_for_remaining", "=", "(", "len", "(", "unvisited_nodes", ")", "*", "unvisited_count_penalty", ")", "# Penalty for each unvisited node", "score", "=", "-", "(", "direct_distance", "+", "historical_cost", "+", "penalty_for_remaining", ")", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.450370583313572}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance to unvisited nodes", "attractiveness_weight", "=", "0.4", "# Weight for attractiveness to destination", "clustering_penalty", "=", "0.2", "# Penalty for distance from cluster of unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Clustering score based on how close the node is to the average distance of unvisited nodes", "clustering_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "clustering_score_penalty", "=", "clustering_penalty", "*", "clustering_score", "score", "=", "(", "average_distance_to_unvisited", "*", "direct_weight", ")", "+", "(", "distance_to_destination", "*", "attractiveness_weight", ")", "-", "direct_distance", "-", "clustering_score_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.327824396573643}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "avg_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty_factor", "=", "0.7", "*", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "max", "(", "1", ",", "avg_distance_remaining", ")", ")", "score", "=", "-", "(", "direct_distance", "+", "penalty_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.652507365605419}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "dynamic_weight_factor", "=", "1", "/", "(", "num_unvisited", "+", "1", ")", "# Impact of remaining unvisited nodes", "# Function to calculate a nonlinear transformation of the distance", "def", "nonlinear_distance_transformation", "(", "distance", ")", ":", "return", "distance", "**", "2", "# Example transformation", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "nonlinear_distance_transformation", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "future_savings", "=", "sum", "(", "nonlinear_distance_transformation", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", ")", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "num_unvisited", "or", "1", ")", "connectivity_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other", "]", ">", "0", ")", "if", "unvisited_nodes", "else", "0", "# Combined scoring mechanism with dynamic weights", "score", "=", "(", "-", "dynamic_weight_factor", "*", "direct_distance", "+", "0.4", "*", "connectivity_score", "-", "0.6", "*", "future_savings", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 30.036706529169663}
{"code_tokens": ["import", "random", "import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Initialize variables for the simulated annealing process", "temperature", "=", "1.0", "# Starting temperature", "cooling_rate", "=", "0.99", "# Cooling rate for annealing", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Initialize current best score", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "current_node", "=", "best_node", "# Simulated annealing process", "while", "temperature", ">", "0.01", ":", "# Run until temperature drops below a threshold", "neighbor_nodes", "=", "[", "node", "for", "node", "in", "unvisited_nodes", "if", "node", "!=", "current_node", "]", "if", "not", "neighbor_nodes", ":", "break", "next_node", "=", "random", ".", "choice", "(", "neighbor_nodes", ")", "next_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "next_node", "]", "if", "next_distance", "<", "best_score", ":", "current_node", "=", "next_node", "best_score", "=", "next_distance", "best_node", "=", "next_node", "else", ":", "acceptance_probability", "=", "math", ".", "exp", "(", "(", "best_score", "-", "next_distance", ")", "/", "temperature", ")", "if", "random", ".", "random", "(", ")", "<", "acceptance_probability", ":", "current_node", "=", "next_node", "temperature", "*=", "cooling_rate", "# Cool down", "return", "best_node"], "code_perf": 17.24183185831114}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "connectivity_weight", "=", "0.7", "# Weight for the degree of connectivity", "distance_weight", "=", "0.3", "# Weight for the distance to the destination", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "nearest_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "next_next_node", "in", "unvisited_nodes", "if", "next_next_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "next_next_node", "]", "<", "total_distance_to_destination", ")", "score", "=", "connectivity_score", "*", "connectivity_weight", "-", "(", "nearest_distance", "*", "distance_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 22.95475896599961}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "connectivity_scores", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_bonus", "=", "connectivity_scores", "[", "node", "]", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "penalty_factor", "=", "max", "(", "0", ",", "direct_distance", "-", "connectivity_bonus", ")", "score", "=", "direct_distance", "+", "penalty_factor", "-", "connectivity_bonus", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.424216980256856}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_decay_factor", "=", "0.4", "# Factor to reduce weight based on distance", "connectivity_weight", "=", "0.6", "# Weight for connectivity effectiveness", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_penalty", "=", "(", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "*", "direct_distance", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "score", "=", "(", "direct_distance", "*", "distance_decay_factor", ")", "+", "(", "distance_penalty", "*", "1.5", ")", "-", "(", "connectivity_weight", "*", "connectivity_score", ")", "+", "total_distance_to_destination", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.623955002114234}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_savings", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "savings_weight", "=", "0.6", "# Weight for potential savings", "average_distance_weight", "=", "0.4", "# Weight for average distance to unvisited nodes", "# Calculate direct distance to the destination", "direct_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "# Calculate distance from current node to the node", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate distance from the node to the destination", "distance_from_node_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate potential savings from choosing this node", "potential_savings", "=", "direct_distance_to_destination", "-", "(", "distance_to_node", "+", "distance_from_node_to_destination", ")", "# Calculate average distance to remaining unvisited nodes", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Compute score based on savings and average distance", "score", "=", "(", "savings_weight", "*", "potential_savings", ")", "+", "(", "average_distance_weight", "*", "average_distance_to_unvisited", ")", "if", "score", ">", "max_savings", ":", "max_savings", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.483068633511664}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.6", "# Weight for direct distance", "future_distance_weight", "=", "0.3", "# Weight for expected future distance to unvisited nodes", "path_length_bonus", "=", "0.1", "# Bonus for path length optimization", "# Calculate length of current path to the destination node", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_distance_estimation", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combined scoring with a path length bonus", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "future_distance_weight", "*", "-", "future_distance_estimation", ")", "+", "(", "path_length_bonus", "*", "(", "total_distance_to_destination", "-", "direct_distance", ")", ")", "# Dynamic penalty for longer direct paths", "penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "total_distance_to_destination", ")", "*", "0.3", "score", "-=", "penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.424432255841329}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculating distances to unvisited nodes and their corresponding weights", "weighted_distances", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Introducing a weight based on the distance to the destination", "weight", "=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1e-6", ")", "# Avoid division by zero", "weighted_distances", "[", "node", "]", "=", "distance_to_node", "*", "weight", "# Selecting the node with the minimum weighted distance", "next_node", "=", "min", "(", "weighted_distances", ",", "key", "=", "weighted_distances", ".", "get", ")", "return", "next_node"], "code_perf": 6.6567767688234}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "average_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "average_distance_to_destination", ")", "/", "2", "score", "=", "direct_distance", "+", "penalty", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "if", "not", "unvisited_nodes", ":", "return", "None", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate clustering potential based on remaining unvisited nodes", "clustering_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "weighted_score", "=", "(", "direct_distance", "+", "clustering_score", ")", "/", "(", "1", "+", "(", "1", "/", "(", "1", "+", "direct_distance", ")", ")", ")", "# Balance between current and future distances", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.060123594360967}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "distances_to_unvisited", "=", "np", ".", "array", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "average_distance", "=", "np", ".", "mean", "(", "distances_to_unvisited", ")", "clustering_factor", "=", "np", ".", "sum", "(", "distances_to_unvisited", "<", "average_distance", ")", "# Count of close nodes", "exploration_factor", "=", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Factor to encourage exploring less visited nodes", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "for", "candidate", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate", "]", "score", "=", "(", "immediate_distance", ")", "+", "(", "0.5", "*", "average_distance", ")", "-", "(", "0.2", "*", "clustering_factor", ")", "+", "(", "exploration_factor", "*", "10", ")", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "candidate", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "cluster_density", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", "}", "total_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_remaining", "=", "total_distance_to_remaining", "/", "len", "(", "unvisited_nodes", ")", "cluster_bonus_weight", "=", "0.4", "# Weight for encouraging cluster exploration", "direct_influence_weight", "=", "0.4", "# Adjusted weight for direct distance influence", "strategic_importance_weight", "=", "0.3", "# Adjusted weight for future path importance", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_score", "=", "cluster_bonus_weight", "*", "(", "1", "/", "(", "1", "+", "cluster_density", "[", "node", "]", ")", ")", "# Bonus for denser clusters", "strategic_importance", "=", "strategic_importance_weight", "*", "(", "average_distance_to_remaining", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "score", "=", "(", "direct_influence_weight", "*", "direct_distance", ")", "+", "strategic_importance", "-", "cluster_score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.686196750952276}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity", "composite_weight", "=", "0.3", "# Weight for composite distance", "connectivity_penalty_weight", "=", "0.2", "# Weight for connectivity penalty", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate the composite distance score considering the direct distance", "composite_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "# Calculate connectivity to unvisited nodes", "connectivity_count", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "node", "in", "unvisited_nodes", ")", "# Score calculation", "score", "=", "(", "proximity_weight", "*", "-", "direct_distance", ")", "+", "(", "composite_weight", "*", "composite_distance", ")", "-", "(", "connectivity_penalty_weight", "*", "connectivity_count", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.856851353459207}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for distance", "synergy_weight", "=", "0.5", "# Weight for synergy of connections", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Calculate the decay factor based on the total traversal distance", "decay_factor", "=", "1", "/", "(", "1", "+", "total_distance_to_destination", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate potential next node's synergy based on connections", "synergy_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "synergy_average_distance", "=", "synergy_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "score", "=", "(", "distance_weight", "*", "-", "direct_distance", "*", "decay_factor", ")", "+", "(", "synergy_weight", "*", "synergy_average_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.55530376180551}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "pheromone_levels", "=", "{", "node", ":", "1.0", "for", "node", "in", "unvisited_nodes", "}", "# Initialize pheromone levels", "next_node", "=", "None", "# Calculate heuristic values based on inverse distance", "heuristic_values", "=", "{", "node", ":", "1", "/", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Compute probabilities for each unvisited node", "total_probability", "=", "0", "probabilities", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "probabilities", "[", "node", "]", "=", "(", "pheromone_levels", "[", "node", "]", "**", "1", ")", "*", "(", "heuristic_values", "[", "node", "]", "**", "2", ")", "total_probability", "+=", "probabilities", "[", "node", "]", "# Normalize probabilities", "for", "node", "in", "probabilities", ":", "probabilities", "[", "node", "]", "/=", "total_probability", "# Choose next node based on computed probabilities", "rand", "=", "random", ".", "random", "(", ")", "cumulative_probability", "=", "0", "for", "node", ",", "prob", "in", "probabilities", ".", "items", "(", ")", ":", "cumulative_probability", "+=", "prob", "if", "rand", "<", "cumulative_probability", ":", "next_node", "=", "node", "break", "return", "next_node"], "code_perf": 13.030614438214059}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.6", "# Weight for proximity to the nearest unvisited node", "contribution_weight", "=", "0.4", "# Weight for potential contribution to tour length reduction", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "proximity_score", "=", "-", "direct_distance", "contribution_score", "=", "(", "remaining_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "/", "total_distance_to_destination", "score", "=", "(", "proximity_weight", "*", "proximity_score", ")", "+", "(", "contribution_weight", "*", "contribution_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.275354118882833}
{"code_tokens": ["# {This algorithm incorporates a hybrid scoring mechanism that combines a heuristic based on the cumulative distance to unvisited nodes and a risk factor that penalizes visiting nodes with a high average distance from previously visited nodes, aiming to balance travel efficiency with minimized overall distance.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "min_risk_score", "=", "float", "(", "'inf'", ")", "# Calculate cumulative distance to remaining unvisited nodes", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Calculate average distance from already visited nodes", "visited_nodes", "=", "set", "(", "range", "(", "len", "(", "distance_matrix", ")", ")", ")", "-", "set", "(", "unvisited_nodes", ")", "-", "{", "current_node", "}", "average_distance_from_visited", "=", "(", "sum", "(", "distance_matrix", "[", "prev", "]", "[", "current_node", "]", "for", "prev", "in", "visited_nodes", ")", "/", "(", "len", "(", "visited_nodes", ")", "+", "1e-6", ")", "if", "visited_nodes", "else", "0", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Risk factor penalized by distance from previously visited nodes", "risk_score", "=", "average_distance_from_visited", "+", "distance_to_node", "# Combined score of proximity (based on cumulative distance) and risk", "score", "=", "cumulative_distance", "/", "len", "(", "unvisited_nodes", ")", "+", "risk_score", "if", "score", "<", "min_risk_score", ":", "min_risk_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.4", "# Weight for connectivity to unvisited nodes", "exploration_weight", "=", "0.2", "# Weight for historical visit frequency", "visit_frequency", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "# Initialize visit frequency", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Use inverse of visit frequency to encourage less visited nodes", "frequency_score", "=", "1", "/", "(", "visit_frequency", "[", "node", "]", "+", "1", ")", "# Prevent division by zero", "# Calculate combined score", "score", "=", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "-", "exploration_weight", "*", "frequency_score", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "visit_frequency", "[", "node", "]", "+=", "1", "# Increment visit frequency for the selection", "return", "next_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "closest_node", "=", "None", "shortest_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Introducing a penalty based on proximity to the destination node", "penalty", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "0.5", "# Adjusting penalty weight as needed", "adjusted_distance", "=", "distance", "+", "penalty", "if", "adjusted_distance", "<", "shortest_distance", ":", "shortest_distance", "=", "adjusted_distance", "closest_node", "=", "node", "return", "closest_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "nearest_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "unvisited_nodes", "=", "list", "(", "unvisited_nodes", ")", "# Convert to list to manipulate", "# Calculate the distance penalties for each unvisited node", "penalties", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "random", ".", "uniform", "(", "0", ",", "2", ")", "for", "node", "in", "unvisited_nodes", "}", "# Sort nodes by penalty", "sorted_nodes", "=", "sorted", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "penalties", "[", "node", "]", ")", "# Calculate a cluster density score based on proximity to other unvisited nodes", "cluster_density_scores", "=", "{", "node", ":", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "node", "!=", "other_node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<=", "5", ")", "for", "node", "in", "unvisited_nodes", "}", "# Adjust the score by adding the cluster density influence", "for", "node", "in", "sorted_nodes", ":", "penalties", "[", "node", "]", "+=", "cluster_density_scores", "[", "node", "]", "*", "0.5", "# Select the node with the minimum score", "next_node", "=", "min", "(", "sorted_nodes", ",", "key", "=", "lambda", "node", ":", "penalties", "[", "node", "]", ")", "return", "next_node"], "code_perf": 15.20431374507887}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "connectivity_scores", "=", "{", "node", ":", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "float", "(", "'inf'", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "weighted_distance_sum", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "connectivity_scores", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "total_weighted_connections", "=", "sum", "(", "connectivity_scores", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "if", "total_weighted_connections", ">", "0", ":", "weighted_average_distance", "=", "weighted_distance_sum", "/", "total_weighted_connections", "else", ":", "weighted_average_distance", "=", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_advantage", "=", "weighted_average_distance", "-", "direct_distance", "score", "=", "direct_distance", "+", "distance_advantage", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 24.687257703566694}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Adjusted weight for direct distance", "proximity_weight", "=", "0.4", "# Weight for proximity to remaining nodes", "detour_penalty_weight", "=", "0.2", "# Weight for penalty on longer detours", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "+", "1e-6", ")", "for", "other_node", "in", "unvisited_nodes", ")", "# Inverse distance to other nodes", "detour_penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "total_distance_to_destination", ")", "*", "detour_penalty_weight", "score", "=", "-", "(", "direct_distance", "+", "detour_penalty", ")", "+", "(", "proximity_score", "*", "proximity_weight", ")", "-", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "distance_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 27.09485231828321}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "weight_factor", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Weight based on remaining nodes", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "score", "=", "(", "average_distance_to_unvisited", "-", "distance_to_next", ")", "*", "weight_factor", "# Balanced score with weights", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.41724333977419}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.4", "# Weight for enhanced connectivity", "urgency_weight", "=", "0.2", "# Weight for urgency based on remaining nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "+", "1", ")", "for", "next", "in", "unvisited_nodes", ")", "# Inverse distance connectivity", "# Urgency score based on the number of unvisited nodes", "urgency_score", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "urgency_weight", "*", "urgency_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 15.69011470172758}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "average_remaining_distance", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "max_remaining_distance", "=", "np", ".", "max", "(", "[", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "penalty", "=", "np", ".", "sqrt", "(", "len", "(", "unvisited_nodes", ")", ")", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "for", "candidate", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate", "]", "score", "=", "immediate_distance", "+", "(", "0.5", "*", "average_remaining_distance", ")", "+", "(", "0.5", "*", "max_remaining_distance", "/", "penalty", ")", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "candidate", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm employs a scoring mechanism that combines proximity to the destination with a penalty for revisiting nodes to promote exploration.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "penalty_for_revisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "*", "(", "1", "-", "(", "distance_to_destination", "/", "(", "distance_to_next", "+", "1", ")", ")", ")", "-", "(", "penalty_for_revisited", "/", "100", ")", "# Modify exploration based on unvisited closeness", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 14.231600391646523}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "base_weight", "=", "0.4", "# Base weight for proximity to the destination", "sparsity_weight", "=", "0.4", "# Weight for sparsity of unvisited nodes", "randomness_factor", "=", "0.2", "# Weight for randomness in selection", "# Calculate the average distance to the destination.", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "(", "avg_distance_to_destination", "*", "base_weight", ")", "-", "(", "direct_distance", "*", "sparsity_weight", ")", "+", "(", "random", ".", "random", "(", ")", "*", "randomness_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.861477613827942}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "cluster_weight", "=", "0.3", "# Weight for cluster potential savings", "future_cost_weight", "=", "0.3", "# Weight for estimated future cost", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Heuristic for estimating future costs to visit remaining unvisited nodes", "future_cost_estimate", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "cluster_factor", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "direct_distance", "+", "1", ")", "# Normalize by direct_distance to avoid division by zero", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "cluster_weight", "*", "cluster_factor", ")", "+", "(", "future_cost_weight", "*", "future_cost_estimate", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.847915787931379}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "import", "numpy", "as", "np", "import", "random", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "randomization_weight", "=", "0.4", "# Weight for encouraging exploration", "visit_count_weight", "=", "0.2", "# Weight for discouraging frequent visits", "# Function to assess penalty for frequent visit based on visit counts", "def", "calculate_visit_penalty", "(", "node", ")", ":", "return", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", "**", "2", "# Initialize visit counts for nodes if not present", "global", "node_visit_counts", "node_visit_counts", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "# Update visit counts at each call", "node_visit_counts", "[", "node", "]", "=", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", "+", "1", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "calculate_visit_penalty", "(", "node", ")", "random_factor", "=", "random", ".", "uniform", "(", "-", "1", ",", "1", ")", "# Random exploration factor", "# Combined scoring mechanism with randomized exploration", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "randomization_weight", "*", "random_factor", "-", "visit_count_weight", "*", "penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 15.011650405233972}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_penalty", "=", "0.5", "# Weight for creating a penalty for distant nodes", "decay_factor", "=", "0.1", "# Factor that reduces the impact of farther nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "direct_distance", "+", "(", "proximity_penalty", "*", "remaining_distance", ")", "*", "(", "1", "-", "decay_factor", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.574523100102096}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "penalty_factor", "=", "len", "(", "unvisited_nodes", ")", "# Penalty based on the number of unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "penalty", "=", "(", "penalty_factor", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "*", "heuristic_distance", "score", "=", "direct_distance", "+", "penalty", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.958619780000175}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "threshold", "=", "10", "# Maximum distance to consider for next node", "candidates", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance_to_node", "<", "threshold", ":", "candidates", ".", "append", "(", "(", "node", ",", "distance_to_node", ")", ")", "if", "not", "candidates", ":", "# If no candidates within threshold, select the closest node", "candidates", "=", "[", "(", "node", ",", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "for", "node", "in", "unvisited_nodes", "]", "next_node", "=", "min", "(", "candidates", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "node_scores", "=", "{", "}", "# Calculate a score for each unvisited node", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate connectivity score based on the sum of distances from the current node to other unvisited nodes", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "# Composite score considering direct distance and a fraction of connectivity score", "node_scores", "[", "node", "]", "=", "direct_distance", "+", "(", "connectivity_score", "*", "0.05", ")", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 8.2699981173128}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "recency_weight", "=", "0.3", "# Weight for recency penalty", "density_weight", "=", "0.4", "# Weight for cluster density contribution", "distance_weight", "=", "0.3", "# Weight for direct distance cost", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_density", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "1", "+", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", ")", "recency_penalty", "=", "0.0", "# Assume a mechanism to track recent visits if needed", "score", "=", "(", "density_weight", "*", "cluster_density", ")", "-", "(", "recency_weight", "*", "recency_penalty", ")", "-", "direct_distance", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.808026994584195}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_weight", "=", "0.5", "# Weight for immediate distance to next node", "future_weight", "=", "0.3", "# Weight for the projected contributions of unvisited nodes", "penalty_weight", "=", "0.2", "# Weight for the penalty based on other nodes' distances", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_contribution", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_next_node", "]", "for", "next_next_node", "in", "unvisited_nodes", "if", "next_next_node", "!=", "node", ")", "penalty_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "# Using logarithmic function for future contributions to dampen long distances", "if", "len", "(", "unvisited_nodes", ")", ">", "1", ":", "future_average_distance", "=", "future_contribution", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "penalty_score", "=", "penalty_weight", "*", "(", "penalty_score", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", ")", "cost_score", "=", "(", "immediate_distance", "+", "total_distance_to_destination", ")", "*", "immediate_weight", "-", "(", "future_average_distance", "*", "future_weight", ")", "+", "penalty_score", "else", ":", "cost_score", "=", "(", "immediate_distance", "+", "total_distance_to_destination", ")", "*", "immediate_weight", "if", "cost_score", "<", "min_cost", ":", "min_cost", "=", "cost_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.735320647906011}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "average_futuristic_distance_weight", "=", "0.5", "# Weight for the future expected distance", "immediate_distance_weight", "=", "0.3", "# Weight for the immediate distance to unvisited nodes", "unvisited_neighbors_penalty_weight", "=", "0.2", "# Weight for the average distance to unvisited neighboring nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "unvisited_neighbors_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "for", "neighbor", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "expected_future_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "immediate_distance_weight", "*", "immediate_distance", ")", "+", "(", "average_futuristic_distance_weight", "*", "expected_future_distance", ")", "-", "(", "unvisited_neighbors_penalty_weight", "*", "unvisited_neighbors_penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 30.068281835344408}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "import", "numpy", "as", "np", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "# Dynamic weights based on the number of unvisited nodes", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "distance_weight", "=", "1.0", "/", "(", "num_unvisited", "+", "1", ")", "# Inversely proportional to unvisited count", "future_cost_weight", "=", "0.5", "# Remains constant", "destination_weight", "=", "0.3", "# Encourages closer nodes", "decay_factor", "=", "0.1", "# Factor to reduce future cost based on proximity to destination", "# Function to calculate the potential future cost with decay", "def", "calculate_future_cost", "(", "node", ")", ":", "return", "np", ".", "mean", "(", "[", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "]", ")", "*", "np", ".", "exp", "(", "-", "decay_factor", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_cost", "=", "calculate_future_cost", "(", "node", ")", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined scoring mechanism with new components", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "future_cost_weight", "*", "future_cost", "+", "destination_weight", "*", "(", "1", "/", "(", "distance_to_destination", "+", "1e-6", ")", ")", "# To avoid division by zero", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 12.558599898931927}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "minimal_total_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "return_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "previous_visited_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "visited_node", "]", "for", "visited_node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "visited_node", "!=", "current_node", "and", "visited_node", "not", "in", "unvisited_nodes", ")", "total_distance", "=", "direct_distance", "+", "return_distance", "+", "previous_visited_penalty", "*", "0.5", "if", "total_distance", "<", "minimal_total_distance", ":", "minimal_total_distance", "=", "total_distance", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 11.953234261128877}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.3", "# Weight for direct distance", "proximity_weight", "=", "0.3", "# Weight for proximity to previously visited nodes", "future_cost_weight", "=", "0.3", "# Weight for estimated future cost", "detour_penalty_weight", "=", "0.1", "# Weight for longer detours", "# Function to calculate proximity score based on visited nodes", "def", "calculate_proximity_score", "(", "node", ")", ":", "vicinity_score", "=", "0", "visited_nodes", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "i", "not", "in", "unvisited_nodes", "and", "i", "!=", "node", "]", "for", "other", "in", "visited_nodes", ":", "vicinity_score", "+=", "distance_matrix", "[", "node", "]", "[", "other", "]", "return", "vicinity_score", "/", "(", "len", "(", "visited_nodes", ")", "or", "1", ")", "# Function to estimate future cost based on remaining nodes", "def", "estimate_future_cost", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "calculate_proximity_score", "(", "node", ")", "future_cost", "=", "estimate_future_cost", "(", "node", ")", "# Combined scoring mechanism with detour penalty", "score", "=", "(", "-", "direct_distance_weight", "*", "direct_distance", "+", "proximity_weight", "*", "proximity_score", "+", "future_cost_weight", "*", "future_cost", "-", "detour_penalty_weight", "*", "(", "direct_distance", "*", "len", "(", "unvisited_nodes", ")", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.6684020271948885}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "visit_weights", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "# Track visit weights for each node", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Update visit weights based on how many visits have been made to each node", "novelty_score", "=", "(", "1", "/", "(", "1", "+", "visit_weights", "[", "node", "]", ")", ")", "*", "1.5", "# Encourages exploration of less visited nodes", "# Cumulative cost function considering direct distance and novelty", "cost", "=", "direct_distance", "+", "(", "0.7", "*", "(", "distance_to_destination", ")", ")", "-", "novelty_score", "if", "cost", "<", "min_cost", ":", "min_cost", "=", "cost", "next_node", "=", "node", "# Increment visit weight for the next node", "if", "next_node", ":", "visit_weights", "[", "next_node", "]", "+=", "1", "return", "next_node"], "code_perf": 7.6455935091714355}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "attractiveness_weight", "=", "0.6", "# Weight for node attractiveness", "distance_weight", "=", "0.4", "# Weight for direct distance influence", "total_accessibility", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1", ")", "for", "node", "in", "unvisited_nodes", ")", "average_accessibility", "=", "total_accessibility", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "attractiveness", "=", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", ")", "if", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "!=", "0", "else", "0", "score", "=", "(", "distance_weight", "*", "direct_distance", ")", "+", "(", "attractiveness_weight", "*", "(", "attractiveness", "-", "average_accessibility", ")", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.6242196987516}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to destination", "clustering_weight", "=", "0.3", "# Weight for clustering savings", "cumulative_penalty_weight", "=", "0.2", "# Weight for long direct distance", "bonus_for_closeness_weight", "=", "0.1", "# Bonus for closeness to destination", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "adjustment_factor", "=", "1", "/", "unvisited_count", "if", "unvisited_count", ">", "0", "else", "1", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "unvisited_count", "or", "1", ")", "proximity_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "proximity_weight", "*", "proximity_to_destination", "+", "clustering_weight", "*", "cluster_average_distance", "-", "(", "direct_distance", "*", "cumulative_penalty_weight", ")", "+", "(", "bonus_for_closeness_weight", "*", "max", "(", "0", ",", "proximity_weight", "-", "direct_distance", ")", ")", "*", "adjustment_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.562270574322092}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "distance_to_node", "+", "0.5", "*", "distance_to_destination", "# Weighting future distance", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance towards destination", "history_weight", "=", "0.4", "# Weight for penalizing previously visited nodes", "exploration_weight", "=", "0.2", "# Weight for encouraging exploration of less-visited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Track visit history as a dictionary (assuming `visited_nodes` is defined elsewhere)", "visit_counts", "=", "{", "node", ":", "1", "for", "node", "in", "unvisited_nodes", "}", "# Example simulation of visit history", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "historical_penalty", "=", "(", "visit_counts", ".", "get", "(", "node", ",", "0", ")", "**", "2", ")", "*", "history_weight", "# Squared penalty for visits", "exploration_bonus", "=", "(", "1", "/", "(", "visit_counts", ".", "get", "(", "node", ",", "1", ")", ")", ")", "*", "exploration_weight", "# Encourages less visited nodes", "# Score combines direct distance, penalty for history, and an exploration bonus", "score", "=", "-", "(", "direct_distance", "+", "historical_penalty", "-", "exploration_bonus", ")", "+", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "distance_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.466511785330852}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score that favors immediate proximity and considers distance to the destination", "score", "=", "direct_distance", "+", "0.5", "*", "distance_to_destination", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "weighted_proximity_factor", "=", "0.6", "# Weight for proximity influence", "proximity_distance_threshold", "=", "10", "# Distance threshold for proximity influence", "close_nodes", "=", "[", "node", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<=", "proximity_distance_threshold", "]", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_effect", "=", "(", "len", "(", "close_nodes", ")", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", ")", "if", "close_nodes", "else", "0", "score", "=", "direct_distance", "+", "weighted_proximity_factor", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "proximity_effect", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.4257563991146025}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Step 1: Group unvisited nodes into clusters based on a threshold distance", "threshold_distance", "=", "2", "# Define a threshold for clustering", "clusters", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "found_cluster", "=", "False", "for", "cluster", "in", "clusters", ":", "if", "any", "(", "distance_matrix", "[", "node", "]", "[", "member", "]", "<", "threshold_distance", "for", "member", "in", "cluster", ")", ":", "cluster", ".", "append", "(", "node", ")", "found_cluster", "=", "True", "break", "if", "not", "found_cluster", ":", "clusters", ".", "append", "(", "[", "node", "]", ")", "# Step 2: Select the nearest cluster to the current node", "nearest_cluster", "=", "min", "(", "clusters", ",", "key", "=", "lambda", "cluster", ":", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "cluster", ")", ")", "# Step 3: From the nearest cluster, select the closest node to the current node", "next_node", "=", "min", "(", "nearest_cluster", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "efficiency_weight", "=", "0.5", "# Weight for path efficiency", "revisit_penalty_weight", "=", "0.2", "# Weight for penalties on revisiting nodes", "exploration_factor_weight", "=", "0.3", "# Weight for promoting exploration", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Track visit frequency for penalty", "visit_count", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "# Simulate visit counts", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "adjusted_penalty", "=", "visit_count", "[", "node", "]", "*", "revisit_penalty_weight", "# Calculate average efficiency based on remaining nodes", "efficiency_score", "=", "-", "direct_distance", "/", "(", "total_distance_to_destination", "if", "total_distance_to_destination", "else", "1", ")", "# Incorporate random exploration factor", "exploration_bonus", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "*", "exploration_factor_weight", "score", "=", "(", "efficiency_weight", "*", "efficiency_score", ")", "-", "adjusted_penalty", "+", "exploration_bonus", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.767143866938618}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "curiosity_weights", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "# Calculate clustering of unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "cluster_count", "=", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<=", "10", ")", "curiosity_weights", "[", "node", "]", "=", "cluster_count", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "# Evaluate average distance to destination", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "curiosity_weight", "=", "curiosity_weights", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate score with a new weighting mechanism", "score", "=", "(", "direct_distance", "*", "1.5", ")", "+", "(", "0.5", "*", "(", "avg_distance_to_destination", "-", "distance_to_destination", ")", ")", "+", "(", "0.3", "*", "curiosity_weight", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.5896920510091475}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "cluster_influence_factor", "=", "0.5", "# Weight for cluster influence", "cluster_distance_threshold", "=", "15", "# Distance threshold for cluster influence", "cluster_nodes", "=", "[", "node", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<=", "cluster_distance_threshold", "]", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_effect", "=", "(", "len", "(", "cluster_nodes", ")", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", ")", "if", "cluster_nodes", "else", "0", "score", "=", "direct_distance", "+", "0.7", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "cluster_influence_factor", "*", "cluster_effect", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.438127015117454}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "accessibility_weight", "=", "0.4", "# Weight for accessibility to unvisited nodes", "distance_weight", "=", "0.4", "# Weight for proximity to the destination node", "synergy_weight", "=", "0.2", "# New weight for synergy effect", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_future_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", ")", "synergy_effect", "=", "total_future_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "1", ")", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", ")", "+", "(", "synergy_effect", "*", "synergy_weight", ")", "+", "(", "accessibility_weight", "*", "direct_distance", ")", "+", "(", "distance_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.443626637504084}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "visit_frequency", "=", "{", "node", ":", "0", "for", "node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "}", "# Tracks visit frequencies", "if", "unvisited_nodes", ":", "immediate_weight", "=", "0.4", "# Weight for immediate travel cost", "popularity_weight", "=", "0.3", "# Influence of node visit popularity", "exploration_weight", "=", "0.3", "# Weight for exploring less popular nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "threshold_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "# Minimum distance to remaining nodes", "# Popularity-based penalty for visit frequency and an exploration incentive", "popularity_penalty", "=", "visit_frequency", "[", "node", "]", "*", "0.1", "# Penalty based on frequency", "exploration_incentive", "=", "(", "threshold_distance", "-", "direct_distance", ")", "*", "(", "1", "if", "direct_distance", "<", "threshold_distance", "else", "0", ")", "score", "=", "(", "-", "immediate_weight", "*", "direct_distance", ")", "-", "popularity_penalty", "+", "(", "exploration_weight", "*", "exploration_incentive", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "visit_frequency", "[", "next_node", "]", "+=", "1", "# Update visit frequency for the selected node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "travel_time_factor", "=", "1.2", "# Factor to reflect the time taken to travel", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "time_weight", "=", "0.3", "# Weight for travel time consideration", "historic_impact_weight", "=", "0.2", "# Weight for influence of previously visited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "travel_time", "=", "direct_distance", "*", "travel_time_factor", "# Calculate cumulative impact of previously visited nodes", "historic_impact_score", "=", "sum", "(", "distance_matrix", "[", "prev", "]", "[", "node", "]", "for", "prev", "in", "unvisited_nodes", "if", "prev", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combined score considering distance, travel time, and historic impact", "score", "=", "distance_weight", "*", "direct_distance", "+", "time_weight", "*", "travel_time", "-", "historic_impact_weight", "*", "historic_impact_score", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.7047431976533876}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to unvisited nodes", "future_cost_weight", "=", "0.4", "# Weight for future cost prediction", "heuristic_penalty", "=", "0.2", "# Penalty for long-term inefficiency", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Calculate heuristic penalty based on future cost distance", "penalty", "=", "heuristic_penalty", "*", "(", "future_cost", "-", "direct_distance", ")", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", ")", "+", "(", "future_cost", "*", "future_cost_weight", ")", "-", "penalty", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.2954530212469955}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "exploration_penalty", "=", "0.5", "# Penalty for selecting closer nodes", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.6", "# Weight for direct distance", "exploration_weight", "=", "0.4", "# Weight for exploring more distant nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "# Balanced score between direct distance and future exploration", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "exploration_weight", "*", "(", "1", "/", "(", "1", "+", "direct_distance", ")", ")", "# Applying exploration penalty to encourage choosing less immediate nodes", "score", "-=", "exploration_penalty", "*", "(", "direct_distance", "/", "(", "1", "+", "future_cost", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.881049167340057}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate a weighted score combining distance to the node and distance to the destination", "if", "distance_to_destination", ">", "0", "and", "distance_to_node", ">", "0", ":", "# Avoid division by zero", "score", "=", "(", "0.5", "*", "distance_to_node", ")", "+", "(", "0.5", "*", "distance_to_destination", ")", "# Select the node with the minimum score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "candidates", "=", "list", "(", "unvisited_nodes", ")", "scored_candidates", "=", "[", "]", "for", "node", "in", "candidates", ":", "cumulative_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Add cumulative distance to remaining nodes", "cumulative_distance", "+=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "proximity_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "0.3", "# Weighting the distance to destination", "score", "=", "cumulative_distance", "+", "proximity_to_destination", "scored_candidates", ".", "append", "(", "(", "node", ",", "score", ")", ")", "scored_candidates", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "return", "scored_candidates", "[", "0", "]", "[", "0", "]"], "code_perf": 21.612738567786757}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "len", "(", "[", "n", "for", "n", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "0", "]", ")", "# Integrate a random factor for diversity", "random_factor", "=", "random", ".", "uniform", "(", "0.8", ",", "1.2", ")", "# New scoring equation", "score", "=", "(", "1", "/", "(", "distance_to_node", "+", "1e-9", ")", ")", "*", "random_factor", "*", "(", "1", "+", "connectivity_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 7.033784173333611}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "potential_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "remaining_nodes", "=", "len", "(", "unvisited_nodes", ")", "# Calculate a score based on direct distance, potential distance, and the number of remaining nodes", "score", "=", "direct_distance", "+", "(", "potential_distance", "/", "remaining_nodes", ")", "if", "remaining_nodes", ">", "0", "else", "direct_distance", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.101442436613793}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Convert unvisited nodes to a numpy array for easier manipulation", "unvisited_nodes", "=", "np", ".", "array", "(", "list", "(", "unvisited_nodes", ")", ")", "# Calculate distances from the current node to all unvisited nodes", "distances", "=", "distance_matrix", "[", "current_node", ",", "unvisited_nodes", "]", "# Calculate heuristic distance to the destination (assuming 0-indexed nodes)", "heuristic_distances", "=", "distance_matrix", "[", "unvisited_nodes", ",", "destination_node", "]", "# Compute a combined score: distance + (2 * heuristic distance) / 3", "scores", "=", "distances", "+", "(", "2", "/", "3", ")", "*", "heuristic_distances", "# Select the node with the minimum score", "next_node", "=", "unvisited_nodes", "[", "np", ".", "argmin", "(", "scores", ")", "]", "return", "next_node"], "code_perf": 7.6490879527083395}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.3", "# Weight for degree of connectivity to unvisited nodes", "potential_weight", "=", "0.2", "# Weight for future potential based on average remaining distance", "urgency_weight", "=", "0.1", "# Weight for the urgency of nearby nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", ">", "0", ")", "# Degree of connectivity", "# Potential score based on average distance to destination from unvisited nodes", "potential_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "dest", "]", "for", "dest", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "urgency_score", "=", "1", "/", "(", "direct_distance", "+", "1", ")", "# Inverse of distance to emphasize closer nodes", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "potential_weight", "*", "(", "1", "/", "potential_score", "if", "potential_score", "else", "0", ")", "+", "urgency_weight", "*", "urgency_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.383399931995939}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "proximity_weight", "=", "0.5", "# Weight for favoring closer nodes", "unvisited_influence", "=", "0.5", "# Influence from unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "unvisited_distance", "=", "(", "total_remaining_distance", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "/", "len", "(", "unvisited_nodes", ")", "score", "=", "(", "proximity_weight", "*", "direct_distance", ")", "+", "(", "unvisited_influence", "*", "unvisited_distance", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.7950214267763425}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "penalty_factor", "=", "1.5", "# Adjust this factor to introduce more or less penalty", "for", "node", "in", "unvisited_nodes", ":", "direct_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "indirect_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "penalty_factor", "total_cost", "=", "direct_cost", "+", "indirect_cost", "if", "total_cost", "<", "min_cost", ":", "min_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.46985744010961}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "exploration_weight", "=", "0.3", "# Weight for exploring nearby nodes", "efficiency_weight", "=", "0.7", "# Weight for minimizing route length", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_distance_to_others", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Adjust the exploration factor based on proximity to remaining nodes", "exploration_bonus", "=", "(", "1", "/", "(", "avg_distance_to_others", "+", "1", ")", ")", "if", "avg_distance_to_others", ">", "0", "else", "0", "# Combined score calculation with increased efficiency for promising paths", "score", "=", "(", "exploration_weight", "*", "exploration_bonus", ")", "+", "(", "efficiency_weight", "*", "(", "1", "/", "direct_distance", "if", "direct_distance", ">", "0", "else", "float", "(", "'inf'", ")", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.950477325940251}
{"code_tokens": ["import", "numpy", "as", "np", "from", "scipy", ".", "spatial", "import", "distance", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the average position of unvisited nodes", "unvisited_positions", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "avg_position", "=", "np", ".", "mean", "(", "unvisited_positions", ")", "# Calculate weights based on distances to unvisited nodes", "weighted_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Using clustering principle: closer nodes should be prioritized", "score", "=", "direct_distance", "+", "(", "avg_position", "/", "len", "(", "unvisited_nodes", ")", ")", "weighted_scores", "[", "node", "]", "=", "score", "# Select the node with the minimum weight score", "next_node", "=", "min", "(", "weighted_scores", ",", "key", "=", "weighted_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_weight", "=", "0.5", "# Weight for immediate travel distance", "cluster_weight", "=", "0.4", "# Weight for prioritizing proximity to clusters", "average_distance_weight", "=", "0.1", "# Weight for average distance to remaining unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "average_distance_to_others", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_distance", "*", "immediate_weight", ")", "+", "(", "cluster_score", "*", "cluster_weight", ")", "-", "(", "average_distance_to_others", "*", "average_distance_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 22.179545981537114}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_distance_weight", "=", "0.5", "# Weight for immediate distance to next node", "cluster_bonus_weight", "=", "0.4", "# Weight for bonus when connecting to clusters of unvisited nodes", "far_node_penalty_weight", "=", "0.1", "# Penalty for selecting nodes farther away from current node", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_bonus", "=", "sum", "(", "1", "for", "next_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "<", "total_distance_to_destination", ")", "*", "1.0", "# Simple cluster size bonus", "far_node_penalty", "=", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "-", "total_distance_to_destination", ")", "*", "far_node_penalty_weight", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ">", "total_distance_to_destination", "else", "0", "cost_score", "=", "(", "immediate_distance", "*", "immediate_distance_weight", "+", "cluster_bonus", "*", "cluster_bonus_weight", "-", "far_node_penalty", ")", "if", "cost_score", "<", "min_cost", ":", "min_cost", "=", "cost_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 12.914878179368438}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Adjusted weight for direct distance", "connectivity_weight", "=", "0.4", "# Increased weight for connectivity to unvisited nodes", "heuristic_weight", "=", "0.2", "# Weight for overall spatial positioning of unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average connectivity", "# Dynamic heuristic score based on the distribution of remaining nodes", "heuristic_score", "=", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "density_factor", "=", "(", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "# Adjusts score based on density of unvisited nodes", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "heuristic_weight", "*", "heuristic_score", "*", "density_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.41724333977419}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_penalty_weight", "=", "0.4", "# Weight for penalizing long distances", "destination_proximity_weight", "=", "0.4", "# Weight for proximity to destination", "diversity_weight", "=", "0.2", "# Weight for exploring less connected nodes", "total_distance_from_node", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty_score", "=", "(", "total_distance_from_node", "-", "direct_distance", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Penalty for extensive distances", "proximity_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Direct distance to destination", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average distance for diversity", "score", "=", "-", "distance_penalty_weight", "*", "penalty_score", "+", "destination_proximity_weight", "*", "(", "1", "/", "(", "proximity_score", "+", "1e-9", ")", ")", "+", "diversity_weight", "*", "(", "1", "/", "(", "connectivity_score", "+", "1e-9", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 24.741832076288546}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.5", "# Weight for direct distance", "importance_weight", "=", "0.4", "# Weight for unvisited nodes' overall importance", "future_cost_weight", "=", "0.1", "# Weight for potential future costs", "# Function to calculate importance score based on distance to unvisited nodes", "def", "calculate_importance_score", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Function to calculate heuristic cost to destination", "def", "calculate_future_cost", "(", "node", ")", ":", "return", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "2", ")", "+", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "importance_score", "=", "calculate_importance_score", "(", "node", ")", "future_cost", "=", "calculate_future_cost", "(", "node", ")", "# Combined scoring mechanism", "score", "=", "(", "-", "direct_distance_weight", "*", "direct_distance", "+", "importance_weight", "*", "importance_score", "-", "future_cost_weight", "*", "future_cost", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.74553962711463}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.35", "future_efficiency_weight", "=", "0.25", "novelty_factor_weight", "=", "0.15", "exploration_weight", "=", "0.25", "def", "calculate_future_efficiency", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "def", "calculate_novelty_factor", "(", "node", ")", ":", "# Negative impact based on frequency of recent visits (placeholder)", "return", "0.1", "if", "node", "in", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_efficiency", "=", "calculate_future_efficiency", "(", "node", ")", "novelty_factor", "=", "calculate_novelty_factor", "(", "node", ")", "# Hybrid scoring equation integrating exploration", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "future_efficiency_weight", "*", "future_efficiency", "+", "novelty_factor_weight", "*", "novelty_factor", "+", "exploration_weight", "*", "random", ".", "random", "(", ")", ")", "# Add variability", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.330701276898703}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "remaining_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty_factor", "=", "(", "remaining_count", "-", "1", ")", "/", "(", "remaining_count", "*", "2", ")", "# Dynamic penalty factor", "score", "=", "direct_distance", "+", "penalty_factor", "*", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "direct_distance", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.8823657780424945}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "# Weights for scoring components", "distance_weight", "=", "0.4", "novelty_weight", "=", "0.4", "penalty_weight", "=", "0.2", "global", "node_visit_counts", "node_visit_counts", "=", "{", "}", "def", "calculate_novelty_score", "(", "node", ")", ":", "return", "len", "(", "unvisited_nodes", ")", "-", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", "def", "calculate_penalty", "(", "node", ")", ":", "return", "(", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", "**", "2", ")", "*", "0.1", "# Exponential decay", "for", "node", "in", "unvisited_nodes", ":", "node_visit_counts", "[", "node", "]", "=", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", "+", "1", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "novelty_score", "=", "calculate_novelty_score", "(", "node", ")", "penalty", "=", "calculate_penalty", "(", "node", ")", "# Adjust score calculation", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "novelty_weight", "*", "novelty_score", "-", "penalty_weight", "*", "penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "clustering_weight", "=", "0.4", "# Weight for clustering savings", "distance_penalty_weight", "=", "0.2", "# Penalty based on distance to the destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "clustering_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "clustering_average", "=", "clustering_cost", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Scoring calculation", "score", "=", "(", "direct_distance_weight", "*", "direct_distance", ")", "+", "(", "clustering_weight", "*", "clustering_average", ")", "-", "(", "distance_penalty_weight", "*", "distance_to_destination", ")", "if", "score", "<", "min_cost", ":", "# Minimizing the cost", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.803449863411581}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity", "path_cost_weight", "=", "0.4", "# Weight for path cost", "remaining_nodes_weight", "=", "0.2", "# Weight for remaining nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "num_remaining_nodes", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "path_cost", "=", "total_distance", "-", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Cost of travelling through remaining nodes", "remaining_nodes_score", "=", "num_remaining_nodes", "-", "1", "# To adjust cost based on remaining nodes", "score", "=", "proximity_weight", "*", "(", "-", "direct_distance", ")", "+", "path_cost_weight", "*", "path_cost", "+", "remaining_nodes_weight", "*", "remaining_nodes_score", "if", "score", "<", "min_cost", ":", "# Minimizing cost", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 36.1397423465301}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "unvisited_nodes", "=", "list", "(", "unvisited_nodes", ")", "def", "penalty", "(", "num_remaining", ")", ":", "# Penalty increases with the number of remaining unvisited nodes", "return", "num_remaining", "*", "0.5", "# Example penalty factor", "scores", "=", "{", "}", "num_remaining", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "distance", "+", "penalty", "(", "num_remaining", ")", "*", "(", "1", "+", "(", "1", "/", "num_remaining", ")", ")", "# Combine distance and penalty", "scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "total_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "# Penalty for remaining nodes", "score", "=", "distance_to_next", "+", "total_penalty", "-", "total_distance_to_destination", "# Balance immediate and overall route", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 21.229532185064613}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "from", "collections", "import", "defaultdict", "import", "math", "def", "cluster_nodes", "(", "unvisited", ",", "distance_matrix", ")", ":", "clusters", "=", "defaultdict", "(", "list", ")", "cluster_threshold", "=", "5", "# Max distance to group nodes", "for", "i", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", ":", "if", "i", "in", "unvisited", ":", "for", "j", "in", "unvisited", ":", "if", "i", "!=", "j", "and", "distance_matrix", "[", "i", "]", "[", "j", "]", "<", "cluster_threshold", ":", "clusters", "[", "i", "]", ".", "append", "(", "j", ")", "return", "clusters", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "cluster_scores", "=", "{", "}", "clusters", "=", "cluster_nodes", "(", "unvisited_nodes", ",", "distance_matrix", ")", "for", "node", "in", "unvisited_nodes", ":", "if", "node", "in", "clusters", ":", "cluster_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "for", "neighbor", "in", "clusters", "[", "node", "]", ")", "/", "(", "len", "(", "clusters", "[", "node", "]", ")", "or", "1", ")", "else", ":", "cluster_score", "=", "0", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "alignment_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "-", "0.5", "*", "direct_distance", "+", "0.3", "*", "cluster_score", "+", "0.2", "*", "alignment_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.238069760238008}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "exploration_weight", "=", "0.3", "# Encourages visiting less-frequented nodes", "heuristic_weight", "=", "0.2", "# Weight for overall positioning of unvisited nodes", "visit_frequency", "=", "{", "node", ":", "random", ".", "uniform", "(", "0", ",", "1", ")", "for", "node", "in", "unvisited_nodes", "}", "# Simulating visit frequency", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "exploration_score", "=", "exploration_weight", "*", "(", "1", "-", "visit_frequency", "[", "node", "]", ")", "# Less frequent nodes get higher score", "heuristic_score", "=", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "exploration_score", "+", "heuristic_weight", "*", "heuristic_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.610978559635594}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "penalty_weight", "=", "1.5", "distance_factor", "=", "0.7", "unvisited_neighbors_count", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "heuristic_score", "=", "(", "distance_factor", "*", "direct_distance", ")", "+", "(", "(", "1", "-", "distance_factor", ")", "*", "remaining_distance", ")", "penalty_score", "=", "penalty_weight", "*", "(", "1", "/", "(", "unvisited_neighbors_count", "+", "1", ")", ")", "score", "=", "heuristic_score", "+", "penalty_score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.359359096932373}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "node_scores", "=", "{", "}", "# Calculate scores for each unvisited node based on distance and connectivity", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate average distance to all unvisited nodes and a connectivity score", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "direct_distance", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "# Create a composite score that includes a penalty for longer connections", "node_scores", "[", "node", "]", "=", "direct_distance", "-", "connectivity_score", "+", "avg_distance", "*", "0.05", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 34.751300471759556}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm introduces a novelty by integrating a dynamic scoring mechanism based on proximity variance and a reward for visiting nodes that maintain or reduce the overall tour length.}", "next_node", "=", "None", "max_combined_score", "=", "float", "(", "'-inf'", ")", "# Constants for weighting", "alpha", "=", "0.4", "# Weight for distance score", "beta", "=", "0.4", "# Weight for cohesion score", "gamma", "=", "0.2", "# Weight for distance penalty", "delta", "=", "0.1", "# Weight for variance reward", "# Total number of unvisited nodes", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "if", "num_unvisited", ">", "1", ":", "avg_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "num_unvisited", "else", ":", "avg_distance_remaining", "=", "0", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Variance score: how much the next node's distance deviates from the average", "variance_score", "=", "abs", "(", "distance_to_next", "-", "avg_distance_remaining", ")", "# Penalty score: additional distance incurred to go to destination after current", "distance_penalty", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Reward score: incentivize lower distances by rewarding the inverse of distance variance", "variance_reward", "=", "(", "1", "/", "(", "variance_score", "+", "1", ")", ")", "*", "delta", "if", "variance_score", "!=", "0", "else", "delta", "# Combined score incorporating variance reward", "combined_score", "=", "(", "beta", "*", "(", "avg_distance_remaining", "-", "distance_to_next", ")", "+", "variance_reward", "-", "distance_penalty", "*", "gamma", "-", "distance_to_next", "*", "alpha", ")", "if", "combined_score", ">", "max_combined_score", ":", "max_combined_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.234173955045242}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Adjusted weight for proximity to destination", "clustering_weight", "=", "0.5", "# Adjusted weight for clustering benefit", "distance_importance", "=", "0.7", "# Emphasis on distance to next node", "penalty_factor", "=", "1.3", "# Increased penalty for longer direct paths", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty_score", "=", "penalty_factor", "*", "direct_distance", "clustering_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "+", "1e-6", ")", "for", "next_node", "in", "unvisited_nodes", ")", "# Inverse distance for clustering", "score", "=", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "-", "(", "distance_importance", "*", "penalty_score", ")", "+", "(", "clustering_weight", "*", "clustering_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 27.627827372605857}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "# Calculate average distance to unvisited nodes", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_from_current", "=", "total_distance_to_unvisited", "/", "len", "(", "unvisited_nodes", ")", "or", "1", "# Calculate connection density for unvisited nodes", "def", "calculate_connection_density", "(", "node", ")", ":", "return", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "10", ")", "# Defined threshold of 10", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connection_density", "=", "calculate_connection_density", "(", "node", ")", "# Combined scoring mechanism", "score", "=", "(", "direct_distance", "*", "0.5", ")", "+", "(", "average_distance_from_current", "*", "0.3", ")", "+", "(", "connection_density", "*", "0.2", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 36.1397423465301}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "# Dynamic weights based on the current total distance traversed", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "if", "node", "!=", "current_node", ")", "distance_weight", "=", "1", "/", "(", "1", "+", "total_distance", ")", "# Inverse relation to encourage shorter paths", "connectivity_weight", "=", "0.3", "# Consistent weight for connectivity to unvisited nodes", "diversity_weight", "=", "0.3", "# Consistent weight for encouraging less frequently visited nodes", "# Function to calculate connectivity score based on unvisited nodes", "def", "calculate_connectivity_score", "(", "node", ")", ":", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "return", "connectivity_score", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Function to assess visit frequency based score", "def", "calculate_visit_frequency_score", "(", "node", ")", ":", "return", "1", "/", "(", "1", "+", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", ")", "# Initialize visit counts for nodes if not present", "global", "node_visit_counts", "node_visit_counts", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "# Update visit counts at each call", "node_visit_counts", "[", "node", "]", "=", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", "+", "1", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "calculate_connectivity_score", "(", "node", ")", "diversity_score", "=", "calculate_visit_frequency_score", "(", "node", ")", "# Combined scoring mechanism with adjusted weights", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "diversity_weight", "*", "diversity_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.363852050927523}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "nearest_weight", "=", "0.5", "# Weight for nearest neighbor heuristic", "density_weight", "=", "0.3", "# Weight for cluster density", "frequency_penalty_weight", "=", "0.2", "# Weight for penalizing frequent visits", "random_explore_weight", "=", "0.1", "# Weight for random exploration", "nearest_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Dummy frequency data simulating visit counts (higher counts represent more visits)", "visit_frequency", "=", "{", "node", ":", "1", "for", "node", "in", "unvisited_nodes", "}", "# Initialize frequency counts", "for", "node", "in", "unvisited_nodes", ":", "nearest_distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_density", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "nearest_distance", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "frequency_penalty", "=", "visit_frequency", "[", "node", "]", "# Higher penalty for frequently visited nodes", "random_explore", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "# Random factor for exploration diversification", "score", "=", "(", "nearest_weight", "*", "-", "nearest_distance_to_node", ")", "+", "(", "density_weight", "*", "cluster_density", ")", "-", "(", "frequency_penalty_weight", "*", "frequency_penalty", ")", "+", "(", "random_explore_weight", "*", "random_explore", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.734158717041765}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "node_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate the proximity influence based on the number of nearby nodes", "threshold", "=", "10", "# Example threshold", "nearby_count", "=", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "threshold", ")", "# Calculate the distance penalty based on the distance to the destination", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "distance_penalty", "=", "distance_to_destination", "*", "0.3", "# Penalty weighted by 0.3", "# Calculate a modified score combining direct distance, influence, and penalty", "influence_score", "=", "nearby_count", "*", "0.5", "# Weight for nearby nodes", "node_scores", "[", "node", "]", "=", "direct_distance", "-", "influence_score", "+", "distance_penalty", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.244455041163539}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "historical_cost_weight", "=", "0.4", "# Weight for total cost of historical path", "unvisited_distance_weight", "=", "0.4", "# Weight for distance to unvisited nodes", "cluster_proximity_weight", "=", "0.2", "# Weight for proximity to clusters of unvisited nodes", "unvisited_node_count", "=", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", ":", "# Calculate total cost from current node to previously visited nodes", "historical_cost", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "node", "not", "in", "unvisited_nodes", "and", "node", "!=", "current_node", ")", "# Calculate average distance from current node to unvisited nodes", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "unvisited_node_count", "or", "1", ")", "# Calculate proximity to clusters of unvisited nodes", "cluster_proximity_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ">", "0", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate the score combining all aspects", "score", "=", "-", "historical_cost_weight", "*", "historical_cost", "-", "unvisited_distance_weight", "*", "average_distance_to_unvisited", "+", "cluster_proximity_weight", "*", "cluster_proximity_score", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 26.04202206317254}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "remaining_nodes_count", "=", "len", "(", "unvisited_nodes", ")", "adjustment_factor", "=", "(", "1", "-", "(", "remaining_nodes_count", "/", "len", "(", "distance_matrix", ")", ")", ")", "# Dynamic adjustment based on remaining nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty_score", "=", "adjustment_factor", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "direct_distance", "+", "penalty_score", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.592504328197133}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the degree of each node in the unvisited set", "node_degree", "=", "{", "node", ":", "sum", "(", "1", "for", "i", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "distance_matrix", "[", "node", "]", "[", "i", "]", ">", "0", ")", "for", "node", "in", "unvisited_nodes", "}", "# Calculate scores for each unvisited node", "scores", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "/", "(", "node_degree", "[", "node", "]", "+", "1", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the unvisited node with the minimum score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.3", "# Weight for connectivity to unvisited nodes", "potential_weight", "=", "0.3", "# Weight for potential based on remaining nodes", "penalty_factor", "=", "0.1", "# Penalty for distance from the destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average connectivity", "# Potential score based on the distance to the destination from unvisited nodes", "potential_score", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "dest", "]", "for", "dest", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Applying a penalty for distance to destination", "penalty_score", "=", "penalty_factor", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "potential_weight", "*", "potential_score", "-", "penalty_score", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.560484930318687}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Increased weight for direct distance", "cluster_weight", "=", "0.3", "# Weight for proximity to clusters of unvisited nodes", "future_savings_weight", "=", "0.15", "# Weight for potential future savings", "threshold_min", "=", "0.2", "# Minimum threshold for acceptability", "threshold_max", "=", "0.8", "# Maximum threshold for desirability", "# Function to calculate cluster score based on unvisited nodes", "def", "calculate_cluster_score", "(", "node", ")", ":", "if", "len", "(", "unvisited_nodes", ")", ">", "1", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "return", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_score", "=", "calculate_cluster_score", "(", "node", ")", "# Compute potential future savings", "potential_future_savings", "=", "sum", "(", "distance_matrix", "[", "other", "]", "[", "destination_node", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Scoring mechanism with threshold", "score", "=", "(", "distance_weight", "*", "(", "-", "direct_distance", ")", "+", "cluster_weight", "*", "cluster_score", "+", "future_savings_weight", "*", "potential_future_savings", ")", "if", "score", ">", "max_score", "and", "score", ">=", "threshold_min", ":", "max_score", "=", "score", "next_node", "=", "node", "# Implementing a fallback mechanism if no suitable node is found", "if", "max_score", "<", "threshold_min", ":", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "x", ":", "distance_matrix", "[", "current_node", "]", "[", "x", "]", ")", "return", "next_node"], "code_perf": 6.754127221530866}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "decay_factor", "=", "0.3", "# Decay factor for historical cost", "proximity_bonus_weight", "=", "0.7", "# Weight for bonus of proximity to previous nodes", "max_bonus_radius", "=", "2", "# Maximum distance within which proximity bonus applies", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "previous_nodes", "=", "[", "current_node", "]", "# Track previous nodes for proximity bonus", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "historical_cost", "=", "total_distance_to_destination", "/", "(", "len", "(", "previous_nodes", ")", "+", "1", ")", "# Average past costs", "# Calculate proximity bonus", "proximity_bonus", "=", "0", "if", "direct_distance", "<=", "max_bonus_radius", ":", "proximity_bonus", "=", "(", "max_bonus_radius", "-", "direct_distance", ")", "*", "proximity_bonus_weight", "# Bonus for being within radius", "# Score Calculation", "score", "=", "-", "(", "direct_distance", "+", "(", "historical_cost", "*", "decay_factor", ")", ")", "+", "proximity_bonus", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_remaining", "=", "total_distance_to_remaining", "/", "len", "(", "unvisited_nodes", ")", "unvisited_count_penalty", "=", "len", "(", "unvisited_nodes", ")", "/", "5.0", "# Penalty term based on remaining unvisited nodes", "direct_influence_weight", "=", "0.5", "# Adjusted weight for direct distance influence", "strategic_importance_weight", "=", "0.3", "# Adjusted weight for future path importance", "penalty_weight", "=", "0.2", "# Weight for unvisited count penalty", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "strategic_importance", "=", "strategic_importance_weight", "*", "(", "average_distance_to_remaining", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "penalty", "=", "penalty_weight", "*", "unvisited_count_penalty", "score", "=", "(", "direct_influence_weight", "*", "direct_distance", ")", "+", "strategic_importance", "+", "penalty", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.4257563991146025}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "nearest_weight", "=", "0.4", "# Weight focused on proximity to the nearest unvisited node", "isolation_penalty", "=", "0.3", "# Penalty for isolating unvisited nodes", "forward_look_weight", "=", "0.3", "# Weight for anticipated future steps", "# Calculate the nearest distance to an unvisited node", "nearest_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "proximity_score", "=", "-", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Closer nodes score higher", "isolation_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average connectivity penalty", "future_score", "=", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average distance to destination", "score", "=", "nearest_weight", "*", "proximity_score", "-", "isolation_penalty", "*", "isolation_score", "+", "forward_look_weight", "*", "future_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.974931194699994}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "heuristic_weight", "=", "0.7", "# Increase emphasis on future connections", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "return_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "connection_strength", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# New scoring mechanism based on travel cost and future potential", "cost", "=", "direct_distance", "+", "return_distance", "-", "(", "heuristic_weight", "*", "connection_strength", ")", "if", "cost", "<", "min_cost", ":", "min_cost", "=", "cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.472079044350373}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "total_distance_traveled", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "candidates", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "connectivity_factor", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "0", ")", "# Number of unvisited neighbors", "decay_factor", "=", "1", "/", "(", "1", "+", "total_distance_traveled", ")", "# Diminishing importance of distance traveled", "exploration_bonus", "=", "connectivity_factor", "/", "(", "1", "+", "distance_to_destination", ")", "# Higher for nodes with more connections", "score", "=", "(", "distance_to_node", "*", "decay_factor", "*", "0.5", ")", "+", "(", "distance_to_destination", "*", "0.3", ")", "-", "(", "exploration_bonus", "*", "0.2", ")", "candidates", ".", "append", "(", "(", "node", ",", "score", ")", ")", "next_node", "=", "min", "(", "candidates", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 15.38412015386094}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate the heuristic score for each unvisited node", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_from_node_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Score is calculated as the direct distance plus the estimated remaining distance to the destination", "score", "=", "distance_to_node", "+", "distance_from_node_to_destination", "scores", "[", "node", "]", "=", "score", "# Select the node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["# {This algorithm introduces a scoring mechanism that combines a dynamic weight based on the reciprocal of the distance to a node and a travel cost factor influenced by previously visited nodes, promoting exploration of nodes that balance proximity with travel history.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "total_travel_cost", "=", "sum", "(", "distance_matrix", "[", "previous_node", "]", "[", "current_node", "]", "for", "previous_node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "previous_node", "!=", "current_node", "and", "previous_node", "not", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Dynamic weight inversely related to distance to prioritize closer nodes", "distance_weight", "=", "1", "/", "(", "distance_to_node", "+", "1e-6", ")", "# Avoid division by zero", "# Scoring based on travel cost and distance weight", "score", "=", "distance_weight", "-", "(", "total_travel_cost", "/", "(", "len", "(", "distance_matrix", ")", "-", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "from", "collections", "import", "defaultdict", "def", "calculate_node_degree", "(", "node", ",", "unvisited", ",", "distance_matrix", ")", ":", "degree", "=", "0", "for", "neighbor", "in", "unvisited", ":", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<", "float", "(", "'inf'", ")", ":", "# Assuming float('inf') represents unconnected", "degree", "+=", "1", "return", "degree", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "alignment_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "degree", "=", "calculate_node_degree", "(", "node", ",", "unvisited_nodes", ",", "distance_matrix", ")", "# New scoring mechanism based on distance, alignment, and degree", "score", "=", "(", "-", "0.4", "*", "direct_distance", "+", "0.4", "*", "alignment_score", "+", "0.2", "*", "degree", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.078385722187273}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "exploration_weight", "=", "0.7", "# Weighting factor for promoting exploration", "node_attractiveness", "=", "{", "node", ":", "1", "/", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ">", "0", "else", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_neighbors", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "0", ")", "exploration_factor", "=", "remaining_neighbors", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "# Normalize exploration influence", "score", "=", "direct_distance", "*", "(", "1", "-", "exploration_weight", ")", "+", "exploration_weight", "*", "(", "1", "/", "(", "1", "+", "exploration_factor", ")", ")", "*", "node_attractiveness", "[", "node", "]", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 36.089471473202636}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_remaining", "=", "total_distance_to_remaining", "/", "len", "(", "unvisited_nodes", ")", "direct_influence_weight", "=", "0.4", "# Adjusted weight for direct distance influence", "future_cost_weight", "=", "0.4", "# Adjusted weight for future path estimation", "exploration_weight", "=", "0.2", "# New weight for exploration influence", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_cost", "=", "future_cost_weight", "*", "(", "average_distance_to_remaining", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "exploration_score", "=", "exploration_weight", "*", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "/", "2", ")", "# Encourages exploring farther nodes", "score", "=", "(", "direct_influence_weight", "*", "direct_distance", ")", "+", "future_cost", "+", "exploration_score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.530742360903318}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connections_to_unvisited", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "0", ")", "penalty_factor", "=", "1", "/", "(", "1", "+", "connections_to_unvisited", ")", "# Penalize nodes with more unvisited connections", "score", "=", "(", "penalty_factor", "*", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", ")", "-", "distance_to_next", "# Combine factors", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["# {The modified algorithm incorporates a balancing mechanism that weighs distance, connectivity, and the cumulative travel cost, implementing a decay factor to prioritize nodes that are closer in both distance and connection while considering overall route efficiency.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate scores based on a combination of distance, connectivity, and cumulative travel cost with a decay factor", "scores", "=", "{", "}", "decay_factor", "=", "0.5", "# Adjust the influence of connectivity and heuristic over time", "cumulative_travel_cost", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "if", "node", "!=", "current_node", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "heuristic_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "# Calculate the final score with a decay factor influencing connectivity and heuristic", "scores", "[", "node", "]", "=", "(", "distance_score", "+", "decay_factor", "*", "connectivity_score", "+", "decay_factor", "*", "heuristic_cost", "-", "cumulative_travel_cost", ")", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "risk_factor", "=", "0.5", "# Represents the risk-reward balance", "if", "unvisited_nodes", ":", "distance_mean_weight", "=", "0.5", "# Weight for mean distance to unvisited nodes", "penalty_weight", "=", "0.3", "# Weight for longer paths penalty", "proximity_weight", "=", "0.2", "# Weight for closeness to desired destinations", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "mean_distance", "=", "total_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate penalty for nodes that form longer paths", "penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "mean_distance", ")", "# Proximity score based on distance to the destination", "proximity_score", "=", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score incorporating risk and reward", "score", "=", "(", "distance_mean_weight", "*", "(", "-", "mean_distance", ")", "+", "penalty_weight", "*", "(", "-", "penalty", ")", "+", "proximity_weight", "*", "proximity_score", "*", "risk_factor", "+", "random", ".", "uniform", "(", "0", ",", "1", ")", ")", "# Adding randomness for exploration", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 22.033892690784583}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "dynamic_adjustment", "=", "1", "/", "(", "num_unvisited", "+", "1", ")", "# Decreases as unvisited nodes decrease", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "+", "distance_to_destination", "*", "dynamic_adjustment", "# Adding a penalty for being further away from the destination", "distance_from_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "penalty", "=", "0.5", "*", "distance_from_destination", "total_score", "=", "score", "+", "penalty", "if", "total_score", "<", "min_score", ":", "min_score", "=", "total_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_value", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.6", "# Weight for proximity preference", "cluster_weight", "=", "0.4", "# Weight for attractiveness of the cluster", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_cluster_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "average_cluster_distance", "=", "total_cluster_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "proximity_score", "=", "1", "/", "(", "1", "+", "direct_distance", ")", "# Higher for closer nodes", "attractiveness_score", "=", "(", "1", "/", "(", "1", "+", "average_cluster_distance", ")", ")", "*", "proximity_weight", "combined_score", "=", "(", "proximity_score", "*", "proximity_weight", ")", "+", "(", "attractiveness_score", "*", "cluster_weight", ")", "-", "direct_distance", "if", "combined_score", ">", "max_value", ":", "max_value", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.072542087521377}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "unvisited_nodes", "=", "np", ".", "array", "(", "list", "(", "unvisited_nodes", ")", ")", "distances", "=", "distance_matrix", "[", "current_node", ",", "unvisited_nodes", "]", "# Calculate the distance to the destination for each unvisited node", "to_destination_distances", "=", "distance_matrix", "[", "unvisited_nodes", ",", "destination_node", "]", "# Dynamic weight based on the number of unvisited nodes", "dynamic_weight", "=", "1.0", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Combine scores: distance + (dynamic_weight * to_destination_distance)", "scores", "=", "distances", "+", "dynamic_weight", "*", "to_destination_distances", "# Select the node with the minimum score", "next_node", "=", "unvisited_nodes", "[", "np", ".", "argmin", "(", "scores", ")", "]", "return", "next_node"], "code_perf": 7.081438908556759}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "proximity_weight", "=", "0.3", "# Weight for proximity to destination", "risk_penalty_weight", "=", "0.2", "# Weight for penalizing distant nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "risk_penalty", "=", "risk_penalty_weight", "*", "(", "direct_distance", "/", "(", "total_distance", "or", "1", ")", ")", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "proximity_score", "-", "risk_penalty", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.458306211167891}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "connectivity_scores", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_weight", "=", "connectivity_scores", "[", "node", "]", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "exploration_factor", "=", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "/", "(", "connectivity_scores", "[", "node", "]", "+", "1", ")", "penalty", "=", "max", "(", "0", ",", "connectivity_weight", "-", "direct_distance", ")", "score", "=", "direct_distance", "+", "penalty", "*", "exploration_factor", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 26.204007379529276}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "degree_weight", "=", "0.3", "# Weight for the degree of unvisited nodes", "future_saving_weight", "=", "0.2", "# Weight for future potential connections", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "degree_of_node", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", ">", "0", ")", "future_savings", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "score", "=", "(", "distance_weight", "*", "-", "direct_distance", ")", "+", "(", "degree_weight", "*", "degree_of_node", ")", "+", "(", "future_saving_weight", "*", "future_savings", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.568234696278633}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity to destination", "cost_efficiency_weight", "=", "0.3", "# Weight for historical cost efficiency", "connectivity_weight", "=", "0.2", "# Weight for connectivity density", "total_connections", "=", "len", "(", "unvisited_nodes", ")", "connections_density", "=", "{", "node", ":", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "float", "(", "'inf'", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "historical_cost", "=", "(", "total_distance_to_destination", "+", "direct_distance", ")", "/", "2", "# Historical cost as a simple average", "average_cost_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "total_connections", "or", "1", ")", "connectivity_score", "=", "connections_density", "[", "node", "]", "/", "(", "total_connections", "or", "1", ")", "score", "=", "-", "(", "direct_distance", "+", "historical_cost", ")", "+", "(", "average_cost_to_destination", "*", "cost_efficiency_weight", ")", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "(", "connectivity_weight", "*", "connectivity_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.383591448976137}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "potential_nodes", "=", "[", "]", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "efficiency_factor", "=", "(", "1", "/", "direct_distance", ")", "*", "(", "1", "+", "len", "(", "unvisited_nodes", ")", "/", "len", "(", "distance_matrix", ")", ")", "# Encourages nodes that contribute to efficiency", "penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "average_distance", ")", "*", "0.3", "# Reduced penalty for readability", "score", "=", "direct_distance", "+", "penalty", "/", "efficiency_factor", "# Incorporate weight of efficiency in scoring", "potential_nodes", ".", "append", "(", "(", "node", ",", "score", ")", ")", "next_node", "=", "min", "(", "potential_nodes", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "novelty_score", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "exploration_factor", "=", "random", ".", "uniform", "(", "0.1", ",", "1.0", ")", "# Random factor to enhance exploration", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connections_to_unvisited", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "novelty_score", "[", "node", "]", "=", "connections_to_unvisited", "*", "exploration_factor", "# Introduce a threshold mechanism for direct distance", "if", "direct_distance", "<", "5", ":", "# Example threshold", "distance_penalty", "=", "0", "else", ":", "distance_penalty", "=", "direct_distance", "weighted_score", "=", "(", "0.7", "*", "(", "3", "-", "novelty_score", "[", "node", "]", ")", "+", "0.3", "*", "distance_penalty", ")", "score", "=", "weighted_score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 26.04202206317254}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance", "cluster_weight", "=", "0.4", "# Weight for cluster potential savings", "detour_penalty_weight", "=", "0.1", "# Weight for detour penalties", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "adjusted_detour", "=", "max", "(", "0", ",", "direct_distance", "-", "total_distance_to_destination", ")", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "cluster_weight", "*", "cluster_average_distance", ")", "-", "(", "detour_penalty_weight", "*", "adjusted_detour", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.334607948742173}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "importance_weight", "=", "0.3", "# Weight for node importance", "penalty_weight", "=", "0.2", "# Weight for penalty on distant nodes", "# Function to calculate node importance based on connectivity to unvisited nodes", "def", "calculate_importance_score", "(", "node", ")", ":", "return", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "# Function to calculate penalty for distance from ideal path towards destination", "def", "calculate_penalty", "(", "node", ")", ":", "return", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "importance_score", "=", "calculate_importance_score", "(", "node", ")", "penalty_score", "=", "calculate_penalty", "(", "node", ")", "# Combined scoring mechanism with new factors", "score", "=", "(", "importance_weight", "*", "importance_score", "-", "distance_weight", "*", "direct_distance", "-", "penalty_weight", "*", "penalty_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.299468005409654}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "increase_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "proximity", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "increase_cost", "+", "0.5", "*", "proximity", "# Weighting proximity into the score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.6490879527083395}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "float", "(", "'inf'", ")", "# Connectivity score based on the number of unvisited neighbors", "connectivity_score", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "float", "(", "'inf'", ")", ")", "# Scoring: Minimize distance to next, maximize proximity to destination with connectivity", "score", "=", "distance_to_next", "+", "(", "1", "/", "(", "distance_to_destination", "+", "1e-6", ")", ")", "-", "(", "0.1", "*", "connectivity_score", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "cluster_weight", "=", "0.3", "# Weight for cluster potential savings", "detour_penalty_weight", "=", "0.1", "# Weight for detour penalties", "trend_weight", "=", "0.2", "# Weight for considering frequent nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Dummy trend data simulating which nodes have been visited more frequently (for demonstration)", "visit_trend", "=", "{", "node", ":", "1", "for", "node", "in", "unvisited_nodes", "}", "# Initialize trend counts", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "adjusted_detour", "=", "max", "(", "0", ",", "direct_distance", "-", "total_distance_to_destination", ")", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Trend factor influence, assuming higher frequencies result in a small advantage", "trend_factor", "=", "visit_trend", "[", "node", "]", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "cluster_weight", "*", "cluster_average_distance", ")", "-", "(", "detour_penalty_weight", "*", "adjusted_detour", ")", "+", "(", "trend_weight", "*", "trend_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.325539366493462}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "node_scores", "=", "{", "}", "recent_visits", "=", "[", "current_node", "]", "# To keep track of the last visited nodes, starting with the current node", "# Calculate a score for each unvisited node based on distance and opportunity cost", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "opportunity_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "recent", "]", "for", "recent", "in", "recent_visits", ")", "/", "(", "len", "(", "recent_visits", ")", "+", "1", ")", "# Composite score considering direct distance and opportunity cost", "node_scores", "[", "node", "]", "=", "direct_distance", "-", "opportunity_cost", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "heuristic_weight", "=", "0.7", "# Weight for direct distance", "attractiveness_weight", "=", "0.3", "# Weight for average distance to remaining unvisited nodes", "average_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "-", "(", "heuristic_weight", "*", "direct_distance", ")", "+", "(", "attractiveness_weight", "*", "average_distance_to_remaining", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "risk_weight", "=", "0.4", "# Weight for risk assessment of future paths", "proximity_weight", "=", "0.2", "# Weight for spatial proximity to remaining nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate risk based on potential distance to remaining nodes", "risk_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Calculate proximity score based on closeness to unvisited nodes", "proximity_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "+", "1e-5", ")", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Avoid division by zero", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "risk_weight", "*", "risk_score", "+", "proximity_weight", "*", "proximity_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 12.5396029258563}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.3", "# Weight for direct distance", "cluster_proximity_weight", "=", "0.4", "# Weight for proximity to clusters of unvisited nodes", "time_saving_weight", "=", "0.3", "# Weight for potential time saving", "length_penalty_weight", "=", "0.1", "# Penalty for longer tour paths", "# Function to calculate cluster density based on unvisited nodes", "def", "calculate_cluster_density", "(", "node", ")", ":", "cluster_density", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "cluster_density", "+=", "distance_matrix", "[", "node", "]", "[", "other", "]", "return", "cluster_density", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Function to calculate length penalty for long paths", "def", "calculate_length_penalty", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_density", "=", "calculate_cluster_density", "(", "node", ")", "length_penalty", "=", "calculate_length_penalty", "(", "node", ")", "# Combined scoring mechanism", "score", "=", "(", "-", "direct_distance_weight", "*", "direct_distance", "+", "cluster_proximity_weight", "*", "cluster_density", "+", "time_saving_weight", "*", "(", "sum", "(", "distance_matrix", "[", "other", "]", "[", "destination_node", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "-", "length_penalty_weight", "*", "length_penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.4264398178461715}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_distance_to_next", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance_to_next", "/", "len", "(", "unvisited_nodes", ")", "count_unvisited", "=", "len", "(", "unvisited_nodes", ")", "dynamic_weight", "=", "1", "/", "count_unvisited", "# Dynamic weight based on unvisited count", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "updated_penalty", "=", "dynamic_weight", "*", "(", "average_distance", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "score", "=", "direct_distance", "+", "updated_penalty", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.7950214267763425}
{"code_tokens": ["# {The algorithm prioritizes nodes based on a balance between direct distance to unvisited nodes and their average distance from all unvisited nodes, incorporating a dynamic weight that increases with the number of remaining nodes to account for overall exploration.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "num_unvisited_nodes", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Weight increases with remaining nodes to encourage distant exploration", "exploration_weight", "=", "num_unvisited_nodes", "**", "0.5", "score", "=", "direct_distance", "+", "average_distance_to_unvisited", "/", "exploration_weight", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "random_exploration_weight", "=", "0.1", "penalty_factor", "=", "0.5", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate distance penalty based on how far the node is from the current node", "distance_penalty", "=", "penalty_factor", "*", "(", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "-", "direct_distance", ")", "# Introduce randomness to select less visited nodes", "random_score", "=", "random", ".", "uniform", "(", "0", ",", "random_exploration_weight", ")", "# Combined score: direct distance + distance penalty + randomness", "score", "=", "direct_distance", "+", "distance_penalty", "+", "random_score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.857017689684691}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Define penalty parameters", "penalty_factor", "=", "1.0", "# Base penalty modifier", "distance_decay_factor", "=", "0.1", "# How much penalty decays based on unvisited nodes", "last_visited_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "best_next_node", "=", "None", "best_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Decay the penalty based on the number of unvisited nodes", "decay_penalty", "=", "penalty_factor", "*", "last_visited_distance", "*", "(", "1", "-", "distance_decay_factor", "*", "len", "(", "unvisited_nodes", ")", ")", "# Calculate total cost with dynamic penalty", "total_cost", "=", "direct_distance", "+", "decay_penalty", "if", "total_cost", "<", "best_cost", ":", "best_cost", "=", "total_cost", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_penalty_weight", "=", "0.4", "# Weight for distance from destination", "average_distance_weight", "=", "0.4", "# Weight for average distance to other unvisited nodes", "recency_reward_weight", "=", "0.2", "# Weight for recency of visitation", "# Time or visit tracking may be represented by a global or external array (not implemented here)", "# For the sake of demonstration, we'll assume recency is known (a placeholder value).", "recency_tracker", "=", "{", "node", ":", "1", "for", "node", "in", "unvisited_nodes", "}", "# Placeholder for recency values", "for", "node", "in", "unvisited_nodes", ":", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Simple recency reward based on placeholder values", "recency_reward", "=", "recency_tracker", "[", "node", "]", "# This would normally be dynamic", "score", "=", "(", "(", "average_distance_to_unvisited", "*", "average_distance_weight", ")", "-", "(", "distance_to_destination", "*", "distance_penalty_weight", ")", "+", "recency_reward", "*", "recency_reward_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 12.711844106937047}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to destination", "diversity_weight", "=", "0.4", "# Weight for diversity from previously visited nodes", "cluster_penalty_factor", "=", "1.2", "# Penalty based on clustering of unvisited nodes", "distances_to_unvisited", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "mean_distance", "=", "sum", "(", "distances_to_unvisited", ")", "/", "(", "len", "(", "distances_to_unvisited", ")", "or", "1", ")", "cluster_penalty", "=", "sum", "(", "max", "(", "0", ",", "mean_distance", "-", "d", ")", "for", "d", "in", "distances_to_unvisited", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "diversity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "visited_node", "]", "for", "visited_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_distance", "+", "cluster_penalty_factor", "*", "cluster_penalty", ")", "-", "(", "diversity_weight", "*", "diversity_score", ")", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.996833099134052}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "tabu_list", "=", "[", "]", "tabu_tenure", "=", "3", "# Restrict the last three visited nodes", "best_next_node", "=", "None", "minimal_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Dynamic score calculation with a decay based on tabu tenure", "tabu_penalty", "=", "1", "if", "node", "in", "tabu_list", "else", "0.5", "# Penalize recently visited nodes", "score", "=", "(", "distance_to_node", "+", "distance_to_destination", ")", "*", "tabu_penalty", "+", "random", ".", "uniform", "(", "0", ",", "0.1", ")", "if", "score", "<", "minimal_score", ":", "minimal_score", "=", "score", "best_next_node", "=", "node", "# Update the tabu list", "tabu_list", ".", "append", "(", "current_node", ")", "if", "len", "(", "tabu_list", ")", ">", "tabu_tenure", ":", "tabu_list", ".", "pop", "(", "0", ")", "# Remove the oldest entry in the tabu list", "return", "best_next_node"], "code_perf": 8.698633011601215}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Define the number of neighbors to consider", "k", "=", "min", "(", "3", ",", "len", "(", "unvisited_nodes", ")", ")", "# Adjust k based on available unvisited nodes", "distances", "=", "[", "]", "# Gather distances to all unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "distances", ".", "append", "(", "(", "node", ",", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", ")", "# Sort by distance and take the k nearest nodes", "distances", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "nearest_neighbors", "=", "[", "node", "for", "node", ",", "_", "in", "distances", "[", ":", "k", "]", "]", "# Calculate average distance to the nearest neighbors", "avg_distance", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "nearest_neighbors", "]", ")", "# Select the neighbor with the closest distance to the average", "next_node", "=", "min", "(", "nearest_neighbors", ",", "key", "=", "lambda", "x", ":", "abs", "(", "distance_matrix", "[", "current_node", "]", "[", "x", "]", "-", "avg_distance", ")", ")", "return", "next_node"], "code_perf": 11.374218016907516}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate average distance to unvisited nodes", "distances", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "avg_distance", "=", "np", ".", "mean", "(", "distances", ")", "# Score nodes based on direct distance, distance to destination, and average distance", "node_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Score adjustment: direct distance, penalize for being far from destination", "score", "=", "direct_distance", "+", "distance_to_destination", "-", "(", "avg_distance", "*", "0.5", ")", "node_scores", "[", "node", "]", "=", "score", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "direct_distance_weight", "=", "0.6", "# Weight for direct distance", "group_savings_weight", "=", "0.3", "# Weight for potential group savings", "local_density_weight", "=", "0.1", "# Weight for local density of unvisited nodes", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Group savings: distance to the nearest unvisited node", "nearest_unvisited_distance", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", ")", "if", "unvisited_count", ">", "1", "else", "0", "# Local density: 1 / average distance to all unvisited nodes", "local_density", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "unvisited_count", "or", "1", ")", "density_score", "=", "1", "/", "local_density", "if", "local_density", ">", "0", "else", "0", "# Score calculation", "score", "=", "-", "direct_distance_weight", "*", "direct_distance", "+", "group_savings_weight", "*", "nearest_unvisited_distance", "+", "local_density_weight", "*", "density_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.820527725076028}
{"code_tokens": ["import", "random", "import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "desirability_factor", "=", "1", "/", "(", "1", "+", "avg_distance", "-", "distance_score", ")", "# Encourage visiting nodes that are closer to the avg", "exploration_factor", "=", "random", ".", "uniform", "(", "0.5", ",", "1.5", ")", "# Introduce randomness in scores", "scores", "[", "node", "]", "=", "desirability_factor", "*", "exploration_factor", "# Select the node with the highest score", "next_node", "=", "max", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 35.01296650933794}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "nearest_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "avg_distance_to_destination", ")", "*", "0.5", "score", "=", "direct_distance", "+", "penalty", "+", "nearest_distance", "*", "0.1", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm utilizes a priority scoring system that combines the distance to the node and the distance to the destination to select the next node.}", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Score is calculated as a balance of the distance to the node and the distance to the destination", "score", "=", "distance_to_node", "+", "0.5", "*", "distance_to_destination", "scores", "[", "node", "]", "=", "score", "# Select the node with the lowest score", "next_node", "=", "min", "(", "scores", ".", "keys", "(", ")", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "adaptive_threshold", "=", "min", "(", "average_distance", "*", "1.2", ",", "10", ")", "# Dynamic threshold based on average distance", "candidates", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance_to_node", "<", "adaptive_threshold", ":", "candidates", ".", "append", "(", "(", "node", ",", "distance_to_node", ")", ")", "if", "not", "candidates", ":", "# If no candidates within adaptive threshold, select the closest node", "candidates", "=", "[", "(", "node", ",", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "for", "node", "in", "unvisited_nodes", "]", "next_node", "=", "min", "(", "candidates", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_factor", "=", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", ")", "if", "unvisited_nodes", "else", "0", "score", "=", "distance_to_node", "+", "heuristic_factor", "# Weighted score based on distance and connectivity", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate total distances to unvisited nodes", "total_distance", "=", "np", ".", "sum", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "# Score nodes based on their direct distance and their connectivity influence", "node_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate the connectivity score: penalty for nodes with close neighbors", "connectivity_penalty", "=", "np", ".", "sum", "(", "[", "1", "/", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "for", "neighbor", "in", "unvisited_nodes", "if", "neighbor", "!=", "node", "]", ")", "# Combined score: direct distance + average distance to unvisited - connectivity penalty", "score", "=", "direct_distance", "+", "(", "total_distance", "/", "len", "(", "unvisited_nodes", ")", ")", "-", "connectivity_penalty", "node_scores", "[", "node", "]", "=", "score", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 28.81442622590815}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "visit_counts", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "# Track visit frequency", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "visit_penalty", "=", "visit_counts", "[", "node", "]", "*", "0.3", "# Diminishing return based on frequency", "exploration_factor", "=", "(", "1", "/", "(", "1", "+", "direct_distance", ")", ")", "*", "(", "1", "/", "(", "1", "+", "distance_to_destination", ")", ")", "# Encourage exploration", "score", "=", "(", "direct_distance", "+", "0.5", "*", "(", "avg_distance_to_destination", "-", "distance_to_destination", ")", "+", "visit_penalty", "-", "0.5", "*", "exploration_factor", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "# Increment visit count for the selected node", "if", "next_node", ":", "visit_counts", "[", "next_node", "]", "+=", "1", "return", "next_node"], "code_perf": 6.666955885514359}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for distance minimization", "density_weight", "=", "0.3", "# Weight for node density", "penalty_weight", "=", "0.2", "# Weight for penalty on already visited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "node_density", "=", "sum", "(", "1", "for", "next_node", "in", "unvisited_nodes", "if", "next_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "<", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "visited_penalty", "=", "penalty_weight", "*", "(", "1", "if", "node", "in", "unvisited_nodes", "else", "0", ")", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", ")", "+", "(", "node_density", "*", "density_weight", ")", "-", "visited_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 12.638197131692547}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "temporal_penalty_factor", "=", "0.5", "# Factor to discourage immediate cycling", "synergy_factor", "=", "1.3", "# Factor to enhance score based on synergy with previous nodes", "historical_weight", "=", "0.2", "# Weight to consider the historical distance", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.3", "# Weight for connectivity to unvisited nodes", "loop_closure_weight", "=", "0.2", "# Weight for forming shorter loops", "future_path_weight", "=", "0.1", "# Weight for potential future path lengths", "# Historical distance traveled could be updated outside of this function", "historical_distance", "=", "sum", "(", "distance_matrix", "[", "previous_node", "]", "[", "current_node", "]", "for", "previous_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Estimate potential loop closure score considering closeness to the destination", "loop_closure_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score incorporating the dimensions", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "loop_closure_weight", "*", "loop_closure_score", "+", "future_path_weight", "*", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "# Apply temporal penalty for nodes directly leading to already visited nodes", "if", "current_node", "in", "unvisited_nodes", ":", "penalty_score", "=", "-", "temporal_penalty_factor", "*", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "+=", "penalty_score", "# Synergy bonus for nodes bridging gaps between previously visited nodes and the destination", "synergy_bonus", "=", "synergy_factor", "*", "(", "1.0", "/", "(", "1", "+", "historical_distance", ")", ")", "score", "*=", "(", "1", "+", "synergy_bonus", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.696674800295234}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_penalty", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_penalty_weight", "=", "0.5", "# Weight for direct distance consideration", "unvisited_bonus_weight", "=", "0.5", "# Weight for visiting unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "return_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate the penalty based on direct distance and the possible return distance", "total_penalty", "=", "direct_distance", "+", "return_distance", "# Calculate potential gain by considering the average distance to other unvisited nodes", "unvisited_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "potential_gain_average", "=", "unvisited_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "# Calculate the overall score", "score", "=", "-", "(", "direct_penalty_weight", "*", "total_penalty", ")", "+", "(", "unvisited_bonus_weight", "*", "potential_gain_average", ")", "if", "score", "<", "min_penalty", ":", "min_penalty", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 32.64005620929635}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate connection strength based on the number of direct connections to unvisited nodes", "connection_strength", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "float", "(", "'inf'", ")", ")", "# Combined score: balance connection strength and travel distances", "combined_score", "=", "connection_strength", "/", "(", "distance_to_next", "+", "1", ")", "-", "(", "0.5", "*", "distance_to_destination", ")", "if", "combined_score", ">", "best_score", ":", "best_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.100253941829304}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "visit_count", "=", "{", "node", ":", "0", "for", "node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "}", "# Track visit counts", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "len", "(", "[", "nn", "for", "nn", "in", "unvisited_nodes", "if", "nn", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "nn", "]", "<", "np", ".", "inf", "]", ")", "# Update visit bias: the less visited, the better score", "least_visited_score", "=", "-", "visit_count", "[", "node", "]", "scores", "[", "node", "]", "=", "distance_to_node", "-", "connectivity_score", "*", "0.1", "+", "least_visited_score", "*", "0.2", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "connectivity_weight", "=", "0.4", "# Weight for connectivity score", "historical_visitation_weight", "=", "0.4", "# Weight for historical visitation cost", "detour_penalty_weight", "=", "0.2", "# Weight for detour penalty", "total_visitation_cost", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "node", "!=", "current_node", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "connectivity_weight", "*", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", ")", "historical_visitation_cost", "=", "historical_visitation_weight", "*", "(", "total_visitation_cost", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "detour_penalty", "=", "detour_penalty_weight", "*", "max", "(", "0", ",", "direct_distance", "-", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", ")", "score", "=", "-", "direct_distance", "+", "connectivity_score", "-", "historical_visitation_cost", "-", "detour_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 26.872406824829234}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "(", "0.5", "*", "distance_to_node", ")", "+", "(", "0.5", "*", "average_distance", ")", "*", "random", ".", "uniform", "(", "0.8", ",", "1.2", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.001573536772684}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "clustering_factor", "=", "0.6", "# Weight for proximity to clusters", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.3", "# Weight for direct distance", "cluster_weight", "=", "0.5", "# Weight for cluster proximity", "destination_alignment_weight", "=", "0.2", "# Weight for alignment towards destination", "clusters", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_current", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance_to_current", "not", "in", "clusters", ":", "clusters", "[", "distance_to_current", "]", "=", "[", "]", "clusters", "[", "distance_to_current", "]", ".", "append", "(", "node", ")", "for", "cluster_distance", ",", "nodes", "in", "clusters", ".", "items", "(", ")", ":", "cluster_score", "=", "0", "for", "node", "in", "nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_score", "+=", "-", "distance_weight", "*", "direct_distance", "# Estimate score for alignment towards final destination", "destination_alignment_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "cluster_score", "+=", "destination_alignment_weight", "*", "destination_alignment_score", "# Calculate the final score based on the average score of the cluster", "average_cluster_score", "=", "cluster_score", "/", "(", "len", "(", "nodes", ")", "or", "1", ")", "combined_score", "=", "average_cluster_score", "+", "clustering_factor", "*", "(", "1", "/", "(", "1", "+", "cluster_distance", ")", ")", "if", "combined_score", ">", "max_score", ":", "max_score", "=", "combined_score", "next_node", "=", "nodes", "[", "0", "]", "# Choose the first node in the cluster (arbitrary choice)", "return", "next_node"], "code_perf": 6.616793518836077}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Calculate distances to destination", "destination_distances", "=", "{", "node", ":", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Calculate a weight based on structural connectivity", "connection_weights", "=", "{", "node", ":", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<=", "5", ")", "for", "node", "in", "unvisited_nodes", "}", "# Normalize connection weights", "max_connections", "=", "max", "(", "connection_weights", ".", "values", "(", ")", ",", "default", "=", "1", ")", "connection_weights", "=", "{", "node", ":", "weight", "/", "max_connections", "for", "node", ",", "weight", "in", "connection_weights", ".", "items", "(", ")", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "destination_distances", "[", "node", "]", "# New scoring mechanism", "score", "=", "direct_distance", "+", "0.7", "*", "distance_to_destination", "-", "0.3", "*", "connection_weights", "[", "node", "]", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.6455935091714355}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "distance_to_node", "+", "(", "distance_to_destination", "*", "0.5", ")", "# Weighing the distance to destination", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "clustering_weight", "=", "0.4", "# Weight for dynamic clustering of unvisited nodes", "destination_proximity_weight", "=", "0.1", "# Weight for proximity to the destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculating clustering factor as the inverse of average distance to other unvisited nodes", "if", "len", "(", "unvisited_nodes", ")", ">", "1", ":", "clustering_factor", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "clustering_score", "=", "1", "/", "clustering_factor", "if", "clustering_factor", ">", "0", "else", "0", "else", ":", "clustering_score", "=", "0", "# Proximity score to the destination", "destination_proximity_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Distance to the destination node", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "clustering_weight", "*", "clustering_score", "-", "destination_proximity_weight", "*", "destination_proximity_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.6808718702107}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "connectivity_weight", "=", "0.4", "# Weight for connectivity among unvisited nodes", "direct_distance_weight", "=", "0.6", "# Weight for direct distance to next node", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_others", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "connectivity_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "next_next", "]", "for", "next_next", "in", "unvisited_nodes", "if", "next_next", "!=", "node", ")", "# Inverse distance to others", "score", "=", "(", "direct_distance_weight", "*", "(", "-", "direct_distance", "+", "total_distance_to_destination", ")", "+", "connectivity_weight", "*", "connectivity_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.315490431967753}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_distance", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "min_distance_weight", "=", "0.7", "# Weight for minimum distance advantage", "exploration_weight", "=", "0.3", "# Weight for future exploration potential", "# Estimate potential future paths to unvisited nodes", "future_exploration", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Score calculation considering both direct distance and future exploration", "score", "=", "(", "min_distance_weight", "*", "(", "1", "/", "(", "direct_distance", "+", "1e-10", ")", ")", ")", "+", "(", "exploration_weight", "*", "future_exploration", ")", "if", "score", "<", "min_distance", ":", "min_distance", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 36.1397423465301}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "shuffled_nodes", "=", "list", "(", "unvisited_nodes", ")", "random", ".", "shuffle", "(", "shuffled_nodes", ")", "max_distance_to_others", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "shuffled_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "exploration_factor", "=", "0.2", "*", "(", "max_distance_to_others", "-", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "score", "=", "direct_distance", "-", "exploration_factor", "# Encourage visiting farther nodes", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "novelty_factor", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "decay_factor", "=", "0.8", "# Decay factor for novelty score", "importance_weight", "=", "0.5", "# Weighting between distance and novelty", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "novelty_penalty", "=", "novelty_factor", "[", "node", "]", "*", "decay_factor", "if", "novelty_factor", "[", "node", "]", ">", "0", "else", "0", "distance_score", "=", "(", "direct_distance", "+", "novelty_penalty", ")", "*", "(", "1", "-", "importance_weight", ")", "connectivity_score", "=", "(", "connectivity_score", "-", "1", ")", "*", "importance_weight", "score", "=", "distance_score", "+", "connectivity_score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "novelty_factor", "[", "node", "]", "+=", "1", "# Update novelty factor", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance consideration", "future_savings_weight", "=", "0.3", "# Weight for potential future savings", "diversity_weight", "=", "0.1", "# Weight for diversity in selections", "decay_factor_weight", "=", "0.1", "# Weight for reducing influence of frequently visited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Dummy historical visit data simulating visits (for demonstration)", "visit_counts", "=", "{", "node", ":", "1", "for", "node", "in", "unvisited_nodes", "}", "# Visit counts for each node", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "potential_future_savings", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "# Decay factor to prioritize less frequently visited nodes", "decay_factor", "=", "1", "/", "(", "visit_counts", "[", "node", "]", ")", "score", "=", "(", "distance_weight", "*", "-", "direct_distance", ")", "+", "(", "future_savings_weight", "*", "potential_future_savings", ")", "+", "(", "diversity_weight", "*", "decay_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.856851353459207}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate total impact score", "score", "=", "distance_to_node", "+", "distance_to_destination", "# Select the node with the minimum score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "cluster_weight", "=", "0.3", "# Weight for cluster potential savings", "triangular_weight", "=", "0.3", "# Weight for triangular distance", "penalty_weight", "=", "0.1", "# Weight for penalty on longer paths", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "triangular_distance", "=", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "direct_distance", ")", "/", "2", "penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "other_node", "]", ">", "direct_distance", ")", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "cluster_weight", "*", "cluster_average_distance", ")", "+", "(", "triangular_weight", "*", "triangular_distance", ")", "-", "(", "penalty_weight", "*", "penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 35.06943805162625}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.35", "# Adjusted weight for direct distance", "connectivity_weight", "=", "0.25", "# Adjusted weight for connectivity to unvisited nodes", "efficiency_weight", "=", "0.15", "# Adjusted weight for route efficiency", "destination_weight", "=", "0.25", "# Increased weight for proximity to destination", "# Calculate congestion factor based on proximity to destination", "congestion_factor", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average connectivity", "# Efficiency score with higher contributions from nodes close to the destination", "efficiency_score", "=", "(", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "*", "(", "1", "/", "(", "1", "+", "congestion_factor", ")", ")", "# Proximity score reflecting penalty for distance to destination", "proximity_penalty", "=", "1", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "efficiency_weight", "*", "efficiency_score", "-", "destination_weight", "*", "proximity_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.404923112841126}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "accessibility_weight", "=", "0.5", "# Weight for immediate accessibility", "future_savings_weight", "=", "0.3", "# Weight for potential savings from remaining nodes", "distance_penalty_weight", "=", "0.2", "# Weight for distance penalty", "# Calculate total distance from current_node to each unvisited node", "overall_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_savings", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Accessibility is inversely related to the distance to the node", "accessibility_score", "=", "(", "1", "/", "(", "direct_distance", "+", "1", ")", ")", "# Adding 1 to avoid division by zero", "# Dynamic penalty based on how far the current node is from the anticipated path", "distance_penalty", "=", "(", "direct_distance", "/", "overall_distance_to_unvisited", ")", "if", "overall_distance_to_unvisited", "else", "0", "score", "=", "(", "accessibility_weight", "*", "accessibility_score", "+", "future_savings_weight", "*", "future_savings", "-", "distance_penalty_weight", "*", "distance_penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.376851228481168}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate the proximity to the destination with a negative influence", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Heuristic: Incorporate the count of unvisited nodes for future considerations", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "heuristic_factor", "=", "1", "/", "(", "1", "+", "unvisited_count", ")", "# Combine the distance with the heuristic factor", "score", "=", "distance_to_node", "*", "(", "1", "+", "heuristic_factor", ")", "+", "distance_to_destination", "*", "heuristic_factor", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 7.059347977712101}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_importance_weight", "=", "0.4", "# Weight for connectivity to nearest unvisited nodes", "future_potential_weight", "=", "0.2", "# Weight for potential benefit based on node distribution", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "nearest_distance", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Using a density score that penalizes nodes further away from the center of unvisited nodes", "average_position", "=", "sum", "(", "node", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "distance_to_average", "=", "abs", "(", "node", "-", "average_position", ")", "density_score", "=", "1", "/", "(", "1", "+", "distance_to_average", ")", "# Closer to average is better", "score", "=", "-", "direct_distance_weight", "*", "direct_distance", "+", "connectivity_importance_weight", "*", "nearest_distance", "+", "future_potential_weight", "*", "density_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.120560295040594}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Create a score dictionary for each unvisited node based on distance and penalties", "score_dict", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "0.1", "*", "distance", "# Apply a minimal penalty to encourage exploration", "score", "=", "distance", "+", "penalty", "# Total score considers distance and penalty", "score_dict", "[", "node", "]", "=", "score", "# Find the nodes with the minimum score", "min_score", "=", "min", "(", "score_dict", ".", "values", "(", ")", ")", "best_candidates", "=", "[", "node", "for", "node", ",", "score", "in", "score_dict", ".", "items", "(", ")", "if", "score", "==", "min_score", "]", "# Introduce random selection among the best candidates", "if", "best_candidates", ":", "return", "random", ".", "choice", "(", "best_candidates", ")", "return", "None"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Step 1: Cluster unvisited nodes based on proximity", "cluster_threshold", "=", "5", "# Maximum distance to be considered in the same cluster", "clusters", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "<=", "cluster_threshold", ":", "clusters", ".", "setdefault", "(", "current_node", ",", "[", "]", ")", ".", "append", "(", "node", ")", "# Step 2: Find the nearest cluster", "nearest_cluster", "=", "clusters", ".", "get", "(", "current_node", ",", "unvisited_nodes", ")", "# Step 3: Compute scores within the nearest cluster", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "nearest_cluster", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Score is inversely proportional to the distance", "score", "=", "direct_distance", "# Lower score for closer nodes", "# Evaluate the desirability based on closeness to other unvisited nodes in the cluster", "desirability", "=", "sum", "(", "1", "for", "n", "in", "nearest_cluster", "if", "node", "!=", "n", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "score", "-=", "desirability", "/", "len", "(", "nearest_cluster", ")", "# Encourage selection of connected nodes", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "accessibility_weight", "=", "0.4", "# Weight for average distance to other unvisited nodes", "proximity_weight", "=", "0.2", "# Weight for proximity to destination", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_accessibility", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "proximity_score", "=", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1e-6", ")", ")", "# Adding small value to avoid division by zero", "score", "=", "-", "(", "direct_distance", "*", "distance_weight", ")", "+", "(", "average_accessibility", "*", "accessibility_weight", ")", "+", "(", "proximity_score", "*", "proximity_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.457122410124521}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "base_weight", "=", "0.5", "# Base weight for distance", "density_weight", "=", "0.5", "# Weight for unvisited node density", "remaining_nodes", "=", "len", "(", "unvisited_nodes", ")", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "unvisited_density", "=", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "remaining_nodes", "or", "1", ")", ")", "# Dynamic weight adjustment based on remaining unvisited nodes", "dynamic_weight", "=", "base_weight", "*", "(", "1", "-", "(", "remaining_nodes", "/", "len", "(", "distance_matrix", ")", ")", ")", "score", "=", "-", "(", "direct_distance", "*", "dynamic_weight", ")", "+", "(", "unvisited_density", "*", "density_weight", ")", "+", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "(", "1", "-", "dynamic_weight", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.352234756554486}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm evaluates nodes based on a combination of the nearest unvisited node and the heuristic of remaining distance to the destination, focusing on both immediate proximity and the overall path efficiency.}", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristics_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "distance_to_next", "+", "0.5", "*", "heuristics_to_destination", "# Prioritize short-term and long-term efficiency", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance to the destination", "connectivity_weight", "=", "0.3", "# Weight for number of direct connections to unvisited nodes", "penalty_weight", "=", "0.2", "# Weight for cumulative distance penalty", "direct_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "num_connections", "=", "{", "node", ":", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", ">", "0", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "num_connections", "[", "node", "]", "# How many unvisited nodes are directly reachable", "cumulative_distance_penalty", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "prev_node", "]", "for", "prev_node", "in", "unvisited_nodes", "if", "prev_node", "!=", "current_node", ")", "score", "=", "(", "connectivity_score", "*", "connectivity_weight", ")", "-", "(", "direct_distance", "*", "distance_weight", ")", "-", "(", "cumulative_distance_penalty", "*", "penalty_weight", ")", "+", "(", "1", "/", "(", "1", "+", "direct_distance_to_destination", ")", ")", "# Attractiveness to destination", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_combined_score", "=", "float", "(", "'-inf'", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "float", "(", "'inf'", ")", ")", "# Combined score: balance between average distance and connectivity", "combined_score", "=", "(", "connectivity_score", "/", "len", "(", "unvisited_nodes", ")", ")", "-", "(", "distance_to_next", "/", "average_distance", ")", "if", "combined_score", ">", "max_combined_score", ":", "max_combined_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "sampled_candidates", "=", "random", ".", "sample", "(", "unvisited_nodes", ",", "min", "(", "5", ",", "len", "(", "unvisited_nodes", ")", ")", ")", "# Sample up to 5 candidates", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "for", "candidate", "in", "sampled_candidates", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate", "]", "remaining_distance", "=", "distance_matrix", "[", "candidate", "]", "[", "destination_node", "]", "score", "=", "immediate_distance", "+", "(", "remaining_distance", "/", "len", "(", "unvisited_nodes", ")", ")", "# Penalize based on remaining unvisited nodes", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "candidate", "return", "best_next_node"], "code_perf": 13.724544456722091}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "(", "num_unvisited", "-", "1", ")", "*", "0.5", "# Penalty for remaining unvisited nodes", "avg_distance_to_unvisited", "=", "total_distance", "/", "num_unvisited", "score", "=", "(", "direct_distance", "*", "0.4", ")", "+", "(", "penalty", "*", "0.3", ")", "+", "(", "avg_distance_to_unvisited", "*", "0.3", ")", "# Hybrid score", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.3", "# Weight for connectivity to unvisited nodes", "diversity_weight", "=", "0.3", "# Weight for encouraging less frequently visited nodes", "# Function to calculate connectivity score based on unvisited nodes", "def", "calculate_connectivity_score", "(", "node", ")", ":", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "return", "connectivity_score", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Function to assess visit frequency based score", "def", "calculate_visit_frequency_score", "(", "node", ")", ":", "return", "1", "/", "(", "1", "+", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", ")", "# Initialize visit counts for nodes if not present", "global", "node_visit_counts", "node_visit_counts", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "# Update visit counts at each call", "node_visit_counts", "[", "node", "]", "=", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", "+", "1", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "calculate_connectivity_score", "(", "node", ")", "diversity_score", "=", "calculate_visit_frequency_score", "(", "node", ")", "# Combined scoring mechanism with new diversity factor", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "diversity_weight", "*", "diversity_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.355321178255981}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_penalty", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_weight", "=", "0.4", "# Weight for immediate travel distance", "return_weight", "=", "0.4", "# Weight for estimated return cost", "detour_penalty", "=", "0.2", "# Weight for detours", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "estimated_return_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "detour_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "penalty", "=", "(", "direct_distance", "*", "immediate_weight", ")", "+", "(", "estimated_return_distance", "*", "return_weight", ")", "+", "(", "detour_cost", "*", "detour_penalty", ")", "if", "penalty", "<", "min_penalty", ":", "min_penalty", "=", "penalty", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.638255925482245}
{"code_tokens": ["# {This algorithm employs a scoring mechanism that integrates a penalty for remaining unvisited nodes based on their average proximity to the current node, while also considering the minimum potential cost to the destination.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "# Calculate the average distance to unvisited nodes", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "# Calculate the direct distance to the destination", "direct_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Penalty for the average distance of remaining unvisited nodes", "unvisited_penalty", "=", "len", "(", "unvisited_nodes", ")", "*", "average_distance_to_unvisited", "# Minimum potential cost to destination if this node is selected", "remaining_cost_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Score calculation considering distance to the node, unvisited penalty, and potential cost to the destination", "score", "=", "distance_to_node", "+", "unvisited_penalty", "+", "remaining_cost_to_destination", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "# Calculate degree of separation: the number of unvisited neighbors", "degree_of_separation", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "float", "(", "'inf'", ")", ")", "-", "1", "# Penalty based on degree of separation: encourage visiting well-connected nodes", "penalty", "=", "degree_of_separation", "*", "0.1", "# Combined score factoring in penalty for less connected nodes", "score", "=", "distance_to_next", "+", "distance_to_destination", "+", "penalty", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate the average distance to all unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "# Distance to the next candidate node", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Euclidean distance to destination node", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate the score based on proximity and average distance consideration", "score", "=", "(", "0.5", "*", "distance_to_next", ")", "+", "(", "0.5", "*", "distance_to_destination", ")", "-", "(", "0.5", "*", "average_distance", ")", "# Select the node with the minimal score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "cost_efficiency_weight", "=", "0.7", "# Weight prioritizing cost-effectiveness", "distance_weight", "=", "0.3", "# Weight for distance to destination", "if", "unvisited_nodes", ":", "# Calculate total distance to unvisited nodes", "total_unvisited_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Base average distance from current to unvisited nodes", "average_distance", "=", "total_unvisited_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "# Calculate distance to the next unvisited node", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate distance from the next unvisited node to the destination", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Cost-efficiency score", "cost_efficiency_score", "=", "(", "average_distance", "-", "distance_to_node", ")", "*", "cost_efficiency_weight", "# Total score considering distance to destination", "total_score", "=", "cost_efficiency_score", "-", "(", "distance_weight", "*", "distance_to_destination", ")", "if", "total_score", "<", "min_cost", ":", "min_cost", "=", "total_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 35.09757805198501}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "# Calculate the average distance to unvisited nodes as a secondary criterion", "avg_distance", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_cost", "=", "direct_distance", "+", "avg_distance", "if", "total_cost", "<", "min_cost", ":", "min_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_distance_to_others", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "mean_distance", "=", "total_distance_to_others", "/", "len", "(", "unvisited_nodes", ")", "penalty_factor", "=", "0.5", "*", "(", "mean_distance", "-", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "overall_score", "=", "direct_distance", "+", "penalty_factor", "+", "(", "0.2", "*", "(", "mean_distance", "-", "distance_matrix", "[", "node", "]", "[", "current_node", "]", ")", ")", "if", "overall_score", "<", "min_cost", ":", "min_cost", "=", "overall_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate the distance to the destination from the current node", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Introduce a dynamic weighting factor for exploration versus optimization", "explore_weight", "=", "0.7", "# Weighting towards exploration", "optimize_weight", "=", "1.0", "-", "explore_weight", "# Weighting towards optimization", "# Maximize novelty by introducing variability", "novelty_factor", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "# Calculate scores for each unvisited node", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "desirability_score", "=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", "# Compute the weighted score incorporating the novelty factor", "scores", "[", "node", "]", "=", "(", "explore_weight", "*", "distance_to_node", "+", "novelty_factor", ")", "+", "(", "optimize_weight", "*", "desirability_score", ")", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.811176950081406}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "unvisited_nodes", "=", "list", "(", "unvisited_nodes", ")", "def", "decay_factor", "(", ")", ":", "return", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "distance", "/", "decay_factor", "(", ")", "# Combine distance and decay factor", "scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.6", "# Weight focused on direct distance", "accessibility_weight", "=", "0.4", "# Weight for future accessibility", "variance_penalty", "=", "0.1", "# Penalty for variance in distance", "total_distance_from_node", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_from_node", "=", "total_distance_from_node", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_variance", "=", "sum", "(", "(", "distance_matrix", "[", "current_node", "]", "[", "next", "]", "-", "avg_distance_from_node", ")", "**", "2", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "accessibility_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "+", "1e-10", ")", "for", "next", "in", "unvisited_nodes", ")", "# Inverse distance for accessibility", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "accessibility_weight", "*", "accessibility_score", "-", "variance_penalty", "*", "distance_variance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.315490431967753}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate the average distance to the destination from current node", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Introduce a randomness factor to explore less-visited nodes", "random_factor", "=", "random", ".", "uniform", "(", "0.5", ",", "1.5", ")", "# Select the closest unvisited node with a penalty for more unvisited nodes", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "random_factor", "+", "(", "avg_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", ")", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "social_influence_weight", "=", "0.4", "# Weight for influence from unvisited nodes", "density_weight", "=", "0.2", "# Weight for positioning density of unvisited nodes", "# Calculate social influence score based on the proximity to unvisited nodes", "def", "calculate_social_influence", "(", "node", ")", ":", "influence_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "influence_score", "+=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "+", "1e-6", ")", "# Avoid division by zero", "return", "influence_score", "# Calculate density score based on the average distance of unvisited nodes from the current node", "def", "calculate_density_score", "(", ")", ":", "density_score", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "return", "-", "density_score", "# We want to minimize distance, so we negate", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "social_influence_score", "=", "calculate_social_influence", "(", "node", ")", "density_score", "=", "calculate_density_score", "(", ")", "# Combined scoring mechanism", "score", "=", "-", "direct_distance_weight", "*", "direct_distance", "+", "social_influence_weight", "*", "social_influence_score", "+", "density_weight", "*", "density_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.811288564013772}
{"code_tokens": ["# {This algorithm enhances TSP navigation by combining direct distance minimization with a weighting for the nearest unvisited node and an exploration factor that calculates a diversity score based on less frequently visited nodes.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "nearest_weight", "=", "0.3", "# Weight for the nearest unvisited node", "exploration_weight", "=", "0.2", "# Weight for diversity of unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "nearest_distance", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Minimum distance to nearest unvisited node", "exploration_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "+", "1", ")", "for", "other", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "other", "in", "unvisited_nodes", ")", "# Diversity score from unvisited nodes", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "nearest_weight", "*", "nearest_distance", "+", "exploration_weight", "*", "exploration_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 11.009412200416897}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate the cumulative distance traveled so far", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "if", "node", "!=", "current_node", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Dynamic penalty based on cumulative distance", "penalty", "=", "cumulative_distance", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "# Adjustment factor that promotes balanced exploration", "adjustment_factor", "=", "(", "1.0", "+", "(", "1.0", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", ")", ")", "# Score combines direct distance and adjusted penalty", "score", "=", "direct_distance", "+", "penalty", "*", "adjustment_factor", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 10.272508531004092}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_destination", "=", "total_distance_to_unvisited", "/", "len", "(", "unvisited_nodes", ")", "centrality_scores", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty_for_destination", "=", "average_distance_to_destination", "*", "0.3", "centrality_factor", "=", "centrality_scores", "[", "node", "]", "*", "0.1", "score", "=", "direct_distance", "+", "penalty_for_destination", "-", "centrality_factor", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.524972931936091}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "proximity_weight", "=", "0.6", "# Weight for proximity influence", "penalty_factor", "=", "1.2", "# Penalty for greater distance from clusters", "min_proximity_threshold", "=", "10", "# Minimum threshold for proximity scoring", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "proximity_score", "=", "direct_distance", "+", "proximity_weight", "*", "distance_to_destination", "if", "direct_distance", ">", "min_proximity_threshold", ":", "proximity_score", "*=", "penalty_factor", "# Apply penalty for distant nodes", "if", "proximity_score", "<", "min_cost", ":", "min_cost", "=", "proximity_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.602975755903087}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_increase_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "increase_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "if", "increase_cost", "<", "min_increase_cost", ":", "min_increase_cost", "=", "increase_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "# Precompute total remaining distance to the destination from each unvisited node", "total_remaining_distances", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_cost", "=", "total_remaining_distances", "[", "node", "]", "# Calculate score: balance between direct distance and total remaining cost", "scores", "[", "node", "]", "=", "direct_distance", "+", "remaining_cost", "*", "0.5", "# favor immediate distance a bit more", "# Select node with the minimum score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 16.555495628879836}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight focused on direct distance", "connectivity_weight", "=", "0.3", "# Weight for the sum of distances to other unvisited nodes", "cluster_score_weight", "=", "0.3", "# Weight for the density of nearby unvisited nodes", "total_distance_from_node", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "# Total connectivity cost", "nearby_cluster_count", "=", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "2", "*", "direct_distance", ")", "# Count close unvisited nodes", "# Adjust score based on penalties for long distances", "distance_penalty", "=", "0", "if", "direct_distance", "<", "total_distance_from_node", "/", "len", "(", "unvisited_nodes", ")", "else", "1", "cluster_score", "=", "nearby_cluster_count", "*", "2", "# Reward for having nearby nodes", "score", "=", "(", "-", "direct_distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "-", "distance_penalty", "+", "cluster_score_weight", "*", "cluster_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 22.83624941258514}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "frequency_weight", "=", "0.3", "# Weight for visitation frequency", "cluster_weight", "=", "0.3", "# Weight for cluster connectivity", "# Track visitation frequency (higher means less penalty for re-visiting)", "visitation_frequency", "=", "{", "node", ":", "1", "for", "node", "in", "unvisited_nodes", "}", "# Function to calculate cluster score based on unvisited nodes", "def", "calculate_cluster_score", "(", "node", ")", ":", "cluster_score", "=", "0", "neighbor_count", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "neighbor_count", "+=", "1", "cluster_score", "+=", "distance_matrix", "[", "node", "]", "[", "other", "]", "return", "cluster_score", "/", "neighbor_count", "if", "neighbor_count", ">", "0", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "frequency_penalty", "=", "visitation_frequency", "[", "node", "]", "cluster_score", "=", "calculate_cluster_score", "(", "node", ")", "# Combined scoring mechanism with dynamic penalties", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "/", "frequency_penalty", "+", "cluster_weight", "*", "cluster_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.355321178255981}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate total distances to the destination for normalization", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Heuristic weighting factors", "distance_weight", "=", "direct_distance", "/", "(", "1", "+", "distance_to_destination", ")", "destination_weight", "=", "(", "total_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", ")", "/", "(", "1", "+", "distance_to_destination", ")", "# Combined score", "score", "=", "direct_distance", "+", "destination_weight", "*", "distance_weight", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.8592513741410635}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "future_cost_weight", "=", "0.4", "# Weight for estimated future costs", "destination_weight", "=", "0.2", "# Weight based on distance to the destination", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Estimating future cost based on the average distance to the remaining nodes", "future_cost_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "future_cost_average", "=", "future_cost_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_weight", "*", "direct_distance", ")", "+", "(", "future_cost_weight", "*", "future_cost_average", ")", "+", "(", "destination_weight", "*", "total_distance_to_destination", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "weighted_avg_distance", "=", "total_distance_to_unvisited", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "(", "1.5", "*", "direct_distance", ")", "+", "(", "0.5", "*", "(", "weighted_avg_distance", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 35.846660096101274}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_cost", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "max_distance_remaining", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "unvisited_count_penalty", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "# Heuristic penalty", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "-", "0.4", "*", "(", "max_distance_remaining", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "unvisited_count_penalty", "*", "direct_distance", "if", "score", ">", "max_cost", ":", "max_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 35.847888971432525}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the centroid of unvisited nodes", "centroid_x", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "centroid_y", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "current_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Calculate proximity to the destination for unvisited nodes", "dist_to_destination", "=", "{", "node", ":", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Calculate scores for each unvisited node based on distance to centroid and distance to destination", "scores", "=", "{", "node", ":", "(", "(", "centroid_x", "-", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "**", "2", "+", "(", "centroid_y", "-", "distance_matrix", "[", "node", "]", "[", "current_node", "]", ")", "**", "2", ")", "**", "0.5", "+", "(", "dist_to_destination", "[", "node", "]", "*", "0.5", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the unvisited node with the minimum score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 26.612585726826403}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Calculate average distance to all unvisited nodes", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Calculate penalties for furthest nodes and reward closer nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Clustering score based on proximity to other unvisited nodes", "clustering_score", "=", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<=", "5", ")", "# Introduce randomness into selection to encourage exploration", "exploration_bias", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "score", "=", "(", "0.6", "*", "direct_distance", ")", "+", "(", "0.2", "*", "(", "avg_distance", "-", "distance_to_destination", ")", ")", "-", "(", "0.1", "*", "clustering_score", ")", "+", "(", "0.1", "*", "exploration_bias", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.3969019829064555}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "total_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Inverse weighted consideration of total distance to encourage far nodes", "inverse_weighted_distance", "=", "total_distance_to_remaining", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "score", "=", "distance_to_node", "-", "inverse_weighted_distance", "*", "0.3", "# Penalty for far nodes", "scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.6", "# Adjusted weight for proximity to destination", "distribution_weight", "=", "0.4", "# Adjusted weight for distribution savings among unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", "if", "next_node", "!=", "node", ")", "average_distance_to_unvisited", "=", "total_distance_to_unvisited", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "# New scoring equation considering average distance and an adjusted proximity factor", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", ")", "+", "(", "average_distance_to_unvisited", "*", "distribution_weight", ")", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.505935047664587}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_decay_factor", "=", "0.3", "# Controls the influence of distance on fitness score", "unvisited_penalty", "=", "0.5", "# Weight for penalizing unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "potential_savings", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "average_savings", "=", "potential_savings", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_distance", "+", "total_distance_to_destination", ")", "*", "(", "1", "-", "distance_decay_factor", ")", "+", "(", "unvisited_penalty", "*", "average_savings", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.8624693583061145}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "attractiveness_scores", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "# Calculate attractiveness based on the total connections and distances to current node", "for", "node", "in", "unvisited_nodes", ":", "connection_count", "=", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<", "10", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "for", "neighbor", "in", "unvisited_nodes", ")", "attractiveness_scores", "[", "node", "]", "=", "connection_count", "/", "(", "1", "+", "total_distance", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# New scoring formula that weights attractiveness more significantly", "score", "=", "direct_distance", "+", "0.5", "*", "distance_to_destination", "-", "0.5", "*", "attractiveness_scores", "[", "node", "]", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.346268049927184}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Penalty calculation based on distance to the destination for unvisited nodes", "penalties", "=", "{", "node", ":", "0.5", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Calculate effective distance considering penalty", "effective_distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "penalties", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Select the nearest node based on effective distance", "next_node", "=", "min", "(", "effective_distances", ",", "key", "=", "effective_distances", ".", "get", ")", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "repulsion_radius", "=", "3", "# Distance threshold for influencing node selection", "attraction_factor", "=", "1.5", "# Weight to emphasize closeness of unvisited nodes", "# Calculate repulsion effect (nodes too close will influence avoidance)", "repulsion_effect", "=", "sum", "(", "1", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<", "repulsion_radius", ")", "# Calculate attraction effect based on proximity and unvisited density", "attraction_effect", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1", ")", "for", "node", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Score combining direct distance, repulsion, and attraction", "score", "=", "direct_distance", "*", "(", "1", "+", "0.2", "*", "repulsion_effect", ")", "-", "attraction_factor", "*", "attraction_effect", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Start with positive infinity for minimization", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "# Calculate the direct distance to the current node", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate cumulative distance to all other unvisited nodes", "cumulative_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "for", "unvisited", "in", "unvisited_nodes", "if", "unvisited", "!=", "node", ")", "# Penalty factor based on the number of unvisited nodes", "penalty", "=", "(", "direct_distance", "*", "unvisited_count", ")", "/", "(", "unvisited_count", "+", "1", ")", "# Score based on direct distance, cumulative distance to unvisited nodes, and a penalty", "score", "=", "direct_distance", "+", "(", "cumulative_distance_to_unvisited", "/", "max", "(", "unvisited_count", ",", "1", ")", ")", "+", "penalty", "# Selecting the node that minimizes this score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.566183769854657}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.6", "# Increased weight for proximity to destination", "clustering_weight", "=", "0.4", "# Weight for clustering effect of unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "clustering_effect", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Novel scoring method using clustering effect", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", ")", "+", "(", "clustering_effect", "*", "clustering_weight", ")", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.378332893374544}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "clustering_weight", "=", "0.4", "# Weight for cluster density of unvisited nodes", "exploration_weight", "=", "0.2", "# Weight to introduce randomness in node selection", "total_distance_from_node", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "clustering_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "+", "1e-10", ")", "for", "next", "in", "unvisited_nodes", ")", "# Inverse of distance for clustering", "exploration_score", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "# Random exploration to diversify choices", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "clustering_weight", "*", "clustering_score", "+", "exploration_weight", "*", "exploration_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 29.012336634837006}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "connection_weight", "=", "0.4", "# Weight for connection potential", "risk_penalty", "=", "0.2", "# Penalty for less efficient nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connection_savings", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Introducing a risk penalty based on the distance ratio to the destination", "distance_ratio", "=", "direct_distance", "/", "(", "total_distance_to_destination", "or", "1", ")", "risk_score", "=", "risk_penalty", "*", "distance_ratio", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "connection_weight", "*", "connection_savings", ")", "-", "risk_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.455763376486765}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "temporal_decay", "=", "0.95", "# Factor to reduce influence based on remaining nodes", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "connectivity_weight", "=", "0.3", "# Weight for the overall connectivity score", "exploration_weight", "=", "0.2", "# Weight for introducing randomness in selection", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "unvisited_count", "or", "1", ")", "# Score for remaining nodes factor", "remaining_score", "=", "unvisited_count", "*", "temporal_decay", "# Score with a random exploration factor", "exploration_score", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "*", "exploration_weight", "# Combined score adjusting for the decay of direct distance influence over remaining nodes", "score", "=", "-", "distance_weight", "*", "(", "direct_distance", "/", "(", "unvisited_count", "or", "1", ")", ")", "+", "connectivity_weight", "*", "connectivity_score", "+", "remaining_score", "+", "exploration_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 20.915189423641866}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "distances_to_remaining", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "mean_distance_to_remaining", "=", "sum", "(", "distances_to_remaining", ")", "/", "len", "(", "distances_to_remaining", ")", "std_dev_distance", "=", "(", "sum", "(", "(", "d", "-", "mean_distance_to_remaining", ")", "**", "2", "for", "d", "in", "distances_to_remaining", ")", "/", "len", "(", "distances_to_remaining", ")", ")", "**", "0.5", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Penalty for distant nodes", "distance_penalty", "=", "std_dev_distance", "if", "direct_distance", ">", "mean_distance_to_remaining", "else", "0", "# Bonus for nodes closer to the destination", "distance_bonus", "=", "max", "(", "0", ",", "mean_distance_to_remaining", "-", "distance_to_destination", ")", "score", "=", "direct_distance", "+", "distance_penalty", "-", "distance_bonus", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.464268419064618}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the average distance to unvisited nodes", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Select the next node based on a combination of minimum distance and a weight factor", "min_distance", "=", "float", "(", "'inf'", ")", "next_nodes", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "distance", "+", "(", "distance", "-", "avg_distance", ")", "# Heuristic score based on distance and average", "if", "score", "<", "min_distance", ":", "min_distance", "=", "score", "next_nodes", "=", "[", "node", "]", "elif", "score", "==", "min_distance", ":", "next_nodes", ".", "append", "(", "node", ")", "# Introduce random selection among the closest nodes to allow for exploration", "if", "next_nodes", ":", "return", "random", ".", "choice", "(", "next_nodes", ")", "return", "None"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "max_distance_threshold", "=", "1.5", "*", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Dynamic threshold", "total_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_remaining", "=", "total_distance_to_remaining", "/", "len", "(", "unvisited_nodes", ")", "exploration_penalty", "=", "len", "(", "unvisited_nodes", ")", "**", "0.5", "# Exploration incentive based on remaining nodes", "direct_influence_weight", "=", "0.4", "strategic_importance_weight", "=", "0.4", "penalty_weight", "=", "0.2", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "direct_distance", ">", "max_distance_threshold", ":", "continue", "# Skip nodes outside the proximity threshold", "strategic_importance", "=", "strategic_importance_weight", "*", "(", "average_distance_to_remaining", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "penalty", "=", "penalty_weight", "*", "exploration_penalty", "score", "=", "(", "direct_influence_weight", "*", "direct_distance", ")", "+", "strategic_importance", "+", "penalty", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.807010855935863}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "for", "unvisited", "in", "unvisited_nodes", "if", "unvisited", "!=", "node", ")", "total_cost", "=", "direct_distance", "+", "(", "remaining_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", ")", "if", "total_cost", "<", "min_cost", ":", "min_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.4323878079629}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "density_weight", "=", "1.2", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "density_score", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "/", "len", "(", "unvisited_nodes", ")", "proximity_score", "=", "(", "total_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "/", "total_distance_to_destination", "score", "=", "direct_distance", "+", "density_weight", "*", "(", "1", "-", "density_score", ")", "+", "(", "0.5", "*", "proximity_score", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.7911701616314115}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "visit_frequency", "=", "{", "node", ":", "0", "for", "node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "}", "# Tracks visit frequency", "if", "unvisited_nodes", ":", "immediate_weight", "=", "0.5", "# Adjusted weight for immediate travel cost", "frequency_weight", "=", "0.3", "# Influence of visit frequency", "clustering_weight", "=", "0.2", "# Weight for clustering effect", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "clustering_effect", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "+", "1e-6", ")", "for", "next", "in", "unvisited_nodes", ")", "# Inverse distance to cluster", "# Frequency penalty for node visits", "frequency_penalty", "=", "visit_frequency", "[", "node", "]", "*", "0.1", "# Penalizing higher frequencies", "score", "=", "(", "-", "immediate_weight", "*", "direct_distance", ")", "-", "(", "frequency_weight", "*", "frequency_penalty", ")", "+", "(", "clustering_weight", "*", "clustering_effect", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "visit_frequency", "[", "next_node", "]", "+=", "1", "# Update visit frequency for the chosen node", "return", "next_node"], "code_perf": 27.082637595423876}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "# A temperature parameter to control the exploration", "temperature", "=", "1.0", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "immediate_distance", "+", "random", ".", "uniform", "(", "0", ",", "temperature", ")", "# Lower the temperature to reduce randomness over time", "temperature", "*=", "0.99", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 11.848618843809408}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_cost", "=", "float", "(", "'inf'", ")", "if", "unvisited_nodes", ":", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Score based on the weighted sum of direct distance and the average proximity to destination", "score", "=", "direct_distance", "+", "0.5", "*", "avg_distance_to_destination", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate distance to destination", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate a connectivity score based on distances to other unvisited nodes", "connectivity_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "# The score combines direct distance and the connectivity adjustment", "score", "=", "direct_distance", "+", "(", "1", "/", "(", "1", "+", "connectivity_score", ")", ")", "*", "distance_to_destination", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.026664718281811}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm incorporates a hybrid scoring mechanism based on the inverse of the squared distance, a penalty for total distance to remaining nodes, and a bonus for direct distance to the destination.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_dest", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Hybrid scoring mechanism", "inverse_squared_distance", "=", "1", "/", "(", "distance_to_next", "**", "2", "+", "1", ")", "# Amplifying influence of proximity", "penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "*", "0.1", "# Penalty for overall distance to remaining nodes", "bonus", "=", "0.5", "*", "distance_to_dest", "# Bonus for closer proximity to final destination", "score", "=", "inverse_squared_distance", "+", "bonus", "-", "penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 11.44807838502673}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "connectivity_score", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "float", "(", "'inf'", ")", ")", "# Average distance to neighbors", "avg_neighbor_distance", "=", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "/", "(", "connectivity_score", "+", "1", ")", ")", "if", "connectivity_score", ">", "0", "else", "0", "# Combined score emphasizing proximity and connectivity", "score", "=", "distance_to_next", "+", "distance_to_destination", "-", "(", "0.5", "*", "avg_neighbor_distance", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.4597365709491275}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "node_scores", "=", "{", "}", "# Calculate a score for each unvisited node based on distance and connectivity", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "# Introducing a new scoring mechanism with a penalty factor", "penalty_factor", "=", "(", "connectivity_score", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "+", "1e-5", ")", ")", "node_scores", "[", "node", "]", "=", "direct_distance", "+", "penalty_factor", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 9.274183770186262}
{"code_tokens": ["from", "collections", "import", "deque", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Breadth-First Search setup", "queue", "=", "deque", "(", "[", "current_node", "]", ")", "depth_limit", "=", "3", "visited", "=", "{", "current_node", "}", "while", "queue", ":", "current", "=", "queue", ".", "popleft", "(", ")", "for", "node", "in", "unvisited_nodes", ":", "if", "node", "not", "in", "visited", ":", "direct_distance", "=", "distance_matrix", "[", "current", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Modified score using direct distance and distance to destination", "score", "=", "direct_distance", "+", "distance_to_destination", "# Exploration decay factor", "exploration_factor", "=", "1", "/", "(", "1", "+", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", ")", "# Final score combines both components", "final_score", "=", "score", "*", "exploration_factor", "if", "final_score", "<", "best_score", ":", "best_score", "=", "final_score", "best_node", "=", "node", "visited", ".", "add", "(", "node", ")", "queue", ".", "append", "(", "node", ")", "if", "len", "(", "visited", ")", ">=", "depth_limit", "+", "1", ":", "break", "return", "best_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["# {The algorithm scores unvisited nodes based on a weighted combination of distances to the current node, the destination node, ", "# and a heuristic factor that decreases with the number of unvisited nodes, encouraging exploration.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "heuristic_factor", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_current", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "1", "/", "distance_to_current", ")", "+", "(", "1", "/", "distance_to_destination", ")", "-", "(", "0.1", "*", "heuristic_factor", ")", "# Consider exploration", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.572785716456387}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate distances and attractiveness for each unvisited node", "scores", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "(", "1", "/", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "+", "1e-6", ")", ")", "*", "0.5", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the unvisited node with the minimum score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.8061548915902}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "future_connectivity_weight", "=", "0.3", "# Weight for potential future connections", "risk_weight", "=", "0.2", "# Weight for risk assessment based on distance variance", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Risk score based on variance of distances to remaining nodes", "distances_to_unvisited", "=", "[", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "]", "risk_score", "=", "sum", "(", "(", "d", "-", "direct_distance", ")", "**", "2", "for", "d", "in", "distances_to_unvisited", ")", "/", "(", "len", "(", "distances_to_unvisited", ")", "or", "1", ")", "# Calculate combined score", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "future_connectivity_weight", "*", "future_connectivity_score", "-", "risk_weight", "*", "risk_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.568249540890613}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Emphasis on the shortest direct distance", "density_weight", "=", "0.4", "# Favors nodes that are well-connected to other unvisited nodes", "heuristic_weight", "=", "0.2", "# Favors nodes that minimize total future distance", "# Calculate density for unvisited nodes", "def", "calculate_density_score", "(", "node", ")", ":", "density_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "density_score", "+=", "1", "/", "distance_matrix", "[", "node", "]", "[", "other", "]", "# Inverse distance for connectivity", "return", "density_score", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "density_score", "=", "calculate_density_score", "(", "node", ")", "heuristic_score", "=", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combined scoring mechanism", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "density_weight", "*", "density_score", "+", "heuristic_weight", "*", "heuristic_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.81442622590815}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance to unvisited nodes", "attractiveness_weight", "=", "0.3", "# Weight for attractiveness to destination", "total_cost_weight", "=", "0.2", "# Weight for total cost of visiting remaining nodes", "exploration_factor", "=", "0.1", "# Random exploration factor", "total_cost_to_visit", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "direct_distance", "*", "direct_weight", ")", "+", "(", "distance_to_destination", "*", "attractiveness_weight", ")", "-", "(", "total_cost_to_visit", "*", "total_cost_weight", ")", "score", "+=", "random", ".", "uniform", "(", "0", ",", "exploration_factor", ")", "# Adding a random exploration factor to enhance diversity", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 34.1537450451774}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "closest_nodes", "=", "[", "]", "min_distance", "=", "float", "(", "'inf'", ")", "# Find the minimum distance", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "<", "min_distance", ":", "min_distance", "=", "distance", "closest_nodes", "=", "[", "node", "]", "elif", "distance", "==", "min_distance", ":", "closest_nodes", ".", "append", "(", "node", ")", "# Weighting selection by distance", "total_weight", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1", ")", "for", "node", "in", "closest_nodes", ")", "weighted_probs", "=", "[", "(", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1", ")", ")", "/", "total_weight", "for", "node", "in", "closest_nodes", "]", "# Randomly choose a node based on weighted probabilities", "next_node", "=", "random", ".", "choices", "(", "closest_nodes", ",", "weights", "=", "weighted_probs", ",", "k", "=", "1", ")", "[", "0", "]", "if", "closest_nodes", "else", "None", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "mean_distance", "=", "sum", "(", "distances", ".", "values", "(", ")", ")", "/", "len", "(", "distances", ")", "score", "=", "{", "}", "for", "node", ",", "distance", "in", "distances", ".", "items", "(", ")", ":", "proximity_score", "=", "(", "mean_distance", "/", "(", "distance", "+", "1", ")", ")", "*", "0.5", "# Higher score for closer nodes", "unvisited_penalty", "=", "(", "len", "(", "unvisited_nodes", ")", "/", "len", "(", "distances", ")", ")", "*", "0.5", "# Less penalty for more unvisited nodes", "score", "[", "node", "]", "=", "proximity_score", "+", "unvisited_penalty", "+", "random", ".", "uniform", "(", "0", ",", "0.1", ")", "# Randomized for exploration", "next_node", "=", "max", "(", "score", ",", "key", "=", "score", ".", "get", ")", "# Select node with highest score", "return", "next_node"], "code_perf": 10.516953640203631}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Convert unvisited nodes to a numpy array for easier manipulation", "unvisited_nodes", "=", "np", ".", "array", "(", "list", "(", "unvisited_nodes", ")", ")", "# Calculate distances from the current node to all unvisited nodes", "distances", "=", "distance_matrix", "[", "current_node", ",", "unvisited_nodes", "]", "# Calculate cumulative distance from the starting node to the current node", "cumulative_distance", "=", "np", ".", "sum", "(", "distance_matrix", "[", "0", ":", "current_node", "+", "1", ",", "current_node", "]", ")", "# Adjust for zero-indexing", "# Calculate distances from unvisited nodes to the destination", "destination_distances", "=", "distance_matrix", "[", "unvisited_nodes", ",", "destination_node", "]", "# Apply a penalty based on the cumulative distance", "penalty_factor", "=", "cumulative_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Calculate a score incorporating the penalty and distance to the destination", "scores", "=", "distances", "+", "penalty_factor", "+", "destination_distances", "# Select the node with the minimum score", "next_node", "=", "unvisited_nodes", "[", "np", ".", "argmin", "(", "scores", ")", "]", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "time_weight", "=", "0.7", "# Weight for estimated travel time to next node", "distance_penalty_weight", "=", "0.3", "# Weight for the overall remaining distance to destination", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "travel_time", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "travel_time", "*", "time_weight", ")", "+", "(", "remaining_distance_to_destination", "*", "distance_penalty_weight", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.359359096932373}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "proximity_weight", "=", "0.3", "# Weight for proximity score", "decay_weight", "=", "0.2", "# Weight for visitation decay penalty", "# Assume we track a global visitation timestamp (not implemented here)", "# For simulation, we could use a static visitation frequency", "visitation_frequency", "=", "{", "node", ":", "1", "for", "node", "in", "unvisited_nodes", "}", "# Function to calculate proximity score based on nearby unvisited nodes", "def", "calculate_proximity_score", "(", "node", ")", ":", "nearby_nodes", "=", "[", "other", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "]", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "nearby_nodes", ")", "/", "len", "(", "nearby_nodes", ")", "if", "nearby_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "visitation_penalty", "=", "visitation_frequency", "[", "node", "]", "**", "2", "# Increase penalty for more visits", "proximity_score", "=", "calculate_proximity_score", "(", "node", ")", "# Combined scoring mechanism with dynamic penalties", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "/", "visitation_penalty", "+", "proximity_weight", "*", "(", "1", "/", "proximity_score", "if", "proximity_score", ">", "0", "else", "0", ")", "-", "decay_weight", "*", "visitation_frequency", "[", "node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.8526330805525}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "savings_weight", "=", "0.6", "# Adjusted weight for cluster savings", "distance_weight", "=", "0.4", "# Adjusted weight for direct distance cost", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "density_factor", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "1", "+", "direct_distance", ")", "# Encourage selecting closer nodes", "# Dynamic penalty adjusting based on distance to the destination", "penalty_factor", "=", "0.15", "*", "(", "max", "(", "1", ",", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "*", "(", "1", "+", "direct_distance", ")", ")", "# Calculate cluster savings based on distances among unvisited nodes", "cluster_savings", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "(", "direct_distance", "+", "penalty_factor", ")", "+", "(", "savings_weight", "*", "cluster_savings", ")", "-", "(", "distance_weight", "*", "proximity_to_destination", ")", "+", "density_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.998323120199055}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "candidates", "=", "list", "(", "unvisited_nodes", ")", "scored_candidates", "=", "[", "]", "# Calculate heuristic weights", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "candidates", ")", "average_distance", "=", "total_distance", "/", "len", "(", "candidates", ")", "if", "candidates", "else", "float", "(", "'inf'", ")", "for", "node", "in", "candidates", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "direct_connection_count", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "# Dynamic weighting for the connectivity bonus", "connectivity_bonus", "=", "direct_connection_count", "*", "0.3", "accessibility_penalty", "=", "(", "len", "(", "unvisited_nodes", ")", "-", "direct_connection_count", ")", "*", "0.1", "# New scoring formula balancing direct distance and average proximity", "score", "=", "direct_distance", "+", "accessibility_penalty", "-", "connectivity_bonus", "+", "average_distance", "*", "0.5", "scored_candidates", ".", "append", "(", "(", "node", ",", "score", ")", ")", "scored_candidates", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "return", "scored_candidates", "[", "0", "]", "[", "0", "]"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "connection_weights", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "# Calculate connection weights based on the number of unvisited neighbors", "for", "node", "in", "unvisited_nodes", ":", "connection_count", "=", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<=", "5", ")", "connection_weights", "[", "node", "]", "=", "connection_count", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "total_distances", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "for", "neighbor", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", "}", "# Compute average distance to unvisited nodes", "avg_distance_to_unvisited", "=", "sum", "(", "total_distances", ".", "values", "(", ")", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connection_weight", "=", "connection_weights", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "direct_distance", "+", "0.5", "*", "(", "avg_distance_to_unvisited", "-", "distance_to_destination", ")", "+", "0.3", "*", "connection_weight", "+", "0.2", "*", "total_distances", "[", "node", "]", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 11.186253599964822}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate average distance to unvisited nodes", "total_distance", "=", "0", "for", "node", "in", "unvisited_nodes", ":", "total_distance", "+=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "# Introduce a weight factor for the desirability of nodes closer to the destination", "desirability_weight", "=", "0.6", "# Weight towards the potential path to the destination", "# Calculate scores for each unvisited node", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "average_distance", "*", "(", "1", "+", "random", ".", "uniform", "(", "0", ",", "0.5", ")", ")", ")", "+", "(", "desirability_weight", "*", "distance_to_destination", ")", "scores", "[", "node", "]", "=", "score", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 19.609861443145043}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "import", "numpy", "as", "np", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "risk_weight", "=", "0.4", "# Weight for calculated risk", "diversity_weight", "=", "0.2", "# Weight for diversity score", "# Calculate the average distance to the closest unvisited node ", "def", "calculate_risk", "(", "node", ")", ":", "return", "np", ".", "min", "(", "[", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "]", ")", "# Calculate diversity score based on how many unvisited nodes are nearby", "def", "calculate_diversity", "(", "node", ")", ":", "return", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "10", ")", "# Arbitrary threshold of 10", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "risk", "=", "calculate_risk", "(", "node", ")", "diversity", "=", "calculate_diversity", "(", "node", ")", "# Combined scoring mechanism", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "risk_weight", "*", "risk", "+", "diversity_weight", "*", "diversity", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "savings_weight", "=", "0.6", "# Increased weight for cluster savings", "distance_weight", "=", "0.4", "# Decreased weight for direct distance cost", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", ">", "0", "else", "0", "for", "other_node", "in", "unvisited_nodes", ")", "score", "=", "(", "savings_weight", "*", "connectivity_score", ")", "-", "(", "distance_weight", "*", "direct_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 29.583950098361058}
{"code_tokens": ["# {This algorithm uses a min-max scoring mechanism that considers the shortest distance to the next neighbor while penalizing nodes that have high connectivity to the unvisited nodes, promoting exploration of less connected nodes.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "# Total distance to unvisited nodes", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "distance_to_next", "+", "(", "0.3", "*", "connectivity_score", ")", "+", "(", "0.7", "*", "distance_to_destination", ")", "# Adjusting score based on connectivity", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 14.029413373574645}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "cycle_penalty_factor", "=", "1.5", "# Factor to penalize potential cycles", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance to node", "future_cost_estimation_weight", "=", "0.4", "# Weight for future cost estimation", "destination_focus_weight", "=", "0.2", "# Weight for proximity to destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Estimate a future cost based on the minimum distance to other unvisited nodes", "future_cost_estimation", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Calculate proximity to the destination", "destination_focus_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score considering a cycle penalty", "score", "=", "direct_distance_weight", "*", "direct_distance", "+", "future_cost_estimation_weight", "*", "future_cost_estimation", "+", "cycle_penalty_factor", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "-", "destination_focus_weight", "*", "destination_focus_score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.070363953759472}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight focused on direct distance", "shortcut_potential_weight", "=", "0.4", "# Weight for potential to create shortcuts", "risk_penalty_weight", "=", "0.2", "# Weight for avoiding high-risk nodes (far from others)", "total_distance_from_node", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "shortcut_potential_score", "=", "sum", "(", "min", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", ",", "distance_matrix", "[", "current_node", "]", "[", "next", "]", ")", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average potential for shortcuts", "risk_penalty_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average risk of visiting this node", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "shortcut_potential_weight", "*", "shortcut_potential_score", "-", "risk_penalty_weight", "*", "risk_penalty_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.905066603058793}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "min_distance", "=", "float", "(", "'inf'", ")", "optimal_nodes", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "<", "min_distance", ":", "min_distance", "=", "distance", "optimal_nodes", "=", "[", "node", "]", "elif", "distance", "==", "min_distance", ":", "optimal_nodes", ".", "append", "(", "node", ")", "if", "not", "optimal_nodes", ":", "return", "None", "# Introduce a connectivity penalty based on the number of edges from the unvisited nodes", "connectivity_penalty", "=", "sum", "(", "1", "/", "(", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "!=", "float", "(", "'inf'", ")", "]", ")", "+", "1", ")", "for", "node", "in", "optimal_nodes", ")", "/", "len", "(", "optimal_nodes", ")", "weighted_probs", "=", "[", "(", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1", ")", "*", "(", "1", "-", "connectivity_penalty", ")", ")", "for", "node", "in", "optimal_nodes", "]", "total_weight", "=", "sum", "(", "weighted_probs", ")", "weighted_probs", "=", "[", "prob", "/", "total_weight", "for", "prob", "in", "weighted_probs", "]", "next_node", "=", "random", ".", "choices", "(", "optimal_nodes", ",", "weights", "=", "weighted_probs", ",", "k", "=", "1", ")", "[", "0", "]", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_remaining", "=", "total_distance_to_remaining", "/", "len", "(", "unvisited_nodes", ")", "proximity_bonus_weight", "=", "0.4", "# Weight for proximity bonus to clusters", "direct_distance_weight", "=", "0.4", "# Weight for direct distance influence", "average_distance_weight", "=", "0.2", "# Weight for average distance to unvisited", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_bonus", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "average_distance_to_remaining", "for", "other", "in", "unvisited_nodes", ")", "*", "proximity_bonus_weight", "score", "=", "(", "direct_distance_weight", "*", "direct_distance", ")", "+", "(", "average_distance_weight", "*", "average_distance_to_remaining", ")", "-", "proximity_bonus", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 22.71879335819503}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "regret_weight", "=", "0.4", "# Weight for regret of unvisited closer nodes", "proximity_weight", "=", "0.2", "# Weight for proximity adjustment", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Determine the closest unvisited node for regret calculation", "closest_unvisited_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "regret", "=", "max", "(", "0", ",", "closest_unvisited_distance", "-", "direct_distance", ")", "proximity_adjustment", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "+", "1e-6", ")", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "regret_weight", "*", "regret", ")", "+", "(", "proximity_weight", "*", "proximity_adjustment", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 27.68027188493391}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "estimated_tour_length", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "distance_variance", "=", "sum", "(", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "-", "estimated_tour_length", ")", "**", "2", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "urgency_factor", "=", "1.0", "/", "(", "1", "+", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", ")", "# Higher when closer to destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "variance_penalty", "=", "distance_variance", "*", "0.2", "# Factor to adjust based on distance variance", "score", "=", "direct_distance", "+", "estimated_tour_length", "+", "variance_penalty", "*", "urgency_factor", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm utilizes a composite score based on a weighted sum of distance, penalty for clustering, and a bonus for nodes closer to the destination.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "clustering_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ",", "1", ")", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Weighting factors", "weight_distance", "=", "0.5", "weight_clustering", "=", "0.3", "weight_destination", "=", "0.2", "# Composite score calculation", "score", "=", "(", "weight_distance", "/", "(", "distance_to_next", "+", "1", ")", ")", "+", "(", "weight_clustering", "*", "(", "clustering_penalty", "-", "distance_to_next", ")", ")", "+", "(", "weight_destination", "/", "(", "distance_to_destination", "+", "1", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.613950744672907}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "average_distance_weight", "=", "0.4", "# Weight for average distance", "connectivity_penalty_weight", "=", "0.2", "# Weight for connectivity penalty", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "connectivity_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "score", "=", "(", "direct_distance_weight", "*", "direct_distance", ")", "+", "(", "average_distance_weight", "*", "average_distance", ")", "+", "(", "connectivity_penalty_weight", "*", "connectivity_penalty", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.35201181251048}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "import", "numpy", "as", "np", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "centrality_weight", "=", "0.4", "# Weight for centrality of unvisited nodes", "destination_proximity_weight", "=", "0.2", "# Weight for proximity to the destination", "# Calculate the centrality score based on remaining unvisited nodes", "def", "calculate_centrality_score", "(", "node", ")", ":", "return", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "+", "1e-6", ")", "for", "other", "in", "unvisited_nodes", ")", "# Avoid division by zero", "# Function to calculate the distance to the destination", "def", "calculate_destination_distance", "(", "node", ")", ":", "return", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "centrality_score", "=", "calculate_centrality_score", "(", "node", ")", "destination_distance", "=", "calculate_destination_distance", "(", "node", ")", "# Combined scoring mechanism with new focus on centrality and destination proximity", "score", "=", "(", "-", "direct_distance_weight", "*", "direct_distance", "+", "centrality_weight", "*", "centrality_score", "-", "destination_proximity_weight", "*", "destination_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 29.1302048977454}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "unvisited_neighbors_count", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "3", ")", "# Nodes within a distance of 3", "score", "=", "distance", "-", "0.5", "*", "unvisited_neighbors_count", "# Weighting the score with unvisited neighbors", "scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "# Select the node with the lowest score", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.3", "# Weight for direct distance", "reputation_weight", "=", "0.4", "# Weight for historical travel scores", "exploration_weight", "=", "0.2", "# Weight for encouraging exploration of less connected nodes", "detour_penalty_weight", "=", "0.1", "# Weight for detour penalties", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Dummy reputation and exploration data simulating historical scores and connectivity (for demonstration)", "historical_travel_times", "=", "{", "node", ":", "1", "for", "node", "in", "unvisited_nodes", "}", "# Initialize historical travel times", "connectivity_scores", "=", "{", "node", ":", "len", "(", "unvisited_nodes", ")", "-", "len", "(", "[", "other", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "]", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "adjusted_detour", "=", "max", "(", "0", ",", "direct_distance", "-", "total_distance_to_destination", ")", "# Calculate the exploration factor, inversely related to connectivity", "exploration_factor", "=", "(", "1", "/", "(", "connectivity_scores", "[", "node", "]", "+", "1", ")", ")", "if", "connectivity_scores", "[", "node", "]", "else", "0", "# Score calculation with reputation and exploration considerations", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "reputation_weight", "*", "-", "historical_travel_times", "[", "node", "]", ")", "+", "(", "exploration_weight", "*", "exploration_factor", ")", "-", "(", "detour_penalty_weight", "*", "adjusted_detour", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "heuristic_weight", "=", "0.5", "# Weight for heuristic estimation of remaining distances", "cluster_weight", "=", "0.1", "# Weight for clustering effect", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "# Calculate centroid of unvisited nodes for clustering effect", "if", "unvisited_count", ">", "0", ":", "cluster_x", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "unvisited_count", "else", ":", "cluster_x", "=", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Heuristic: average distance to all unvisited nodes", "heuristic_estimate", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "unvisited_count", "or", "1", ")", "# Score calculation", "score", "=", "-", "direct_distance_weight", "*", "direct_distance", "+", "heuristic_weight", "*", "heuristic_estimate", "-", "cluster_weight", "*", "cluster_x", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.508315749650068}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm introduces a weighted scoring mechanism that balances distance to the unvisited nodes with a penalty for the overall distance traveled thus far, promoting a balance between exploration and efficiency.}", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "traveled_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cost_penalty", "=", "(", "traveled_distance", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", ")", "# Penalty based on traveled distance", "score", "=", "direct_distance", "+", "0.5", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "0.2", "*", "cost_penalty", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.450370583313572}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.4", "# Weight for connectivity to unvisited nodes", "importance_weight", "=", "0.2", "# Weight for the importance of unvisited nodes", "# Compute the average distance to reach a node in unvisited nodes", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# New importance based on heuristic: distance to destination and connectivity", "importance_score", "=", "(", "1", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", ")", "*", "(", "1", "+", "connectivity_score", ")", "# Calculate combined score", "score", "=", "-", "direct_distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "importance_weight", "*", "importance_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.617517811569097}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "density_penalty_weight", "=", "0.5", "# Weight for density penalty", "distance_weight", "=", "0.5", "# Weight for direct distance", "# Calculate the average distance to unvisited nodes for density influence", "if", "unvisited_nodes", ":", "density_score", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_connection_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Scoring method", "score", "=", "distance_weight", "*", "direct_distance", "+", "density_penalty_weight", "*", "density_score", "-", "future_connection_distance", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.98930167680099}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to other unvisited nodes", "distance_penalty_weight", "=", "0.6", "# Weight for distance penalty", "for", "node", "in", "unvisited_nodes", ":", "distance_to_current", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate proximity score based on average distance to other unvisited nodes", "proximity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Score calculation with penalty for distance to current node and advantage for proximity", "score", "=", "(", "proximity_score", "*", "proximity_weight", ")", "-", "(", "distance_to_current", "*", "distance_penalty_weight", ")", "+", "distance_to_destination", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.122389455705084}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity to current node", "future_cost_weight", "=", "0.4", "# Weight for estimated future travel cost", "unvisited_bias_weight", "=", "0.1", "# Weight for favoring unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_cost_estimate", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "proximity_weight", "*", "direct_distance", ")", "+", "(", "future_cost_weight", "*", "future_cost_estimate", ")", "score", "*=", "(", "1", "-", "unvisited_bias_weight", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "# Apply unvisited bias", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.064260559826401}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "clusters", "=", "{", "}", "cluster_threshold", "=", "5", "# Distance threshold to form clusters", "# Group unvisited nodes into clusters based on distance", "for", "node", "in", "unvisited_nodes", ":", "cluster_found", "=", "False", "for", "cluster_center", "in", "clusters", ".", "keys", "(", ")", ":", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<=", "cluster_threshold", ":", "clusters", "[", "cluster_center", "]", ".", "append", "(", "node", ")", "cluster_found", "=", "True", "break", "if", "not", "cluster_found", ":", "clusters", "[", "node", "]", "=", "[", "node", "]", "# Create a new cluster with the node itself", "# Select the closest cluster to the current node", "selected_cluster", "=", "min", "(", "clusters", ".", "keys", "(", ")", ",", "key", "=", "lambda", "center", ":", "distance_matrix", "[", "current_node", "]", "[", "center", "]", ")", "# Choose the nearest node from the selected cluster towards the destination", "next_node", "=", "min", "(", "clusters", "[", "selected_cluster", "]", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "selected_cluster", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "return", "next_node"], "code_perf": 26.04202206317254}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_combined_score", "=", "float", "(", "'inf'", ")", "alpha", "=", "0.5", "# Weight for distance score", "beta", "=", "0.5", "# Weight for connectivity score", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Average distance to all other unvisited nodes", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "/", "(", "num_unvisited", "-", "1", ")", "if", "num_unvisited", ">", "1", "else", "0", "# Connectivity score based on the number of close neighbors", "connectivity_score", "=", "len", "(", "[", "other_node", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "(", "distance_to_next", "+", "2", ")", "]", ")", "# Combined score for score calculation", "combined_score", "=", "(", "avg_distance_to_unvisited", "*", "beta", ")", "+", "(", "distance_to_next", "*", "alpha", ")", "-", "(", "connectivity_score", "*", "0.1", ")", "if", "combined_score", "<", "min_combined_score", ":", "min_combined_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.4323878079629}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.4", "# Weight for connectivity to unvisited nodes", "heuristic_weight", "=", "0.2", "# Weight for future path heuristic", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Score based on the most connected unvisited node", "connectivity_score", "=", "max", "(", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", ")", ",", "0", ")", "# Heuristic score based on the average distance to unvisited nodes", "heuristic_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "heuristic_weight", "*", "heuristic_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.631844723016577}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance to destination", "desirability_weight", "=", "0.4", "# Weight for node desirability based on connectivity", "historical_penalty_weight", "=", "0.2", "# Weight for penalty based on historical visits", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "to_destination_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Desirability score based on overall proximity to other unvisited nodes", "connectedness_score", "=", "sum", "(", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other", "]", ")", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "# Historical penalty based on revisit frequency (higher penalty for nodes visited frequently)", "historical_penalty", "=", "sum", "(", "1", "for", "prev", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "prev", "not", "in", "unvisited_nodes", "and", "prev", "!=", "node", ")", "# Compute the final score combining the components", "score", "=", "-", "direct_weight", "*", "direct_distance", "+", "desirability_weight", "*", "connectedness_score", "-", "historical_penalty_weight", "*", "historical_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.81442622590815}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.6", "# Increased weight for proximity to destination", "connectivity_weight", "=", "0.4", "# Weight for connectivity consideration", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty_factor", "=", "(", "len", "(", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "**", "0.5", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "1", "connectivity_sum", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "+", "1e-5", ")", "for", "other_node", "in", "unvisited_nodes", ")", "*", "penalty_factor", "connectivity_average", "=", "connectivity_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# New scoring formula", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", ")", "+", "(", "connectivity_average", "*", "connectivity_weight", ")", "-", "(", "penalty_factor", "*", "direct_distance", "*", "0.3", ")", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "**", "2", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 15.533600630096906}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "minimal_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "distance_to_node", "+", "(", "distance_to_destination", "*", "0.5", ")", "# Penalty for distance from destination", "if", "score", "<", "minimal_distance", ":", "minimal_distance", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "total_pairwise_distance", "=", "sum", "(", "distance_matrix", "[", "node1", "]", "[", "node2", "]", "for", "node1", "in", "unvisited_nodes", "for", "node2", "in", "unvisited_nodes", "if", "node1", "!=", "node2", ")", "avg_pairwise_distance", "=", "total_pairwise_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty_for_closeness", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "score", "=", "direct_distance", "+", "0.3", "*", "(", "avg_pairwise_distance", "-", "penalty_for_closeness", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.653213705086567}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_factor", "=", "0.5", "# Weight for the immediate distance", "penalty_factor", "=", "1.2", "# Factor to penalize nodes far from the destination", "future_cluster_factor", "=", "0.3", "# Factor for future connection potential", "total_future_connection_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "node", "in", "unvisited_nodes", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "penalty_factor", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score taking into account immediate distance and future potential", "score", "=", "-", "distance_factor", "*", "direct_distance", "-", "penalty", "+", "future_cluster_factor", "*", "total_future_connection_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.085077258565537}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance from current node", "balance_weight", "=", "0.4", "# Weight for balance across unvisited nodes", "destination_attraction_weight", "=", "0.2", "# Weight for attraction towards destination", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_unvisited_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "average_balance_distance", "=", "total_unvisited_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "1", ")", "penalty_for_nearby_nodes", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "near_node", "]", "for", "near_node", "in", "unvisited_nodes", "if", "near_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "near_node", "]", "<", "5", ")", "# Example penalty for nearby nodes", "score", "=", "(", "direct_distance", "*", "direct_distance_weight", ")", "+", "(", "average_balance_distance", "*", "balance_weight", ")", "+", "(", "penalty_for_nearby_nodes", ")", "-", "(", "destination_attraction_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.306848933201188}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "historical_cost_weight", "=", "0.3", "# Weight for historical path costs", "density_weight", "=", "0.4", "# Weight for density of unvisited nodes", "risk_adjustment_weight", "=", "0.3", "# Weight for proximity to the destination", "score_adjustment_factor", "=", "1.0", "# Factor to scale scores adaptively", "# Function to calculate historical cost based on already traveled nodes", "def", "calculate_historical_cost", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "prev", "]", "[", "node", "]", "for", "prev", "in", "unvisited_nodes", "if", "prev", "!=", "node", ")", "/", "len", "(", "unvisited_nodes", ")", "# Function to calculate density score based on unvisited nodes", "def", "calculate_density_score", "(", "node", ")", ":", "return", "len", "(", "unvisited_nodes", ")", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "for", "node", "in", "unvisited_nodes", ":", "historical_cost", "=", "calculate_historical_cost", "(", "node", ")", "density_score", "=", "calculate_density_score", "(", "node", ")", "risk_adjustment", "=", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "2", ")", "# Adjust based on distance to destination", "# Combined scoring mechanism with adaptive scaling", "score", "=", "(", "historical_cost_weight", "*", "historical_cost", "+", "density_weight", "*", "density_score", "-", "risk_adjustment_weight", "*", "risk_adjustment", ")", "*", "score_adjustment_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 17.203928692798826}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "dynamic_adjustment", "=", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Decreases as unvisited nodes decrease", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "+", "distance_to_destination", "*", "dynamic_adjustment", "# Adding a penalty for nodes that are further than the average distance", "distance_from_avg", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "avg_distance", "penalty", "=", "0.5", "*", "max", "(", "0", ",", "distance_from_avg", ")", "total_score", "=", "score", "+", "penalty", "if", "total_score", "<", "min_score", ":", "min_score", "=", "total_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.311097512367091}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_cost_weight", "=", "0.4", "future_savings_weight", "=", "0.5", "clustering_weight", "=", "0.1", "# Encourages selection of nodes in close proximity to others", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Future savings based on potential reduced costs of clustered unvisited nodes", "future_savings", "=", "future_savings_weight", "*", "(", "min", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", ")", "# Clustering score: higher scores for nodes that are closer to unvisited clusters", "clustering_score", "=", "clustering_weight", "*", "(", "1", "/", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "+", "1", ")", ")", "# Random exploration factor to introduce variability", "exploration_factor", "=", "random", ".", "uniform", "(", "0", ",", "0.1", ")", "score", "=", "-", "direct_cost_weight", "*", "direct_distance", "+", "future_savings", "+", "clustering_score", "+", "exploration_factor", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.518955090155023}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "centrality_scores", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "other", "]", "[", "node", "]", "for", "other", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", "}", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "centrality_penalty", "=", "1", "/", "(", "centrality_scores", "[", "node", "]", "+", "1", ")", "# Encourage central nodes", "future_visit_impact", "=", "(", "total_distance", "/", "len", "(", "unvisited_nodes", ")", ")", "*", "0.3", "# Weight future implications", "score", "=", "(", "distance", "+", "future_visit_impact", ")", "*", "centrality_penalty", "*", "random", ".", "uniform", "(", "0.95", ",", "1.05", ")", "# Adding randomness", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.429695265829893}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "import", "numpy", "as", "np", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance from current node", "future_efficiency_weight", "=", "0.4", "# Weight for future path efficiency", "risk_assessment_weight", "=", "0.2", "# Weight for variance risk assessment", "distances_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_path_lengths", "=", "[", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "]", "average_future_length", "=", "np", ".", "mean", "(", "future_path_lengths", ")", "if", "future_path_lengths", "else", "0", "# Calculate variance as a risk factor", "distance_variance", "=", "np", ".", "var", "(", "future_path_lengths", ")", "if", "future_path_lengths", "else", "0", "score", "=", "(", "-", "direct_distance", "*", "direct_distance_weight", ")", "+", "(", "average_future_length", "*", "future_efficiency_weight", ")", "-", "(", "risk_assessment_weight", "*", "distance_variance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.401463368963262}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "next_node", "=", "None", "min_total_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Heuristic estimate of remaining distances", "heuristic_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "total_estimated_distance", "=", "direct_distance", "+", "heuristic_distance", "if", "total_estimated_distance", "<", "min_total_distance", ":", "min_total_distance", "=", "total_estimated_distance", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_destination", "=", "total_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_dest", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate a penalty for distance and bonus for proximity to destination", "penalty", "=", "direct_distance", "*", "1.5", "# Heavily weighting the cost for further nodes", "bonus", "=", "(", "average_distance_to_destination", "-", "distance_to_dest", ")", "*", "0.5", "# Encouraging closer nodes to destination", "# Total cost combines penalty and bonus", "total_cost", "=", "penalty", "-", "bonus", "if", "total_cost", "<", "min_cost", ":", "min_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.2671068114400965}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate total distance to unvisited nodes", "total_direct_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Connectivity score based on the number of unvisited connections", "connectivity_score", "=", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "float", "(", "'inf'", ")", ")", "# Weighted score with a focus on connectivity", "score", "=", "direct_distance", "+", "(", "total_direct_distance", "/", "len", "(", "unvisited_nodes", ")", ")", "*", "(", "1", "-", "(", "connectivity_score", "/", "len", "(", "unvisited_nodes", ")", ")", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "average_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_factor", "=", "average_distance_to_remaining", "*", "0.25", "# Heuristic based on average distance to others", "total_cost", "=", "direct_distance", "+", "heuristic_factor", "if", "total_cost", "<", "min_cost", ":", "min_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity to destination", "connectivity_weight", "=", "0.3", "# Weight for degree of connectivity to unvisited nodes", "remaining_distance_weight", "=", "0.2", "# Weight for remaining distances to unvisited nodes", "remaining_distance_sum", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "(", "direct_distance", "*", "1.5", ")", "]", ")", "# Calculate the potential remaining distance savings", "remaining_distance_avg", "=", "(", "remaining_distance_sum", "-", "direct_distance", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "score", "=", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "connectivity_weight", "*", "connectivity_score", "-", "(", "remaining_distance_avg", "*", "remaining_distance_weight", ")", "-", "direct_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.862364012968325}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity to destination", "distance_weight", "=", "0.3", "# Weight for direct distance to next node", "exploration_weight", "=", "0.2", "# Weight for introducing variability in choice", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "normalized_distance", "=", "direct_distance", "/", "(", "total_distance_to_destination", "or", "1", ")", "unvisited_penalty", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Penalizing longer unvisited lists", "exploration_factor", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "*", "exploration_weight", "# Random exploration component", "score", "=", "(", "1", "-", "normalized_distance", ")", "*", "proximity_weight", "+", "(", "1", "-", "unvisited_penalty", ")", "*", "distance_weight", "+", "exploration_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.141812063064512}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity", "importance_weight", "=", "0.3", "# Weight for node importance", "historical_cost_weight", "=", "0.3", "# Weight for past path costs", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "total_dist_to_current", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "proximity_score", "=", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1e-5", ")", "# Avoid division by zero", "historical_cost", "=", "total_dist_to_current", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "unvisited_density", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Density factor for importance", "score", "=", "(", "proximity_weight", "*", "proximity_score", ")", "+", "(", "importance_weight", "*", "unvisited_density", ")", "-", "(", "historical_cost_weight", "*", "historical_cost", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "base_distance_weight", "=", "0.4", "# Base weight for distance", "variable_density_weight", "=", "0.5", "# Variable weight for density based on proximity", "variable_penalty_weight", "=", "0.1", "# Variable penalty for already visited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate density score as the sum of distances to unvisited nodes", "density_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "proximity_based_weight", "=", "(", "1", "/", "(", "1", "+", "direct_distance", ")", ")", "# Influence of closeness", "penalty_score", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "next", "]", "for", "next", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "next", "not", "in", "unvisited_nodes", "and", "distance_matrix", "[", "current_node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", ")", "# Adjust weights dynamically based on the proximity and penalty", "distance_weight", "=", "base_distance_weight", "*", "proximity_based_weight", "penalty_weight", "=", "variable_penalty_weight", "*", "(", "penalty_score", "if", "penalty_score", "<", "float", "(", "'inf'", ")", "else", "0", ")", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "variable_density_weight", "*", "density_score", "-", "penalty_weight", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 12.978092104919838}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate distances and apply penalty for recently visited nodes", "penalties", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "penalty_factor", "=", "0.5", "# Penalty factor to discourage recently visited nodes", "# Simulate recent visits (just for this example, we assume the last 2 nodes visited)", "recent_visits", "=", "[", "current_node", "]", "# This could be expanded based on actual history", "for", "recent", "in", "recent_visits", ":", "if", "recent", "in", "penalties", ":", "penalties", "[", "recent", "]", "+=", "penalty_factor", "# Calculate effective distances considering penalties", "effective_distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "penalties", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Find the next node by selecting the one with the minimum effective distance", "next_node", "=", "min", "(", "effective_distances", ",", "key", "=", "effective_distances", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "local_density_weight", "=", "0.5", "# Weight for local node density", "cost_efficiency_weight", "=", "0.5", "# Weight for overall tour cost efficiency", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "additional_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "+", "total_distance_to_destination", "# Calculate the local density based on the number of close neighbors", "local_density", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "10", ")", "# Arbitrary threshold", "score", "=", "(", "local_density", "*", "local_density_weight", ")", "-", "(", "direct_distance", "+", "additional_cost", ")", "*", "cost_efficiency_weight", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 21.51502557645197}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_distance_reduction", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_if_visited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "nn", "]", "for", "nn", "in", "unvisited_nodes", "if", "nn", "!=", "node", ")", "distance_reduction", "=", "(", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "nn", "]", "for", "nn", "in", "unvisited_nodes", ")", "-", "distance_to_node", "-", "total_distance_if_visited", ")", "if", "distance_reduction", ">", "max_distance_reduction", ":", "max_distance_reduction", "=", "distance_reduction", "next_node", "=", "node", "return", "next_node"], "code_perf": 21.51502557645197}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate the average distance to unvisited nodes", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Score includes both direct distance and an adjustment based on average distance to unvisited nodes", "score", "=", "direct_distance", "+", "(", "0.5", "*", "(", "average_distance", "-", "distance_to_destination", ")", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.450370583313572}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Initial temperature for randomness", "temperature", "=", "1.0", "min_temperature", "=", "0.1", "cooling_rate", "=", "0.05", "# Dynamic scoring for all unvisited nodes", "scores", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Select the next node to visit with a probability-based approach", "if", "random", ".", "random", "(", ")", "<", "temperature", ":", "# Random selection to encourage exploration", "next_node", "=", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "else", ":", "# Greedy approach to select the node with the minimum score for local optimization", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "scores", ".", "get", ")", "# Cool down the temperature", "temperature", "=", "max", "(", "min_temperature", ",", "temperature", "-", "cooling_rate", ")", "return", "next_node"], "code_perf": 26.34415947005911}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.6", "# Weight for proximity to destination", "synergy_weight", "=", "0.4", "# Weight for synergy with unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_synergy", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "normalized_synergy", "=", "total_synergy", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_distance", "+", "total_distance_to_destination", ")", "-", "(", "normalized_synergy", "*", "synergy_weight", ")", "-", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.378332893374544}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "attraction_factor", "=", "0.4", "# Factor for attraction to high-value nodes", "randomness_factor", "=", "0.2", "# Factor to introduce randomness in choosing nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "attractive_score", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "score", "=", "(", "attractive_score", "*", "attraction_factor", ")", "/", "(", "direct_distance", "+", "1", ")", "+", "random", ".", "uniform", "(", "0", ",", "randomness_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 11.611457495171678}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "node_scores", "=", "{", "}", "# Calculate a score for each unvisited node based on total distance and isolation penalty", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "isolation_penalty", "=", "len", "(", "unvisited_nodes", ")", "-", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "float", "(", "'inf'", ")", ")", "# Combine direct distance, total distance, and isolation penalty to determine the score", "node_scores", "[", "node", "]", "=", "direct_distance", "+", "(", "total_distance", "*", "0.1", ")", "+", "(", "isolation_penalty", "*", "5", ")", "# Example weights", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 9.508647255986432}
{"code_tokens": ["# {This algorithm employs a heuristic that balances not only short distance and connectivity but also incorporates a penalty for distant unvisited nodes, thus prioritizing nodes closer to the overall route while ensuring connectivity.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "penalty_for_distant_unvisited", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "+", "1", ")", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "15", ")", "# Penalty for distant nodes", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "+", "(", "total_distance_to_unvisited", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", ")", "-", "penalty_for_distant_unvisited", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.636340427227218}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate the inverse distance to the destination from the current node", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Introduce a balance factor for heuristic scoring", "balance_factor", "=", "0.5", "# Equal balance between distance and heuristic score", "# Calculate scores for each unvisited node", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "+", "1", ")", "for", "unvisited", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Compute the weighted score with added random factor for exploration", "scores", "[", "node", "]", "=", "(", "balance_factor", "*", "distance_to_node", ")", "+", "(", "(", "1", "-", "balance_factor", ")", "*", "heuristic_score", ")", "+", "random", ".", "uniform", "(", "0", ",", "0.1", ")", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.468620640111974}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "attraction_factor", "=", "2.0", "connectivity_alpha", "=", "1.0", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "global_exploration_score", "=", "(", "1", "/", "(", "connectivity_score", "+", "1", ")", ")", "*", "connectivity_alpha", "attraction_score", "=", "attraction_factor", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", "score", "=", "direct_distance", "+", "(", "0.6", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", ")", "+", "global_exploration_score", "-", "attraction_score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.204502650954128}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "base_distance_weight", "=", "0.4", "# Base weight for direct distance", "connection_weight", "=", "0.5", "# Weight rewarding nodes with fewer connections", "return_penalty_weight", "=", "0.1", "# Penalty for returning to already visited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connections_to_unvisited", "=", "sum", "(", "1", "for", "next_node", "in", "unvisited_nodes", "if", "next_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "<", "float", "(", "'inf'", ")", ")", "# Score calculation", "score", "=", "base_distance_weight", "*", "direct_distance", "+", "connection_weight", "*", "connections_to_unvisited", "-", "return_penalty_weight", "*", "(", "direct_distance", "/", "(", "connections_to_unvisited", "+", "1", ")", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "candidates", "=", "list", "(", "unvisited_nodes", ")", "average_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "total_unvisited", "=", "len", "(", "unvisited_nodes", ")", "scored_candidates", "=", "[", "]", "for", "node", "in", "candidates", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Heuristic factor incorporating average distance and number of unvisited nodes", "heuristic_factor", "=", "(", "average_distance_to_remaining", "+", "total_unvisited", ")", "/", "(", "total_unvisited", "+", "1e-5", ")", "# Scoring mechanism", "score", "=", "(", "1", "/", "(", "direct_distance", "+", "1e-5", ")", ")", "+", "(", "1", "/", "(", "distance_to_destination", "+", "1e-5", ")", ")", "*", "heuristic_factor", "scored_candidates", ".", "append", "(", "(", "node", ",", "score", ")", ")", "scored_candidates", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "return", "scored_candidates", "[", "0", "]", "[", "0", "]"], "code_perf": 7.569430525161135}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.6", "# Weight for favoring closer nodes", "exploration_factor", "=", "0.2", "# Factor to introduce random selection", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "exploration_score", "=", "random", ".", "uniform", "(", "0", ",", "exploration_factor", ")", "*", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "(", "num_unvisited", "+", "1", ")", ")", "score", "=", "direct_distance", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "exploration_score", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.573420424522677}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "# Constants for weighting", "alpha", "=", "0.5", "# Weight for distance score", "beta", "=", "0.3", "# Weight for connectivity score", "gamma", "=", "0.2", "# Weight for return distance penalty", "lambda_penalty", "=", "0.2", "# Weight for penalty on previously visited nodes", "# Calculate total distances to the remaining nodes", "total_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Track nodes that have been visited (for penalty application)", "visited_nodes", "=", "set", "(", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Connectivity score: based on the accumulated distance to unvisited neighboring nodes", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "# Penalty applied for previously visited nodes (if any)", "previous_visit_penalty", "=", "-", "lambda_penalty", "*", "len", "(", "visited_nodes", ")", "if", "node", "in", "visited_nodes", "else", "0", "# Combined score incorporating connectivity, distance penalty, and previous visit penalty", "combined_score", "=", "(", "connectivity_score", "*", "beta", "/", "total_distance_remaining", "-", "distance_to_destination", "*", "gamma", "-", "distance_to_next", "*", "alpha", "+", "previous_visit_penalty", ")", "if", "combined_score", ">", "best_score", ":", "best_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.737469186578055}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.5", "# Weight for direct distance to destination", "cumulative_penalty_weight", "=", "0.3", "# Weight for penalizing cumulative distance", "cluster_density_weight", "=", "0.2", "# Weight for unvisited node density", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "prev_node", "]", "for", "prev_node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "unvisited_density", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "5", ")", "# Assuming a threshold distance of 5 for local clustering", "score", "=", "(", "direct_distance", "*", "direct_distance_weight", "+", "(", "cumulative_distance", "*", "cumulative_penalty_weight", ")", "+", "(", "len", "(", "unvisited_nodes", ")", "-", "unvisited_density", ")", "*", "cluster_density_weight", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Dynamic influence based on proximity to the current node", "proximity_factor", "=", "{", "node", ":", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Assessing potential of unvisited nodes relative to the destination", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate a randomness score to allow exploration of other nodes", "randomness", "=", "random", ".", "uniform", "(", "0.1", ",", "0.5", ")", "*", "(", "1", "/", "direct_distance", ")", "# Combined score using proximity factor, direct distance, and randomness", "score", "=", "direct_distance", "*", "0.4", "+", "distance_to_destination", "*", "0.3", "+", "proximity_factor", "[", "node", "]", "*", "0.2", "+", "randomness", "*", "0.1", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 16.24967235541237}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Emphasis on proximity to destination", "density_weight", "=", "0.5", "# Incentive for selecting densely packed unvisited nodes", "average_distance_weight", "=", "0.1", "# Consideration for overall average distances in unvisited", "def", "calculate_density_score", "(", "node", ")", ":", "return", "len", "(", "[", "other", "for", "other", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "10", "]", ")", "# Arbitrary cutoff for cluster density", "def", "calculate_average_distance", "(", ")", ":", "return", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "average_distance", "=", "calculate_average_distance", "(", ")", "for", "node", "in", "unvisited_nodes", ":", "proximity_score", "=", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Closer nodes get higher scores", "density_score", "=", "calculate_density_score", "(", "node", ")", "# Combined scoring mechanism", "score", "=", "proximity_weight", "*", "proximity_score", "+", "density_weight", "*", "density_score", "-", "average_distance_weight", "*", "average_distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 18.704820740310073}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "closest_remaining_distance", "=", "np", ".", "min", "(", "[", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "farthest_remaining_distance", "=", "np", ".", "max", "(", "[", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "distance_scale", "=", "(", "farthest_remaining_distance", "-", "closest_remaining_distance", ")", "+", "1", "# avoid division by zero", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "for", "candidate", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate", "]", "normalized_closeness", "=", "(", "distance_matrix", "[", "candidate", "]", "[", "destination_node", "]", "-", "closest_remaining_distance", ")", "/", "distance_scale", "score", "=", "immediate_distance", "+", "(", "0.6", "*", "normalized_closeness", ")", "+", "(", "0.4", "*", "farthest_remaining_distance", ")", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "candidate", "return", "best_next_node"], "code_perf": 7.3988393363876614}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the average distance to the remaining unvisited nodes", "average_distance", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "node_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate a score that factors in both direct distance and the average distance", "score", "=", "direct_distance", "+", "(", "average_distance", "-", "direct_distance", ")", "*", "0.5", "node_scores", "[", "node", "]", "=", "score", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate average distance to unvisited nodes", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Calculate connectivity score based on how many nodes are reachable from unvisited nodes", "connectivity_scores", "=", "{", "node", ":", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "average_distance", "*", "1.5", "]", ")", "for", "node", "in", "unvisited_nodes", "}", "# Calculate scores based on distance and connectivity", "scores", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "/", "average_distance", ")", "+", "(", "1", "/", "(", "connectivity_scores", "[", "node", "]", "+", "1", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.008663294218255}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "centrality_weight", "=", "0.5", "# Weight for centrality of unvisited nodes", "penalty_weight", "=", "0.5", "# Weight for penalty on distance detours", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate centrality based on proximity to other unvisited nodes", "centrality_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "centrality_score", "=", "-", "centrality_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Calculate penalty for distance detour", "detour_penalty", "=", "total_distance_to_destination", "-", "direct_distance", "score", "=", "(", "centrality_weight", "*", "centrality_score", ")", "-", "(", "penalty_weight", "*", "detour_penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 36.74646368642096}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "heuristic_weight", "=", "0.3", "# Weight for heuristic estimation of remaining distances", "diversity_weight", "=", "0.3", "# Weight for encouraging diversity", "long_distance_penalty", "=", "0.2", "# Penalty for longer direct distances", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Heuristic: average distance from the current node to unvisited nodes", "heuristic_estimate", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "unvisited_count", "or", "1", ")", "# Diversity: score inversely proportional to how far the node has been from the current node", "diversity_score", "=", "-", "1", "*", "sum", "(", "distance_matrix", "[", "prev", "]", "[", "node", "]", "for", "prev", "in", "unvisited_nodes", ")", "/", "(", "unvisited_count", "or", "1", ")", "# Score calculation with a long-distance penalty to discourage far connections", "score", "=", "-", "direct_distance_weight", "*", "direct_distance", "+", "heuristic_weight", "*", "heuristic_estimate", "+", "diversity_weight", "*", "diversity_score", "-", "long_distance_penalty", "*", "(", "direct_distance", ">", "10", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "avg_distance_weight", "=", "0.4", "# Weight for average distance to unvisited nodes", "connectivity_weight", "=", "0.2", "# Weight for maximizing connections to unvisited nodes", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_unvisited", "=", "total_distance_to_unvisited", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "+", "1", ")", "for", "next", "in", "unvisited_nodes", ")", "# Inverse distance connectivity", "# Combined score", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "avg_distance_weight", "*", "avg_distance_to_unvisited", "+", "connectivity_weight", "*", "connectivity_score", "# Adjusting for diverse pathway reinforcement", "diversity_factor", "=", "len", "(", "unvisited_nodes", ")", "-", "connectivity_score", "score", "+=", "diversity_factor", "*", "0.5", "# Encouraging exploration of diverse pathways", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.370050822198396}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distances", "efficiency_weight", "=", "0.4", "# Weight for cumulative distance efficiency", "risk_weight", "=", "0.2", "# Weight for potential detour risk", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "travel_efficiency", "=", "cumulative_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "risk_factor", "=", "(", "direct_distance", "/", "total_distance_to_destination", ")", "if", "total_distance_to_destination", ">", "0", "else", "1", "score", "=", "-", "(", "direct_distance", "*", "distance_weight", ")", "+", "(", "travel_efficiency", "*", "efficiency_weight", ")", "-", "(", "risk_factor", "*", "direct_distance", "*", "risk_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.329327161740592}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "# Calculate distance to the nearest unvisited node and total distance from that node to others", "nearest_distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "total_distances_from_nearest", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "total_distances_from_nearest", "[", "node", "]", "=", "total_distance", "# Combine scores based on nearest distances and total distances", "for", "node", "in", "unvisited_nodes", ":", "scores", "[", "node", "]", "=", "nearest_distances", "[", "node", "]", "+", "total_distances_from_nearest", "[", "node", "]", "*", "0.1", "# Select the node with the lowest combined score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 9.508647255986432}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "avg_nearest_distance_weight", "=", "0.5", "# Weight for average distance to unvisited nodes", "unvisited_count_weight", "=", "0.1", "# Weight for favoring unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Calculate the average distance to the nearest unvisited node", "avg_nearest_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Combined score using average distance to nearest unvisited node", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "avg_nearest_distance_weight", "*", "-", "avg_nearest_distance", ")", "# Introduce a bonus for nodes significantly closer than the average path to the destination", "if", "direct_distance", "<", "total_distance_to_destination", ":", "score", "+=", "(", "total_distance_to_destination", "-", "direct_distance", ")", "*", "0.3", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm prioritizes nodes that balance short distances without leading back towards visited areas, using a combination of distance minimization and a clustering avoidance factor.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "non_return_penalty", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "distance_matrix", "[", "node", "]", "[", "current_node", "]", ")", "# Penalty for returning to closer clusters", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "*", "(", "1", "+", "non_return_penalty", ")", "# Encourage visiting nodes while penalizing clustering", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 33.21511209059236}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate distances with a dynamic weight increasing for further nodes", "scores", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "0.3", ")", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the unvisited node with the minimum score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.244455041163539}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "minimal_weighted_distance", "=", "float", "(", "'inf'", ")", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "exploration_penalty", "=", "(", "1", "/", "num_unvisited", ")", "*", "distance_to_node", "# Encourages exploring less visited nodes", "weighted_distance", "=", "distance_to_node", "+", "0.5", "*", "distance_to_destination", "+", "exploration_penalty", "if", "weighted_distance", "<", "minimal_weighted_distance", ":", "minimal_weighted_distance", "=", "weighted_distance", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 7.439568550548119}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "min_total_distance", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "# Calculate total distance if the next node is the current node", "total_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate distances from the selected node to all remaining unvisited nodes", "for", "next_candidate", "in", "unvisited_nodes", ":", "if", "next_candidate", "!=", "node", ":", "total_distance", "+=", "distance_matrix", "[", "node", "]", "[", "next_candidate", "]", "# Add distance back to the destination node", "total_distance", "+=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "total_distance", "<", "min_total_distance", ":", "min_total_distance", "=", "total_distance", "next_node", "=", "node", "return", "next_node"], "code_perf": 21.813812563750965}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "dynamic_incentive", "=", "0.5", "# Factor that balances exploration incentives", "min_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_count", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<=", "5", ")", "cluster_effect", "=", "cluster_count", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "incentive", "=", "dynamic_incentive", "*", "(", "1", "/", "(", "1", "+", "direct_distance", ")", ")", "*", "cluster_effect", "score", "=", "direct_distance", "-", "incentive", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "# Calculate the average position of unvisited nodes", "avg_x", "=", "sum", "(", "node", "for", "node", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "avg_y", "=", "sum", "(", "node", "for", "node", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "# Temporal factor based on node index or timestamp (here simply using node index for illustrative purposes)", "decay_factor", "=", "0.5", "# Can be tuned; represents the degree of importance given to node age", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "direct_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Proximity score", "proximity_score", "=", "1", "/", "(", "distance_to_next", "+", "1", ")", "# Decay mechanism based on the idea that older unvisited nodes should be less favored", "age_score", "=", "math", ".", "exp", "(", "-", "decay_factor", "*", "distance_matrix", "[", "node", "]", "[", "current_node", "]", ")", "# Adjusting clustering score with respect to distance from average", "clustering_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "# New scoring mechanism with clustering and decay", "score", "=", "(", "proximity_score", "*", "age_score", "*", "(", "1", "/", "(", "1", "+", "direct_distance_to_destination", ")", ")", ")", "-", "clustering_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.437513488502693}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Start with positive infinity for minimization", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_travel_impact", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "for", "unvisited", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Weighting factor based on how distant the target is", "weight_factor", "=", "(", "avg_distance_to_destination", "-", "direct_distance", ")", "if", "avg_distance_to_destination", "!=", "0", "else", "1", "# Score based on direct distance, future travel impact, and weighted average distance", "score", "=", "direct_distance", "+", "(", "0.5", "*", "future_travel_impact", ")", "*", "weight_factor", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.132723151632467}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "max_distance_to_unvisited", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "float", "(", "'inf'", ")", "urgency_factor", "=", "1", "/", "(", "distance_to_next", "+", "1", ")", "# Encourage selection of closer nodes", "distance_penalty", "=", "max_distance_to_unvisited", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Penalize based on max distance", "score", "=", "urgency_factor", "-", "distance_penalty", "# Balance between urgency and penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.083786565678209}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Introduce a decay factor based on the number of unvisited nodes", "decay_factor", "=", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Calculate modified distances with a decay factor and random noise", "modified_distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "decay_factor", "*", "(", "1", "+", "random", ".", "uniform", "(", "-", "0.05", ",", "0.05", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the unvisited node with the smallest modified distance", "next_node", "=", "min", "(", "modified_distances", ",", "key", "=", "modified_distances", ".", "get", ")", "return", "next_node"], "code_perf": 6.995196816952616}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "average_distance_to_destination", "=", "total_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "adjusted_penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "average_distance_to_destination", ")", "score", "=", "direct_distance", "+", "adjusted_penalty", "*", "0.5", "+", "(", "total_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "0", "else", "0", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "time_penalty_factor", "=", "0.5", "# Factor to penalize time taken to reach a node", "deviation_penalty_factor", "=", "0.3", "# Factor to penalize deviation from optimal path", "exploration_factor", "=", "0.2", "# Factor for exploring less likely options", "if", "unvisited_nodes", ":", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_destination", "=", "total_distance_to_destination", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "deviation_score", "=", "abs", "(", "direct_distance", "-", "average_distance_to_destination", ")", "# Deviation from average distance", "# Combine scores with exploration randomness", "score", "=", "-", "time_penalty_factor", "*", "direct_distance", "-", "deviation_penalty_factor", "*", "deviation_score", "+", "random", ".", "uniform", "(", "0", ",", "exploration_factor", ")", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 11.789257949982664}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "potential_future_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "num_unvisited", ">", "0", "else", "0", "weight_factor", "=", "1", "/", "(", "1", "+", "num_unvisited", ")", "# Dynamic weight based on remaining nodes", "score", "=", "(", "direct_distance", "*", "weight_factor", ")", "+", "(", "0.7", "*", "potential_future_distance", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 13.408497282817775}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "centroid_weight", "=", "0.4", "# Weight for proximity to the centroid of unvisited nodes", "isolation_penalty", "=", "0.2", "# Penalty for choosing isolated nodes", "# Calculate the centroid of unvisited nodes", "def", "calculate_centroid", "(", ")", ":", "total_x", ",", "total_y", ",", "count", "=", "0", ",", "0", ",", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "total_x", "+=", "node", "%", "len", "(", "distance_matrix", ")", "# Consider x-coordinate as index modulo", "total_y", "+=", "node", "//", "len", "(", "distance_matrix", ")", "# Consider y-coordinate as index divided", "return", "(", "total_x", "/", "count", ",", "total_y", "/", "count", ")", "if", "count", ">", "0", "else", "(", "0", ",", "0", ")", "centroid", "=", "calculate_centroid", "(", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "centroid_distance", "=", "(", "(", "node", "%", "len", "(", "distance_matrix", ")", "-", "centroid", "[", "0", "]", ")", "**", "2", "+", "(", "node", "//", "len", "(", "distance_matrix", ")", "-", "centroid", "[", "1", "]", ")", "**", "2", ")", "**", "0.5", "isolation_score", "=", "1", "/", "(", "direct_distance", "+", "1", ")", "# Lower distance rewards higher for non-isolation", "# Combined scoring mechanism", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "centroid_weight", "*", "centroid_distance", "-", "isolation_penalty", "*", "isolation_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 20.391030253972573}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm modifies the scoring mechanism by integrating a factor that considers the node's proximity to the destination, while also factoring in the maximum distance to any unvisited node to encourage exploration of closer nodes.}", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "# Maximum distance to remaining nodes", "max_distance_to_remaining", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# New score combining distance to node and a ratio of distance to destination over max remaining distance", "score", "=", "distance_to_node", "+", "(", "distance_to_destination", "/", "max_distance_to_remaining", ")", "*", "(", "1", "+", "len", "(", "unvisited_nodes", ")", "/", "len", "(", "distance_matrix", ")", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 8.546149655559521}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "iterations", "=", "100", "best_node", "=", "None", "best_distance", "=", "float", "(", "'inf'", ")", "for", "_", "in", "range", "(", "iterations", ")", ":", "# Randomly select a node from unvisited nodes", "candidate_node", "=", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "# Calculate the total distance through this candidate node", "total_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate_node", "]", "# Estimate a quick evaluation of upcoming unvisited node distances", "for", "next_node", "in", "unvisited_nodes", "-", "{", "candidate_node", "}", ":", "total_distance", "+=", "distance_matrix", "[", "candidate_node", "]", "[", "next_node", "]", "# Update best node if this is better", "if", "total_distance", "<", "best_distance", ":", "best_distance", "=", "total_distance", "best_node", "=", "candidate_node", "return", "best_node"], "code_perf": 21.491704208344608}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for the direct distance to the next node", "centrality_weight", "=", "0.4", "# Weight for the centrality of remaining unvisited nodes", "exploration_weight", "=", "0.2", "# Weight for encouraging exploration of unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "centrality_score", "=", "centrality_weight", "*", "(", "1", "/", "(", "total_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", ")", "exploration_score", "=", "exploration_weight", "*", "(", "1", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", ")", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "centrality_score", "+", "exploration_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.188787025578465}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "total_distance_from_unvisited_to_destination", "=", "sum", "(", "distance_matrix", "[", "n", "]", "[", "destination_node", "]", "for", "n", "in", "unvisited_nodes", ")", "score", "=", "(", "(", "1", "/", "(", "1", "+", "average_distance_to_unvisited", ")", ")", "*", "0.7", ")", "-", "distance_to_next", "+", "(", "0.3", "*", "total_distance_from_unvisited_to_destination", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.256967153914501}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "decay_factor", "=", "0.8", "# Factor to allow diminishing returns", "remaining_nodes", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_cost", "=", "(", "average_distance", "*", "(", "remaining_nodes", "**", "decay_factor", ")", ")", "+", "direct_distance", "if", "heuristic_cost", "<", "min_cost", ":", "min_cost", "=", "heuristic_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.5", "# Weight for direct distance", "node_desirability_weight", "=", "0.3", "# Weight for node desirability", "unvisited_density_weight", "=", "0.2", "# Weight for density of unvisited nodes", "historical_cost_weight", "=", "0.1", "# Weight for historical costs", "# Function to calculate desirability score based on historical costs", "def", "calculate_desirability_score", "(", "node", ")", ":", "return", "1", "/", "(", "1", "+", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "previous", "]", "for", "previous", "in", "unvisited_nodes", ")", ")", "if", "unvisited_nodes", "else", "0", "# Function to calculate the density score of unvisited nodes nearby", "def", "calculate_density_score", "(", "node", ")", ":", "density_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "distance_to_other", "=", "distance_matrix", "[", "node", "]", "[", "other", "]", "density_score", "+=", "1", "/", "(", "1", "+", "distance_to_other", ")", "# Closer nodes contribute more", "return", "density_score", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "desirability_score", "=", "calculate_desirability_score", "(", "node", ")", "density_score", "=", "calculate_density_score", "(", "node", ")", "# Combined scoring mechanism combining various factors", "score", "=", "(", "-", "direct_distance_weight", "*", "direct_distance", "+", "node_desirability_weight", "*", "desirability_score", "+", "unvisited_density_weight", "*", "density_score", "+", "historical_cost_weight", "*", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "previous", "]", "for", "previous", "in", "unvisited_nodes", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 11.009412200416897}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_distance_to_unvisited", "=", "float", "(", "'inf'", ")", "total_distance_penalty", "=", "0", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "heuristic_weight", "=", "0.6", "# Weight for heuristic distance to destination", "penalty_weight", "=", "0.4", "# Weight for penalty based on unvisited nodes distance", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "direct_distance", "<", "min_distance_to_unvisited", ":", "min_distance_to_unvisited", "=", "direct_distance", "total_distance_penalty", "+=", "direct_distance", "score", "=", "(", "distance_to_destination", "*", "heuristic_weight", ")", "-", "(", "total_distance_penalty", "*", "penalty_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 23.91536772796728}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "remaining_nodes_penalty", "=", "len", "(", "unvisited_nodes", ")", "# Penalizes based on remaining nodes", "# New scoring mechanism emphasizing both direct distance and potential path optimization", "scores", "[", "node", "]", "=", "(", "distance_to_node", "+", "distance_to_destination", ")", "*", "(", "1", "+", "remaining_nodes_penalty", ")", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "destination_weight", "=", "0.6", "# Weight for distance to destination", "unvisited_penalty", "=", "0.2", "# Penalty for the distance to unvisited nodes", "quadratic_weight", "=", "0.2", "# Quadratic weight", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "unvisited_penalty", "*", "direct_distance", "score", "=", "(", "destination_weight", "*", "(", "1", "/", "(", "1", "+", "total_distance_to_destination", ")", ")", "-", "penalty", "+", "(", "quadratic_weight", "/", "(", "1", "+", "direct_distance", "**", "2", ")", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.6", "# Weight for proximity to destination", "average_penalty_weight", "=", "0.4", "# Weight for average penalty for distant unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Apply a penalty for unvisited nodes that are further away", "penalty", "=", "average_distance_to_unvisited", "*", "average_penalty_weight", "# New score calculation", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", ")", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "-", "penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.793770156235117}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {The new algorithm integrates a scoring mechanism based on complementary distance measures, ", "# adapted node attractiveness based on its centrality in the unvisited nodes, and a strategic weight ", "# adjustment depending on the remaining unvisited nodes.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "# Constants for weighting", "alpha", "=", "0.4", "# Weight for distance score", "beta", "=", "0.4", "# Weight for cohesion score", "gamma", "=", "0.2", "# Weight for distance penalty", "# Total number of unvisited nodes", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Cohesion score: average distance to remaining unvisited nodes", "cohesion_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "/", "(", "num_unvisited", "-", "1", ")", "if", "num_unvisited", ">", "1", "else", "0", "# Strategic attractiveness: inversely related to the distance to the destination", "attractiveness_score", "=", "1", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "# Combined score with adjusted weights", "combined_score", "=", "(", "cohesion_score", "*", "beta", "+", "attractiveness_score", "-", "distance_to_next", "*", "alpha", "-", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "gamma", ")", "if", "combined_score", ">", "max_score", ":", "max_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.054635665604507}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "candidates", "=", "list", "(", "unvisited_nodes", ")", "scored_candidates", "=", "[", "]", "# Calculate minimum distance to the remaining unvisited nodes", "min_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "candidates", ")", "for", "node", "in", "candidates", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "isolation_penalty", "=", "max", "(", "0", ",", "min_distance", "-", "direct_distance", ")", "*", "0.4", "# Penalty for nodes further away", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "connectivity_bonus", "=", "1", "/", "(", "1", "+", "total_distance_to_unvisited", ")", "*", "0.5", "# Bonus for nodes closer to unvisited", "score", "=", "direct_distance", "+", "isolation_penalty", "-", "connectivity_bonus", "scored_candidates", ".", "append", "(", "(", "node", ",", "score", ")", ")", "scored_candidates", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "return", "scored_candidates", "[", "0", "]", "[", "0", "]"], "code_perf": 7.074136954501069}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "minimal_weighted_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "return_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "weighted_distance", "=", "direct_distance", "+", "(", "0.5", "*", "return_distance", ")", "# Weight the return distance", "if", "weighted_distance", "<", "minimal_weighted_distance", ":", "minimal_weighted_distance", "=", "weighted_distance", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate score based on a ratio of the distances", "if", "distance_to_destination", ">", "0", ":", "# Avoid division by zero", "score", "=", "distance_to_node", "/", "distance_to_destination", "else", ":", "score", "=", "float", "(", "'inf'", ")", "# Penalize if destination is zero distance away", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.831500052161287}
{"code_tokens": ["import", "heapq", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "priority_queue", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "total_cost", "=", "direct_distance", "+", "(", "0.8", "*", "remaining_distance", ")", "# Weight remaining distance to prioritize closer nodes", "# Push the tuple (total_cost, node) to the priority queue", "heapq", ".", "heappush", "(", "priority_queue", ",", "(", "total_cost", ",", "node", ")", ")", "# Return the node with the lowest total_cost", "return", "heapq", ".", "heappop", "(", "priority_queue", ")", "[", "1", "]"], "code_perf": 7.81837595974678}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "exploration_weight", "=", "0.3", "# Weight for exploration to encourage revisiting nearby nodes", "proximity_weight", "=", "0.7", "# Weight for proximity to destination for immediate travel cost", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "exploration_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_distance", "+", "total_distance_to_destination", ")", "*", "proximity_weight", "+", "exploration_penalty", "*", "exploration_weight", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.437843667925288}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "resource_weight", "=", "0.3", "# Weight for resource availability", "engagement_weight", "=", "0.2", "# Weight for recent engagement", "# Calculate the distance to the nearest unvisited node", "nearest_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Dummy engagement data simulating recent visit records (for demonstration)", "engagement_data", "=", "{", "node", ":", "1", "for", "node", "in", "unvisited_nodes", "}", "# Initialize engagement counts", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Resource cost factor, assuming locations that are closer to other unvisited nodes have a lower potential cost", "resource_factor", "=", "sum", "(", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Engagement score based on recent visits, assuming higher visits result in reduced attraction", "engagement_score", "=", "engagement_data", "[", "node", "]", "score", "=", "(", "distance_weight", "*", "-", "distance_to_node", ")", "+", "(", "resource_weight", "*", "-", "resource_factor", ")", "+", "(", "engagement_weight", "*", "engagement_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.6424472015959175}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "connectivity_weight", "=", "2.0", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "heuristic_score", "=", "0.6", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "0.4", "*", "connectivity_score", "score", "=", "direct_distance", "+", "heuristic_score", "-", "(", "connectivity_weight", "*", "(", "1", "/", "(", "connectivity_score", "+", "1", ")", ")", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.4257563991146025}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "clusters", "=", "{", "}", "# Group unvisited nodes into clusters", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "not", "in", "clusters", ":", "clusters", "[", "distance", "]", "=", "[", "]", "clusters", "[", "distance", "]", ".", "append", "(", "node", ")", "# Sort cluster distances", "sorted_distances", "=", "sorted", "(", "clusters", ".", "keys", "(", ")", ")", "# Identify the nearest cluster to the current node", "nearest_cluster_nodes", "=", "[", "]", "if", "sorted_distances", ":", "nearest_distance", "=", "sorted_distances", "[", "0", "]", "nearest_cluster_nodes", "=", "clusters", "[", "nearest_distance", "]", "# Select the next node from the nearest cluster", "next_node", "=", "min", "(", "nearest_cluster_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "historical_traversal_data", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate uniqueness score based on historical traversal", "uniqueness_score", "=", "(", "1", "/", "(", "historical_traversal_data", "[", "node", "]", "+", "1", ")", ")", "# Calculate clustering coefficient for the current node", "neighbors", "=", "[", "neighbor", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", "]", "clustering_coefficient", "=", "len", "(", "neighbors", ")", "/", "max", "(", "1", ",", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "# Combine distance, uniqueness, and clustering to form the score", "score", "=", "(", "0.5", "*", "direct_distance", "+", "0.3", "*", "uniqueness_score", "+", "0.2", "*", "(", "1", "-", "clustering_coefficient", ")", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "# Update historical traversal data for the selected node", "if", "best_node", "is", "not", "None", ":", "historical_traversal_data", "[", "best_node", "]", "+=", "1", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "exploration_factor", "=", "0.3", "# Weight for exploration", "aggressive_approach", "=", "0.5", "# Weight for aggressive distance minimization", "# Calculate average distance to unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Weighted score considering direct distance, average distance, and exploration", "score", "=", "(", "aggressive_approach", "*", "direct_distance", "+", "(", "1", "-", "aggressive_approach", ")", "*", "distance_to_destination", "+", "exploration_factor", "*", "(", "avg_distance", "-", "direct_distance", ")", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.191952623318448}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "proximity_threshold", "=", "3", "# Define proximity for significance impact", "sig_count", "=", "sum", "(", "1", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<=", "proximity_threshold", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "significance_effect", "=", "sig_count", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "# Normalize significance impact", "score", "=", "direct_distance", "-", "0.4", "*", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "avg_distance_to_destination", ")", "+", "0.6", "*", "significance_effect", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.466511785330852}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance_to_unvisited", "/", "len", "(", "unvisited_nodes", ")", "proximity_factor", "=", "0.7", "# Factor to enhance the influence of nearby nodes", "distance_weight", "=", "0.3", "# Weight for average distance in scoring", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "proximity_factor", "*", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "-", "average_distance", ")", "dynamic_penalty", "=", "distance_weight", "*", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "average_distance", ")", "score", "=", "direct_distance", "+", "proximity_score", "+", "dynamic_penalty", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.209510039029402}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# This algorithm introduces a hybrid scoring mechanism based on the weighted average of distances, a decay function for distant nodes, ", "# and a factor for unvisited node distribution to guide the selection of the next node.", "max_score", "=", "-", "float", "(", "'inf'", ")", "next_node", "=", "None", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Using a decay function to diminish the influence of distant nodes", "distance_penalty", "=", "direct_distance", "/", "(", "1", "+", "direct_distance", ")", "# Calculate a distribution factor based on the proximity of unvisited nodes", "proximity_factor", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "for", "neighbor", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# New scoring mechanism, emphasizing closeness to both other unvisited nodes and the destination", "score", "=", "(", "0.4", "*", "(", "1", "/", "(", "1", "+", "direct_distance", ")", ")", ")", "+", "(", "0.4", "*", "(", "1", "/", "(", "1", "+", "distance_to_destination", ")", ")", ")", "-", "(", "0.2", "*", "proximity_factor", ")", "-", "distance_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.431126208721921}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for immediate direct distance", "cluster_proximity_weight", "=", "0.3", "# Weight for proximity to clusters of unvisited nodes", "lookahead_weight", "=", "0.3", "# Weight for assessing future steps", "# Calculate cluster proximity score", "def", "calculate_cluster_proximity", "(", "node", ")", ":", "proximity_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "proximity_score", "+=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "+", "1e-9", ")", "# Avoid division by zero", "return", "proximity_score", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_proximity_score", "=", "calculate_cluster_proximity", "(", "node", ")", "# Lookahead: Check the next node's distance from destination and evaluate the impact", "future_distances", "=", "[", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", "if", "next_node", "!=", "node", "]", "average_lookahead_distance", "=", "sum", "(", "future_distances", ")", "/", "(", "len", "(", "future_distances", ")", "or", "1", ")", "# Combined scoring mechanism", "score", "=", "-", "direct_distance_weight", "*", "direct_distance", "+", "cluster_proximity_weight", "*", "cluster_proximity_score", "-", "lookahead_weight", "*", "average_lookahead_distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.686127376963846}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "total_weighted_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_weighted_distance_to_destination", "=", "total_weighted_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "max_distance_to_destination", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "0.3", "*", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "max_distance_to_destination", ")", "if", "max_distance_to_destination", "else", "0", "score", "=", "direct_distance", "+", "penalty", "+", "0.5", "*", "(", "avg_weighted_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.7887215607833005}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Updated weight for direct distance", "density_weight", "=", "0.3", "# Weight for density of remaining nodes", "penalty_weight", "=", "0.2", "# Weight for penalty on longer paths", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate density score as the number of unvisited neighbors over total unvisited", "density_score", "=", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Calculate a penalty score based on the distance from the selected node to the destination", "penalty_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "density_weight", "*", "density_score", "-", "penalty_weight", "*", "penalty_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.986063214634992}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "decay_factor", "=", "1.5", "min_edge_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "direct_distance", "+", "remaining_distance", "-", "(", "decay_factor", "*", "min_edge_distance", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm implements a scoring mechanism that balances the direct distance to the destination with a weighted factor based on the overall connectivity of unvisited nodes, encouraging exploration towards densely connected areas.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_unvisited", "=", "total_distance_to_unvisited", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "direct_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Connectivity score based on how well the node connects to other unvisited nodes", "connectivity_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "+", "1", ")", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "# Combining scores with a focus on minimizing total distance to the destination while exploring connectivity", "score", "=", "connectivity_score", "*", "(", "1", "/", "(", "direct_distance_to_destination", "+", "1", ")", ")", "+", "(", "avg_distance_to_unvisited", "-", "distance_to_next", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 14.194698617848594}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "diversity_scores", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", "}", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "diversity_penalty", "=", "1", "/", "(", "diversity_scores", "[", "node", "]", "+", "1", ")", "# Reduce score for diverse connections", "score", "=", "(", "distance", "+", "(", "avg_distance", "*", "0.5", ")", ")", "*", "diversity_penalty", "*", "random", ".", "uniform", "(", "0.9", ",", "1.1", ")", "# Adding randomness", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.550973982441487}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "next_node_scores", "=", "{", "}", "best_score", "=", "float", "(", "'inf'", ")", "best_node", "=", "None", "# Calculate scores based on immediate distance and a look-ahead exploration", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Look-ahead to the next best nodes based on current node", "if", "unvisited_nodes", "-", "{", "node", "}", ":", "# Ensure at least one unvisited node remains", "next_scores", "=", "[", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", "if", "next_node", "!=", "node", "]", "average_lookahead", "=", "sum", "(", "next_scores", ")", "/", "len", "(", "next_scores", ")", "if", "next_scores", "else", "0", "else", ":", "average_lookahead", "=", "0", "# Combine direct distance with look-ahead distance", "score", "=", "direct_distance", "+", "average_lookahead", "*", "0.3", "# Weigh look-ahead less", "next_node_scores", "[", "node", "]", "=", "score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.307161450668722}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_risk_weight", "=", "0.4", "# Weight for proximity risk of unvisited nodes", "potential_gain_weight", "=", "0.6", "# Weight for potential gain towards destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "min_distance_to_destination", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "float", "(", "'inf'", ")", "score", "=", "(", "min_distance_to_destination", "*", "distance_risk_weight", ")", "+", "(", "distance_to_destination", "*", "potential_gain_weight", ")", "-", "direct_distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.4257563991146025}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# This algorithm selects the next node to visit by evaluating the potential for reducing overall travel distance ", "# while also considering the diversity of unvisited nodes based on their distances from the current node.", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "min_distance_to_unvisited", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "score", "=", "(", "total_distance", "/", "len", "(", "unvisited_nodes", ")", ")", "+", "distance_to_next", "-", "min_distance_to_unvisited", "# Encourages visiting nodes that are not only close but also strategically located", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "potential_nodes", "=", "[", "]", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "node_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_remaining_distance", "=", "total_remaining_distance", "/", "node_count", "# Average distance to remaining nodes", "adjusted_heuristic", "=", "avg_remaining_distance", "*", "(", "node_count", "/", "(", "node_count", "+", "1", ")", ")", "# Heuristic weighting", "estimated_cost", "=", "direct_distance", "+", "adjusted_heuristic", "potential_nodes", ".", "append", "(", "(", "node", ",", "estimated_cost", ")", ")", "next_node", "=", "min", "(", "potential_nodes", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_combined_score", "=", "float", "(", "'-inf'", ")", "# Constants for weighting", "alpha", "=", "0.5", "# Weight for distance score", "beta", "=", "0.3", "# Weight for cohesion score", "gamma", "=", "0.2", "# Weight for distance penalty", "# Total number of unvisited nodes", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Cohesion score: average distance to remaining unvisited nodes", "cohesion_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "/", "(", "num_unvisited", "-", "1", ")", "if", "num_unvisited", ">", "1", "else", "0", "# Penalty score: additional distance incurred to go to destination after current", "distance_penalty", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score incorporating distance penalty", "combined_score", "=", "(", "cohesion_score", "*", "beta", "-", "distance_penalty", "*", "gamma", "-", "distance_to_next", "*", "alpha", ")", "if", "combined_score", ">", "max_combined_score", ":", "max_combined_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.8024398518384}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "connectivity_weight", "=", "0.4", "# Weight for connectivity influence", "distance_penalty_factor", "=", "0.5", "# Penalty for distance to unvisited nodes", "# Calculate the total connected nodes within a certain distance", "connected_nodes", "=", "[", "node", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_effect", "=", "len", "(", "connected_nodes", ")", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "if", "connected_nodes", "else", "0", "distance_penalty", "=", "distance_penalty_factor", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "direct_distance", "+", "distance_penalty", "-", "connectivity_weight", "*", "connectivity_effect", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "current_path_length", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Score based on direct distance and current path length", "adjusted_score", "=", "distance_to_next", "+", "(", "current_path_length", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "if", "adjusted_score", "<", "min_score", ":", "min_score", "=", "adjusted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "max_distance_to_unvisited", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "heuristic_score", "=", "0.5", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "0.5", "*", "connectivity_score", "distance_penalty", "=", "0.3", "*", "(", "max_distance_to_unvisited", "-", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "score", "=", "direct_distance", "+", "heuristic_score", "-", "distance_penalty", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.494335416573771}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "connectivity_weight", "=", "0.4", "# Weight for connectivity to unvisited nodes", "proximity_weight", "=", "0.3", "# Weight for proximity to destination", "cumulative_distance_weight", "=", "0.2", "# Weight for cumulative distance traveled", "temporal_decay_weight", "=", "0.1", "# Weight for the temporal decay of distance traveled", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "prev_node", "]", "for", "prev_node", "in", "unvisited_nodes", "if", "prev_node", "!=", "current_node", ")", "connectivity_scores", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "for", "neighbor", "in", "unvisited_nodes", "if", "neighbor", "!=", "node", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "connectivity_score", "=", "connectivity_scores", "[", "node", "]", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "temporal_decay", "=", "1", "/", "(", "(", "cumulative_distance", "**", "0.5", ")", "+", "1", ")", "# A decay factor based on cumulative distance", "score", "=", "(", "proximity_weight", "*", "proximity_score", "+", "connectivity_weight", "*", "connectivity_score", "-", "(", "cumulative_distance", "*", "cumulative_distance_weight", ")", "-", "direct_distance", "*", "temporal_decay", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.126522792222337}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "node_scores", "=", "{", "}", "# Calculate a score for each unvisited node based on distance and connectivity", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "shared_connections", "=", "len", "(", "[", "other", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "float", "(", "'inf'", ")", "]", ")", "# Combine direct distance and connectivity with a modified weight", "node_scores", "[", "node", "]", "=", "direct_distance", "-", "(", "shared_connections", "*", "0.5", ")", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "min_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "candidates", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "(", "min_distance", "/", "(", "distance_to_node", "+", "1", ")", ")", "# Avoid division by zero with +1", "weighted_score", "=", "(", "distance_to_node", "*", "0.5", ")", "+", "(", "proximity_score", "*", "0.5", ")", "candidates", ".", "append", "(", "(", "node", ",", "weighted_score", ")", ")", "next_node", "=", "min", "(", "candidates", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "connectivity_weight", "=", "0.6", "# Weight for connectivity", "remaining_distance_weight", "=", "0.4", "# Weight for remaining distance", "for", "node", "in", "unvisited_nodes", ":", "remaining_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", ")", "# Number of connections", "score", "=", "connectivity_weight", "*", "connectivity_score", "-", "remaining_distance_weight", "*", "remaining_distance", "# Add a random factor to promote exploration", "score", "+=", "random", ".", "uniform", "(", "-", "0.1", ",", "0.1", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 19.49779403918567}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_distance_weight", "=", "0.6", "# Introducing a balance towards immediate distance", "projected_cost_weight", "=", "0.4", "# Weight for projected cost impact of unvisited nodes", "nearest_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "projected_total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_next_node", "]", "for", "next_next_node", "in", "unvisited_nodes", "if", "next_next_node", "!=", "node", ")", "+", "total_distance_to_destination", "average_projected_distance", "=", "projected_total_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "penalty", "=", "(", "average_projected_distance", "-", "nearest_distance", ")", "*", "0.3", "score", "=", "(", "immediate_distance", "*", "immediate_distance_weight", ")", "+", "penalty", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.50345420923899}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Convert unvisited nodes to a numpy array for easier manipulation", "unvisited_nodes", "=", "np", ".", "array", "(", "list", "(", "unvisited_nodes", ")", ")", "# Calculate distances from the current node to all unvisited nodes", "distances", "=", "distance_matrix", "[", "current_node", ",", "unvisited_nodes", "]", "# Calculate the distances from unvisited nodes to the destination", "destination_distances", "=", "distance_matrix", "[", "unvisited_nodes", ",", "destination_node", "]", "# Compute a dynamic weight based on the nearest distance to the destination", "dynamic_weight", "=", "np", ".", "mean", "(", "destination_distances", ")", "/", "(", "np", ".", "min", "(", "destination_distances", ")", "+", "1", ")", "# Calculate the number of unvisited neighbors for each unvisited node", "unvisited_count", "=", "np", ".", "array", "(", "[", "np", ".", "sum", "(", "distance_matrix", "[", "node", ",", ":", "]", ">", "0", ")", "for", "node", "in", "unvisited_nodes", "]", ")", "# Compute a combined score: dynamic weighted distance + (1 / unvisited neighbors + 1)", "scores", "=", "distances", "+", "dynamic_weight", "+", "(", "1", "/", "(", "unvisited_count", "+", "1", ")", ")", "# Select the node with the minimum score", "next_node", "=", "unvisited_nodes", "[", "np", ".", "argmin", "(", "scores", ")", "]", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Focus more on direct distance", "potential_weight", "=", "0.3", "# Weight for the potential score of unvisited nodes", "novelty_penalty_weight", "=", "0.2", "# Penalty for nodes that are close to the destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "potential_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", ">", "0", ")", "# Inverse distance to other unvisited nodes", "# Novelty penalty based on proximity to the destination", "novelty_penalty", "=", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ">", "0", "else", "0", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "potential_weight", "*", "potential_score", "-", "novelty_penalty_weight", "*", "novelty_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 27.918098502730977}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_factor", "=", "average_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "0", "else", "1", ")", "score", "=", "direct_distance", "*", "0.8", "+", "heuristic_factor", "*", "0.2", "# Weighting the heuristic less", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "centroid_x", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "centroid_y", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "confidence_weight", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "1", "+", "sum", "(", "1", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<", "centroid_x", ")", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "*", "(", "1", "+", "confidence_weight", ")", "+", "0.7", "*", "confidence_weight", "*", "(", "centroid_x", "+", "centroid_y", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Create clusters based on distance", "clusters", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "not", "in", "clusters", ":", "clusters", "[", "distance", "]", "=", "[", "]", "clusters", "[", "distance", "]", ".", "append", "(", "node", ")", "# Identify the densest cluster", "densest_cluster", "=", "max", "(", "clusters", ".", "values", "(", ")", ",", "key", "=", "len", ")", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Start with positive infinity for minimization", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "densest_cluster", ")", "average_distance_to_destination", "=", "total_distance_to_destination", "/", "len", "(", "densest_cluster", ")", "for", "node", "in", "densest_cluster", ":", "# Calculate the direct distance to the current node", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Score based on a combination of direct distance and average distance to the destination", "score", "=", "direct_distance", "+", "average_distance_to_destination", "# Selecting the node that minimizes this score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 26.04202206317254}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "connection_weights", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "connection_count", "=", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<=", "5", ")", "connection_weights", "[", "node", "]", "=", "connection_count", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connection_weight", "=", "connection_weights", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "direct_distance", "+", "0.5", "*", "(", "avg_distance_to_destination", "-", "distance_to_destination", ")", "-", "0.3", "*", "connection_weight", "scores", "[", "node", "]", "=", "score", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "# Introduce randomness now; select from the best nodes using a weighted random choice", "best_nodes", "=", "[", "node", "for", "node", ",", "score", "in", "scores", ".", "items", "(", ")", "if", "score", "<=", "min_cost", "+", "0.1", "]", "# Consider nodes within a small range", "if", "best_nodes", ":", "next_node", "=", "random", ".", "choice", "(", "best_nodes", ")", "return", "next_node"], "code_perf": 8.187817260366884}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Accumulate the distance from the starting point to the current position", "accumulated_distance", "=", "sum", "(", "distance_matrix", "[", "0", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Select the closest unvisited node with an adjustment based on accumulated distance", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "(", "accumulated_distance", "/", "len", "(", "unvisited_nodes", ")", ")", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Define weights for the scoring factors", "distance_weight", "=", "0.5", "urgency_weight", "=", "0.3", "penalty_weight", "=", "0.2", "# Calculate scores for each unvisited node", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "urgency_score", "=", "1", "/", "(", "distance_to_node", "+", "1", ")", "# Higher score for nodes closer to current node", "penalty_score", "=", "distance_to_destination", "# Greater distance to destination adds penalty", "# Weighted score calculation", "score", "=", "(", "distance_weight", "*", "distance_to_node", ")", "+", "(", "urgency_weight", "*", "urgency_score", ")", "+", "(", "penalty_weight", "*", "penalty_score", ")", "scores", "[", "node", "]", "=", "score", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 7.691671292274917}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Greater weight for direct distance", "potential_weight", "=", "0.3", "# Weight for potential benefit of visiting unvisited nodes", "connectivity_weight", "=", "0.2", "# Weight for connectivity to other unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "potential_benefit", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", ")", "# Total benefit of visiting this node", "connectivity_score", "=", "len", "(", "[", "next", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "direct_distance", "]", ")", "# Count connections", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "potential_weight", "*", "potential_benefit", "+", "connectivity_weight", "*", "connectivity_score", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 35.134878882722454}
{"code_tokens": ["# {This algorithm uses a modified greedy approach by integrating a dynamic scoring system that considers both distance and node popularity based on the number of visits, balancing exploration between nearby and more attractive unvisited nodes.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate scores for unvisited nodes based on distance and \"popularity\"", "node_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "popularity_score", "=", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "15", "]", ")", "# Popularity based on nearby unvisited nodes", "score", "=", "distance_to_node", "-", "popularity_score", "# Lower score is better", "node_scores", "[", "node", "]", "=", "score", "# Select the node with the best score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "penalization_factor", "=", "1", "/", "unvisited_count", "if", "unvisited_count", ">", "0", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "direct_distance", "+", "heuristic_distance", "*", "penalization_factor", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.101442436613793}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_connectivity", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "risk_factor", "=", "direct_distance", "/", "average_connectivity", "if", "average_connectivity", ">", "0", "else", "0", "score", "=", "direct_distance", "+", "risk_factor", "*", "(", "1", "if", "len", "(", "unvisited_nodes", ")", ">", "2", "else", "0.5", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "visit_frequency", "=", "{", "node", ":", "1", "for", "node", "in", "unvisited_nodes", "}", "# Simplified frequency for all", "novelty_scores", "=", "{", "node", ":", "len", "(", "[", "other", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "float", "(", "'inf'", ")", "]", ")", "for", "node", "in", "unvisited_nodes", "}", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "frequency_penalty", "=", "visit_frequency", "[", "node", "]", "# Lower score for less frequently visited nodes", "novelty_factor", "=", "novelty_scores", "[", "node", "]", "if", "novelty_scores", "[", "node", "]", ">", "0", "else", "1", "# Prevent division by zero", "score", "=", "(", "distance", "/", "frequency_penalty", ")", "*", "random", ".", "uniform", "(", "0.9", ",", "1.1", ")", "+", "(", "1", "/", "novelty_factor", ")", "# Adding novelty", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.078384045962239}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "tabu_list", "=", "set", "(", ")", "tabu_tenure", "=", "2", "# Restricting the last two visited nodes", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "# Update the tabu list with the current node", "tabu_list", ".", "add", "(", "current_node", ")", "if", "len", "(", "tabu_list", ")", ">", "tabu_tenure", ":", "tabu_list", ".", "pop", "(", ")", "# Remove the oldest entry in the tabu list", "immediate_distances", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "if", "node", "not", "in", "tabu_list", "]", "avg_immediate_distance", "=", "np", ".", "mean", "(", "immediate_distances", ")", "if", "immediate_distances", "else", "0", "# Calculate a risk factor based on distance to the destination", "risk_factor", "=", "np", ".", "std", "(", "[", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "if", "node", "not", "in", "tabu_list", "]", ")", "for", "node", "in", "unvisited_nodes", ":", "if", "node", "not", "in", "tabu_list", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# New score calculation combining immediate distance, risk factor, and average distance", "score", "=", "immediate_distance", "+", "risk_factor", "+", "(", "avg_immediate_distance", "-", "immediate_distance", ")", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 27.692728143090072}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "potential_nodes", "=", "[", "]", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_remaining_distance", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "feedback_adjustment", "=", "(", "total_remaining_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "*", "0.2", "score", "=", "direct_distance", "+", "feedback_adjustment", "# Introduce a random perturbation", "if", "random", ".", "random", "(", ")", "<", "0.1", ":", "# 10% chance to explore other nodes", "score", "*=", "1.1", "# Slightly increase the score to promote exploration", "potential_nodes", ".", "append", "(", "(", "node", ",", "score", ")", ")", "# Select the node with the least score (distance + feedback)", "next_node", "=", "min", "(", "potential_nodes", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 6.992013613806744}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "optimal_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "increase_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "increase_cost", "<", "optimal_cost", "or", "(", "increase_cost", "==", "optimal_cost", "and", "distance", "<", "distance_matrix", "[", "current_node", "]", "[", "next_node", "]", ")", ":", "optimal_cost", "=", "increase_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "candidates", "=", "list", "(", "unvisited_nodes", ")", "scored_candidates", "=", "[", "]", "for", "node", "in", "candidates", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_connectivity", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "0.0001", ")", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Distance to the destination as a factor", "# Hybrid score combines distance, connectivity, and distance to destination", "score", "=", "direct_distance", "+", "(", "1", "-", "avg_connectivity", ")", "+", "distance_to_destination", "*", "0.5", "scored_candidates", ".", "append", "(", "(", "node", ",", "score", ")", ")", "scored_candidates", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "return", "scored_candidates", "[", "0", "]", "[", "0", "]"], "code_perf": 7.460598815061458}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "# Calculate average distance from the current node to the unvisited nodes", "avg_distance_from_current", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "# Calculate total distance of the remaining unvisited nodes to encourage cluster selection", "total_distance_to_unvisited", "=", "np", ".", "sum", "(", "[", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# New score calculation considering both immediate distance and total cluster distance", "score", "=", "immediate_distance", "+", "(", "total_distance_to_unvisited", "/", "len", "(", "unvisited_nodes", ")", ")", "-", "avg_distance_from_current", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "risk_weight", "=", "0.4", "# Weight for risk mitigation based on distances to other unvisited nodes", "time_weight", "=", "0.4", "# Weight for expected travel time", "connectivity_weight", "=", "0.2", "# Weight based on overall connectivity to remaining nodes", "total_distances_to_unvisited", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "average_risk", "=", "sum", "(", "total_distances_to_unvisited", ")", "/", "(", "len", "(", "total_distances_to_unvisited", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "travel_time", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "risk_weight", "*", "-", "average_risk", ")", "+", "(", "time_weight", "*", "-", "travel_time", ")", "+", "(", "connectivity_weight", "*", "-", "connectivity_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.526271790227707}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_penalty_weight", "=", "0.5", "# Weight for distance penalty", "final_node_priority_weight", "=", "0.5", "# Weight for prioritizing nodes close to final unvisited node", "decay_factor", "=", "0.8", "# Decay factor for approach to end", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Apply a penalty to the score based on the direct distance", "distance_penalty", "=", "direct_distance", "*", "distance_penalty_weight", "# Calculate the potential last node approach", "if", "len", "(", "unvisited_nodes", ")", ">", "1", ":", "last_unvisited_distance", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "final_node_priority", "=", "last_unvisited_distance", "*", "final_node_priority_weight", "*", "decay_factor", "else", ":", "final_node_priority", "=", "0", "score", "=", "-", "(", "total_distance_to_destination", "+", "distance_penalty", ")", "+", "final_node_priority", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.852479111856204}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "visited_count", "=", "len", "(", "distance_matrix", ")", "-", "len", "(", "unvisited_nodes", ")", "-", "1", "attractiveness_factor", "=", "1.5", "**", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "# Increases with unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "distance_to_node", "+", "(", "attractiveness_factor", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 17.386940822346958}
{"code_tokens": ["# {The design idea involves using a weighted scoring system that combines heuristic distance factors with a decay factor based on the number of unvisited nodes, encouraging exploration while prioritizing closer nodes.}", "import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate heuristic distances to unvisited nodes", "heuristic_distances", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_distances", "[", "node", "]", "=", "distance_to_node", "# Calculating decay factor based on the number of unvisited nodes", "decay_factor", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "distance_matrix", ")", "+", "1e-6", ")", "# Scoring based on heuristic distances and decay factor", "scores", "=", "{", "node", ":", "(", "1", "/", "(", "dist", "+", "1e-6", ")", ")", "*", "decay_factor", "for", "node", ",", "dist", "in", "heuristic_distances", ".", "items", "(", ")", "}", "# Introducing stochastic element: adding a random noise to scores for exploration", "noise", "=", "{", "node", ":", "random", ".", "uniform", "(", "-", "0.1", ",", "0.1", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "scores", ":", "scores", "[", "node", "]", "+=", "noise", "[", "node", "]", "# Selecting the node with the maximum score", "next_node", "=", "max", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.995588206312564}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm enhances node selection by incorporating a weight factor based on the remaining unvisited nodes' distance and their mutual proximity.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "# Calculate total distance to remaining unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Calculate the number of unvisited nodes", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "direct_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Proximity score", "proximity_score", "=", "1", "/", "(", "direct_distance_to_destination", "+", "1", ")", "# Weight factor based on the remaining unvisited nodes' average distance", "remaining_weight", "=", "(", "total_distance", "-", "distance_to_next", ")", "/", "(", "max", "(", "num_unvisited", ",", "1", ")", "*", "(", "1", "+", "total_distance", ")", ")", "# New score integrating the weight factor", "score", "=", "proximity_score", "*", "(", "1", "-", "(", "distance_to_next", "/", "total_distance", ")", ")", "*", "remaining_weight", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.990099637535671}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "proximity_weight", "=", "0.4", "# Weight for proximity influence", "penalty_factor", "=", "0.1", "# Penalty for remaining unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_penalty", "=", "penalty_factor", "*", "len", "(", "unvisited_nodes", ")", "# Penalizing distance for more unvisited nodes", "proximity_effect", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "for", "neighbor", "in", "unvisited_nodes", "if", "neighbor", "!=", "node", ")", "if", "node", "in", "unvisited_nodes", "else", "0", "# Utilizing proximity influence and penalty", "score", "=", "direct_distance", "+", "remaining_penalty", "-", "proximity_weight", "*", "proximity_effect", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 27.082637595423876}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_weight", "=", "0.4", "# Weight for direct distance", "cluster_weight", "=", "0.4", "# Weight for neighboring connectivity", "long_term_weight", "=", "0.2", "# Weight for future path potential", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "neighboring_connectivity", "=", "sum", "(", "1", "for", "next_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "<", "10", ")", "# Considering a threshold for close nodes", "long_term_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "decay_factor", "=", "1", "/", "(", "1", "+", "immediate_distance", ")", "# Introduces a decay in score based on distance", "score", "=", "-", "immediate_weight", "*", "immediate_distance", "+", "cluster_weight", "*", "neighboring_connectivity", "+", "long_term_weight", "*", "long_term_score", "*", "decay_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.582648378672627}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance from current node", "future_savings_weight", "=", "0.4", "# Weight for clustering future savings", "destination_attraction_weight", "=", "0.2", "# Weight for attraction towards destination", "travel_cost_penalty_weight", "=", "0.1", "# Weight for penalizing total travel cost", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "total_travel_cost", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_savings", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "average_future_savings", "=", "future_savings", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "1", ")", "score", "=", "-", "(", "direct_distance", "*", "direct_distance_weight", ")", "+", "(", "average_future_savings", "*", "future_savings_weight", ")", "+", "(", "destination_attraction_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "-", "(", "total_travel_cost", "*", "travel_cost_penalty_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.727529838365593}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_adjusted_score", "=", "float", "(", "'inf'", ")", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "heuristic_value", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "# Average distance to destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Direct distance to destination from the candidate node", "adjusted_score", "=", "(", "direct_distance", "+", "(", "total_distance_to_unvisited", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", ")", "+", "future_cost", ")", "-", "heuristic_value", "if", "adjusted_score", "<", "min_adjusted_score", ":", "min_adjusted_score", "=", "adjusted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "# Calculate the direct distance to the current node", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate the distance to the final destination", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate the total connection score for the node based on distances to other unvisited nodes", "connection_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "# Score based on the distance to the destination, penalty for direct distance, and connection score", "score", "=", "-", "direct_distance", "+", "distance_to_destination", "+", "(", "1", "/", "(", "connection_score", "+", "1e-5", ")", ")", "# Avoid division by zero", "# Selecting the node that maximizes this score", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.597900543070148}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Adjusted weight for direct distance", "penalty_weight", "=", "0.4", "# Increased weight for penalty on longer detours", "cluster_weight", "=", "0.2", "# Clustering benefits remain the same", "scaling_factor", "=", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "**", "0.5", ")", "# Adaptive scaling based on remaining nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "total_distance_to_destination", ")", "*", "penalty_weight", "cluster_contribution", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "score", "=", "(", "1", "-", "(", "direct_distance", "/", "(", "total_distance_to_destination", "+", "1", ")", ")", ")", "*", "distance_weight", "-", "penalty", "*", "scaling_factor", "+", "(", "cluster_contribution", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "*", "cluster_weight", ")", "+", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", "*", "distance_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.003975941267879}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for distance", "connection_weight", "=", "0.4", "# Weight for direct connections to destination", "penalty_weight", "=", "0.2", "# Penalty for visiting longer paths", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "direct_connection_score", "=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1e-5", ")", "# Avoid division by zero", "penalty_score", "=", "direct_distance", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "+", "1e-5", ")", "# Longer paths are penalized", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connection_weight", "*", "direct_connection_score", "-", "penalty_weight", "*", "penalty_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.07738762464906}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "current_cost_weight", "=", "0.6", "urgency_factor_weight", "=", "0.3", "exploration_weight", "=", "0.1", "max_distance", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "current_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Urgency factor: inversely proportional to the distance to the destination ", "urgency_factor", "=", "urgency_factor_weight", "*", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", ")", "# Exploration score: encourages visiting nodes farther from the current node but closer to unvisited nodes", "exploration_score", "=", "exploration_weight", "*", "(", "max_distance", "-", "current_distance", ")", "total_cost", "=", "current_cost_weight", "*", "current_distance", "+", "(", "1", "-", "current_cost_weight", ")", "*", "urgency_factor", "+", "exploration_score", "if", "total_cost", "<", "best_score", ":", "best_score", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.761092980481792}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Create a list to store scores for each unvisited node", "scores", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "for", "unvisited", "in", "unvisited_nodes", "if", "unvisited", "!=", "node", ")", "# Score includes direct distance and a penalty based on remaining unvisited nodes", "score", "=", "direct_distance", "+", "(", "remaining_penalty", "/", "len", "(", "unvisited_nodes", ")", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "direct_distance", "scores", ".", "append", "(", "(", "score", ",", "node", ")", ")", "# Sort scores based on the first element (the computed score)", "scores", ".", "sort", "(", ")", "# Return the node with the lowest score", "return", "scores", "[", "0", "]", "[", "1", "]"], "code_perf": 8.406859942200565}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Penalty for longer paths", "long_path_penalty", "=", "1", "/", "(", "1", "+", "distance_to_next", ")", "# Score based on proximity to destination and the penalty for distance", "score", "=", "(", "1", "/", "(", "distance_to_destination", "+", "1", ")", ")", "*", "long_path_penalty", "# Adding randomness to encourage exploration", "exploration_factor", "=", "random", ".", "uniform", "(", "0.8", ",", "1.2", ")", "score", "*=", "exploration_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.975383097330099}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.35", "future_efficiency_weight", "=", "0.25", "visit_frequency_weight", "=", "0.20", "randomness_factor", "=", "0.10", "decay_factor", "=", "0.10", "visit_count", "=", "{", "node", ":", "1", "for", "node", "in", "unvisited_nodes", "}", "# Placeholder for visit frequency", "def", "calculate_future_efficiency", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", ")", "if", "unvisited_nodes", "else", "0", "def", "calculate_visit_frequency", "(", "node", ")", ":", "return", "visit_count", ".", "get", "(", "node", ",", "1", ")", "# Higher scores for less visited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "(", "1", "+", "decay_factor", ")", "future_efficiency", "=", "calculate_future_efficiency", "(", "node", ")", "visit_frequency", "=", "calculate_visit_frequency", "(", "node", ")", "# Scoring equation with randomness included", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "future_efficiency_weight", "*", "future_efficiency", "+", "visit_frequency_weight", "*", "(", "1", "/", "visit_frequency", ")", "+", "randomness_factor", "*", "random", ".", "uniform", "(", "0", ",", "1", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.551001496579891}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "density_weight", "=", "0.4", "# Weight for attractiveness based on density of unvisited nodes", "risk_penalty_weight", "=", "0.2", "# Weight for potential detour risk", "# Calculate density score for unvisited nodes based on their proximity to each other", "density_score", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "density_score", "[", "node", "]", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "for", "unvisited", "in", "unvisited_nodes", "if", "unvisited", "!=", "node", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Risk penalty based on potential detours", "risk_penalty", "=", "max", "(", "0", ",", "sum", "(", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "for", "unvisited", "in", "unvisited_nodes", ")", "-", "direct_distance", ")", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "density_weight", "*", "density_score", "[", "node", "]", "-", "risk_penalty_weight", "*", "risk_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 30.074348409583795}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_penalty", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "heuristic_weight", "=", "0.6", "# Weight for heuristic distance to unvisited nodes", "penalty_weight", "=", "0.4", "# Weight for proximity to visited nodes", "for", "node", "in", "unvisited_nodes", ":", "heuristic_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "penalty_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "visited_node", "]", "for", "visited_node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "visited_node", "not", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "distance_matrix", ")", "-", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "heuristic_distance", "*", "heuristic_weight", ")", "+", "(", "distance_to_destination", "*", "(", "1", "-", "penalty_weight", ")", ")", "-", "penalty_distance", "if", "score", "<", "min_penalty", ":", "min_penalty", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.602437310385628}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance", "future_savings_weight", "=", "0.4", "# Weight for potential future savings", "exploration_weight", "=", "0.3", "# Weight for exploration of distant nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "potential_future_savings", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "distance_to_completion", "=", "max", "(", "0", ",", "total_distance_to_destination", "-", "direct_distance", ")", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "future_savings_weight", "*", "potential_future_savings", ")", "-", "(", "exploration_weight", "*", "distance_to_completion", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.729961612133618}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Score based on proximity and distance to the destination", "scores", "[", "node", "]", "=", "distance_to_node", "-", "distance_to_destination", "# Select the node with the highest score (lowest distance cost)", "next_node", "=", "max", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 28.256867359379942}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.3", "# Weight for connectivity to unvisited nodes", "clustering_weight", "=", "0.3", "# Weight for clustering and proximity to destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "direct_to_dest_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Distance to final destination", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "cluster_factor", "=", "1", "/", "(", "1", "+", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", ")", "# Encourages visiting clustered nodes", "# Calculate combined score with a penalty for distance to destination", "score", "=", "-", "direct_distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "clustering_weight", "*", "cluster_factor", "*", "(", "1", "/", "(", "1", "+", "direct_to_dest_distance", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.489302459029972}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ",", "threshold", "=", "1.0", ")", ":", "clusters", "=", "[", "]", "visited_clusters", "=", "set", "(", ")", "# Step 1: Cluster unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "if", "not", "visited_clusters", ":", "clusters", ".", "append", "(", "[", "node", "]", ")", "visited_clusters", ".", "add", "(", "tuple", "(", "clusters", "[", "-", "1", "]", ")", ")", "else", ":", "added_to_cluster", "=", "False", "for", "cluster", "in", "clusters", ":", "if", "all", "(", "distance_matrix", "[", "node", "]", "[", "cluster_node", "]", "<=", "threshold", "for", "cluster_node", "in", "cluster", ")", ":", "cluster", ".", "append", "(", "node", ")", "added_to_cluster", "=", "True", "visited_clusters", ".", "add", "(", "tuple", "(", "cluster", ")", ")", "break", "if", "not", "added_to_cluster", ":", "clusters", ".", "append", "(", "[", "node", "]", ")", "visited_clusters", ".", "add", "(", "tuple", "(", "clusters", "[", "-", "1", "]", ")", ")", "# Step 2: Select the nearest node from the nearest cluster", "nearest_cluster", "=", "None", "min_distance_to_cluster", "=", "float", "(", "'inf'", ")", "for", "cluster", "in", "clusters", ":", "avg_distance_to_cluster", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "cluster", ")", "/", "len", "(", "cluster", ")", "if", "avg_distance_to_cluster", "<", "min_distance_to_cluster", ":", "min_distance_to_cluster", "=", "avg_distance_to_cluster", "nearest_cluster", "=", "cluster", "# Step 3: Return the closest node from the nearest cluster", "next_node", "=", "min", "(", "nearest_cluster", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "return", "next_node"], "code_perf": 7.302170783702197}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Generate initial candidates based on unvisited nodes", "candidates", "=", "list", "(", "unvisited_nodes", ")", "# Evaluate candidates based on a scoring system", "scored_candidates", "=", "[", "]", "for", "node", "in", "candidates", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Dynamic scaling factor based on proximity to the destination", "scaling_factor", "=", "1", "+", "(", "distance_to_destination", "/", "(", "distance_to_destination", "+", "1", ")", ")", "# Bonus for selecting further unvisited nodes", "unvisited_bonus", "=", "(", "1", "/", "len", "(", "unvisited_nodes", ")", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Calculate score", "score", "=", "direct_distance", "*", "scaling_factor", "-", "unvisited_bonus", "scored_candidates", ".", "append", "(", "(", "node", ",", "score", ")", ")", "# Sort candidates by score, picking the one with the lowest score", "scored_candidates", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "# Select the best candidate", "return", "scored_candidates", "[", "0", "]", "[", "0", "]"], "code_perf": 7.125780303609857}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "cluster_weight", "=", "0.3", "# Weight for cluster attractiveness", "diversity_weight", "=", "0.2", "# Weight for diversifying node selection", "penalty_weight", "=", "0.1", "# Weight for total tour length penalty", "# Calculate the center of remaining unvisited nodes", "cluster_center", "=", "[", "0", "]", "*", "len", "(", "distance_matrix", ")", "for", "node", "in", "unvisited_nodes", ":", "for", "i", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", ":", "cluster_center", "[", "i", "]", "+=", "distance_matrix", "[", "node", "]", "[", "i", "]", "cluster_center", "=", "[", "x", "/", "len", "(", "unvisited_nodes", ")", "for", "x", "in", "cluster_center", "]", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "prev", "]", "for", "prev", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "prev", "not", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Cluster score based on proximity to the center of unvisited nodes", "cluster_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "for", "unvisited", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Diversity score based on the distance to other unvisited nodes", "diversity_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "+", "1", ")", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "# Penalty based on the current total distance traveled", "penalty", "=", "total_distance", "/", "(", "len", "(", "distance_matrix", ")", "-", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "cluster_weight", "*", "cluster_score", "+", "diversity_weight", "*", "diversity_score", "-", "penalty_weight", "*", "penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.849584512083615}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "# Influence of destination", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_penalty", "=", "distance", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "# Normalized distance impact", "exploration_factor", "=", "(", "total_distance_to_unvisited", "-", "distance", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "# Exploration balance", "weighted_score", "=", "distance", "+", "distance_penalty", "-", "average_distance_to_destination", "+", "exploration_factor", "# Combine metrics", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.7", "# Weight for proximity", "density_weight", "=", "0.3", "# Weight for clustering density", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_density", "=", "sum", "(", "1", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "other_node", "]", ")", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "adjusted_proximity", "=", "1", "/", "(", "1", "+", "direct_distance", ")", "score", "=", "(", "adjusted_proximity", "*", "proximity_weight", "*", "(", "1", "/", "total_distance_to_destination", ")", ")", "+", "(", "cluster_density", "*", "density_weight", ")", "-", "direct_distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.492786178967006}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "estimated_tour_length", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "comfort_factor", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "1", "+", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", ")", "distance_penalty_factor", "=", "0.4", "# Adjusted factor for penalties", "comfort_weight", "=", "0.3", "# Weighting factor for comfort in the score", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_penalty", "=", "distance_penalty_factor", "*", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "estimated_tour_length", ")", "score", "=", "direct_distance", "+", "estimated_tour_length", "-", "(", "comfort_weight", "*", "comfort_factor", ")", "+", "distance_penalty", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.3", "# Weight for connectivity to unvisited nodes", "historical_efficiency_weight", "=", "0.2", "# Weight for historical path efficiency", "saturation_penalty_weight", "=", "0.1", "# Weight for saturation areas", "traveled_paths", "=", "{", "}", "# Store efficiency of previously traveled paths", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Connectivity score as the average distance to unvisited nodes", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Historical efficiency based on previously traveled paths", "if", "current_node", "in", "traveled_paths", ":", "historical_efficiency", "=", "traveled_paths", "[", "current_node", "]", ".", "get", "(", "node", ",", "0", ")", "else", ":", "historical_efficiency", "=", "0", "# Penalty for saturation (if the node is connected to too many unvisited nodes)", "saturation_penalty", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "2", ")", ")", "# Combined score", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "historical_efficiency_weight", "*", "historical_efficiency", "-", "saturation_penalty_weight", "*", "saturation_penalty", "# Record the path efficiency", "if", "current_node", "not", "in", "traveled_paths", ":", "traveled_paths", "[", "current_node", "]", "=", "{", "}", "traveled_paths", "[", "current_node", "]", "[", "node", "]", "=", "score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.37815587401459}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "clusters", "=", "{", "}", "# Create clusters based on distances", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_key", "=", "round", "(", "distance", ")", "# Clustering based on distance range", "if", "cluster_key", "not", "in", "clusters", ":", "clusters", "[", "cluster_key", "]", "=", "[", "]", "clusters", "[", "cluster_key", "]", ".", "append", "(", "node", ")", "# Calculate future cost and risk penalties", "for", "cluster", "in", "clusters", ".", "values", "(", ")", ":", "if", "cluster", ":", "# If there are nodes in the cluster", "future_cost", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "risk_penalty", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "*", "0.1", "# Risk penalty based on closest unvisited", "for", "node", "in", "cluster", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "(", "-", "direct_distance", "*", "0.5", ")", "+", "(", "future_cost", "*", "0.3", ")", "-", "(", "risk_penalty", "*", "0.2", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "dynamic_threshold", "=", "0.5", "+", "(", "0.5", "*", "len", "(", "unvisited_nodes", ")", "/", "len", "(", "distance_matrix", ")", ")", "if", "unvisited_nodes", "else", "0.5", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "average_distance_to_unvisited", "*", "dynamic_threshold", "-", "distance_to_next", ")", "-", "(", "0.3", "*", "distance_to_destination", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.608948264816889}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance", "path_weight", "=", "0.25", "# Weight for potential path connections", "randomness_weight", "=", "0.15", "# Weight for introducing randomness", "trend_weight", "=", "0.1", "# Weight for considering frequent nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Dummy trend data simulating which nodes have been visited more frequently (for demonstration)", "visit_trend", "=", "{", "node", ":", "1", "for", "node", "in", "unvisited_nodes", "}", "# Initialize trend counts", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "path_influence", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Random influence factor to promote exploration", "random_factor", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "*", "randomness_weight", "# Trend factor influence, assuming higher frequencies result in a small advantage", "trend_factor", "=", "visit_trend", "[", "node", "]", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "path_weight", "*", "path_influence", ")", "+", "(", "random_factor", ")", "+", "(", "trend_weight", "*", "trend_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.089132956894751}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for distance penalty", "centrality_weight", "=", "0.3", "# Weight for centrality score", "exploration_bonus", "=", "0.2", "# Weight for connectivity exploration", "# Function to calculate centrality score based on unvisited nodes", "def", "calculate_centrality_score", "(", "node", ")", ":", "connectivity_sum", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", ">", "0", ")", "return", "connectivity_sum", "# Function to calculate connectivity bonus based on neighboring unvisited nodes", "def", "calculate_exploration_bonus", "(", "node", ")", ":", "bonus", "=", "0", "neighbors", "=", "[", "other", "for", "other", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other", "]", ">", "0", "]", "return", "len", "(", "neighbors", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "centrality_score", "=", "calculate_centrality_score", "(", "node", ")", "exploration", "=", "calculate_exploration_bonus", "(", "node", ")", "# Combined scoring mechanism with penalties and bonuses", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "centrality_weight", "*", "centrality_score", "+", "exploration_bonus", "*", "exploration", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.079813254485867}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance to unvisited nodes", "attractiveness_weight", "=", "0.3", "# Weight for attractiveness to destination", "proximity_bonus", "=", "0.2", "# Bonus for being close to other unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "nearby_unvisited_count", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "5", ")", "# Assuming 5 as a threshold for proximity", "proximity_score", "=", "nearby_unvisited_count", "*", "proximity_bonus", "score", "=", "(", "1", "/", "direct_distance", "*", "direct_weight", ")", "+", "(", "1", "/", "distance_to_destination", "*", "attractiveness_weight", ")", "+", "proximity_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.279603846517265}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for distance to destination", "density_weight", "=", "0.3", "# Weight for local node density", "remaining_distance_weight", "=", "0.1", "# Weight for remaining distance to unvisited nodes", "penalty_weight", "=", "0.1", "# Weight for direct path penalties", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "local_density", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Simple density measure", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "score", "=", "(", "distance_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "density_weight", "*", "local_density", "-", "(", "remaining_distance_sum", "*", "remaining_distance_weight", ")", "-", "(", "penalty_weight", "*", "direct_distance", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 19.659022073402994}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Compute average distance to the remaining unvisited nodes", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Heuristic value increases with distance from destination", "heuristic_value", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "average_distance_to_unvisited", "# Introduce a dynamic penalty for nodes that are too close to the current node", "penalty", "=", "(", "0.2", "/", "(", "direct_distance", "+", "1", ")", ")", "if", "direct_distance", "<", "average_distance_to_unvisited", "else", "0", "# Score combines direct distance and penalties/heuristics", "score", "=", "direct_distance", "+", "heuristic_value", "+", "penalty", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.509661220042126}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.3", "# Weight for direct distance", "connectivity_weight", "=", "0.5", "# Weight for connectivity to unvisited nodes", "attractiveness_weight", "=", "0.2", "# Weight for total distance to visit unvisited nodes", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "# Connectivity score based on proximity to unvisited nodes", "attractiveness_score", "=", "(", "total_distance_to_unvisited", "-", "direct_distance", ")", "# Attractiveness score considering the distance remaining to unvisited nodes", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "-", "attractiveness_weight", "*", "attractiveness_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 13.647310802698978}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# This algorithm uses a scoring mechanism that incorporates both proximity to the next node and the diversity of the remaining unvisited nodes, promoting visits to nodes with varying distances to balance the path.", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "avg_distance_to_unvisited", "=", "total_distance_to_unvisited", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "min_distance_to_unvisited", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "float", "(", "'inf'", ")", "score", "=", "(", "(", "avg_distance_to_unvisited", "-", "distance_to_next", ")", "+", "(", "avg_distance_to_unvisited", "-", "min_distance_to_unvisited", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.98930167680099}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_future_cost", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "decay_factor", "=", "0.9", "# Factor to weight current distances more in decision making", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_cost_penalty", "=", "(", "max_future_cost", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "*", "decay_factor", "score", "=", "direct_distance", "+", "future_cost_penalty", "+", "random", ".", "uniform", "(", "0.1", ",", "0.2", ")", "# Slight random factor", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.0986225593166346}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", ":", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "num_unvisited", "weight_factor", "=", "1", "/", "num_unvisited", "# Dynamic weight factor based on the number of unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "distance_matrix", "[", "node", "]", "[", "current_node", "]", "*", "weight_factor", "score", "=", "direct_distance", "+", "avg_distance_to_destination", "+", "penalty", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_cost", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_distance_weight", "=", "0.7", "# Higher weight for immediate distance", "projected_cost_weight", "=", "0.3", "# Weight for projected cost impact of unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "projected_total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_next_node", "]", "for", "next_next_node", "in", "unvisited_nodes", "if", "next_next_node", "!=", "node", ")", "+", "total_distance_to_destination", "average_projected_distance", "=", "projected_total_distance", "/", "(", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "+", "1", ")", "cost_score", "=", "(", "immediate_distance", "*", "immediate_distance_weight", ")", "-", "(", "average_projected_distance", "*", "projected_cost_weight", ")", "if", "cost_score", ">", "max_cost", ":", "max_cost", "=", "cost_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 36.360409219357535}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Start with positive infinity for minimization", "total_remaining_nodes", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Penalize nodes based on the number of remaining unvisited nodes", "penalty_score", "=", "1", "/", "(", "total_remaining_nodes", "+", "1", ")", "# Avoid division by zero", "# Combine distance with future distance and penalty", "score", "=", "direct_distance", "+", "future_distance", "*", "penalty_score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.081438908556759}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to destination", "clustering_weight", "=", "0.3", "# Weight for clustering savings", "cumulative_distance_weight", "=", "0.2", "# Weight for cumulative distance traveled", "unvisited_influence_weight", "=", "0.1", "# Weight for the influence of unvisited nodes", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "prev_node", "]", "for", "prev_node", "in", "unvisited_nodes", "if", "prev_node", "!=", "current_node", ")", "unvisited_average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "(", "cluster_average_distance", "*", "clustering_weight", ")", "-", "(", "cumulative_distance", "*", "cumulative_distance_weight", ")", "-", "direct_distance", "+", "(", "unvisited_average_distance", "*", "unvisited_influence_weight", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.274499322786202}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "base_weight", "=", "0.5", "# Base weight for distance factor", "proximity_weight_factor", "=", "0.7", "# Weight for proximity influence", "adaptive_threshold", "=", "max", "(", "1", ",", "len", "(", "unvisited_nodes", ")", "/", "2", ")", "# Adaptive threshold based on the number of unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_effect", "=", "(", "1", "/", "(", "1", "+", "direct_distance", ")", ")", "if", "direct_distance", ">", "0", "else", "0", "score", "=", "(", "base_weight", "*", "direct_distance", ")", "+", "(", "proximity_weight_factor", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", ")", "*", "proximity_effect", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.082868414370749}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "influence_decay_factor", "=", "0.5", "# Factor to decrease influence from previous path", "if", "unvisited_nodes", ":", "distance_importance_weight", "=", "0.4", "# Weight for direct distance to unvisited nodes", "path_history_weight", "=", "0.4", "# Weight for historical path desirability", "proximity_weight", "=", "0.2", "# Weight for proximity to destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Assess past distance from current node in the historical context", "path_history_score", "=", "sum", "(", "distance_matrix", "[", "previous", "]", "[", "node", "]", "for", "previous", "in", "unvisited_nodes", "if", "previous", "!=", "node", ")", "*", "influence_decay_factor", "+", "1", "# Adding 1 to avoid zero division", "# Calculate score based on distance, historical desirability, and proximity to destination", "score", "=", "(", "distance_importance_weight", "*", "direct_distance", ")", "+", "(", "path_history_weight", "*", "path_history_score", ")", "-", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 16.18888182767499}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "future_estimate_weight", "=", "0.5", "# Weight for heuristic-based future path efficiency", "unvisited_influence_weight", "=", "0.1", "# Weight for counting unvisited nodes' impact", "# Length of the direct path to the destination node", "direct_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Heuristic estimate of future distances using mean distance to destination", "heuristic_future_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Scoring function incorporating weights", "score", "=", "(", "direct_distance_weight", "*", "-", "direct_distance", ")", "+", "(", "future_estimate_weight", "*", "heuristic_future_distance", ")", "+", "(", "unvisited_influence_weight", "*", "len", "(", "unvisited_nodes", ")", ")", "# Penalizing long detours from the current goal", "if", "direct_distance", ">", "direct_to_destination", ":", "score", "-=", "(", "direct_distance", "-", "direct_to_destination", ")", "*", "0.3", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.438978880723157}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "# Define a penalty for deviating from the optimal path", "penalty_factor", "=", "0.3", "optimal_path_length", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate the penalty based on the deviation from the optimal path", "penalty", "=", "penalty_factor", "*", "abs", "(", "direct_distance", "-", "optimal_path_length", ")", "score", "=", "direct_distance", "+", "penalty", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Adjusted weight for direct distance", "connectivity_weight", "=", "0.4", "# Increased weight for connectivity", "potential_weight", "=", "0.2", "# Weight for potential future benefit", "for", "node", "in", "unvisited_nodes", ":", "# Inverted distance to emphasize shorter paths", "inverted_distance", "=", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1e-10", ")", "# Avoid division by zero", "# Connectivity score based on density of unvisited nodes", "connectivity_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "+", "1e-10", ")", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Future potential score based on estimated optimal distance to the destination", "potential_score", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "dest", "]", "for", "dest", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Dynamic score calculation", "density_factor", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Based on remaining nodes", "score", "=", "(", "distance_weight", "*", "inverted_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "potential_weight", "*", "potential_score", "*", "density_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.436958979242746}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "clusters", "=", "{", "}", "# Create clusters based on proximity", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "not", "in", "clusters", ":", "clusters", "[", "distance", "]", "=", "[", "]", "clusters", "[", "distance", "]", ".", "append", "(", "node", ")", "# Calculate scores for each node considering both distance and heuristic", "scores", "=", "{", "}", "for", "distance", ",", "cluster", "in", "clusters", ".", "items", "(", ")", ":", "for", "node", "in", "cluster", ":", "heuristic_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# heuristic estimate to destination", "scores", "[", "node", "]", "=", "distance", "+", "heuristic_cost", "# score based on distance and heuristic", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "heuristic_weight", "=", "0.5", "# Weight for heuristic estimate of the remaining path", "connectivity_weight", "=", "0.3", "# Weight for connectivity penalty", "distance_weight", "=", "0.2", "# Weight for proximity", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Heuristic estimate of remaining distance to the destination using a straight-line approximation", "heuristic_estimate", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Connectivity penalty based on the degree of connectivity to remaining unvisited nodes", "degree_of_connectivity", "=", "sum", "(", "1", "for", "next_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "!=", "float", "(", "'inf'", ")", ")", "connectivity_penalty", "=", "degree_of_connectivity", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Normalize", "score", "=", "-", "(", "direct_distance", "*", "distance_weight", ")", "+", "(", "heuristic_estimate", "*", "heuristic_weight", ")", "-", "(", "connectivity_penalty", "*", "connectivity_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.587015219151294}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate weights based on inverse distances", "weights", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "weights", ".", "append", "(", "1", "/", "distance", "if", "distance", ">", "0", "else", "float", "(", "'inf'", ")", ")", "# Select the next node based on weighted probabilities", "total_weight", "=", "sum", "(", "weights", ")", "probabilities", "=", "[", "weight", "/", "total_weight", "for", "weight", "in", "weights", "]", "next_node", "=", "random", ".", "choices", "(", "list", "(", "unvisited_nodes", ")", ",", "probabilities", ")", "[", "0", "]", "return", "next_node"], "code_perf": 19.16432887357532}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Convert unvisited nodes to a numpy array for easier manipulation", "unvisited_nodes", "=", "np", ".", "array", "(", "list", "(", "unvisited_nodes", ")", ")", "# Calculate distances from the current node to all unvisited nodes", "distances", "=", "distance_matrix", "[", "current_node", ",", "unvisited_nodes", "]", "# Calculate distances from unvisited nodes to the destination", "destination_distances", "=", "distance_matrix", "[", "unvisited_nodes", ",", "destination_node", "]", "# Introduce a penalty parameter for longer distances", "penalty_factor", "=", "1.5", "penalties", "=", "np", ".", "maximum", "(", "0", ",", "destination_distances", "-", "np", ".", "mean", "(", "destination_distances", ")", ")", "*", "penalty_factor", "# Estimating future costs based on unvisited neighbors", "estimated_future_costs", "=", "np", ".", "array", "(", "[", "np", ".", "sum", "(", "distance_matrix", "[", "node", ",", "unvisited_nodes", "]", ")", "for", "node", "in", "unvisited_nodes", "]", ")", "# Compute a combined score: distance + penalty + estimated future costs", "scores", "=", "distances", "+", "penalties", "+", "estimated_future_costs", "# Introduce stochastic element to promote exploration", "randomness_factor", "=", "np", ".", "random", ".", "uniform", "(", "0.05", ",", "0.15", ",", "size", "=", "scores", ".", "shape", ")", "scores", "+=", "randomness_factor", "# Select the node with the minimum score", "next_node", "=", "unvisited_nodes", "[", "np", ".", "argmin", "(", "scores", ")", "]", "return", "next_node"], "code_perf": 21.701437553303784}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate centrality based on the number of connections to other unvisited nodes", "centrality_score", "=", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "float", "(", "'inf'", ")", ")", "# New heuristic incorporating both direct distance and centrality", "heuristic_score", "=", "direct_distance", "/", "(", "centrality_score", "+", "1", ")", "# Avoids division by zero", "if", "heuristic_score", "<", "best_score", ":", "best_score", "=", "heuristic_score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_cost_weight", "=", "0.4", "potential_weight", "=", "0.4", "connectivity_penalty_weight", "=", "0.2", "# Penalty for choosing well-connected nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Potential score based on the inverse of the average distance to future unvisited nodes", "potential_score", "=", "potential_weight", "*", "(", "1", "/", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "+", "1", ")", ")", "# Connectivity score: Higher score for nodes with fewer connections to visited nodes", "connections_to_visited_nodes", "=", "sum", "(", "1", "for", "i", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "i", "not", "in", "unvisited_nodes", "and", "distance_matrix", "[", "node", "]", "[", "i", "]", "<", "float", "(", "'inf'", ")", ")", "connectivity_penalty", "=", "connectivity_penalty_weight", "*", "(", "1", "/", "(", "connections_to_visited_nodes", "+", "1", ")", ")", "score", "=", "-", "direct_cost_weight", "*", "direct_distance", "+", "potential_score", "-", "connectivity_penalty", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.438528386986096}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "influence_radius", "=", "10", "# Reduced radius to consider nodes", "influence_nodes", "=", "[", "node", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<=", "influence_radius", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "influence_nodes", ":", "average_influence_effect", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "influence_node", "]", "for", "influence_node", "in", "influence_nodes", "if", "node", "!=", "influence_node", "and", "distance_matrix", "[", "node", "]", "[", "influence_node", "]", ">", "0", ")", "/", "len", "(", "influence_nodes", ")", "else", ":", "average_influence_effect", "=", "0", "adjusted_score", "=", "direct_distance", "+", "average_influence_effect", "if", "adjusted_score", "<", "min_cost", ":", "min_cost", "=", "adjusted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.175339017695855}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Start with positive infinity for minimization", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_destination", "=", "total_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "# Calculate the direct distance to the current node", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Compute a penalty based on the relative distances of unvisited nodes to current and average distances", "penalties", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "for", "unvisited", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "dynamic_penalty", "=", "(", "penalties", "-", "direct_distance", ")", "**", "2", "/", "len", "(", "unvisited_nodes", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Score based on direct distance, average distance to destination, and dynamic penalty", "score", "=", "direct_distance", "+", "average_distance_to_destination", "+", "dynamic_penalty", "# Selecting the node that minimizes this score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.987976522141025}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "# Calculate the cost based on direct distance and MST heuristic", "mst_cost", "=", "0", "if", "len", "(", "unvisited_nodes", ")", ">", "1", ":", "remaining_distance", "=", "[", "distance_matrix", "[", "node", "]", "[", "current_node", "]", "for", "node", "in", "unvisited_nodes", "]", "mst_cost", "=", "np", ".", "min", "(", "remaining_distance", ")", "# This is a simplified proxy for an MST calculation", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_cost", "=", "direct_distance", "+", "mst_cost", "if", "total_cost", "<", "min_cost", ":", "min_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate distances and node degree (number of connections)", "distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "node_degrees", "=", "{", "node", ":", "sum", "(", "1", "for", "i", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "distance_matrix", "[", "node", "]", "[", "i", "]", "<", "float", "(", "'inf'", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "# Create weighted scores combining distance and inverted degree", "weights", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "if", "distances", "[", "node", "]", ">", "0", ":", "# Avoid division by zero", "weights", "[", "node", "]", "=", "distances", "[", "node", "]", "/", "node_degrees", "[", "node", "]", "# Normalize weights", "total_weight", "=", "sum", "(", "weights", ".", "values", "(", ")", ")", "if", "total_weight", "==", "0", ":", "return", "None", "# Cannot select next node", "normalized_weights", "=", "{", "node", ":", "weight", "/", "total_weight", "for", "node", ",", "weight", "in", "weights", ".", "items", "(", ")", "}", "# Introduce randomness through weighted selection", "rand_value", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "cumulative_weight", "=", "0.0", "for", "node", ",", "weight", "in", "normalized_weights", ".", "items", "(", ")", ":", "cumulative_weight", "+=", "weight", "if", "cumulative_weight", ">=", "rand_value", ":", "return", "node", "return", "None"], "code_perf": 29.30728034003411}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "penalty_weight", "=", "0.4", "# Weight for penalty on longer detours", "crowding_weight", "=", "0.2", "# Weight for crowding effects", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "detour_penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "total_distance_to_destination", ")", "*", "penalty_weight", "crowding_effect", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "(", "direct_distance", "+", "detour_penalty", ")", "+", "(", "crowding_effect", "*", "crowding_weight", ")", "-", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "distance_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.20499799288276}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate the distance to the destination from the current node", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Introduce a dynamic weighting factor for exploration versus optimization", "explore_weight", "=", "0.6", "# Weighting towards exploration", "optimize_weight", "=", "1.0", "-", "explore_weight", "# Weighting towards optimization", "# Calculate scores for each unvisited node", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "desirability_score", "=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", "# Compute the weighted score", "scores", "[", "node", "]", "=", "(", "explore_weight", "*", "distance_to_node", ")", "+", "(", "optimize_weight", "*", "desirability_score", ")", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.686629297695152}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_distance_weight", "=", "0.4", "# Weight for immediate distance", "connectivity_weight", "=", "0.4", "# Weight for future connectivity cost", "destination_proximity_weight", "=", "0.2", "# Weight for proximity to destination", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_unvisited", "]", "for", "next_unvisited", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Adjusting scores to include proximity to destination", "proximity_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "node", "!=", "destination_node", "else", "0", "score", "=", "-", "(", "immediate_distance", "*", "immediate_distance_weight", ")", "+", "(", "connectivity_cost", "*", "connectivity_weight", ")", "+", "(", "proximity_score", "*", "destination_proximity_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.696674800295234}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.6", "# Emphasis on direct distance", "proximity_weight", "=", "0.4", "# Weight for proximity to other unvisited nodes", "penalty_weight", "=", "0.2", "# Penalty for distant nodes from the current node", "# Radius to consider for proximity scoring", "proximity_radius", "=", "2", "def", "calculate_proximity_score", "(", "node", ")", ":", "proximity_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "proximity_radius", ":", "proximity_score", "+=", "1", "# Counting nearby unvisited nodes", "return", "proximity_score", "def", "calculate_penalty_score", "(", "node", ")", ":", "return", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "/", "(", "1", "+", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "calculate_proximity_score", "(", "node", ")", "penalty_score", "=", "calculate_penalty_score", "(", "node", ")", "# Combined scoring mechanism", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "proximity_weight", "*", "proximity_score", "-", "penalty_weight", "*", "penalty_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to destination", "savings_weight", "=", "0.6", "# Weight for potential savings among unvisited nodes", "penalty_weight", "=", "0.2", "# Weight for distance penalty to further nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "potential_savings", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", ")", "# Incorporate a penalty for nodes further from the current node", "distance_penalty", "=", "penalty_weight", "*", "(", "direct_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "score", "=", "(", "savings_weight", "*", "potential_savings", ")", "-", "(", "direct_distance", "+", "distance_penalty", ")", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.85048238397221}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_penalty", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for distance to unvisited node", "penalty_weight", "=", "0.4", "# Weight for the penalty of overall path length", "exploration_factor", "=", "0.2", "# Probability factor to introduce randomness", "total_distance_from_start", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_future_penalty", "=", "total_distance_from_start", "+", "direct_distance", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "penalty_weight", "*", "total_future_penalty", "if", "random", ".", "random", "(", ")", "<", "exploration_factor", ":", "# Introduce randomness to explore other nodes", "score", "+=", "random", ".", "uniform", "(", "-", "1", ",", "1", ")", "if", "score", "<", "min_penalty", ":", "min_penalty", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 25.831709568905193}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "nearest_distance_weight", "=", "0.4", "# Weight for nearest unvisited node", "average_distance_weight", "=", "0.4", "# Weight for average distance to remaining unvisited nodes", "randomness_weight", "=", "0.2", "# Weight for introducing randomness in selection", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "# Get the nearest node and calculate distances", "nearest_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "nearest_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "nearest_node", "]", "# Calculate average distance to unvisited nodes", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "unvisited_count", "or", "1", ")", "# Score calculation with randomness factor", "score", "=", "(", "nearest_distance_weight", "*", "(", "1", "/", "(", "nearest_distance", "+", "1", ")", ")", "+", "# Closer node has higher score", "average_distance_weight", "*", "(", "1", "/", "(", "average_distance", "+", "1", ")", ")", "+", "# Lower average distance increases score", "randomness_weight", "*", "random", ".", "uniform", "(", "0", ",", "1", ")", "# Adding randomness to diversify selection", ")", "for", "node", "in", "unvisited_nodes", ":", "node_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Candidate score", "candidate_score", "=", "(", "nearest_distance_weight", "*", "(", "1", "/", "(", "node_distance", "+", "1", ")", ")", "+", "average_distance_weight", "*", "(", "1", "/", "(", "average_distance", "+", "1", ")", ")", "+", "randomness_weight", "*", "random", ".", "uniform", "(", "0", ",", "1", ")", ")", "if", "candidate_score", ">", "max_score", ":", "max_score", "=", "candidate_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 11.564659556006283}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "closeness_weight", "=", "0.6", "# Weight for closeness to destination", "distance_penalty_weight", "=", "0.4", "# Weight for distance to visited and unvisited nodes", "decay_factor", "=", "0.8", "# Decay factor to penalize distance", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "adjusted_score", "=", "(", "closeness_weight", "/", "(", "distance_to_destination", "+", "1e-9", ")", ")", "+", "(", "distance_penalty_weight", "*", "(", "total_distance", "*", "decay_factor", ")", ")", "score", "=", "adjusted_score", "-", "direct_distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.398965865659608}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm selects the next node based on a combination of the total distance to all unvisited nodes and a cohesion factor that prioritizes nodes that maintain a compact path.}", "next_node", "=", "None", "min_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "# Cohesion factor: Penalizing visits to remote nodes while incentivizing closeness", "cohesion_factor", "=", "(", "len", "(", "unvisited_nodes", ")", "*", "distance_to_next", ")", "/", "(", "total_distance_to_unvisited", "if", "total_distance_to_unvisited", ">", "0", "else", "1", ")", "cost", "=", "distance_to_next", "+", "cohesion_factor", "# Combine distance with cohesion factor", "if", "cost", "<", "min_cost", ":", "min_cost", "=", "cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.70716943457822}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Initialize pheromone levels and decay factor", "pheromone_levels", "=", "{", "node", ":", "1.0", "for", "node", "in", "unvisited_nodes", "}", "decay_factor", "=", "0.9", "# Calculate heuristic values based on distance", "heuristic_values", "=", "{", "node", ":", "1", "/", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Adjust pheromone levels dynamically based on completion heuristic", "total_length", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "completion_percentage", "=", "1", "-", "(", "total_length", "/", "(", "len", "(", "unvisited_nodes", ")", "*", "max", "(", "distance_matrix", ".", "flatten", "(", ")", ")", ")", ")", "# Compute probabilities incorporating pheromone decay and completion percentage", "probabilities", "=", "{", "}", "total_probability", "=", "0", "for", "node", "in", "unvisited_nodes", ":", "pheromone_effect", "=", "pheromone_levels", "[", "node", "]", "*", "(", "completion_percentage", "+", "0.1", ")", "# Avoid zero probability", "probabilities", "[", "node", "]", "=", "(", "pheromone_effect", "**", "1", ")", "*", "(", "heuristic_values", "[", "node", "]", "**", "2", ")", "total_probability", "+=", "probabilities", "[", "node", "]", "# Normalize probabilities", "for", "node", "in", "probabilities", ":", "probabilities", "[", "node", "]", "/=", "total_probability", "# Choose the next node based on computed probabilities", "rand", "=", "random", ".", "random", "(", ")", "cumulative_probability", "=", "0", "for", "node", ",", "prob", "in", "probabilities", ".", "items", "(", ")", ":", "cumulative_probability", "+=", "prob", "if", "rand", "<", "cumulative_probability", ":", "# Apply decay to pheromone levels after selection", "pheromone_levels", "[", "node", "]", "*=", "decay_factor", "return", "node", "return", "None"], "code_perf": 12.872874493533143}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "density_weight", "=", "0.4", "# Weight for the clustering density", "adaptive_penalty_factor", "=", "0.5", "# Adaptive penalty for distance", "historical_cost_weight", "=", "0.3", "# Weight for historical cost adjustment", "if", "unvisited_nodes", ":", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance_to_unvisited", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Calculate clustering density as the inverse sum of distances to unvisited nodes", "clustering_density", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1e-9", ")", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate historical cost adjustment (e.g., assume lower historical costs yield higher scores)", "historical_cost_score", "=", "1", "/", "(", "direct_distance", "+", "1e-9", ")", "# Inverse distance for historical score", "# Combined score with adaptive penalties", "adaptive_penalty", "=", "adaptive_penalty_factor", "*", "(", "direct_distance", "-", "average_distance", ")", "score", "=", "density_weight", "*", "clustering_density", "-", "adaptive_penalty", "+", "historical_cost_weight", "*", "historical_cost_score", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_factor", "=", "0.4", "# Weight for direct distance", "cluster_density_factor", "=", "0.4", "# Weight for density of unvisited nodes", "future_proximity_factor", "=", "0.2", "# Weight for proximity to remaining nodes", "# Calculate average distance to remaining unvisited nodes", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Compute cluster density as the ratio of unvisited neighbors to total remaining nodes", "cluster_density", "=", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "avg_distance_to_unvisited", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Potential score based on the distances to other unvisited nodes", "future_proximity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "distance_factor", "*", "direct_distance", "+", "cluster_density_factor", "*", "cluster_density", "+", "future_proximity_factor", "*", "future_proximity_score", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.828349642044532}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Nearest neighbor weight: favor closer nodes", "nearest_neighbor_weight", "=", "distance_to_node", "# Penalty for increasing overall path length: based on the distance to the destination from the unvisited node", "overall_path_penalty", "=", "distance_to_destination", "*", "(", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", ")", "# Calculate the score combining both metrics", "score", "=", "nearest_neighbor_weight", "+", "overall_path_penalty", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scored_nodes", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "adaptive_score", "=", "distance_to_node", "+", "(", "total_distance_to_unvisited", "/", "len", "(", "unvisited_nodes", ")", ")", "# Incorporating distance to remaining unvisited nodes", "scored_nodes", "[", "node", "]", "=", "adaptive_score", "next_node", "=", "min", "(", "scored_nodes", ",", "key", "=", "scored_nodes", ".", "get", ")", "return", "next_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Weighted score: prioritizing lower distances to the next node and the destination", "score", "=", "(", "average_distance_to_unvisited", "-", "distance_to_next", ")", "-", "distance_to_destination", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.328751305099974}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "future_connection_weight", "=", "0.5", "# Weight for potential future connections", "detour_penalty_weight", "=", "0.1", "# Weight for detour penalties", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "adjusted_detour", "=", "max", "(", "0", ",", "direct_distance", "-", "total_distance_to_destination", ")", "future_connection_sum", "=", "sum", "(", "max", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", ",", "distance_matrix", "[", "other_node", "]", "[", "current_node", "]", ")", "for", "other_node", "in", "unvisited_nodes", ")", "future_connection_average", "=", "future_connection_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "future_connection_weight", "*", "future_connection_average", ")", "-", "(", "detour_penalty_weight", "*", "adjusted_detour", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.404895835933996}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_remaining", "=", "total_distance_remaining", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Adaptability factor based on total remaining distance", "adaptability_factor", "=", "(", "total_distance_remaining", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "/", "max", "(", "1", ",", "total_distance_remaining", ")", "# Random exploration score", "random_exploration_score", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "*", "0.1", "# small random factor", "# Weighted score incorporating adaptability and randomness", "weighted_score", "=", "(", "0.5", "*", "direct_distance", "+", "0.4", "*", "adaptability_factor", "+", "random_exploration_score", ")", "score", "=", "weighted_score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.7962151705491936}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "proximity_weight", "=", "0.6", "# Weight for distance related to current node", "exploration_weight", "=", "0.3", "# Weight for exploration of unvisited nodes", "visit_count_weight", "=", "0.1", "# Weight for the historical visit count", "visit_counts", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "# Initialize visit counts", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Explore the average distance to remaining unvisited nodes", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Score calculation", "score", "=", "(", "proximity_weight", "/", "(", "direct_distance", "+", "1e-6", ")", ")", "+", "(", "exploration_weight", "*", "average_distance_to_unvisited", ")", "-", "(", "visit_count_weight", "*", "visit_counts", "[", "node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "# Increment the visit count for the selected next node", "if", "next_node", "is", "not", "None", ":", "visit_counts", "[", "next_node", "]", "+=", "1", "return", "next_node"], "code_perf": 6.856841984636008}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "pathway_penalty_factor", "=", "0.5", "# Factor to penalize longer paths", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "if", "num_unvisited", "==", "0", ":", "return", "None", "# Dynamic weights based on the number of unvisited nodes", "distance_weight", "=", "1", "/", "(", "num_unvisited", "**", "0.5", ")", "# Weight decreases with more unvisited nodes", "potential_pathway_weight", "=", "0.5", "# Constant weight for potential future pathways", "destination_alignment_weight", "=", "0.5", "# Constant weight for alignment towards destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate potential future pathways based on average distance to remaining unvisited nodes", "avg_future_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "num_unvisited", "or", "1", ")", "# Estimate score for alignment towards the final destination", "destination_alignment_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score with penalty for longer paths", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "potential_pathway_weight", "*", "avg_future_distance", "-", "pathway_penalty_factor", "*", "direct_distance", "+", "destination_alignment_weight", "*", "destination_alignment_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.916498323981644}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", "+", "(", "total_distance_to_unvisited", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", ")", ")", "-", "(", "0.5", "*", "distance_to_destination", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.093500943435799}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "efficiency_weight", "=", "0.6", "# Weight for estimated cluster efficiency", "direct_distance_weight", "=", "0.4", "# Weight for direct distance cost", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty_factor", "=", "0.3", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "# Adjusted penalty factor", "cluster_efficiency", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "efficiency_adjustment", "=", "1", "/", "(", "1", "+", "cluster_efficiency", ")", "# Calculate efficiency adjustment", "score", "=", "-", "(", "direct_distance", "+", "penalty_factor", ")", "+", "(", "efficiency_weight", "*", "efficiency_adjustment", ")", "+", "(", "direct_distance_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.794527307789728}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "minimal_weighted_distance", "=", "float", "(", "'inf'", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "return_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "weighted_distance", "=", "(", "0.7", "*", "direct_distance", ")", "+", "(", "0.3", "*", "(", "return_distance", "+", "average_distance", ")", ")", "# New weighting mechanism", "if", "weighted_distance", "<", "minimal_weighted_distance", ":", "minimal_weighted_distance", "=", "weighted_distance", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 7.359359096932373}
{"code_tokens": ["import", "random", "import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the total distance to all unvisited nodes", "distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Compute a probability factor based on distance and number of unvisited nodes", "total_unvisited", "=", "len", "(", "unvisited_nodes", ")", "probabilities", "=", "{", "}", "for", "node", ",", "dist", "in", "distances", ".", "items", "(", ")", ":", "probabilities", "[", "node", "]", "=", "(", "1", "/", "dist", ")", "*", "(", "1", "/", "total_unvisited", ")", "# Inverse of distance and unvisited count", "# Normalize probabilities", "prob_sum", "=", "sum", "(", "probabilities", ".", "values", "(", ")", ")", "normalized_probabilities", "=", "{", "node", ":", "prob", "/", "prob_sum", "for", "node", ",", "prob", "in", "probabilities", ".", "items", "(", ")", "}", "# Randomly select the next node based on calculated probabilities", "rand_value", "=", "random", ".", "random", "(", ")", "cumulative_prob", "=", "0.0", "for", "node", ",", "prob", "in", "normalized_probabilities", ".", "items", "(", ")", ":", "cumulative_prob", "+=", "prob", "if", "rand_value", "<", "cumulative_prob", ":", "return", "node", "return", "None"], "code_perf": 19.07794877928354}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Average distance calculation for unvisited nodes", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Create a scoring system based on actual distance and deviation from average distance", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "actual_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "actual_distance", "+", "(", "actual_distance", "-", "avg_distance", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Adjust score with average", "scores", "[", "node", "]", "=", "score", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Calculate the average distance to unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_unvisited", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Calculate a connectivity score for each unvisited node", "connectivity_scores", "=", "{", "node", ":", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<=", "5", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# New scoring mechanism", "score", "=", "(", "0.7", "*", "direct_distance", ")", "+", "(", "0.3", "*", "(", "avg_distance_to_unvisited", "-", "distance_to_destination", ")", ")", "+", "(", "0.1", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "connectivity_scores", "[", "node", "]", ")", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.498918432044007}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "score_threshold", "=", "0.5", "# Score threshold for probabilistic selection", "scores", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "(", "1", "/", "distance_to_node", ")", "**", "2", "# Square of the inverse distance as a score", "scores", ".", "append", "(", "(", "node", ",", "score", ")", ")", "total_score", "=", "sum", "(", "score", "for", "_", ",", "score", "in", "scores", ")", "# Normalize scores and calculate probabilities", "probabilities", "=", "[", "(", "node", ",", "score", "/", "total_score", ")", "for", "node", ",", "score", "in", "scores", "]", "# Introduce randomness in selection based on probabilities", "r", "=", "random", ".", "random", "(", ")", "cumulative_probability", "=", "0.0", "for", "node", ",", "prob", "in", "probabilities", ":", "cumulative_probability", "+=", "prob", "if", "cumulative_probability", ">=", "r", ":", "return", "node", "return", "None", "# Fallback, shouldn't reach here"], "code_perf": 12.762494012767984}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.6", "# Increased weight for proximity to destination", "future_cost_weight", "=", "0.4", "# Weight for future travel cost", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "(", "direct_distance", ")", "+", "(", "future_cost", "*", "future_cost_weight", ")", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.378332893374544}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "# Define an exponential decay factor for distant nodes to reduce their influence", "decay_factor", "=", "0.5", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Exponential penalty for distance to encourage cluster selection", "distance_penalty", "=", "np", ".", "exp", "(", "decay_factor", "*", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "immediate_distance", ")", ")", "# New score calculation considering immediate distance and exponential penalty", "score", "=", "immediate_distance", "+", "distance_penalty", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 8.416346289020025}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "from", "collections", "import", "defaultdict", "import", "math", "def", "cluster_density", "(", "unvisited", ",", "distance_matrix", ")", ":", "density", "=", "{", "}", "for", "node", "in", "unvisited", ":", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "for", "neighbor", "in", "unvisited", "if", "neighbor", "!=", "node", ")", "density", "[", "node", "]", "=", "total_distance", "/", "(", "len", "(", "unvisited", ")", "-", "1", ")", "if", "len", "(", "unvisited", ")", ">", "1", "else", "float", "(", "'inf'", ")", "return", "density", "def", "connectivity_index", "(", "node", ",", "clusters", ")", ":", "index", "=", "0", "for", "cluster_node", "in", "clusters", "[", "node", "]", ":", "index", "+=", "1", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "cluster_node", "]", ")", "return", "index", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "clusters", "=", "defaultdict", "(", "list", ")", "cluster_threshold", "=", "5", "# Max distance to group nodes", "for", "i", "in", "unvisited_nodes", ":", "for", "j", "in", "unvisited_nodes", ":", "if", "i", "!=", "j", "and", "distance_matrix", "[", "i", "]", "[", "j", "]", "<", "cluster_threshold", ":", "clusters", "[", "i", "]", ".", "append", "(", "j", ")", "densities", "=", "cluster_density", "(", "unvisited_nodes", ",", "distance_matrix", ")", "for", "node", "in", "unvisited_nodes", ":", "cluster_score", "=", "densities", ".", "get", "(", "node", ",", "0", ")", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "alignment_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "connectivity", "=", "connectivity_index", "(", "node", ",", "clusters", ")", "score", "=", "(", "-", "0.4", "*", "direct_distance", "+", "0.3", "*", "cluster_score", "+", "0.3", "*", "alignment_score", "+", "0.2", "*", "connectivity", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.210389847493255}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "potential_nodes", "=", "[", "]", "total_risk", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "risk_factor", "=", "(", "total_risk", "-", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "score", "=", "direct_distance", "+", "risk_factor", "potential_nodes", ".", "append", "(", "(", "node", ",", "score", ")", ")", "# Select the node with the least score (distance + risk factor)", "next_node", "=", "min", "(", "potential_nodes", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 7.031727768795343}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm combines a scoring mechanism based on inverse distance to the ", "# destination, a dynamic penalty for visited nodes' proximity, and the potential ", "# new cluster formation based on remaining unvisited nodes.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "# Calculate the penalty for proximity to visited nodes", "visited_penalty", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "n", "not", "in", "unvisited_nodes", ")", "/", "max", "(", "1", ",", "len", "(", "distance_matrix", ")", "-", "len", "(", "unvisited_nodes", ")", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "direct_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Proximity score: Using exponential decay on distance", "proximity_score", "=", "1", "/", "(", "1", "+", "direct_distance_to_destination", ")", "# Newly introduced node density factor based on remaining unvisited nodes", "density_factor", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "1", "+", "distance_to_next", ")", "# Dynamic score considering visited nodes penalty", "score", "=", "proximity_score", "*", "density_factor", "*", "(", "1", "/", "(", "1", "+", "visited_penalty", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.862738108318953}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm emphasizes visiting nodes that minimize the overall travel distance while considering the proximity to the destination node.}", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "distance_to_next", "+", "distance_to_destination", "# Combined score based on distance to next node and to destination", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Start with positive infinity for minimization", "visit_count", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_destination", "=", "total_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "# Calculate the direct distance to the current node", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Incorporate a factor that penalizes nodes that have already been visited a lot", "historical_weight", "=", "visit_count", "[", "node", "]", "+", "1", "# Avoid division by zero", "score", "=", "(", "direct_distance", "+", "average_distance_to_destination", ")", "/", "historical_weight", "# Selecting the node that minimizes this score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "# Increment the visit count for the selected best node", "visit_count", "[", "best_node", "]", "+=", "1", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_increase_cost", "=", "float", "(", "'inf'", ")", "remaining_costs", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "increase_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "+", "remaining_costs", "if", "increase_cost", "<", "min_increase_cost", ":", "min_increase_cost", "=", "increase_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "# Calculate scores based on degree of nodes and adjusted distance", "degree_scores", "=", "{", "node", ":", "len", "(", "[", "neighbor", "for", "neighbor", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<=", "5", "]", ")", "for", "node", "in", "unvisited_nodes", "}", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "degree_score", "=", "degree_scores", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate a potential reward based on degree and distance penalty", "degree_weight", "=", "0.4", "*", "degree_score", "distance_weight", "=", "-", "0.6", "*", "(", "direct_distance", "+", "0.5", "*", "distance_to_destination", ")", "score", "=", "degree_weight", "+", "distance_weight", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "clusters", "=", "{", "}", "num_clusters", "=", "3", "# Number of clusters to form", "cluster_size", "=", "max", "(", "1", ",", "len", "(", "unvisited_nodes", ")", "//", "num_clusters", ")", "# Sort unvisited nodes based on their distance to the current node", "sorted_nodes", "=", "sorted", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "# Create clusters", "for", "i", "in", "range", "(", "0", ",", "len", "(", "sorted_nodes", ")", ",", "cluster_size", ")", ":", "cluster", "=", "sorted_nodes", "[", "i", ":", "i", "+", "cluster_size", "]", "clusters", "[", "tuple", "(", "cluster", ")", "]", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "cluster", "]", ")", "# Scoring for each node in the clusters", "scores", "=", "{", "}", "remaining_count", "=", "len", "(", "unvisited_nodes", ")", "weight_factor", "=", "1", "/", "(", "remaining_count", "+", "1", ")", "for", "cluster", "in", "clusters", ".", "keys", "(", ")", ":", "for", "node", "in", "cluster", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "-", "(", "weight_factor", "*", "direct_distance", ")", "scores", "[", "node", "]", "=", "score", "# Select the node with the minimum score from the clusters", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "cluster_weight", "=", "0.4", "# Weight for local cluster density", "exploration_weight", "=", "0.2", "# Weight for potential future benefit", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Local cluster score based on proximity of unvisited nodes", "cluster_score", "=", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "2", ")", "/", "(", "unvisited_count", "or", "1", ")", "# Future exploration score based on the average distance to the destination from unvisited nodes", "exploration_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "dest", "]", "for", "dest", "in", "unvisited_nodes", ")", "/", "(", "unvisited_count", "or", "1", ")", "# Combined score", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "cluster_weight", "*", "cluster_score", "+", "exploration_weight", "*", "exploration_score", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.4597365709491275}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "randomness_factor", "=", "0.3", "# Factor to encourage exploring less connected nodes", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "destination_penalty_weight", "=", "0.3", "# Penalty for distance from destination", "connectivity_weight", "=", "0.3", "# Weight for connectivity to unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "destination_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Score calculation considering distance, destination penalty, and connectivity", "score", "=", "-", "distance_weight", "*", "direct_distance", "-", "destination_penalty_weight", "*", "destination_distance", "+", "connectivity_weight", "*", "connectivity_score", "# Introducing randomness factor to increase exploration", "exploration_factor", "=", "random", ".", "uniform", "(", "0", ",", "randomness_factor", ")", "*", "(", "1", "-", "connectivity_score", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "score", "+=", "exploration_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.516968932438186}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "exploration_factor", "=", "0.5", "# Dynamically adjust exploration based on visited nodes", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.4", "# Weight for connectivity to unvisited nodes", "loop_closure_weight", "=", "0.2", "# Weight for forming shorter loops", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "loop_closure_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score influenced by exploration factor", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "loop_closure_weight", "*", "loop_closure_score", ")", "# Introduce random element for exploration", "score", "+=", "random", ".", "uniform", "(", "0", ",", "exploration_factor", ")", "*", "(", "1", "-", "score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 13.4691931255947}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "import", "numpy", "as", "np", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.6", "# Weight for direct distance", "mst_weight", "=", "0.4", "# Weight for minimum spanning tree cost", "def", "calculate_mst_cost", "(", "nodes", ")", ":", "if", "len", "(", "nodes", ")", "<", "2", ":", "return", "0", "mst_cost", "=", "0", "mst_edges", "=", "[", "]", "for", "node", "in", "nodes", ":", "for", "other_node", "in", "nodes", ":", "if", "node", "!=", "other_node", ":", "mst_edges", ".", "append", "(", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", ",", "node", ",", "other_node", ")", ")", "mst_edges", ".", "sort", "(", ")", "parent", "=", "{", "node", ":", "node", "for", "node", "in", "nodes", "}", "def", "find", "(", "node", ")", ":", "if", "parent", "[", "node", "]", "!=", "node", ":", "parent", "[", "node", "]", "=", "find", "(", "parent", "[", "node", "]", ")", "return", "parent", "[", "node", "]", "def", "union", "(", "node1", ",", "node2", ")", ":", "root1", "=", "find", "(", "node1", ")", "root2", "=", "find", "(", "node2", ")", "if", "root1", "!=", "root2", ":", "parent", "[", "root1", "]", "=", "root2", "for", "cost", ",", "node1", ",", "node2", "in", "mst_edges", ":", "if", "find", "(", "node1", ")", "!=", "find", "(", "node2", ")", ":", "union", "(", "node1", ",", "node2", ")", "mst_cost", "+=", "cost", "return", "mst_cost", "mst_cost", "=", "calculate_mst_cost", "(", "unvisited_nodes", ")", "direct_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "(", "direct_distance_weight", "*", "-", "direct_distance", ")", "+", "(", "mst_weight", "*", "-", "mst_cost", ")", "scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 36.1397423465301}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "connection_weights", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "local_clustering_factor", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "# Calculate local clustering based on direct connections to nearby unvisited nodes", "connection_count", "=", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<", "5", ")", "local_clustering_factor", "[", "node", "]", "=", "connection_count", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Reciprocal connectivity score", "connection_weights", "[", "node", "]", "=", "1", "/", "(", "1", "+", "sum", "(", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "for", "neighbor", "in", "unvisited_nodes", "if", "neighbor", "!=", "node", ")", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connection_weight", "=", "connection_weights", "[", "node", "]", "clustering_score", "=", "local_clustering_factor", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "direct_distance", "+", "0.5", "*", "(", "avg_distance_to_destination", "-", "distance_to_destination", ")", "+", "0.3", "*", "clustering_score", "-", "0.2", "*", "connection_weight", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.471055190091211}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Normalizing distances to unvisited nodes and introducing exploration factor", "normalized_distances", "=", "{", "}", "min_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "normalized_distance", "=", "distance_to_node", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1e-6", ")", "# Avoid division by zero", "normalized_distances", "[", "node", "]", "=", "normalized_distance", "min_distance", "=", "min", "(", "min_distance", ",", "normalized_distance", ")", "# Introducing a random exploration factor", "exploration_factor", "=", "random", ".", "uniform", "(", "0.5", ",", "1.5", ")", "# Calculating scores based on normalized distances and exploration factor", "scores", "=", "{", "node", ":", "(", "1", "/", "(", "dist", "+", "1e-6", ")", ")", "*", "exploration_factor", "for", "node", ",", "dist", "in", "normalized_distances", ".", "items", "(", ")", "}", "# Selecting the node with the maximum score", "next_node", "=", "max", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.6567767688234}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "potential_nodes", "=", "[", "]", "total_heuristic_score", "=", "sum", "(", "distance_matrix", "[", "destination_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_value", "=", "total_heuristic_score", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Average heuristic distance", "estimated_cost", "=", "direct_distance", "+", "heuristic_value", "# Cost includes direct distance and estimated future cost", "potential_nodes", ".", "append", "(", "(", "node", ",", "estimated_cost", ")", ")", "next_node", "=", "min", "(", "potential_nodes", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_to_destination_weight", "=", "0.4", "# Weight for distance to destination", "average_travel_time_weight", "=", "0.4", "# Weight for average travel time to unvisited nodes", "travel_cost_weight", "=", "0.2", "# Weight for travel cost to current node", "average_travel_time", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "estimated_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "estimated_distance_to_destination", "*", "distance_to_destination_weight", "+", "average_travel_time", "*", "average_travel_time_weight", "-", "direct_distance", "*", "travel_cost_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.234144832125022}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "# Define a momentum factor based on the current node's previous decision", "momentum_factor", "=", "0.5", "# Adjust this value to influence exploration versus exploitation", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "# Calculate a clustering factor based on distance to other unvisited nodes", "clustering_factor", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "0", ")", "# Score calculation incorporating momentum and clustering factor", "score", "=", "(", "1", "-", "momentum_factor", ")", "*", "(", "avg_distance_to_remaining", "-", "distance_to_next", ")", "+", "momentum_factor", "*", "clustering_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.637900629114952}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "unvisited_nodes", "=", "list", "(", "unvisited_nodes", ")", "def", "connectivity_score", "(", "node", ")", ":", "# Calculate the average distance to all other unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "return", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity", "=", "connectivity_score", "(", "node", ")", "score", "=", "distance", "+", "0.5", "*", "connectivity", "# Combine distance with a weighted connectivity score", "scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.526271790227707}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "total_distance_traveled", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight applied to prioritize nearby nodes", "penalty_weight", "=", "0.5", "# Weight to penalize longer total path lengths", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "penalty_score", "=", "penalty_weight", "*", "total_distance_traveled", "score", "=", "direct_distance", "+", "proximity_score", "+", "penalty_score", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "connectivity_weight", "=", "0.2", "# Weight for connectivity to unvisited nodes", "penalty_weight", "=", "0.2", "# Penalty for longer routes", "future_path_weight", "=", "0.1", "# Weight for potential future path lengths", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average connectivity", "# Future path score based on estimated distance to connected unvisited nodes", "future_path_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "if", "unvisited_nodes", "else", "0", "# Combined score including a penalty for long direct distance", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "-", "penalty_weight", "*", "(", "direct_distance", "**", "2", ")", "+", "future_path_weight", "*", "future_path_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.3990411915689505}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_unvisited", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_from_node", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "exploration_factor", "=", "random", ".", "uniform", "(", "1", ",", "1", "+", "(", "average_distance_from_node", "/", "100", ")", ")", "# Adaptive exploration", "score", "=", "distance", "*", "exploration_factor", "+", "(", "average_distance_to_unvisited", "*", "0.5", ")", "# Combine scores", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.9549182503372835}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate distance, connectivity, and attraction scores for each unvisited node", "scores", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "for", "neighbor", "in", "unvisited_nodes", ")", "/", "max", "(", "1", ",", "len", "(", "unvisited_nodes", ")", ")", ")", "*", "0.3", "-", "(", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "/", "2", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the unvisited node with the minimum score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.292635553042459}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_increase_cost", "=", "float", "(", "'inf'", ")", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "increase_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "adjusted_cost", "=", "increase_cost", "+", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "-", "average_distance", ")", "*", "0.5", "if", "adjusted_cost", "<", "min_increase_cost", ":", "min_increase_cost", "=", "adjusted_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.6490879527083395}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "minimal_weighted_distance", "=", "float", "(", "'inf'", ")", "max_distance", "=", "np", ".", "max", "(", "distance_matrix", "[", "current_node", "]", ")", "# Calculate max distance from the current node", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "scaling_factor", "=", "(", "max_distance", "-", "distance", ")", "/", "max_distance", "# Scaling factor based on proximity", "weighted_distance", "=", "distance", "*", "(", "1", "+", "scaling_factor", ")", "# Incorporating scaling factor", "if", "weighted_distance", "<", "minimal_weighted_distance", ":", "minimal_weighted_distance", "=", "weighted_distance", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance to unvisited nodes", "attractiveness_weight", "=", "0.4", "# Weight for attractiveness to destination", "penalty_weight", "=", "0.2", "# Weight for the penalty based on the number of unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "penalty", "=", "len", "(", "unvisited_nodes", ")", "# Penalty based on the count of unvisited nodes", "score", "=", "(", "direct_distance", "*", "distance_weight", ")", "+", "(", "distance_to_destination", "*", "attractiveness_weight", ")", "+", "(", "penalty", "*", "penalty_weight", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "centrality_weight", "=", "0.3", "# Weight for node centrality", "time_decay_factor", "=", "0.2", "# Factor to reduce score on long waiting nodes", "# Function to calculate centrality score based on unvisited nodes", "def", "calculate_centrality", "(", "node", ")", ":", "centrality", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "centrality", "+=", "1", "/", "distance_matrix", "[", "node", "]", "[", "other", "]", "# Inverse of distance", "return", "centrality", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "centrality_score", "=", "calculate_centrality", "(", "node", ")", "time_decay", "=", "(", "1", "/", "(", "1", "+", "direct_distance", ")", ")", "*", "time_decay_factor", "# Combined scoring mechanism with time decay", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "centrality_weight", "*", "centrality_score", "-", "time_decay", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.35865608338537}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_cost_weight", "=", "0.6", "heuristic_distance_weight", "=", "0.3", "clustering_score_weight", "=", "0.1", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Heuristic distance: direct distance to the destination", "heuristic_distance", "=", "heuristic_distance_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Clustering score: based on the average distance to other unvisited nodes", "clustering_score", "=", "clustering_score_weight", "*", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "score", "=", "immediate_cost_weight", "*", "immediate_distance", "+", "heuristic_distance", "+", "clustering_score", "if", "score", "<", "best_score", ":", "# Minimize the score", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.743712436066264}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Randomly select a node from unvisited nodes", "random_node", "=", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "# Compare its distance to the current node and the rest of the unvisited nodes", "next_node", "=", "random_node", "min_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "next_node", "]", "for", "node", "in", "unvisited_nodes", ":", "if", "node", "==", "random_node", ":", "continue", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<", "min_distance", ":", "next_node", "=", "node", "min_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "average_distance_weight", "=", "0.5", "# Weight for average distance", "edge_penalty_weight", "=", "0.5", "# Weight for number of edges", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "edge_penalty", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Fewer unvisited nodes reduce penalty", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "-", "(", "direct_distance", "*", "average_distance_weight", "+", "total_distance_to_destination", "*", "edge_penalty_weight", ")", "+", "average_distance_to_unvisited", "+", "edge_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_destination", "=", "total_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Introducing a distance decay factor", "reached_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "distance_decay_factor", "=", "reached_distance", "/", "(", "1", "+", "direct_distance", ")", "# Score based on direct distance, average destination distance, and distance decay", "score", "=", "direct_distance", "+", "average_distance_to_destination", "*", "distance_decay_factor", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "cumulative_distance_weight", "=", "0.4", "# Weight for total distance to unvisited nodes", "heuristic_potential_weight", "=", "0.4", "# Weight for potential to reach further unvisited nodes", "urgency_weight", "=", "0.2", "# Weight for urgency based on remaining unvisited nodes", "total_cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "# Cumulative distance to all unvisited nodes from the current node", "cumulative_distance_score", "=", "total_cumulative_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Heuristic potential based on the furthest node's distance to the destination", "heuristic_potential_score", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "dest", "]", "for", "dest", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Urgency based score which reflects the ratio of unvisited nodes", "urgency_score", "=", "(", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "# Normalize urgency", "score", "=", "-", "cumulative_distance_weight", "*", "cumulative_distance_score", "+", "heuristic_potential_weight", "*", "heuristic_potential_score", "+", "urgency_weight", "*", "urgency_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 20.73366176034429}
{"code_tokens": ["import", "random", "import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "max_distance", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_score", "=", "1", "/", "(", "1", "+", "distance_score", ")", "# Encourage shorter distances", "decay_factor", "=", "math", ".", "exp", "(", "-", "distance_score", "/", "max_distance", ")", "# Decay based on distance", "scores", "[", "node", "]", "=", "heuristic_score", "*", "decay_factor", "# Select the node with the highest score", "next_node", "=", "max", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate desirability scores for each unvisited node", "scores", "=", "{", "}", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "desirability_score", "=", "(", "direct_distance", "*", "0.6", ")", "+", "(", "proximity_to_destination", "*", "0.4", ")", "# Weighted score", "scores", "[", "node", "]", "=", "desirability_score", "# Lower score is better", "# Select the unvisited node with the lowest desirability score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 7.6490879527083395}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.6", "# Weight for proximity to destination", "future_path_weight", "=", "0.3", "# Weight for potential future path efficiency", "penalty_weight", "=", "0.1", "# Weight for penalty factor", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "path_future_value", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "penalty_factor", "=", "(", "len", "(", "unvisited_nodes", ")", "**", "2", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "1", "score", "=", "-", "direct_distance", "+", "(", "total_distance_to_destination", "*", "penalty_weight", ")", "+", "(", "path_future_value", "*", "future_path_weight", ")", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "-", "penalty_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.341278755126714}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "random_factor", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "# Introduce randomness for exploration", "score", "=", "(", "direct_distance", "+", "distance_to_destination", ")", "*", "(", "1", "-", "random_factor", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 23.309810070501985}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "attractiveness_score", "=", "(", "1", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", ")", "*", "100", "# Promote nodes closer to destination", "score", "=", "(", "direct_distance", "*", "0.6", ")", "+", "(", "avg_distance_to_destination", "*", "0.2", ")", "-", "(", "attractiveness_score", "*", "0.2", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 23.333028533255415}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.3", "# Weight for connectivity to unvisited nodes", "time_factor_weight", "=", "0.3", "# Weight for time efficiency", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Time efficiency score based on direct distance (assuming constant speed)", "time_to_node", "=", "direct_distance", "/", "1.0", "# Assuming speed of 1 unit", "time_efficiency_score", "=", "1", "/", "(", "1", "+", "time_to_node", ")", "# Calculate combined score", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "time_factor_weight", "*", "time_efficiency_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.443606270063958}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "risk_weight", "=", "0.4", "# Weight for path length risk", "average_distance_weight", "=", "0.2", "# Weight for average distance to remaining nodes", "avg_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Risk score based on distance compared to average distance of unvisited nodes", "risk_score", "=", "avg_distance_remaining", "-", "direct_distance", "# Decay factor for distant nodes", "decay_factor", "=", "1", "/", "(", "1", "+", "direct_distance", ")", "# Combined score", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "risk_weight", "*", "risk_score", "*", "decay_factor", "+", "average_distance_weight", "*", "avg_distance_remaining", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "nearest_neighbor_weight", "=", "0.5", "# Weight for nearest neighbor advantage", "cumulative_savings_weight", "=", "0.4", "# Weight for potential savings of unvisited nodes", "dynamic_detour_penalty_weight", "=", "0.1", "# Weight for dynamic detour penalties", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "detour_length", "=", "max", "(", "0", ",", "direct_distance", "-", "total_distance_to_destination", ")", "# Nearest neighbor contribution", "nearest_neighbor_score", "=", "-", "min", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "# Cumulative savings of unvisited nodes", "potential_savings", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "average_savings", "=", "potential_savings", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Scoring Function", "score", "=", "(", "nearest_neighbor_weight", "*", "nearest_neighbor_score", ")", "+", "(", "cumulative_savings_weight", "*", "average_savings", ")", "-", "(", "dynamic_detour_penalty_weight", "*", "detour_length", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 11.070670351227566}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_penalty_weight", "=", "0.5", "# Weight for distance traveled", "future_savings_weight", "=", "0.3", "# Weight for evaluating future costs", "exploration_factor", "=", "0.2", "# Random exploration influence", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_cost_estimation", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "(", "direct_distance", "*", "distance_penalty_weight", ")", "+", "(", "future_cost_estimation", "*", "future_savings_weight", ")", "+", "(", "random", ".", "uniform", "(", "0", ",", "exploration_factor", ")", "*", "100", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 24.04903436216616}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "float", "(", "'inf'", ")", ")", "heuristic_score", "=", "direct_distance", "/", "(", "connectivity_score", "+", "1", ")", "# Avoid division by zero", "score", "=", "direct_distance", "+", "heuristic_score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["# {This algorithm introduces a dynamic scoring mechanism that adjusts based on the proximity of unvisited nodes as well as a cost-benefit analysis of average travel distance reduction when choosing the next node.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "# Weighting Constants", "weight_distance", "=", "0.5", "# Weight for distance score", "weight_average_cost", "=", "0.3", "# Weight for average travel cost", "weight_return_penalty", "=", "0.2", "# Weight for return penalty", "# Calculate average distance remaining to unvisited nodes", "total_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance_remaining", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "return_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate cost efficiency based on the difference from average travel distance", "cost_efficiency", "=", "(", "average_distance", "-", "distance_to_next", ")", "/", "(", "average_distance", "+", "1e-5", ")", "# Avoid division by zero", "# Combined score considering return penalty and cost efficiency", "combined_score", "=", "(", "cost_efficiency", "*", "weight_average_cost", "-", "return_distance", "*", "weight_return_penalty", "-", "distance_to_next", "*", "weight_distance", ")", "if", "combined_score", ">", "best_score", ":", "best_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.138095693684128}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "import", "numpy", "as", "np", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "nearest_neighbor_weight", "=", "0.5", "# Weight for immediate distance to next node", "mst_penalty_weight", "=", "0.5", "# Weight for penalty based on MST heuristic", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "def", "calculate_mst_penalty", "(", "node", ")", ":", "edges", "=", "[", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", "if", "next_node", "!=", "node", "]", "return", "np", ".", "mean", "(", "edges", ")", "if", "edges", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "nearest_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "mst_penalty", "=", "calculate_mst_penalty", "(", "node", ")", "cost_score", "=", "(", "nearest_distance", "+", "total_distance_to_destination", ")", "*", "nearest_neighbor_weight", "+", "(", "mst_penalty", "*", "mst_penalty_weight", ")", "if", "cost_score", "<", "min_cost", ":", "min_cost", "=", "cost_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.4323878079629}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "proximity_weight", "=", "0.5", "# Weight for proximity to destination", "cost_efficiency_weight", "=", "0.3", "# Weight for the efficiency based on historical costs", "exploration_weight", "=", "0.2", "# Weight for introducing randomness", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_cost_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "historical_cost", "=", "(", "total_distance_to_destination", "+", "direct_distance", ")", "/", "2", "# Historical cost as a simple average", "# Introduce randomness via a stochastic element", "random_factor", "=", "random", ".", "uniform", "(", "0", ",", "exploration_weight", ")", "# Random value within exploration weight", "score", "=", "-", "(", "direct_distance", "+", "historical_cost", ")", "+", "(", "average_cost_to_destination", "*", "cost_efficiency_weight", ")", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "random_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.9208644822681675}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.6", "# Weight for inverse direct distance", "exploration_weight", "=", "0.4", "# Weight for exploration of unvisited nodes", "# Function to calculate average distance to unvisited nodes", "def", "calculate_exploration_score", "(", "node", ")", ":", "total_distance", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "total_distance", "+=", "distance_matrix", "[", "node", "]", "[", "other", "]", "return", "total_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "inverse_distance", "=", "1", "/", "(", "direct_distance", "+", "1e-5", ")", "# Avoiding division by zero", "exploration_score", "=", "calculate_exploration_score", "(", "node", ")", "# Combined scoring mechanism", "score", "=", "(", "distance_weight", "*", "inverse_distance", "+", "exploration_weight", "*", "exploration_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.839958850991051}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "clustering_attractiveness", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "current_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "num_unvisited", "for", "i", ",", "node", "in", "enumerate", "(", "unvisited_nodes", ")", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "rotation_penalty", "=", "(", "i", "+", "1", ")", "*", "(", "1", "/", "num_unvisited", ")", "score", "=", "direct_distance", "-", "clustering_attractiveness", "*", "0.5", "+", "rotation_penalty", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 12.734278472668759}
{"code_tokens": ["# {The new algorithm enhances the selection process by incorporating a weighted influence of both distance and degree of unvisited nodes, while also introducing a penalty factor for closer nodes to ensure exploration of farther nodes.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the degree of each unvisited node", "node_degree", "=", "{", "node", ":", "sum", "(", "1", "for", "i", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "distance_matrix", "[", "node", "]", "[", "i", "]", ">", "0", ")", "for", "node", "in", "unvisited_nodes", "}", "# Calculate the average distance to all unvisited nodes", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Calculate scores for each unvisited node considering distance, degree, and introducing a penalty for closer nodes", "scores", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "/", "(", "node_degree", "[", "node", "]", "+", "1", ")", "*", "1.5", ")", "+", "(", "avg_distance", "/", "(", "node_degree", "[", "node", "]", "+", "1", ")", ")", "-", "(", "0.5", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<", "avg_distance", "else", "0", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the unvisited node with the minimum score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance to unvisited nodes", "destination_attractiveness_weight", "=", "0.3", "# Weight for attractiveness to destination", "travel_time_penalty_weight", "=", "0.3", "# Weight for penalty based on increased travel", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "travel_time_penalty", "=", "direct_distance", "+", "average_distance_to_unvisited", "score", "=", "(", "direct_distance", "*", "direct_distance_weight", ")", "+", "(", "distance_to_destination", "*", "destination_attractiveness_weight", ")", "+", "(", "travel_time_penalty", "*", "travel_time_penalty_weight", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.007665604162433}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ",", "distance_threshold", "=", "5", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "candidates", "=", "[", "node", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<", "distance_threshold", "]", "if", "not", "candidates", ":", "candidates", "=", "unvisited_nodes", "# Fall back to all unvisited nodes if none within threshold", "best_node", "=", "min", "(", "candidates", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate average distance to unvisited nodes", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Calculate scores based on distances and average distance", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Score combines distance to the node with how it compares to average", "scores", "[", "node", "]", "=", "(", "0.7", "*", "distance", ")", "+", "(", "0.3", "*", "(", "avg_distance", "-", "distance", ")", ")", "# Normalize scores to add randomness", "score_min", "=", "min", "(", "scores", ".", "values", "(", ")", ")", "score_range", "=", "max", "(", "scores", ".", "values", "(", ")", ")", "-", "score_min", "if", "score_range", ">", "0", ":", "scores", "=", "{", "node", ":", "(", "score", "-", "score_min", ")", "/", "score_range", "for", "node", ",", "score", "in", "scores", ".", "items", "(", ")", "}", "# Introduce a random factor for selection", "weighted_candidates", "=", "[", "(", "node", ",", "random", ".", "uniform", "(", "0", ",", "scores", "[", "node", "]", ")", ")", "for", "node", "in", "unvisited_nodes", "]", "# Select the node with the highest weighted score", "next_node", "=", "max", "(", "weighted_candidates", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 34.93880952060201}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate scores with a randomness factor and a penalty for distance", "scores", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "(", "1", "+", "random", ".", "uniform", "(", "-", "0.1", ",", "0.1", ")", ")", ")", "+", "(", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1e-10", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the unvisited node with the smallest score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 35.475589767831565}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate total connectivity for unvisited nodes based on shared neighbors", "connectivity_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "connectivity_scores", "[", "node", "]", "=", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "neighbor", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<", "float", "(", "'inf'", ")", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Consider a connectivity score based on shared neighbors", "connectivity_score", "=", "connectivity_scores", "[", "node", "]", "# Cost-benefit ratio as a scoring mechanism", "score", "=", "direct_distance", "/", "(", "connectivity_score", "+", "1", ")", "# +1 to avoid division by zero", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to destination", "cumulative_distance_weight", "=", "0.4", "# Weight for cumulative distance traveled", "randomness_weight", "=", "0.2", "# Weight for introducing randomness", "clustering_weight", "=", "0.1", "# Weight for clustering savings", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "prev_node", "]", "for", "prev_node", "in", "unvisited_nodes", "if", "prev_node", "!=", "current_node", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "randomness_factor", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "*", "randomness_weight", "score", "=", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "(", "cluster_average_distance", "*", "clustering_weight", ")", "-", "(", "cumulative_distance", "*", "cumulative_distance_weight", ")", "-", "direct_distance", "+", "randomness_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.359863938111161}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculating distances to unvisited nodes", "distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Heuristic: penalization for nodes closer to groups of unvisited nodes", "cluster_penalty", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "# Selecting the node by combining distance with cluster penalty", "weighted_scores", "=", "{", "node", ":", "distances", "[", "node", "]", "+", "(", "0.5", "*", "cluster_penalty", ")", "for", "node", "in", "unvisited_nodes", "}", "# Selecting the node with the minimum score", "next_node", "=", "min", "(", "weighted_scores", ",", "key", "=", "weighted_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Randomly sample a subset of unvisited nodes", "sample_size", "=", "min", "(", "5", ",", "len", "(", "unvisited_nodes", ")", ")", "sampled_nodes", "=", "random", ".", "sample", "(", "unvisited_nodes", ",", "sample_size", ")", "best_next_node", "=", "None", "min_incremental_distance", "=", "float", "(", "'inf'", ")", "# Evaluate the sampled nodes to find the one leading to the smallest distance increment", "for", "node", "in", "sampled_nodes", ":", "incremental_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "incremental_distance", "<", "min_incremental_distance", ":", "min_incremental_distance", "=", "incremental_distance", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 13.663822370106118}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_bonus_weight", "=", "0.5", "# Weight for proximity to destination", "distance_penalty_weight", "=", "0.4", "# Weight for longer distances to unvisited nodes", "cluster_bonus_weight", "=", "0.1", "# Weight for potential cluster opportunities", "# Calculate total distances for scoring", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "unvisited_average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_bonus", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", ">", "0", ")", "# Scoring equation", "score", "=", "(", "proximity_bonus_weight", "*", "(", "1", "/", "total_distance_to_destination", ")", "+", "(", "unvisited_average_distance", "*", "distance_penalty_weight", ")", "-", "(", "direct_distance", "*", "distance_penalty_weight", ")", "+", "(", "cluster_bonus", "*", "cluster_bonus_weight", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 25.515687827805397}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "distance_weight", "=", "0.5", "# Weight for direct distance", "return_weight", "=", "0.3", "# Weight for estimated return distance", "visit_count_weight", "=", "0.2", "# Weight for the number of unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "return_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "estimated_remaining_nodes", "=", "len", "(", "unvisited_nodes", ")", "-", "1", "# Remaining nodes after selecting the next one", "# Score based on distance, estimated return and count of unvisited nodes", "score", "=", "(", "distance_weight", "*", "direct_distance", "+", "return_weight", "*", "return_distance", "+", "visit_count_weight", "*", "estimated_remaining_nodes", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.602975755903087}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.3", "# Weight for connectivity to unvisited nodes", "potential_weight", "=", "0.2", "# Weight for future potential based on remaining nodes", "time_penalty_weight", "=", "0.1", "# Penalty for distance from the destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average connectivity", "potential_score", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "dest", "]", "for", "dest", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Time penalty based on the distance of the node to the destination", "time_penalty", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "potential_weight", "*", "potential_score", "-", "time_penalty_weight", "*", "time_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.560484930318687}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "synergy_factor", "=", "0.3", "# Weight to promote less chosen nodes", "immediate_weight", "=", "0.6", "# Weight for immediate travel cost", "cumulative_penalty_weight", "=", "0.4", "# Penalty for distance from previously visited nodes", "# Track previously selected nodes to calculate cumulative penalty", "previously_visited", "=", "[", "]", "# This would typically be managed outside this function", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate cumulative penalty based on previously selected nodes", "cumulative_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "prev_node", "]", "for", "prev_node", "in", "previously_visited", ")", "# Score calculated using immediate distance, penalty, and synergy", "score", "=", "(", "-", "immediate_weight", "*", "direct_distance", ")", "+", "(", "cumulative_penalty_weight", "*", "cumulative_penalty", ")", "+", "(", "synergy_factor", "/", "(", "1", "+", "len", "(", "previously_visited", ")", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "dynamic_penalty", "=", "(", "len", "(", "unvisited_nodes", ")", "**", "0.5", ")", "*", "total_distance_to_remaining", "# Dynamic penalty based on unvisited count", "score", "=", "distance_to_next", "+", "(", "0.3", "*", "dynamic_penalty", ")", "# Introduce weight for direct distance and penalty", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 22.517180679652732}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Dynamically adjust the distance threshold based on remaining unvisited nodes", "distance_threshold", "=", "max", "(", "0.5", ",", "1.5", "*", "(", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "distance_matrix", ")", "-", "1", ")", ")", ")", "# Create clusters based on proximity using the dynamic threshold", "clusters", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "added_to_cluster", "=", "False", "for", "cluster", "in", "clusters", ":", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<", "distance_threshold", ":", "cluster", ".", "append", "(", "node", ")", "added_to_cluster", "=", "True", "break", "if", "not", "added_to_cluster", ":", "clusters", ".", "append", "(", "[", "node", "]", ")", "# Select the nearest cluster", "if", "not", "clusters", ":", "return", "None", "nearest_cluster", "=", "min", "(", "clusters", ",", "key", "=", "lambda", "cluster", ":", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "cluster", ")", ")", "# Select the node from the nearest cluster with the minimum distance", "next_node", "=", "min", "(", "nearest_cluster", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "alpha", "=", "0.5", "# Weight for distance attractiveness", "beta", "=", "1.5", "# Weight for local density", "# Calculate total score based on distance and local density", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate local density as the inverse of distance to nearby unvisited nodes", "local_density", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "+", "1", ")", "for", "neighbor", "in", "unvisited_nodes", "if", "neighbor", "!=", "node", ")", "# Heuristic combining distance and local density", "score", "=", "alpha", "*", "direct_distance", "-", "beta", "*", "local_density", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 24.222800484349992}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Calculate the average distance to other unvisited nodes", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate the score combining the ratio and the difference from the average", "if", "distance_to_destination", ">", "0", ":", "# Avoid division by zero", "ratio", "=", "distance_to_node", "/", "distance_to_destination", "score", "=", "ratio", "+", "(", "avg_distance", "-", "distance_to_node", ")", "# Modify score based on average distance", "# Select the node with the minimum score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.802414247361228}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity to destination", "impact_weight", "=", "0.3", "# Weight for impact of the next move on future paths", "randomness_weight", "=", "0.2", "# Weight for introducing randomness to prevent local minima", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_next_nodes", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "impact_score", "=", "(", "average_distance_to_next_nodes", "-", "direct_distance", ")", "/", "(", "average_distance_to_next_nodes", "or", "1", ")", "# Normalize impact score", "randomness_score", "=", "random", ".", "random", "(", ")", "*", "randomness_weight", "# Randomly influence the decision", "score", "=", "-", "(", "direct_distance", ")", "+", "(", "impact_weight", "*", "impact_score", ")", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "randomness_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.962082254183446}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "remain_distance_weight", "=", "0.4", "# Weight for remaining distance", "penalty_weight", "=", "0.2", "# Weight for penalizing distance from optimal path", "remaining_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "estimated_path_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Incorporate penalties for larger distances", "penalty", "=", "penalty_weight", "*", "(", "1", "/", "(", "1", "+", "estimated_path_distance", ")", ")", "score", "=", "(", "remaining_distance_to_destination", "*", "remain_distance_weight", ")", "-", "(", "direct_distance", "*", "distance_weight", ")", "-", "penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.73603552403568}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "locality_weight", "=", "0.3", "# Weight for locality bias", "diversity_weight", "=", "0.2", "# Weight for diversification of routes", "regret_weight", "=", "0.1", "# Weight for minimizing regret of missed shortcuts", "def", "calculate_locality_score", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "def", "calculate_regret_score", "(", "node", ")", ":", "potential_shortcuts", "=", "[", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "]", "return", "min", "(", "potential_shortcuts", ")", "if", "potential_shortcuts", "else", "0", "def", "calculate_diversity_score", "(", "node", ")", ":", "return", "1.0", "/", "(", "1", "+", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "locality_score", "=", "calculate_locality_score", "(", "node", ")", "regret_score", "=", "calculate_regret_score", "(", "node", ")", "diversity_score", "=", "calculate_diversity_score", "(", "node", ")", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "locality_weight", "*", "locality_score", "+", "diversity_weight", "*", "diversity_score", "-", "regret_weight", "*", "regret_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.4330512232791035}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "dynamic_penalty_weight", "=", "0.7", "# Higher penalty for longer paths", "proximity_weight", "=", "0.3", "# Weight for proximity to destination", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "dynamic_penalty_weight", "*", "len", "(", "unvisited_nodes", ")", "*", "direct_distance", "proximity_score", "=", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "penalty", "+", "direct_distance", "-", "proximity_score", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.873885247632611}
{"code_tokens": ["# {This algorithm modifies the scoring mechanism by incorporating a harmonic mean for averaging distances to remaining nodes, while adding a weight factor for intermediate distances to balance choices among unvisited nodes.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "intermediate_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "weight_factor", "=", "0.3", "*", "(", "intermediate_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Harmonic mean for average distance to remaining nodes", "harmonic_mean_distance", "=", "len", "(", "unvisited_nodes", ")", "/", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "*", "harmonic_mean_distance", "-", "weight_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.514302161140193}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_destination", "=", "total_distance_to_destination", "/", "unvisited_count", "# Calculate the average distance of unvisited nodes from the current node", "average_distance_from_current", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "unvisited_count", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Introduce decay based on how far the current node is from average and the direct distance to the unvisited node", "decay_penalty", "=", "(", "direct_distance", "-", "average_distance_from_current", ")", "*", "0.1", "# Score calculation based on direct distance, average distance to destination, and the decay penalty", "score", "=", "direct_distance", "+", "average_distance_to_destination", "+", "decay_penalty", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.6", "# Weight for direct distance to next node", "connectivity_bonus_weight", "=", "0.4", "# Reward for visiting nodes with higher connectivity", "skip_penalty_weight", "=", "0.1", "# Penalty for skipping closer nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "direct_distance", ")", "skip_penalty", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", "and", "distance_matrix", "[", "current_node", "]", "[", "next", "]", "<", "direct_distance", ")", "# Score calculation", "score", "=", "(", "-", "direct_distance_weight", "*", "direct_distance", "+", "connectivity_bonus_weight", "*", "connectivity_score", "-", "skip_penalty_weight", "*", "skip_penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 33.93862860936132}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "diversity_bonus_factor", "=", "0.3", "# Factor to boost selection of less visited nodes", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.6", "# Weight for direct distance", "novelty_weight", "=", "0.4", "# Weight for encouraging diverse node selection", "cost_penalty_weight", "=", "0.1", "# Weight for penalizing long paths", "visited_count", "=", "0", "# Count of how many times nodes have been visited (to simulate novelty)", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "(", "len", "(", "unvisited_nodes", ")", "-", "visited_count", ")", "*", "cost_penalty_weight", "# Score blending distance and novelty", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "novelty_weight", "*", "(", "1", "/", "(", "1", "+", "visited_count", ")", ")", "-", "penalty", "# Updating visited_count for novelty calculation", "visited_count", "+=", "1", "# Simulating the visit for novelty scoring", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 17.891338204621924}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the nearest distances to all unvisited nodes", "distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Calculate a penalty factor based on the number of unvisited nodes", "penalty_factor", "=", "len", "(", "unvisited_nodes", ")", "*", "0.05", "# Arbitrary penalty multiplier", "# Select the next node by minimizing distance with the penalty considered", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distances", "[", "node", "]", "+", "penalty_factor", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "def", "score_node", "(", "node", ")", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "return", "distance_to_node", "+", "(", "distance_to_destination", "/", "2", ")", "# Weighted score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "score_node", ")", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["import", "numpy", "as", "np", "from", "collections", "import", "deque", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Initialize a queue for BFS", "queue", "=", "deque", "(", "[", "(", "current_node", ",", "0", ")", "]", ")", "# (current_node, total_distance)", "visited_nodes", "=", "set", "(", ")", "best_next_node", "=", "None", "minimal_distance", "=", "float", "(", "'inf'", ")", "while", "queue", ":", "current", ",", "total_distance", "=", "queue", ".", "popleft", "(", ")", "if", "current", "in", "visited_nodes", ":", "continue", "visited_nodes", ".", "add", "(", "current", ")", "for", "node", "in", "unvisited_nodes", ":", "if", "node", "not", "in", "visited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current", "]", "[", "node", "]", "distance_return", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "total_path_length", "=", "total_distance", "+", "distance_to_node", "+", "distance_return", "if", "total_path_length", "<", "minimal_distance", ":", "minimal_distance", "=", "total_path_length", "best_next_node", "=", "node", "queue", ".", "append", "(", "(", "node", ",", "total_distance", "+", "distance_to_node", ")", ")", "return", "best_next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "cluster_focus_weight", "=", "0.4", "# Weight for proximity to clusters of unvisited nodes", "path_length_weight", "=", "0.2", "# Weight for the current path length", "path_length", "=", "sum", "(", "distance_matrix", "[", "i", "]", "[", "j", "]", "for", "i", ",", "j", "in", "zip", "(", "[", "current_node", "]", "+", "list", "(", "unvisited_nodes", ")", ",", "list", "(", "unvisited_nodes", ")", "+", "[", "current_node", "]", ")", ")", "def", "calculate_dynamic_cluster_score", "(", "node", ")", ":", "cluster_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "cluster_score", "+=", "distance_matrix", "[", "node", "]", "[", "other", "]", "# Emphasize nearby nodes based on how close they are to destination", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "return", "(", "cluster_score", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", ")", "-", "distance_to_destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_score", "=", "calculate_dynamic_cluster_score", "(", "node", ")", "# Incorporate path length into scoring", "score", "=", "-", "direct_distance_weight", "*", "direct_distance", "+", "cluster_focus_weight", "*", "cluster_score", "-", "path_length_weight", "*", "path_length", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.272372416358447}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# The new algorithm integrates a scoring approach that evaluates both immediate distance and a clustering factor based on the node's curvature to the destination.", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "# Calculate curvature factor as a measure of how much a node bends the trajectory towards the destination", "def", "curvature_factor", "(", "node", ")", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "return", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "-", "direct_distance", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate score considering immediate distance and curvature effect", "score", "=", "immediate_distance", "+", "curvature_factor", "(", "node", ")", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to destination", "clustering_weight", "=", "0.6", "# Weight for clustering savings among unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", ")", "+", "(", "cluster_average_distance", "*", "clustering_weight", ")", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.242484209153323}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "cluster_score_weight", "=", "0.4", "# Weight for forming clusters", "destination_distance_weight", "=", "0.2", "# Weight for distance to destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate clustering potential by averaging distances among unvisited nodes", "cluster_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Heuristic for distance to the destination", "destination_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score considering direct distance, clustering potential and distance to destination", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "cluster_score_weight", "*", "cluster_score", "+", "destination_distance_weight", "*", "(", "1", "/", "(", "destination_distance", "+", "1e-10", ")", ")", "# avoiding division by zero", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.219562218837808}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "# Calculate the direct distance to the node", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate the centrality based on the number of direct connections to unvisited nodes", "centrality", "=", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", ">", "0", ")", "# Estimate the distance to return to the destination node weighted by centrality", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "adjusted_score", "=", "(", "distance_to_node", "*", "(", "1", "+", "centrality", "/", "len", "(", "unvisited_nodes", ")", ")", ")", "+", "distance_to_destination", "if", "adjusted_score", "<", "lowest_score", ":", "lowest_score", "=", "adjusted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.449597346505821}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "weights", "=", "[", "]", "total_weight", "=", "0", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "weight", "=", "1", "/", "distance", "if", "distance", ">", "0", "else", "float", "(", "'inf'", ")", "weights", ".", "append", "(", "(", "node", ",", "weight", ")", ")", "total_weight", "+=", "weight", "if", "total_weight", "==", "0", ":", "return", "None", "random_weight", "=", "random", ".", "uniform", "(", "0", ",", "total_weight", ")", "cumulative_weight", "=", "0", "for", "node", ",", "weight", "in", "weights", ":", "cumulative_weight", "+=", "weight", "if", "cumulative_weight", ">=", "random_weight", ":", "return", "node", "return", "None"], "code_perf": 19.03246408746135}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "total_connections", "=", "sum", "(", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "]", ")", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "node_connections", "=", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "0", "]", ")", "desirability_factor", "=", "node_connections", "/", "(", "1", "+", "total_connections", ")", "# Normalize by total connections", "score", "=", "direct_distance", "+", "0.7", "*", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "desirability_factor", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.6455935091714355}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "travel_cost_weight", "=", "0.4", "# Weight for travel cost", "heuristic_weight", "=", "0.4", "# Weight for heuristic desirability", "urgency_weight", "=", "0.2", "# Weight for urgency based on remaining nodes", "for", "node", "in", "unvisited_nodes", ":", "travel_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Heuristic score based on inverse distance to the destination", "heuristic_score", "=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1e-6", ")", "# Avoid division by zero", "# Urgency score based on the number of unvisited nodes", "urgency_score", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# More unvisited, higher urgency", "score", "=", "-", "travel_cost_weight", "*", "travel_cost", "+", "heuristic_weight", "*", "heuristic_score", "+", "urgency_weight", "*", "urgency_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.309089909443966}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "time_decay_factor", "=", "0.8", "historical_traversal_data", "=", "{", "node", ":", "1", "for", "node", "in", "unvisited_nodes", "}", "# Start with 1 to avoid division by zero", "# Calculate average distance to destination", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate connectivity to previously visited nodes", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "neighbor", "]", "[", "node", "]", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "not", "in", "unvisited_nodes", "and", "neighbor", "!=", "current_node", ")", "# Update historical traversal data with time decay", "desirability_score", "=", "historical_traversal_data", "[", "node", "]", "*", "time_decay_factor", "# Adjusted heuristic combining distances and scores with new utility metric", "weighted_heuristic", "=", "(", "0.5", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "0.5", "*", "(", "connectivity_score", "-", "desirability_score", ")", ")", "score", "=", "direct_distance", "+", "weighted_heuristic", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "# Update historical traversal data for the selected node", "if", "best_node", "is", "not", "None", ":", "historical_traversal_data", "[", "best_node", "]", "+=", "1", "return", "best_node"], "code_perf": 11.384843715780692}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "connectivity_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "adjustment_factor", "=", "0.5", "# Factor to control the exponential decay", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "+", "connectivity_penalty", "*", "(", "2", "**", "(", "-", "adjustment_factor", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.79872470767227}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "connectivity_weight", "=", "0.3", "# Weight for connectivity to unvisited nodes", "potential_weight", "=", "0.2", "# Weight for potential future routes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Predictive potential score based on distance to all unvisited nodes", "potential_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "cluster_factor", "=", "(", "1", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", ")", "# Encourages visiting isolated clusters", "# Calculate combined score", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "potential_weight", "*", "potential_score", "*", "cluster_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.352299619738124}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance", "future_savings_weight", "=", "0.4", "# Weight for potential savings from unvisited nodes", "exploration_weight", "=", "0.1", "# Weight for exploration towards the centroid of unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Calculate the centroid of unvisited nodes", "centroid", "=", "[", "0", "]", "*", "len", "(", "distance_matrix", ")", "# Initialize centroid", "for", "node", "in", "unvisited_nodes", ":", "for", "i", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", ":", "centroid", "[", "i", "]", "+=", "distance_matrix", "[", "node", "]", "[", "i", "]", "centroid", "=", "[", "c", "/", "len", "(", "unvisited_nodes", ")", "for", "c", "in", "centroid", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_savings", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "exploration_effect", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", ")", "/", "len", "(", "distance_matrix", ")", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "future_savings_weight", "*", "future_savings", ")", "+", "(", "exploration_weight", "*", "exploration_effect", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 11.41396983264763}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<", "min_distance", ":", "min_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate scores for each unvisited node based on distance, proximity to destination, and connectivity", "scores", "=", "{", "}", "proximity_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "decay_factor", "=", "proximity_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Closer nodes to destination score better", "scores", "[", "node", "]", "=", "distance_score", "-", "decay_factor", "+", "connectivity_score", "# Lower score is better", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "import", "numpy", "as", "np", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "clustering_weight", "=", "0.4", "# Weight for benefit of clustering", "visit_bonus_weight", "=", "0.2", "# Weight for encouraging less-visited nodes", "# Initialize visit counts for nodes if not present", "global", "node_visit_counts", "node_visit_counts", "=", "{", "}", "# Function to calculate clustering score based on proximity to unvisited nodes", "def", "calculate_clustering_effect", "(", "node", ")", ":", "return", "-", "np", ".", "min", "(", "[", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "]", ")", "if", "unvisited_nodes", "else", "0", "# Function to assess bonus for infrequent visits", "def", "calculate_visit_bonus", "(", "node", ")", ":", "return", "max", "(", "0", ",", "1", "-", "(", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", ")", "for", "node", "in", "unvisited_nodes", ":", "# Update visit counts at each call", "node_visit_counts", "[", "node", "]", "=", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", "+", "1", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "clustering_effect", "=", "calculate_clustering_effect", "(", "node", ")", "visit_bonus", "=", "calculate_visit_bonus", "(", "node", ")", "# Combined scoring mechanism", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "clustering_weight", "*", "clustering_effect", "+", "visit_bonus_weight", "*", "visit_bonus", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm introduces a dynamic scoring mechanism that incorporates a penalty for long detours and a factor for the density of unvisited nodes to improve path selection.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Detour penalty (encourages direct paths)", "detour_penalty", "=", "max", "(", "0", ",", "distance_to_next", "-", "(", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", ")", ")", "# Density factor (promoting nodes with more unvisited neighbors)", "density_factor", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "distance_to_next", ")", "# Weighting factors", "weight_distance", "=", "0.4", "weight_detour", "=", "0.4", "weight_density", "=", "0.2", "# Composite score calculation", "score", "=", "(", "weight_distance", "/", "(", "distance_to_next", "+", "1", ")", ")", "-", "(", "weight_detour", "*", "detour_penalty", ")", "+", "(", "weight_density", "*", "density_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 33.373278314197705}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_cost_penalty", "=", "average_distance_to_unvisited", "*", "0.3", "# Weighting factor for future cost", "score", "=", "direct_distance", "+", "future_cost_penalty", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "candidates", "=", "list", "(", "unvisited_nodes", ")", "scored_candidates", "=", "[", "]", "total_nodes", "=", "len", "(", "distance_matrix", ")", "for", "node", "in", "candidates", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "node_density", "=", "sum", "(", "1", "for", "n", "in", "range", "(", "total_nodes", ")", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", "and", "n", "in", "unvisited_nodes", ")", "connectivity_factor", "=", "1", "/", "(", "node_density", "+", "1", ")", "# Inverse of node density for connectedness scoring", "remaining_unvisited_penalty", "=", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "*", "0.4", "# Adjusted penalty for unvisited nodes", "score", "=", "direct_distance", "+", "connectivity_factor", "+", "remaining_unvisited_penalty", "scored_candidates", ".", "append", "(", "(", "node", ",", "score", ")", ")", "scored_candidates", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "return", "scored_candidates", "[", "0", "]", "[", "0", "]"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "avg_density_weight", "=", "0.4", "# Weight for considering the density of unvisited nodes", "distance_weight", "=", "0.3", "# Weight for direct distance", "future_pathweight", "=", "0.2", "# Weight for promising future paths", "destination_alignment_weight", "=", "0.1", "# Weight for alignment towards destination", "# Calculate the average distance to unvisited nodes", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Calculate the density score based on nearby unvisited nodes", "nearby_nodes", "=", "[", "node", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<", "10", "]", "# threshold can be adjusted", "density_score", "=", "len", "(", "nearby_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Potential future pathways assessment", "future_pathway_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Estimate score for alignment towards the final destination", "destination_alignment_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score incorporating density score", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "future_pathweight", "*", "future_pathway_score", "+", "destination_alignment_weight", "*", "destination_alignment_score", "+", "avg_density_weight", "*", "density_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.234780598262823}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_distance", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "destination_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "cluster_average", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "dest", "]", "for", "dest", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "score", "=", "direct_distance", "+", "(", "destination_distance", "-", "cluster_average", ")", "*", "0.5", "+", "(", "max_distance", "-", "direct_distance", ")", "*", "0.3", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.146821033103772}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "local_search_weight", "=", "0.5", "# Weight for local search efficiency", "global_efficiency_weight", "=", "0.5", "# Weight for global cost efficiency", "max_distance_to_destination", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "adjusted_local_distance", "=", "direct_distance", "+", "(", "len", "(", "unvisited_nodes", ")", "*", "0.1", ")", "# Penalty based on unvisited count", "potential_next_max_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "local_search_weight", "*", "adjusted_local_distance", ")", "+", "(", "global_efficiency_weight", "*", "potential_next_max_distance", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.3", "# Weight for direct distance", "connectivity_weight", "=", "0.5", "# Weight for node connectivity", "unvisited_path_weight", "=", "0.2", "# Weight for total unvisited path length", "attractiveness_weight", "=", "0.1", "# Weight for node attractiveness", "# Function to calculate connectivity score based on neighbors", "def", "calculate_connectivity_score", "(", "node", ")", ":", "return", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<", "float", "(", "'inf'", ")", ")", "# Function to calculate total unvisited path length from a node", "def", "calculate_unvisited_path_length", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "# Function to calculate node attractiveness based on centrality in unvisited nodes", "def", "calculate_attractiveness", "(", "node", ")", ":", "return", "len", "(", "[", "1", "for", "other", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "float", "(", "'inf'", ")", "]", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "calculate_connectivity_score", "(", "node", ")", "unvisited_path_length", "=", "calculate_unvisited_path_length", "(", "node", ")", "attractiveness_score", "=", "calculate_attractiveness", "(", "node", ")", "# Combined scoring mechanism", "score", "=", "(", "-", "direct_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "unvisited_path_weight", "*", "unvisited_path_length", "+", "attractiveness_weight", "*", "attractiveness_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 11.085148187322057}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Calculate average distance from each unvisited node to all other unvisited nodes", "avg_distance_from_node", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", "}", "# Calculate the number of unvisited connections for each node", "connection_counts", "=", "{", "node", ":", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "neighbor", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<=", "5", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_distance", "=", "avg_distance_from_node", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "connection_penalty", "=", "1", "-", "(", "connection_counts", "[", "node", "]", "/", "len", "(", "unvisited_nodes", ")", ")", "score", "=", "direct_distance", "+", "0.5", "*", "(", "avg_distance", "-", "distance_to_destination", ")", "+", "0.3", "*", "connection_penalty", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.925023624569427}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Modify the score to incorporate a connection strength factor", "connection_strength", "=", "np", ".", "exp", "(", "-", "total_distance_to_destination", ")", "# Combine the distances with the connection strength for a weighted score", "score", "=", "distance_to_node", "*", "(", "1", "-", "connection_strength", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 7.416282833571017}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "decay_factor", "=", "0.7", "# Emphasizes closer nodes", "randomness_factor", "=", "0.15", "# Introduces randomness to enhance exploration", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Heavier weight on proximity", "connectivity_weight", "=", "0.4", "# Reflects future path potentials", "destination_orientation_weight", "=", "0.2", "# Tendency towards destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate future connectivity score based on distances to remaining unvisited nodes", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Add randomness to the score", "randomness", "=", "random", ".", "uniform", "(", "-", "randomness_factor", ",", "randomness_factor", ")", "# Apply decay on the direct distance for score calculation", "proximity_score", "=", "(", "1", "/", "(", "1", "+", "direct_distance", ")", ")", "**", "decay_factor", "# Calculate alignment towards the destination", "orientation_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combine scores", "score", "=", "(", "proximity_weight", "*", "proximity_score", "+", "connectivity_weight", "*", "connectivity_score", "+", "destination_orientation_weight", "*", "orientation_score", "+", "randomness", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 13.433424057927681}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm introduces a scoring mechanism that not only considers the distance to the next node ", "# and the average distance to unvisited nodes but also incorporates a heuristic weight based on the number ", "# of unvisited nodes connected to the current node, incentivizing a path that encompasses clusters of nodes.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "# Calculate cluster connectivity based on distance to unvisited nodes", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "avg_distance_to_unvisited", ")", "# The score now includes a connectivity factor", "score", "=", "(", "avg_distance_to_unvisited", "-", "distance_to_next", ")", "+", "(", "connectivity_score", "*", "0.5", ")", "# Weight the connectivity", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 14.583738764088263}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_remaining", "=", "total_distance_to_remaining", "/", "len", "(", "unvisited_nodes", ")", "exploration_factor", "=", "0.1", "# Factor for random exploration", "direct_influence_weight", "=", "0.5", "# Weight for immediate distance", "future_importance_weight", "=", "0.5", "# Weight for future path significance", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "expected_future_distance", "=", "(", "average_distance_to_remaining", "+", "direct_distance", ")", "/", "2", "score", "=", "(", "direct_influence_weight", "*", "direct_distance", ")", "+", "(", "future_importance_weight", "*", "expected_future_distance", ")", "# Introduce random exploration", "if", "random", ".", "random", "(", ")", "<", "exploration_factor", ":", "score", "+=", "random", ".", "uniform", "(", "-", "1", ",", "1", ")", "# Small random variation", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 15.916461992283399}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "efficiency_weight", "=", "0.4", "# Weight for prospective efficiency", "proximity_weight", "=", "0.2", "# Weight for proximity to destination", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_efficiency", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", ">", "0", ")", "# Heuristic for future nodes", "proximity_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Closer to destination is better", "score", "=", "-", "(", "direct_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "*", "distance_weight", ")", "+", "(", "future_efficiency", "*", "efficiency_weight", ")", "-", "(", "proximity_score", "*", "proximity_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 30.476244581599662}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to destination", "connectivity_weight", "=", "0.3", "# Weight for penalty on less connected nodes", "cumulative_distance_weight", "=", "0.2", "# Weight for cumulative distance traveled", "randomness_factor", "=", "0.1", "# Weight for introducing random exploration", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "prev_node", "]", "for", "prev_node", "in", "unvisited_nodes", "if", "prev_node", "!=", "current_node", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "(", "connectivity_penalty", "*", "connectivity_weight", ")", "-", "(", "cumulative_distance", "*", "cumulative_distance_weight", ")", "-", "direct_distance", "+", "random", ".", "uniform", "(", "-", "randomness_factor", ",", "randomness_factor", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.206503543456906}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "connectivity_score", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "for", "other", "in", "unvisited_nodes", ":", "if", "node", "!=", "other", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<=", "5", ":", "connectivity_score", "[", "node", "]", "+=", "1", "# Count closely connected unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "neighbor_bonus", "=", "connectivity_score", "[", "node", "]", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "# Normalize connectivity", "score", "=", "direct_distance", "+", "0.5", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "-", "0.3", "*", "neighbor_bonus", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.450370583313572}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to current node", "diversity_weight", "=", "0.4", "# Weight for maintaining diverse connections", "historical_memory_weight", "=", "0.2", "# Weight for previous path lengths", "# Calculate historical path length based on previously visited nodes", "historical_lengths", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "proximity_score", "=", "-", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Closer nodes score higher", "diversity_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", ")", "# Favoring unvisited nodes that connect well", "historical_memory_score", "=", "-", "historical_lengths", "[", "node", "]", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Penalizing based on previous distances", "# Combined scoring function", "score", "=", "(", "proximity_weight", "*", "proximity_score", "+", "diversity_weight", "*", "diversity_score", "+", "historical_memory_weight", "*", "historical_memory_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.695626154122326}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm employs a multi-faceted scoring system based on accumulated path length, heuristic potential, and neighborhood connectivity to dynamically assess the most favorable next node.}", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "path_length_weight", "=", "0.5", "# Weight for accumulated path length", "heuristic_estimate_weight", "=", "0.3", "# Heuristic based on distance to destination", "neighborhood_connectivity_weight", "=", "0.2", "# Weight for connections to nearby unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate cumulative path length from the start node to current node and then to the next candidate node", "cumulative_path_length", "=", "direct_distance", "+", "distance_to_destination", "# Score is influenced by path length, heuristic estimate, and potential connections to nearby nodes", "neighborhood_score", "=", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "2", ")", "# Count close neighbors", "score", "=", "-", "path_length_weight", "*", "cumulative_path_length", "+", "heuristic_estimate_weight", "*", "distance_to_destination", "+", "neighborhood_connectivity_weight", "*", "neighborhood_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.331995111188165}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "angle_weight", "=", "0.5", "# Weight for angle-based influence", "distance_weight", "=", "0.5", "# Weight for distance to current node", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "angle_to_destination", "=", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "total_distance_to_destination", ")", "/", "(", "2", "*", "total_distance_to_destination", ")", "# Normalized angle influence", "score", "=", "-", "(", "direct_distance", "**", "2", ")", "+", "(", "angle_weight", "*", "angle_to_destination", ")", "+", "(", "distance_weight", "*", "(", "1", "/", "direct_distance", "if", "direct_distance", ">", "0", "else", "float", "(", "'inf'", ")", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.539183096926337}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "diversity_penalty", "=", "0.5", "# Factor to discourage visiting highly connected nodes", "distance_weight", "=", "0.5", "# Weight for prioritizing direct distances", "exploration_weight", "=", "0.5", "# Weight to encourage visiting less connected nodes", "# Compute the threshold for highly connected nodes", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "# Favor less connected nodes", "# Score calculation combining direct distance and bonuses for the 'risk' of visiting less connected nodes", "score", "=", "(", "distance_weight", "*", "direct_distance", ")", "-", "(", "exploration_weight", "*", "connectivity_score", ")", "# Apply diversity penalty if the node is highly connected", "if", "direct_distance", "<", "avg_distance", ":", "score", "+=", "diversity_penalty", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 31.414486983844483}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "detour_penalty_weight", "=", "0.4", "# Weight for potential detours", "attractiveness_weight", "=", "0.2", "# Weight for attractiveness based on adjacency", "# Function to calculate the detour penalty if choosing a node", "def", "calculate_detour_penalty", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Function to calculate attractiveness score based on proximity to unvisited nodes", "def", "calculate_attractiveness_score", "(", "node", ")", ":", "attractiveness_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "attractiveness_score", "+=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "+", "1", ")", "# Prevent division by zero", "return", "attractiveness_score", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "detour_penalty", "=", "calculate_detour_penalty", "(", "node", ")", "attractiveness_score", "=", "calculate_attractiveness_score", "(", "node", ")", "# Combined scoring mechanism using new weights", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "-", "detour_penalty_weight", "*", "detour_penalty", "+", "attractiveness_weight", "*", "attractiveness_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 13.357430731364843}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance to unvisited nodes", "attractiveness_weight", "=", "0.3", "# Weight for attractiveness to destination", "exploration_factor", "=", "0.2", "# Randomization factor for exploration", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate historical path length penalty (if any)", "# Here, we assume a hypothetical function that gives us the historical distance", "historical_penalty", "=", "sum", "(", "distance_matrix", "[", "prev_node", "]", "[", "node", "]", "for", "prev_node", "in", "unvisited_nodes", "if", "prev_node", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combine the scores", "score", "=", "(", "direct_distance", "*", "direct_weight", ")", "+", "(", "distance_to_destination", "*", "attractiveness_weight", ")", "-", "historical_penalty", "# Introduce a random factor to allow for exploration", "score", "+=", "random", ".", "uniform", "(", "-", "exploration_factor", ",", "exploration_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 33.858408981305274}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "randomness", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "# Introduce a random factor", "score", "=", "(", "average_distance_to_unvisited", "-", "distance_to_next", ")", "+", "randomness", "# Combination of factors", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 11.47710490958419}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "exploration_factor", "=", "0.5", "# Encourages exploration of less traveled paths", "distance_weight", "=", "0.5", "# Weight for direct distance", "destination_alignment_weight", "=", "0.3", "# Weight for alignment towards destination", "historical_effectiveness_weight", "=", "0.2", "# Weight for historical path performance", "# Dictionary to track the historical scores of nodes", "historical_scores", "=", "{", "node", ":", "1", "for", "node", "in", "unvisited_nodes", "}", "# Default score for unvisited nodes", "if", "unvisited_nodes", ":", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Historical effectiveness of routes (higher score for more frequently chosen nodes)", "historical_effectiveness_score", "=", "historical_scores", "[", "node", "]", "# Estimate score for alignment towards the final destination", "destination_alignment_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score considering exploration and historical effectiveness", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "destination_alignment_weight", "*", "destination_alignment_score", "+", "exploration_factor", "*", "(", "1", "/", "historical_effectiveness_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "# Update historical scores", "historical_scores", "[", "node", "]", "+=", "1", "# Increment score for selected node", "return", "next_node"], "code_perf": 6.4257563991146025}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "scores", "=", "{", "}", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "future_cost", "=", "total_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "scores", "[", "node", "]", "=", "distance_score", "+", "connectivity_score", "+", "future_cost", "# Lower score is better", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "from", "collections", "import", "defaultdict", "def", "cluster_nodes", "(", "unvisited_nodes", ",", "distance_matrix", ",", "cluster_radius", ")", ":", "clusters", "=", "defaultdict", "(", "list", ")", "for", "node", "in", "unvisited_nodes", ":", "cluster_found", "=", "False", "for", "cluster_center", "in", "clusters", ":", "if", "distance_matrix", "[", "node", "]", "[", "cluster_center", "]", "<", "cluster_radius", ":", "clusters", "[", "cluster_center", "]", ".", "append", "(", "node", ")", "cluster_found", "=", "True", "break", "if", "not", "cluster_found", ":", "clusters", "[", "node", "]", ".", "append", "(", "node", ")", "# Create a new cluster with itself", "return", "clusters", "# Define a radius for clustering nodes", "cluster_radius", "=", "5.0", "clusters", "=", "cluster_nodes", "(", "unvisited_nodes", ",", "distance_matrix", ",", "cluster_radius", ")", "# Determine the nearest cluster based on distance from the current node", "min_distance", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "cluster_center", "in", "clusters", ":", "cluster_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "cluster_center", "]", "if", "cluster_distance", "<", "min_distance", ":", "min_distance", "=", "cluster_distance", "next_node", "=", "cluster_center", "# Return the first node from the nearest cluster", "return", "clusters", "[", "next_node", "]", "[", "0", "]"], "code_perf": 26.04202206317254}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "1.0", "# Weight for inverse direct distance", "attractiveness_weight", "=", "1.0", "# Weight for attractiveness to destination", "penalty_weight", "=", "0.5", "# Weight for average distance to unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "1", "/", "(", "direct_distance", "+", "1e-7", ")", "*", "distance_weight", ")", "+", "(", "distance_to_destination", "*", "attractiveness_weight", ")", "+", "(", "average_distance_to_unvisited", "*", "penalty_weight", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 34.93855704855582}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "connectivity_scores", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", "}", "penalty_weight", "=", "0.7", "# Weight for distance penalty", "connectivity_weight", "=", "0.3", "# Weight for connection benefit", "for", "node", "in", "unvisited_nodes", ":", "distance_penalty", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_benefit", "=", "connectivity_scores", "[", "node", "]", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "score", "=", "(", "penalty_weight", "*", "distance_penalty", ")", "-", "(", "connectivity_weight", "*", "connectivity_benefit", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.5072915531532045}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "randomness_factor", "=", "0.1", "# Factor to introduce randomness in node selection", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_penalty", "=", "0.2", "# Penalty for over-connected nodes", "loop_closure_weight", "=", "0.2", "# Weight for forming shorter loops", "exploration_weight", "=", "0.2", "# Weight for encouraging exploration of unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Estimate potential loop closure score considering closeness to the destination", "loop_closure_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score with added randomness factor", "score", "=", "-", "distance_weight", "*", "direct_distance", "-", "connectivity_penalty", "*", "connectivity_score", "+", "loop_closure_weight", "*", "loop_closure_score", "score", "+=", "exploration_weight", "*", "random", ".", "uniform", "(", "0", ",", "1", ")", "# Add randomness to scoring", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.1862936577521}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "historical_weight", "=", "0.6", "# Weight for historical travel efficiency", "proximity_weight", "=", "0.4", "# Weight for proximity to destination", "revisit_priority_factor", "=", "0.5", "# Additional weight for nodes that have been visited before", "max_proximity_radius", "=", "3", "# Maximum distance within which proximity is favored", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_cost_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Historical cost is dynamically scaled based on the direct distance", "historical_cost", "=", "(", "total_distance_to_destination", "+", "direct_distance", ")", "/", "(", "1", "+", "(", "direct_distance", "/", "10", ")", ")", "# More distance reduces historical impact", "# Proximity penalty", "proximity_penalty", "=", "max", "(", "0", ",", "(", "direct_distance", "-", "max_proximity_radius", ")", "*", "0.3", ")", "if", "direct_distance", ">", "max_proximity_radius", "else", "0", "# Revisiting score in case the node has been previously visited and is part of historical journey (not applicable here, but example for extension)", "revisit_score", "=", "revisit_priority_factor", "if", "node", "in", "unvisited_nodes", "else", "0", "score", "=", "-", "(", "direct_distance", "+", "historical_cost", "+", "proximity_penalty", ")", "+", "(", "average_cost_to_destination", "*", "historical_weight", ")", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "revisit_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.3741311958721}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "avg_distance_weight", "=", "0.5", "# Weight for average distance to unvisited nodes", "direct_distance_weight", "=", "0.3", "# Weight for direct distance", "destination_proximity_weight", "=", "0.2", "# Weight for proximity to destination", "direct_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_distance_to_others", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_distance", "*", "direct_distance_weight", ")", "+", "(", "avg_distance_to_others", "*", "avg_distance_weight", ")", "+", "(", "destination_proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.009627286106916}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance influence", "clustering_weight", "=", "0.6", "# Weight for the benefit of clustering unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "clustering_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "total_distance_to_destination", "-", "direct_distance", ")", "*", "distance_weight", "+", "(", "clustering_score", "*", "clustering_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.631844723016577}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "proximity_weight", "=", "0.6", "# Weight for proximity to clusters of unvisited nodes", "destination_distance_weight", "=", "0.3", "# Weight for distance to destination", "clusters_count_weight", "=", "0.1", "# Weight for the number of clusters of unvisited nodes", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "# Calculate the centroid of the unvisited nodes for cluster proximity", "if", "unvisited_count", ">", "0", ":", "centroid_x", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "unvisited_count", "centroid_distance", "=", "sum", "(", "abs", "(", "centroid_x", "-", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "for", "node", "in", "unvisited_nodes", ")", "/", "unvisited_count", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Score calculation", "score", "=", "-", "proximity_weight", "*", "centroid_distance", "+", "destination_distance_weight", "*", "distance_to_destination", "-", "clusters_count_weight", "*", "unvisited_count", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 18.704820740310076}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate the total distances to destination for unvisited nodes", "distance_to_destination", "=", "{", "node", ":", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "closeness_score", "=", "1", "/", "(", "distance_to_destination", "[", "node", "]", "+", "1", ")", "# Inverse of distance to encourage closer nodes", "# Introducing a penalty for high connectivity nodes", "connectivity_score", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "penalty", "=", "connectivity_score", "/", "len", "(", "unvisited_nodes", ")", "# Normalized penalty based on total unvisited nodes", "# Novel scoring mechanism combining inverse distance, closeness, and penalty", "score", "=", "direct_distance", "-", "closeness_score", "+", "penalty", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.373133925713997}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "future_weight", "=", "0.4", "# Weight for average future distance", "penalty_weight", "=", "0.2", "# Weight for penalties", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "future_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_future_distance", "=", "future_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "(", "direct_distance", "**", "2", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "future_weight", "*", "-", "average_future_distance", ")", "-", "(", "penalty_weight", "*", "penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.4", "# Weight for connectivity to visited nodes", "future_penalty_weight", "=", "0.2", "# Weight for penalty of total distance to unvisited nodes", "# Function to calculate the connectivity score based on visited nodes", "def", "calculate_visited_connectivity_score", "(", "node", ")", ":", "visited_score", "=", "0", "visited_nodes", "=", "{", "i", "for", "i", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "}", "-", "unvisited_nodes", "-", "{", "current_node", "}", "for", "other", "in", "visited_nodes", ":", "visited_score", "+=", "distance_matrix", "[", "node", "]", "[", "other", "]", "return", "visited_score", "/", "(", "len", "(", "visited_nodes", ")", "or", "1", ")", "total_future_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "visited_connectivity_score", "=", "calculate_visited_connectivity_score", "(", "node", ")", "# Combined scoring mechanism with future penalties", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "visited_connectivity_score", "-", "future_penalty_weight", "*", "total_future_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.369607272217397}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "total_weight", "=", "0", "weights", "=", "{", "}", "# Calculate the weights based on inverse distance", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", ">", "0", ":", "# Prevent division by zero", "weight", "=", "1", "/", "distance", "else", ":", "weight", "=", "float", "(", "'inf'", ")", "# Handle cases where distance is zero", "weights", "[", "node", "]", "=", "weight", "total_weight", "+=", "weight", "# Random selection based on the calculated weights", "rand", "=", "random", ".", "uniform", "(", "0", ",", "total_weight", ")", "cumulative_weight", "=", "0", "for", "node", ",", "weight", "in", "weights", ".", "items", "(", ")", ":", "cumulative_weight", "+=", "weight", "if", "cumulative_weight", ">=", "rand", ":", "return", "node"], "code_perf": 19.272974197408217}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_combined_score", "=", "float", "(", "'-inf'", ")", "# Calculate the maximum distance for normalization", "max_happiness_score", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate happiness score based on the sum of distances to all other unvisited nodes, normalized", "happiness_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "normalized_happiness_score", "=", "happiness_score", "/", "max_happiness_score", "if", "max_happiness_score", "!=", "0", "else", "0", "# Combined score: prioritize both normalized happiness and proximity", "combined_score", "=", "normalized_happiness_score", "-", "(", "0.5", "*", "distance_to_next", "+", "0.3", "*", "distance_to_destination", ")", "if", "combined_score", ">", "max_combined_score", ":", "max_combined_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.05523408857922}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "def", "estimate_cost", "(", "node", ",", "unvisited_nodes", ")", ":", "total_distance", "=", "0", "count", "=", "len", "(", "unvisited_nodes", ")", "if", "count", "==", "0", ":", "return", "0", "for", "unvisited_node", "in", "unvisited_nodes", ":", "total_distance", "+=", "distance_matrix", "[", "node", "]", "[", "unvisited_node", "]", "average_distance", "=", "total_distance", "/", "count", "return", "average_distance", "+", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "min_total_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "total_cost", "=", "estimate_cost", "(", "node", ",", "unvisited_nodes", ")", "if", "total_cost", "<", "min_total_cost", ":", "min_total_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance to unvisited nodes", "attractiveness_weight", "=", "0.3", "# Weight for attractiveness to destination", "clustering_bonus", "=", "0.2", "# Bonus for proximity to clusters of unvisited nodes ", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate average distance to unvisited nodes for clustering effect", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "clustering_bonus_score", "=", "clustering_bonus", "*", "(", "1", "/", "(", "1", "+", "average_distance_to_unvisited", ")", ")", "# Favor nodes with lower average distance to unvisited", "score", "=", "(", "direct_distance", "*", "direct_weight", ")", "+", "(", "distance_to_destination", "*", "attractiveness_weight", ")", "+", "clustering_bonus_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 34.27895870206964}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "decay_factor", "=", "0.85", "# Factor to diminish the influence of distance over time", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "closeness_weight", "=", "0.4", "# Weight for proximity to destination", "edge_density_weight", "=", "0.1", "# Weight for connection density", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "closeness_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Direct distance to destination", "edge_density_score", "=", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", ")", "# Count connections", "# Combined score considering the decay of distance impact and connectivity", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "closeness_weight", "*", "closeness_score", "*", "decay_factor", "+", "edge_density_weight", "*", "edge_density_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.440494595641131}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_bid", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "popularity_scores", "=", "{", "node", ":", "random", ".", "uniform", "(", "0", ",", "1", ")", "for", "node", "in", "unvisited_nodes", "}", "# Initial popularity scores", "if", "unvisited_nodes", ":", "proximity_factor", "=", "0.4", "# Refined factor for proximity", "bidding_factor", "=", "0.6", "# Updated factor for bidding based on cluster attractiveness", "randomness_factor", "=", "0.2", "# Factor to introduce randomness in selection", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_cluster_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "normalized_popularity", "=", "popularity_scores", "[", "node", "]", "/", "(", "sum", "(", "popularity_scores", ".", "values", "(", ")", ")", "or", "1", ")", "# Normalize popularity", "bid", "=", "(", "normalized_popularity", "*", "randomness_factor", "*", "proximity_factor", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "(", "average_cluster_distance", "*", "bidding_factor", ")", "-", "direct_distance", "if", "bid", ">", "max_bid", ":", "max_bid", "=", "bid", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.372958188515504}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "nearest_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "score", "=", "nearest_distance", "+", "average_distance", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["import", "random", "import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "probabilities", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "if", "total_distance", ">", "0", ":", "probabilities", "[", "node", "]", "=", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "/", "total_distance", ")", "**", "2", "# Squaring to emphasize shorter distances", "else", ":", "probabilities", "[", "node", "]", "=", "0", "# Normalize probabilities", "total_prob", "=", "sum", "(", "probabilities", ".", "values", "(", ")", ")", "if", "total_prob", ">", "0", ":", "probabilities", "=", "{", "node", ":", "prob", "/", "total_prob", "for", "node", ",", "prob", "in", "probabilities", ".", "items", "(", ")", "}", "else", ":", "return", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "# Use a random number to select based on probabilities", "random_value", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "cumulative", "=", "0.0", "for", "node", ",", "prob", "in", "probabilities", ".", "items", "(", ")", ":", "cumulative", "+=", "prob", "if", "cumulative", ">=", "random_value", ":", "return", "node", "return", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "# Fallback"], "code_perf": 31.470287369123373}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm utilizes a scoring mechanism that incorporates a combination of direct distance, heuristic cost to destination, and a randomized exploration factor to encourage less frequently visited nodes.}", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "visit_counts", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "# Track how many times nodes have been considered", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "visit_penalty", "=", "visit_counts", "[", "node", "]", "*", "(", "0.2", "/", "(", "visit_counts", "[", "node", "]", "+", "1", ")", ")", "# Adjusted diminishing penalty", "# Random factor to explore less frequently visited nodes", "random_factor", "=", "(", "1", "/", "(", "visit_counts", "[", "node", "]", "+", "1", ")", ")", "*", "5", "# Higher score for less visited nodes", "score", "=", "(", "direct_distance", "+", "visit_penalty", "+", "random_factor", ")", "+", "(", "avg_distance_to_destination", "-", "distance_to_destination", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "# Increment visit count for the next node", "if", "next_node", ":", "visit_counts", "[", "next_node", "]", "+=", "1", "return", "next_node"], "code_perf": 7.05035176486513}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "destination_weight", "=", "0.7", "# Weight for distance to the destination", "detour_penalty_weight", "=", "0.3", "# Weight for the penalty incurred by detours", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "detour_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "score", "=", "(", "destination_weight", "*", "distance_to_destination", ")", "+", "(", "detour_penalty_weight", "*", "detour_penalty", ")", "+", "direct_distance", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 14.029413373574645}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Function to calculate score combining distance and proximity to destination", "def", "calculate_score", "(", "node", ")", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "return", "distance_to_next", "+", "(", "1.5", "*", "distance_to_destination", ")", "# Weighting proximity to destination", "# Collect scores for all unvisited nodes", "scores", "=", "{", "node", ":", "calculate_score", "(", "node", ")", "for", "node", "in", "unvisited_nodes", "}", "# Normalize scores to a probability distribution", "total_score", "=", "sum", "(", "scores", ".", "values", "(", ")", ")", "probabilities", "=", "{", "node", ":", "score", "/", "total_score", "for", "node", ",", "score", "in", "scores", ".", "items", "(", ")", "}", "# Select the next node based on weighted probabilities", "next_node", "=", "random", ".", "choices", "(", "list", "(", "probabilities", ".", "keys", "(", ")", ")", ",", "weights", "=", "probabilities", ".", "values", "(", ")", ")", "[", "0", "]", "return", "next_node"], "code_perf": 26.939805865107573}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Define a scoring function for nodes", "def", "calculate_score", "(", "node", ")", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "return", "distance_to_node", "+", "(", "distance_to_destination", "/", "2", ")", "# Weight destination distance less", "# Generate scores for all unvisited nodes", "scores", "=", "{", "node", ":", "calculate_score", "(", "node", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the node with the minimum score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["# {This algorithm calculates a weighted score based on the shortest distance to each unvisited node, ", "# the penalty for visiting nodes that are less connected to the unvisited cluster, ", "# and a heuristic that favors nodes closer to the destination by a weighted average of distances.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate score: shorter distance to the next node, lower connectivity penalty, and proximity to destination", "score", "=", "(", "1", "/", "distance_to_next", ")", "-", "(", "0.3", "*", "connectivity_score", ")", "-", "(", "0.7", "*", "distance_to_destination", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.0997650077243195}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "node_scores", "=", "{", "}", "# Calculate a score for each unvisited node using exponential decay based on distance", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distances_to_remain", "=", "[", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "]", "# Calculate mean distance to remaining unvisited nodes", "if", "distances_to_remain", ":", "mean_distance", "=", "sum", "(", "distances_to_remain", ")", "/", "len", "(", "distances_to_remain", ")", "else", ":", "mean_distance", "=", "0", "# Create a composite score based on direct distance and an exponential term", "decay_factor", "=", "0.5", "# Adjust this parameter for influence of future potential", "future_potential", "=", "sum", "(", "[", "(", "1", "/", "(", "distance", "+", "1e-6", ")", ")", "for", "distance", "in", "distances_to_remain", "]", ")", "# Avoid division by zero", "node_scores", "[", "node", "]", "=", "direct_distance", "+", "(", "decay_factor", "*", "future_potential", ")", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 12.410494437963301}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate clustering scores based on the average distance to all unvisited nodes", "clustering_scores", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", "}", "urgency_factor", "=", "{", "node", ":", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Distance to destination", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "clustering_penalty", "=", "1", "/", "(", "clustering_scores", "[", "node", "]", "+", "1", ")", "# Lower clustering score is better", "urgency_score", "=", "urgency_factor", "[", "node", "]", "*", "0.5", "# Factor in urgency", "score", "=", "(", "distance", "*", "clustering_penalty", "+", "urgency_score", ")", "*", "random", ".", "uniform", "(", "0.95", ",", "1.05", ")", "# Adding slight randomness", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.612568934799107}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.7", "# Increased weight for direct distance cost", "attractiveness_weight", "=", "0.3", "# Weight for node attractiveness", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "attractiveness_factor", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "+", "1e-9", ")", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "# Avoid division by zero", "score", "=", "-", "(", "distance_weight", "*", "direct_distance", ")", "+", "(", "attractiveness_weight", "*", "attractiveness_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 27.291397631403463}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "# Constants for weighting", "alpha", "=", "0.4", "# Weight for distance score", "beta", "=", "0.4", "# Weight for neighbor attractiveness score", "gamma", "=", "0.2", "# Weight for angular penalty", "# Calculate total distances and angles to the remaining nodes", "total_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "def", "angular_penalty", "(", "node", ")", ":", "# Calculate the angle difference from current direction to this node", "return", "abs", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "-", "distance_matrix", "[", "destination_node", "]", "[", "node", "]", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Neighbor attractiveness score: based on the number of unvisited neighbors", "neighbor_count", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "distance_to_next", ")", "# Combined score incorporating attractiveness and angular penalty", "combined_score", "=", "(", "neighbor_count", "*", "beta", "/", "total_distance_remaining", "-", "distance_to_destination", "*", "gamma", "-", "distance_to_next", "*", "alpha", "-", "angular_penalty", "(", "node", ")", ")", "if", "combined_score", ">", "best_score", ":", "best_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 27.770910477761447}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "exploration_factor", "=", "0.3", "# Factor to encourage exploration of new paths", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.4", "# Weight for connectivity to unvisited nodes", "loop_closure_weight", "=", "0.2", "# Weight for forming shorter loops", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Estimate potential loop closure score considering closeness to the destination", "loop_closure_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score with exploration component", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "loop_closure_weight", "*", "loop_closure_score", "# Adding a random exploratory component to avoid getting stuck in local optima", "exploration_bonus", "=", "random", ".", "uniform", "(", "0", ",", "exploration_factor", ")", "score", "+=", "exploration_bonus", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.259770076249792}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "estimated_tour_length", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "farthest_distance", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "distance_penalty_factor", "=", "0.5", "# Factor to penalize distance from destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_penalty", "=", "distance_penalty_factor", "*", "(", "farthest_distance", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "score", "=", "direct_distance", "+", "estimated_tour_length", "+", "distance_penalty", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.450370583313572}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "best_node", "=", "None", "best_tour_length", "=", "float", "(", "'inf'", ")", "# Function to calculate total tour distance", "def", "calculate_tour_length", "(", "tour", ")", ":", "total_distance", "=", "0", "for", "i", "in", "range", "(", "len", "(", "tour", ")", "-", "1", ")", ":", "total_distance", "+=", "distance_matrix", "[", "tour", "[", "i", "]", "]", "[", "tour", "[", "i", "+", "1", "]", "]", "total_distance", "+=", "distance_matrix", "[", "tour", "[", "-", "1", "]", "]", "[", "tour", "[", "0", "]", "]", "# Return to start", "return", "total_distance", "# Explore each unvisited node", "for", "node", "in", "unvisited_nodes", ":", "new_tour", "=", "[", "current_node", "]", "+", "list", "(", "unvisited_nodes", "-", "{", "node", "}", ")", "+", "[", "node", "]", "tour_length", "=", "calculate_tour_length", "(", "new_tour", ")", "if", "tour_length", "<", "best_tour_length", ":", "best_tour_length", "=", "tour_length", "best_node", "=", "node", "return", "best_node"], "code_perf": 12.931551189067505}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Define a penalty factor to avoid overly long paths", "penalty_factor", "=", "0.1", "for", "node", "in", "unvisited_nodes", ":", "# Calculate cost with penalty for unvisited nodes", "current_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", "if", "next_node", "!=", "node", ")", "adjusted_cost", "=", "current_cost", "+", "penalty_factor", "*", "future_cost", "if", "adjusted_cost", "<", "min_cost", ":", "min_cost", "=", "adjusted_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.508647255986432}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate direct distances to the destination for unvisited nodes", "distances_to_destination", "=", "{", "node", ":", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Count connections (number of edges) for unvisited nodes", "connections_count", "=", "{", "node", ":", "sum", "(", "1", "for", "j", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "distance_matrix", "[", "node", "]", "[", "j", "]", "<", "float", "(", "'inf'", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the next node based on a combination of distance to the destination and the number of connections", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "(", "distances_to_destination", "[", "node", "]", ",", "connections_count", "[", "node", "]", ")", ")", "return", "next_node"], "code_perf": 18.704820740310073}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "penalty_factor", "=", "1.5", "# Penalty for returning to recently visited nodes", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "attractiveness_weight", "=", "0.4", "# Weight for heuristic proximity to destination", "congestion_weight", "=", "0.2", "# Weight for congestion based on unvisited nodes proximity", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "attractiveness_score", "=", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Compute congestion score based on proximity to other unvisited nodes", "congestion_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combined score considering penalties and weights", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "attractiveness_weight", "*", "attractiveness_score", "-", "congestion_weight", "*", "congestion_score", "# Apply penalty based on how close the node is to previously visited nodes", "recent_visit_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "prev", "]", "for", "prev", "in", "unvisited_nodes", "if", "prev", "!=", "node", ")", "*", "penalty_factor", "score", "-=", "recent_visit_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 29.863592337980542}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "revisit_penalty_weight", "=", "0.3", "# Weight for penalizing nodes that may lead to revisits", "distance_variance_weight", "=", "0.4", "# Weight for promoting low distance variance from unvisited nodes", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "connectivity_weight", "=", "0.2", "# Weight for connectivity to unvisited nodes", "loop_closure_weight", "=", "0.1", "# Weight for forming shorter loops", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Evaluate distance variance from the current node to all unvisited nodes", "distance_variance", "=", "sum", "(", "(", "distance_matrix", "[", "current_node", "]", "[", "next", "]", "-", "direct_distance", ")", "**", "2", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Estimate potential loop closure score considering closeness to the destination", "loop_closure_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score incorporating revisit penalty and distance variance", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "-", "revisit_penalty_weight", "*", "(", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1", ")", ")", "+", "loop_closure_weight", "*", "loop_closure_score", "-", "distance_variance_weight", "*", "distance_variance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.538169979371476}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "risk_penalty_factor", "=", "0.3", "# Factor to penalize routes that are longer than average", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "future_pathweight", "=", "0.3", "# Weight for promising future paths", "destination_alignment_weight", "=", "0.2", "# Weight for alignment towards destination", "proximity_weight", "=", "0.3", "# Weight for proximity to other unvisited nodes", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate potential future pathways based on unvisited connections", "future_pathway_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Estimate score for alignment towards the final destination", "destination_alignment_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate proximity to other unvisited nodes", "proximity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combined score with risk penalty for longer paths", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "future_pathweight", "*", "future_pathway_score", "-", "risk_penalty_factor", "*", "(", "direct_distance", "-", "avg_distance_to_unvisited", ")", "+", "destination_alignment_weight", "*", "destination_alignment_score", "+", "proximity_weight", "*", "proximity_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.252798419041268}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_cost_weight", "=", "0.5", "# Weight for immediate travel cost", "future_benefit_weight", "=", "0.5", "# Weight for potential travel savings through neighbors", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "neighbor_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "for", "neighbor", "in", "unvisited_nodes", "if", "neighbor", "!=", "node", ")", "neighbor_average_distance", "=", "neighbor_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "# New scoring mechanism", "score", "=", "-", "(", "direct_distance", ")", "+", "(", "total_distance_to_destination", "*", "immediate_cost_weight", ")", "+", "(", "neighbor_average_distance", "*", "future_benefit_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.424671222018382}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "total_weight", "=", "0", "weights", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "weight", "=", "1", "/", "(", "distance", "+", "1", ")", "# Avoid division by zero", "weights", "[", "node", "]", "=", "weight", "total_weight", "+=", "weight", "# Calculate probabilities", "probabilities", "=", "{", "node", ":", "weight", "/", "total_weight", "for", "node", ",", "weight", "in", "weights", ".", "items", "(", ")", "}", "# Select next node based on weighted probabilities", "rand_val", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "cumulative_probability", "=", "0.0", "for", "node", ",", "prob", "in", "probabilities", ".", "items", "(", ")", ":", "cumulative_probability", "+=", "prob", "if", "rand_val", "<=", "cumulative_probability", ":", "return", "node", "return", "None"], "code_perf": 24.336170454648663}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to the destination node", "connectivity_weight", "=", "0.6", "# Weight for successful future connections", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "unvisited_count", "=", "len", "(", "[", "next", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", "]", ")", "# Count of connected unvisited nodes", "penalty_factor", "=", "(", "unvisited_count", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "*", "direct_distance", "# Penalty for less connected nodes", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", "+", "penalty_factor", ")", "*", "proximity_weight", "+", "(", "unvisited_count", "*", "connectivity_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "closest_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "closest_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "closest_node", "]", "penalties", "=", "{", "node", ":", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1", ")", "for", "node", "in", "unvisited_nodes", "}", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "penalties", "[", "node", "]", "randomness", "=", "random", ".", "uniform", "(", "0.9", ",", "1.1", ")", "*", "(", "closest_distance", "/", "(", "distance", "+", "1", ")", ")", "score", "=", "(", "distance", "*", "penalty", ")", "*", "randomness", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.1219165381444975}
{"code_tokens": ["import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "exploration_weight", "=", "0.4", "# Weight for exploring nearby unvisited nodes", "destination_weight", "=", "0.2", "# Weight based on distance to the destination", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "euclidean_distance", "=", "math", ".", "sqrt", "(", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "**", "2", ")", "+", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "**", "2", ")", ")", "nearby_node_influence", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "node", "!=", "other_node", ")", "nearby_node_average", "=", "nearby_node_influence", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "1", ")", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "exploration_weight", "*", "nearby_node_average", ")", "+", "(", "destination_weight", "*", "euclidean_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.014497908254854}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Total cost to reach the destination", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Calculate scores for each unvisited node", "scores", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "total_distance_to_destination", "*", "0.3", "-", "(", "len", "(", "unvisited_nodes", ")", "*", "0.1", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the unvisited node with the minimum score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity to destination", "connectivity_weight", "=", "0.3", "# Weight for node connectivity evaluation", "predicted_savings_weight", "=", "0.2", "# Weight for predicted future savings", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "+", "1", ")", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "# Predicting future savings based on the neighboring nodes' distances", "predicted_savings", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "+", "1", ")", "score", "=", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "connectivity_weight", "*", "connectivity_score", "-", "predicted_savings_weight", "*", "predicted_savings", "-", "direct_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.785278364964116}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "total_weight", "=", "0", "probabilities", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Weight calculation: closer nodes to current and destination should have higher probability", "weight", "=", "1", "/", "(", "distance_to_node", "+", "distance_to_destination", ")", "probabilities", "[", "node", "]", "=", "weight", "total_weight", "+=", "weight", "# Normalize probabilities", "normalized_probabilities", "=", "{", "node", ":", "weight", "/", "total_weight", "for", "node", ",", "weight", "in", "probabilities", ".", "items", "(", ")", "}", "# Select the next node based on weighted probabilities", "random_value", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "cumulative_probability", "=", "0", "for", "node", ",", "prob", "in", "normalized_probabilities", ".", "items", "(", ")", ":", "cumulative_probability", "+=", "prob", "if", "random_value", "<=", "cumulative_probability", ":", "return", "node", "return", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "# Fallback in case of rounding errors"], "code_perf": 23.156491783807546}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "risk_adjustment_factor", "=", "0.5", "# Factor to adjust score based on current travel distance", "if", "unvisited_nodes", ":", "novelty_weight", "=", "0.3", "# Weight for novelty score of unvisited nodes", "risk_adjustment_weight", "=", "0.4", "# Weight for risk adjustment of current distance", "heuristic_weight", "=", "0.3", "# Weight for heuristic proximity to destination", "# Calculate novelty score for unvisited nodes", "novelty_scores", "=", "{", "node", ":", "len", "(", "set", "(", "distance_matrix", "[", "node", "]", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "# Calculate current distance from the last node visited to the destination", "current_to_destination_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate novelty score for the current node", "novelty_score", "=", "novelty_scores", "[", "node", "]", "# Heuristic score based on distance to destination", "heuristic_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score adjusting for risk based on current distance", "score", "=", "novelty_weight", "*", "novelty_score", "-", "risk_adjustment_weight", "*", "current_to_destination_distance", "-", "risk_adjustment_factor", "*", "direct_distance", "+", "heuristic_weight", "*", "heuristic_score", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.4257563991146025}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "decay_factor", "=", "0.5", "# Factor to reduce influence of longer distances to unvisited nodes", "total_distance_from_current", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_from_visited", "=", "total_distance_from_current", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "appeal_score", "=", "(", "1", "/", "(", "remaining_distance_to_destination", "+", "1", ")", ")", "# Avoid division by zero", "score", "=", "direct_distance", "+", "decay_factor", "*", "average_distance_from_visited", "+", "(", "1", "-", "decay_factor", ")", "*", "appeal_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 36.08188540417146}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "clustering_weight", "=", "0.3", "# Weight for clustering similarity", "adaptive_historical_weight", "=", "0.2", "# Weight for adaptive historical cost", "nearest_neighbor_weight", "=", "0.1", "# Weight for nearest neighbor heuristic", "# Calculate average distance to unvisited nodes for clustering", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Clustering score based on the proximity of unvisited nodes", "clustering_score", "=", "clustering_weight", "*", "(", "avg_distance_to_unvisited", "-", "direct_distance", ")", "# Adaptive historical cost penalizing the cost of previously visited nodes", "adaptive_historical_penalty", "=", "adaptive_historical_weight", "*", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "/", "(", "1", "+", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "n", "!=", "current_node", "and", "n", "not", "in", "unvisited_nodes", ")", ")", ")", "# Nearest neighbor heuristic for future predictions", "nearest_neighbor_score", "=", "nearest_neighbor_weight", "*", "(", "min", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", ")", "score", "=", "-", "direct_distance", "+", "clustering_score", "-", "adaptive_historical_penalty", "+", "nearest_neighbor_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "next_node", "=", "None", "minimal_distance", "=", "float", "(", "'inf'", ")", "# Basic nearest neighbor search", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "<", "minimal_distance", ":", "minimal_distance", "=", "distance", "next_node", "=", "node", "# Backtracking mechanism", "if", "next_node", "is", "not", "None", ":", "unvisited_nodes", ".", "remove", "(", "next_node", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "decay_factor", "=", "0.1", "# A factor to reduce the influence of distance to visited nodes", "# Calculate average distance to unvisited nodes", "if", "unvisited_nodes", ":", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Estimate distance to visited nodes with a decay factor", "distance_to_visited_nodes", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "i", "not", "in", "unvisited_nodes", "and", "i", "!=", "current_node", ")", "visiting_cost", "=", "decay_factor", "*", "distance_to_visited_nodes", "# Total cost combines direct distance and adjusted average distance", "total_cost", "=", "direct_distance", "+", "average_distance", "+", "visiting_cost", "if", "total_cost", "<", "min_cost", ":", "min_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.53797699572381}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.3", "# Weight for direct distance", "future_distance_weight", "=", "0.4", "# Weight for future potential distances", "isolation_penalty_weight", "=", "0.2", "# Penalty for isolated nodes", "exploration_score_weight", "=", "0.1", "# Exploration score based on distance to other unvisited nodes", "total_nodes", "=", "len", "(", "distance_matrix", ")", "future_distances", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_potential_distance", "=", "future_distances", "[", "node", "]", "# Isolation penalty", "isolation_penalty", "=", "isolation_penalty_weight", "*", "(", "1", "if", "future_potential_distance", "==", "0", "else", "0", ")", "# Exploration scoring based on distances to other unvisited nodes", "exploration_score", "=", "sum", "(", "1", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "next", "]", ")", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Calculate combined score", "score", "=", "-", "distance_weight", "*", "direct_distance", "-", "isolation_penalty", "+", "future_distance_weight", "*", "future_potential_distance", "+", "exploration_score_weight", "*", "exploration_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 12.297329570664381}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "weight_factor", "=", "1.5", "# Adjusts the influence of proximity", "if", "unvisited_nodes", ":", "closest_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "closest_distance", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "direct_distance", "+", "(", "weight_factor", "*", "proximity_score", "/", "max", "(", "1", ",", "closest_distance", ")", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.768431081957852}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.3", "# Weight for connectivity to unvisited nodes", "potential_weight", "=", "0.2", "# Weight for future potential based on remaining nodes", "randomness_weight", "=", "0.1", "# Weight for adding exploration randomness", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average connectivity", "# Estimated potential score based on heuristic distance to the destination", "heuristic_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "potential_score", "=", "1", "/", "(", "heuristic_distance", "+", "1", ")", "if", "heuristic_distance", "else", "0", "randomness_score", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "*", "randomness_weight", "# Random factor for exploration", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "potential_weight", "*", "potential_score", "+", "randomness_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.510922447224044}
{"code_tokens": ["# {The design idea focuses on balancing direct distance with a heuristic measure based on the inverse of unvisited node proximity, promoting nodes closer to the destination while considering their connectivity.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "# Direct distance to the node", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Heuristic for proximity to unvisited nodes (fewer connections = better)", "proximity_factor", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", ">", "0", "else", "float", "(", "'inf'", ")", ")", "for", "next", "in", "unvisited_nodes", ")", "# Distance to return to the destination", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# New scoring function taking proximity factor into consideration", "adjusted_score", "=", "(", "distance_to_node", "/", "(", "1", "+", "proximity_factor", ")", ")", "+", "distance_to_destination", "if", "adjusted_score", "<", "best_score", ":", "best_score", "=", "adjusted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 16.47235391033354}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "density_penalty_factor", "=", "0.3", "# Weight for travel density influence", "travel_density_threshold", "=", "10", "# Distance threshold for assessing travel density", "nearby_nodes", "=", "[", "node", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<=", "travel_density_threshold", "]", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "density_effect", "=", "(", "len", "(", "nearby_nodes", ")", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", ")", "if", "nearby_nodes", "else", "0", "penalty", "=", "density_penalty_factor", "*", "density_effect", "*", "direct_distance", "score", "=", "direct_distance", "+", "0.5", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "penalty", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.495986297869795}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_cost", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "remaining_distances", "=", "[", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "]", "avg_remaining_distance", "=", "sum", "(", "remaining_distances", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "penalty_weight", "=", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Penalty for not visiting nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Impact score combining distance and unvisited node consideration", "impact_score", "=", "(", "avg_remaining_distance", "-", "distance_to_destination", ")", "*", "penalty_weight", "# Compute overall score considering both distance and the impact score", "score", "=", "(", "direct_distance", "*", "0.6", ")", "+", "(", "impact_score", "*", "0.4", ")", "# Balanced weightage", "if", "score", ">", "max_cost", ":", "max_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 36.14494672301532}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Calculate the weighted average distance to unvisited nodes", "if", "unvisited_nodes", ":", "weighted_sum", "=", "0", "total_weight", "=", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "weight", "=", "1", "/", "(", "direct_distance", "+", "1e-6", ")", "# Prevent division by zero", "weighted_sum", "+=", "weight", "*", "direct_distance", "total_weight", "+=", "weight", "average_distance", "=", "weighted_sum", "/", "total_weight", "if", "total_weight", ">", "0", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Cost is a combination of direct distance and the new weighted average distance", "total_cost", "=", "direct_distance", "+", "average_distance", "if", "total_cost", "<", "min_cost", ":", "min_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.6", "# Weight for direct distance", "penalty_weight", "=", "0.4", "# Weight for penalty on high cumulative distance", "exploration_weight", "=", "0.2", "# Weight for randomness in selection", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "max", "(", "0", ",", "cumulative_distance", "/", "len", "(", "unvisited_nodes", ")", "-", "total_distance_to_destination", ")", "*", "penalty_weight", "random_factor", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "*", "exploration_weight", "score", "=", "-", "(", "direct_distance", "+", "penalty", ")", "+", "random_factor", "+", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "distance_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.455677861665082}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Setting parameters for the tabu search", "tabu_list", "=", "set", "(", ")", "tabu_tenure", "=", "2", "# Restricting the last two visited nodes", "candidate_nodes", "=", "[", "]", "# Collecting candidate nodes excluding those in the tabu list", "for", "node", "in", "unvisited_nodes", ":", "if", "node", "not", "in", "tabu_list", ":", "candidate_nodes", ".", "append", "(", "node", ")", "# Selecting the next node based on a combination of distance and a random component", "if", "candidate_nodes", ":", "selected_node", "=", "None", "best_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "candidate_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate potential score incorporating randomness", "score", "=", "immediate_distance", "+", "random", ".", "uniform", "(", "0", ",", "1", ")", "# Add exploration factor", "if", "score", "<", "best_cost", ":", "best_cost", "=", "score", "selected_node", "=", "node", "# Update the tabu list", "tabu_list", ".", "add", "(", "current_node", ")", "if", "len", "(", "tabu_list", ")", ">", "tabu_tenure", ":", "tabu_list", ".", "pop", "(", ")", "# Remove the oldest entry in the tabu list", "return", "selected_node", "return", "None"], "code_perf": 12.45125379648821}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "clustering_weights", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "# Calculate clustering weight based on proximity to other unvisited nodes", "clustering_weight", "=", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "neighbor", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<=", "7", ")", "clustering_weights", "[", "node", "]", "=", "clustering_weight", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "clustering_weight", "=", "clustering_weights", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Introduce boundary penalty based on the distribution of unvisited nodes", "boundary_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "dest", "]", "for", "dest", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "score", "=", "direct_distance", "+", "0.5", "*", "(", "boundary_penalty", "-", "distance_to_destination", ")", "+", "0.4", "*", "clustering_weight", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.925023624569427}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate total distance to unvisited nodes and their variance", "total_distance", "=", "0", "distance_list", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance", "+=", "distance", "distance_list", ".", "append", "(", "distance", ")", "average_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "distance_variance", "=", "sum", "(", "(", "d", "-", "average_distance", ")", "**", "2", "for", "d", "in", "distance_list", ")", "/", "len", "(", "distance_list", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "average_distance", ")", "# Incorporate variance into score", "variance_penalty", "=", "distance_variance", "/", "(", "1", "+", "direct_distance", ")", "# Calculate the new heuristic score", "heuristic_score", "=", "distance_penalty", "+", "variance_penalty", "score", "=", "direct_distance", "+", "heuristic_score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Create a score dictionary for each unvisited node based on distance and historical penalty", "score_dict", "=", "{", "}", "max_distance", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "decay_factor", "=", "0.05", "# Control influence of previously visited nodes", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Apply a penalty that decays based on the distance to the max unvisited distance", "penalty", "=", "decay_factor", "*", "(", "max_distance", "-", "distance", ")", "**", "2", "score", "=", "distance", "+", "penalty", "score_dict", "[", "node", "]", "=", "score", "# Find the nodes with the minimum score", "min_score", "=", "min", "(", "score_dict", ".", "values", "(", ")", ")", "best_candidates", "=", "[", "node", "for", "node", ",", "score", "in", "score_dict", ".", "items", "(", ")", "if", "score", "==", "min_score", "]", "# Introduce random selection among the best candidates", "if", "best_candidates", ":", "return", "random", ".", "choice", "(", "best_candidates", ")", "return", "None"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.7", "# Weight for proximity to the next node", "unvisited_penalty_weight", "=", "0.3", "# Weight for penalty based on number of unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "unvisited_penalty", "=", "unvisited_penalty_weight", "*", "len", "(", "unvisited_nodes", ")", "# Estimate potential cost to destination", "estimated_cost", "=", "direct_distance", "+", "unvisited_penalty", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Include a clustering factor", "cluster_factor", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Calculate the total score with proximity consideration", "score", "=", "proximity_weight", "*", "(", "estimated_cost", "-", "cluster_factor", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.328751305099974}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_penalty_weight", "=", "0.4", "# Weight for penalizing distance traveled", "centrality_weight", "=", "0.4", "# Weight for centrality of unvisited nodes", "urgency_weight", "=", "0.2", "# Weight for urgency based on remaining unvisited nodes", "total_distance_traveled", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "remaining_nodes_count", "=", "len", "(", "unvisited_nodes", ")", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance_penalty", "=", "direct_distance_penalty_weight", "*", "total_distance_traveled", "centrality_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "average_centrality", "=", "centrality_score", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "1", ")", "urgency_factor", "=", "urgency_weight", "/", "(", "remaining_nodes_count", "if", "remaining_nodes_count", ">", "0", "else", "1", ")", "score", "=", "-", "(", "direct_distance_penalty", ")", "+", "(", "average_centrality", "*", "centrality_weight", ")", "+", "(", "urgency_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 30.638826790926185}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.3", "# Weight for direct distance", "neighborhood_density_weight", "=", "0.5", "# Weight for neighborhood density", "potential_future_paths_weight", "=", "0.2", "# Weight for potential future paths", "# Function to calculate neighborhood density score", "def", "calculate_neighborhood_density", "(", "node", ")", ":", "density_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "density_score", "+=", "1", "/", "distance_matrix", "[", "node", "]", "[", "other", "]", "# Inverse distance for density", "return", "density_score", "# Function to calculate potential future savings for unvisited nodes", "def", "calculate_future_paths_score", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "neighborhood_density", "=", "calculate_neighborhood_density", "(", "node", ")", "future_paths_score", "=", "calculate_future_paths_score", "(", "node", ")", "# Combined scoring mechanism with neighborhood density", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "neighborhood_density_weight", "*", "neighborhood_density", "+", "potential_future_paths_weight", "*", "future_paths_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 29.61253357244403}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for average distance", "variability_weight", "=", "0.3", "# Weight for distance variability", "mst_bonus_weight", "=", "0.3", "# Weight for minimum spanning tree advantage", "# Function to calculate average distance to unvisited nodes", "def", "calculate_average_distance", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "# Function to calculate distance variability", "def", "calculate_distance_variability", "(", "node", ")", ":", "distances", "=", "[", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "]", "return", "(", "max", "(", "distances", ")", "-", "min", "(", "distances", ")", ")", "if", "distances", "else", "0", "# Function to estimate MST impact (using a simple heuristic)", "def", "calculate_mst_bonus", "(", "node", ")", ":", "total_mst_distance", "=", "sum", "(", "sorted", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "[", ":", "2", "]", ")", "# approximation by using the 2 smallest edges", "return", "total_mst_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "avg_distance", "=", "calculate_average_distance", "(", "node", ")", "distance_variability", "=", "calculate_distance_variability", "(", "node", ")", "mst_bonus", "=", "calculate_mst_bonus", "(", "node", ")", "# Combined scoring mechanism that prioritizes average distance, minimizes variability, and incentivizes MST", "score", "=", "(", "-", "distance_weight", "*", "avg_distance", "+", "variability_weight", "*", "distance_variability", "+", "mst_bonus_weight", "*", "mst_bonus", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 29.617945173530718}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "closest_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "0.5", "exploration_factor", "=", "total_remaining_distance", "/", "len", "(", "unvisited_nodes", ")", "*", "0.3", "# Weight of exploration", "adjusted_score", "=", "distance", "+", "penalty", "+", "exploration_factor", "if", "adjusted_score", "<", "best_score", ":", "best_score", "=", "adjusted_score", "closest_node", "=", "node", "return", "closest_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm evaluates unvisited nodes based on a weighted scoring system that considers distance, proximity to the destination node, and clustering of remaining unvisited nodes.}", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Initialize the scores for each unvisited node", "scores", "=", "{", "}", "# Calculate the number of unvisited nodes for clustering score", "total_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "float", "(", "'inf'", ")", "clustering_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", ")", "/", "total_unvisited", "# Weighted score: prioritize smaller distance to next node and proximity to destination", "scores", "[", "node", "]", "=", "(", "distance_to_node", "*", "0.5", ")", "+", "(", "distance_to_destination", "*", "0.3", ")", "-", "(", "clustering_score", "*", "0.2", ")", "# Lower score is better", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 26.04202206317254}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance", "cluster_weight", "=", "0.2", "# Weight for cluster potential", "detour_penalty_weight", "=", "0.1", "# Weight for detour penalties", "trend_weight", "=", "0.2", "# Weight for considering frequent nodes", "decay_factor", "=", "0.1", "# Weight for decay of visit trends", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Dummy trend data simulating which nodes have been visited with decay", "visit_trend", "=", "{", "node", ":", "(", "1", "-", "decay_factor", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "i", ")", ")", "for", "i", ",", "node", "in", "enumerate", "(", "unvisited_nodes", ")", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "adjusted_detour", "=", "max", "(", "0", ",", "direct_distance", "-", "total_distance_to_destination", ")", "cluster_proximity_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_proximity_average", "=", "cluster_proximity_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Trend factor influence, with decay applied to less frequently visited nodes", "trend_factor", "=", "visit_trend", "[", "node", "]", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "cluster_weight", "*", "cluster_proximity_average", ")", "-", "(", "detour_penalty_weight", "*", "adjusted_detour", ")", "+", "(", "trend_weight", "*", "trend_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 11.786539464275727}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "minimal_total_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "total_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "total_distance", "<", "minimal_total_distance", ":", "minimal_total_distance", "=", "total_distance", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "total_nodes", "=", "len", "(", "distance_matrix", ")", "potential_field_strength", "=", "0.5", "# Strength of the potential field towards the destination", "exploration_factor", "=", "0.3", "# Factor to encourage exploration of unvisited nodes", "bias_towards_destination", "=", "0.2", "# Weight for proximity to destination", "if", "unvisited_nodes", ":", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate potential field strength based on proximity to destination", "potential_score", "=", "potential_field_strength", "*", "(", "1", "/", "(", "distance_to_destination", "+", "1e-6", ")", ")", "# Exploration score based on the distance", "exploration_score", "=", "exploration_factor", "*", "(", "1", "/", "(", "direct_distance", "+", "1e-6", ")", ")", "# Combine scores for a final score with bias towards destination", "score", "=", "potential_score", "+", "exploration_score", "-", "bias_towards_destination", "*", "direct_distance", "scores", "[", "node", "]", "=", "score", "# Select the next node based on a probabilistic selection based on scores", "total_score", "=", "sum", "(", "scores", ".", "values", "(", ")", ")", "probabilities", "=", "{", "node", ":", "score", "/", "total_score", "for", "node", ",", "score", "in", "scores", ".", "items", "(", ")", "}", "next_node", "=", "random", ".", "choices", "(", "list", "(", "probabilities", ".", "keys", "(", ")", ")", ",", "weights", "=", "probabilities", ".", "values", "(", ")", ")", "[", "0", "]", "return", "next_node"], "code_perf": 21.737078032641698}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Weighted average distance to the unvisited nodes", "total_weighted_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "avg_weighted_distance", "=", "total_weighted_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "# Calculate connectivity score based on distances to unvisited nodes", "connectivity_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "0", ")", "# Combining distance and connectivity into the score", "score", "=", "(", "1", "/", "(", "1", "+", "distance_to_next", ")", ")", "+", "(", "0.5", "*", "connectivity_score", ")", "-", "(", "0.5", "*", "avg_weighted_distance", "/", "distance_to_next", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 31.52107744431179}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "visit_counts", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "# Track visit counts", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Penalize based on visit counts and proximity to the destination", "visit_penalty", "=", "-", "0.5", "*", "visit_counts", "[", "node", "]", "# Penalty for being visited", "heuristic_score", "=", "(", "-", "0.3", "*", "direct_distance", ")", "+", "(", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "-", "distance_to_destination", ")", "# Influence of unvisited neighbors (higher weights for nodes with less connectivity)", "neighbor_count", "=", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "0", "]", ")", "neighbor_influence", "=", "1", "/", "(", "neighbor_count", "+", "0.1", ")", "# Avoid division by zero", "score", "=", "heuristic_score", "+", "visit_penalty", "+", "neighbor_influence", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "# Increment visit count for the next node", "if", "next_node", ":", "visit_counts", "[", "next_node", "]", "+=", "1", "return", "next_node"], "code_perf": 9.886411110300607}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight emphasizing direct distance", "connection_density_weight", "=", "0.4", "# Weight for the connection density of the node", "predictive_weight", "=", "0.2", "# Weight for predicting overall route efficiency", "# Calculate connection density for unvisited nodes", "def", "calculate_connection_density", "(", "node", ")", ":", "return", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "10", ")", "# Defined threshold of 10", "# Calculate average distance to unvisited nodes", "def", "calculate_predictive_score", "(", ")", ":", "return", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "or", "1", "predictive_score", "=", "calculate_predictive_score", "(", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connection_density", "=", "calculate_connection_density", "(", "node", ")", "# Combined scoring mechanism", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connection_density_weight", "*", "connection_density", "-", "predictive_weight", "*", "predictive_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "candidates", "=", "list", "(", "unvisited_nodes", ")", "scored_candidates", "=", "[", "]", "# Calculate the total distance to unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "candidates", ")", "average_distance", "=", "total_distance", "/", "len", "(", "candidates", ")", "if", "candidates", "else", "float", "(", "'inf'", ")", "for", "node", "in", "candidates", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_count", "=", "len", "(", "unvisited_nodes", ")", "# Novel scoring formula incorporating a randomness factor", "random_factor", "=", "random", ".", "uniform", "(", "0.5", ",", "1.5", ")", "importance_score", "=", "(", "remaining_count", "/", "(", "remaining_count", "+", "1", ")", ")", "*", "0.2", "# New score computation", "score", "=", "(", "direct_distance", "*", "random_factor", ")", "+", "average_distance", "*", "0.3", "+", "importance_score", "scored_candidates", ".", "append", "(", "(", "node", ",", "score", ")", ")", "scored_candidates", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "return", "scored_candidates", "[", "0", "]", "[", "0", "]"], "code_perf": 8.13044098923329}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "max_savings", "=", "float", "(", "'-inf'", ")", "# Calculate the total remaining distance to destination from all unvisited nodes", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Savings are calculated as the reduction in contribution to future remaining distance", "savings", "=", "total_remaining_distance", "-", "(", "direct_distance", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "# Incorporate a penalty based on the direct distance to the destination", "score", "=", "savings", "-", "(", "direct_distance", "*", "0.5", ")", "if", "score", ">", "max_savings", ":", "max_savings", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.6490879527083395}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "distance_weight", "=", "0.5", "# Weight for direct distance", "connectivity_weight", "=", "0.4", "# Weight for node connectivity", "recency_weight", "=", "0.1", "# Weight for recency of visiting nodes", "# Connectivity scores for unvisited nodes", "connectivity_scores", "=", "{", "node", ":", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", ">", "0", ")", "for", "node", "in", "unvisited_nodes", "}", "recency_penalty", "=", "sum", "(", "(", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "prev", "]", "+", "1", ")", ")", "for", "prev", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "prev", "not", "in", "unvisited_nodes", "and", "prev", "!=", "current_node", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate score", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_scores", "[", "node", "]", "-", "recency_weight", "*", "recency_penalty", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "connectivity_weight", "=", "0.2", "# Weight for connectivity to unvisited nodes", "future_distance_weight", "=", "0.2", "# Weight for future distance improvement", "destination_weight", "=", "0.1", "# Weight for proximity to destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average connectivity", "# Future distance improvement score considering the sum of distances from unvisited nodes to the destination", "future_distance_score", "=", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Proximity score based on distance to destination", "proximity_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "-", "future_distance_weight", "*", "future_distance_score", "-", "destination_weight", "*", "proximity_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.582021334684685}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "clustering_weight", "=", "0.4", "# Weight for clustering effect", "penalty_weight", "=", "0.2", "# Weight for cumulative distance traveled", "# Function to calculate clustering score based on the proximity of unvisited nodes", "def", "calculate_clustering_score", "(", ")", ":", "total_distance", "=", "0", "for", "node", "in", "unvisited_nodes", ":", "total_distance", "+=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "return", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Function to calculate penalty based on cumulative distance traveled", "def", "calculate_penalty", "(", ")", ":", "return", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "clustering_score", "=", "calculate_clustering_score", "(", ")", "cumulative_penalty", "=", "calculate_penalty", "(", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Combined scoring mechanism with clustering and penalty", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "clustering_weight", "*", "clustering_score", "-", "penalty_weight", "*", "cumulative_penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_combined_score", "=", "float", "(", "'inf'", ")", "# Calculate constants for weighting", "alpha", "=", "0.5", "# Weight for distance score", "beta", "=", "0.3", "# Weight for time penalty", "gamma", "=", "0.2", "# Weight for proximity to destination", "# Total number of unvisited nodes", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Time penalty based on the sequential distance to destination node", "time_penalty", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "(", "1", "+", "num_unvisited", ")", "# Penalizes nodes further from the destination", "# Proximity score: inverse of distance to destination", "proximity_score", "=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", "# Avoid division by zero", "# Combined score: balance between distance, time penalty, and proximity to destination", "combined_score", "=", "(", "distance_to_next", "*", "alpha", ")", "+", "(", "time_penalty", "*", "beta", ")", "-", "(", "proximity_score", "*", "gamma", ")", "if", "combined_score", "<", "min_combined_score", ":", "min_combined_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.229970541531419}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "dynamic_weight_factor", "=", "1", "/", "(", "num_unvisited", "+", "1", ")", "# Impact of remaining unvisited nodes", "distance_weight", "=", "0.5", "# Weight for inverse direct distance", "exploration_weight", "=", "0.5", "# Weight for exploration of unvisited nodes", "# Function to calculate average distance to unvisited nodes", "def", "calculate_exploration_score", "(", "node", ")", ":", "total_distance", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "total_distance", "+=", "distance_matrix", "[", "node", "]", "[", "other", "]", "return", "total_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "inverse_distance", "=", "1", "/", "(", "direct_distance", "+", "1e-5", ")", "# Avoiding division by zero", "exploration_score", "=", "calculate_exploration_score", "(", "node", ")", "# Combined scoring mechanism with dynamic weights", "score", "=", "(", "dynamic_weight_factor", "*", "inverse_distance", "+", "exploration_weight", "*", "exploration_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.8436619664494085}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "economic_value_weight", "=", "0.4", "# Weight for economic value of nodes", "connectivity_weight", "=", "0.1", "# Weight for node connectivity", "# Function to calculate economic value based on distance to other nodes", "def", "calculate_economic_value", "(", "node", ")", ":", "economic_value", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "economic_value", "+=", "1", "/", "distance_matrix", "[", "node", "]", "[", "other", "]", "return", "economic_value", "# Function to calculate connectivity score", "def", "calculate_connectivity_score", "(", "node", ")", ":", "return", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "5", ")", "# Close nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "economic_value", "=", "calculate_economic_value", "(", "node", ")", "connectivity_score", "=", "calculate_connectivity_score", "(", "node", ")", "# Combined scoring mechanism considering new factors", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "economic_value_weight", "*", "economic_value", "+", "connectivity_weight", "*", "connectivity_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.511493645639966}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "min_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_weight", "=", "(", "direct_distance", "-", "min_distance", ")", "/", "(", "average_distance", "if", "average_distance", ">", "0", "else", "1", ")", "connectivity_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "score", "=", "direct_distance", "+", "distance_weight", "-", "connectivity_score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 26.993493845274582}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "from", "collections", "import", "defaultdict", "import", "numpy", "as", "np", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "cluster_size", "=", "3", "# Size of each cluster for grouping nearby nodes", "scoring_factor", "=", "0.5", "# Factor to weigh distance against clustering efficiency", "if", "unvisited_nodes", ":", "unvisited_nodes", "=", "list", "(", "unvisited_nodes", ")", "# Step 1: Group unvisited nodes into clusters based on proximity", "clusters", "=", "defaultdict", "(", "list", ")", "for", "node", "in", "unvisited_nodes", ":", "cluster_key", "=", "tuple", "(", "np", ".", "round", "(", "np", ".", "array", "(", "distance_matrix", "[", "current_node", "]", ")", "[", ":", "len", "(", "unvisited_nodes", ")", "]", ",", "1", ")", ")", "clusters", "[", "cluster_key", "]", ".", "append", "(", "node", ")", "# Step 2: Calculate cluster scores", "cluster_scores", "=", "{", "}", "for", "cluster", "in", "clusters", ".", "values", "(", ")", ":", "cluster_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "cluster", ")", "cluster_scores", "[", "tuple", "(", "cluster", ")", "]", "=", "-", "cluster_distance", "/", "(", "len", "(", "cluster", ")", "or", "1", ")", "# Step 3: Determine the node with the best score in the best scoring cluster", "for", "cluster", ",", "score", "in", "cluster_scores", ".", "items", "(", ")", ":", "for", "node", "in", "cluster", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "alignment_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "combined_score", "=", "score", "*", "scoring_factor", "+", "alignment_score", "*", "(", "1", "-", "scoring_factor", ")", "if", "combined_score", ">", "max_score", ":", "max_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 18.704820740310076}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "node_degree", "=", "len", "(", "[", "nn", "for", "nn", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "distance_matrix", "[", "node", "]", "[", "nn", "]", "<", "np", ".", "inf", "and", "nn", "!=", "node", "]", ")", "proximity_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combine distance, node degree, and proximity factor into the cost function", "scores", "[", "node", "]", "=", "distance_to_node", "-", "(", "node_degree", "*", "0.3", ")", "+", "(", "proximity_to_destination", "*", "0.2", ")", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.220769184424113}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate a weighted score based on both distances", "score", "=", "distance_to_node", "+", "distance_to_destination", "# Select the node with the minimum score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity to current node", "future_benefit_weight", "=", "0.3", "# Weight for potential future benefits", "connectivity_penalty", "=", "0.2", "# Penalty for low connectivity", "for", "node", "in", "unvisited_nodes", ":", "proximity_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_benefit_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Connectivity based score - how many links to other unvisited nodes", "connectivity_count", "=", "len", "(", "[", "other_node", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "10", "]", ")", "# Example threshold of 10", "connectivity_score_penalty", "=", "connectivity_penalty", "*", "connectivity_count", "score", "=", "(", "1", "/", "proximity_score", "*", "proximity_weight", ")", "+", "(", "future_benefit_score", "*", "future_benefit_weight", ")", "-", "connectivity_score_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.861406632755298}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate distances and clustering scores for each unvisited node", "scores", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "(", "1", "/", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max", "(", "1", ",", "len", "(", "unvisited_nodes", ")", ")", ")", "+", "1e-6", ")", "*", "0.3", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the unvisited node with the minimum score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.803559963297449}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "attractiveness_factor", "=", "1.5", "# Factor to increase attractiveness of closer nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "n", "]", "[", "destination_node", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Dynamic weighting", "dynamic_weight", "=", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "/", "(", "avg_distance_to_destination", "+", "1", ")", "# Attractiveness weight based on proximity", "attractiveness_weight", "=", "attractiveness_factor", "-", "(", "direct_distance", "/", "average_distance", ")", "# Score considering direct distance and weighting factors", "score", "=", "direct_distance", "*", "(", "attractiveness_weight", ")", "-", "(", "dynamic_weight", "*", "0.5", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 33.831840016191336}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "decay_factor", "=", "0.5", "# Factor to decrease influence of unvisited nodes with increasing distance", "if", "unvisited_nodes", ":", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "decay_weight", "=", "decay_factor", "**", "(", "direct_distance", "/", "average_distance", ")", "# Dynamic decay based on average", "score", "=", "direct_distance", "*", "decay_weight", "# Adding a penalty for nodes that are further than a threshold from the current node", "penalty", "=", "max", "(", "0", ",", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "average_distance", ")", "total_score", "=", "score", "+", "penalty", "if", "total_score", "<", "min_score", ":", "min_score", "=", "total_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.422347295649995}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "# Total distance to unvisited nodes", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "# Calculate immediate distance", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Heuristic based on distance to destination", "heuristic_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "(", "total_remaining_distance", "+", "1", ")", "# Combine the immediate distance with heuristic score to compute a weighted score", "weighted_score", "=", "distance", "+", "heuristic_score", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.181021775003858}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance to unvisited nodes", "proximity_weight", "=", "0.3", "# Weight for proximity to destination", "exploration_weight", "=", "0.3", "# Weight for exploration of new paths", "# Average distance to next nodes to encourage exploration", "average_distance_to_next_nodes", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Exploration score based on average distance to unvisited nodes", "exploration_score", "=", "exploration_weight", "*", "(", "average_distance_to_next_nodes", "-", "direct_distance", ")", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "proximity_score", "+", "exploration_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.498918432044007}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate connectedness score based on distance to other unvisited nodes", "connectedness_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "+", "1e-6", ")", "for", "n", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Calculate penalty for long detours", "penalty_for_detour", "=", "max", "(", "0", ",", "distance_to_next", "-", "(", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "float", "(", "'inf'", ")", ")", ")", "# Combined scoring formula", "score", "=", "(", "connectedness_score", "-", "penalty_for_detour", ")", "-", "(", "0.5", "*", "distance_to_destination", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 29.1302048977454}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.5", "# Weight for direct distance from current to the node", "unvisited_proximity_weight", "=", "0.3", "# Weight for proximity to unvisited nodes", "cumulative_distance_penalty_weight", "=", "0.2", "# Penalty for cumulative distance traveled", "# Calculate cumulative distance", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "prev_node", "]", "for", "prev_node", "in", "unvisited_nodes", "if", "prev_node", "!=", "current_node", ")", "for", "node", "in", "unvisited_nodes", ":", "# Direct distance from current node to the candidate node", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Proximity score based on distances to other unvisited nodes", "proximity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Calculate the overall score", "score", "=", "(", "direct_distance_weight", "*", "(", "1", "/", "(", "1", "+", "direct_distance", ")", ")", "+", "unvisited_proximity_weight", "*", "(", "1", "/", "(", "1", "+", "proximity_score", ")", ")", "-", "cumulative_distance_penalty_weight", "*", "cumulative_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.327454216210375}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the total distance to visited nodes", "visited_nodes", "=", "set", "(", "range", "(", "len", "(", "distance_matrix", ")", ")", ")", "-", "set", "(", "unvisited_nodes", ")", "-", "{", "current_node", "}", "penalty", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "visited_nodes", ")", "if", "visited_nodes", "else", "0", "# Score nodes based on direct distance and penalty from visited nodes", "node_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Adjust score based on direct distance and the penalty", "score", "=", "direct_distance", "+", "(", "penalty", "/", "(", "len", "(", "visited_nodes", ")", "+", "1", ")", ")", "# Add 1 to avoid division by zero", "node_scores", "[", "node", "]", "=", "score", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity influence", "attractiveness_weight", "=", "0.6", "# Weight for attractiveness score", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "1", "/", "(", "1", "+", "direct_distance", ")", "# Closer nodes have higher scores", "# Calculate the attractiveness based on distances to other unvisited nodes", "attractiveness_score", "=", "sum", "(", "1", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "other_node", "]", ")", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combine scores using weighted factors", "score", "=", "(", "proximity_score", "*", "proximity_weight", ")", "+", "(", "attractiveness_score", "*", "attractiveness_weight", ")", "# Penalize the score based on direct distance", "score", "-=", "direct_distance", "/", "total_distance_to_destination", "if", "total_distance_to_destination", "!=", "0", "else", "0", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.1071630019333885}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.5", "# Weight for direct distance to unvisited nodes", "destination_attraction_weight", "=", "0.3", "# Weight for attractiveness towards the destination", "routing_penalty_weight", "=", "0.2", "# Weight for routing penalties", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "routing_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "*", "(", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "score", "=", "(", "direct_distance", "*", "direct_distance_weight", ")", "-", "(", "routing_penalty", "*", "routing_penalty_weight", ")", "+", "(", "destination_attraction_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 34.3815120356238}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the penalty of returning to the destination", "return_penalty", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "*", "0.5", "# Calculate the next node combining distances and return penalty", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "return_penalty", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate heuristic value based on distance to destination", "heuristic_penalty", "=", "{", "node", ":", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Evaluate potential next nodes based on a combined score of distance and heuristic", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "heuristic_penalty", "[", "node", "]", ")", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.4", "# Weight for connectivity to unvisited nodes", "time_decay_weight", "=", "0.2", "# Weight for shorter-term gains", "random_factor", "=", "0.1", "# Randomization factor", "# Function to calculate a dynamic connectivity score", "def", "calculate_dynamic_connectivity_score", "(", "node", ")", ":", "total_connection", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "return", "total_connection", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "calculate_dynamic_connectivity_score", "(", "node", ")", "time_decay", "=", "1", "/", "(", "1", "+", "direct_distance", ")", "# Simple decay based on distance", "# Combined scoring mechanism with added randomization", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "time_decay_weight", "*", "time_decay", "+", "random_factor", "*", "random", ".", "uniform", "(", "0", ",", "1", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.061926939200481}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "time_decay_factor", "=", "0.7", "# Weight for preference towards nearer nodes", "synergy_weight", "=", "0.3", "# Weight for overall efficiency of remaining nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "time_penalty", "=", "time_decay_factor", "*", "direct_distance", "# Penalize based on distance", "synergy_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "+", "1e-6", ")", "for", "next", "in", "unvisited_nodes", ")", "# Synergy based on closeness of unvisited nodes", "score", "=", "(", "-", "time_penalty", ")", "+", "(", "synergy_weight", "*", "synergy_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 27.291397631403463}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "max_distance_to_unvisited", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "total_distance_from_current_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "score", "=", "(", "1", "/", "(", "1", "+", "max_distance_to_unvisited", ")", ")", "+", "(", "0.5", "*", "(", "total_distance_from_current_to_unvisited", "/", "len", "(", "unvisited_nodes", ")", ")", ")", "-", "distance_to_next", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.370078776444652}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "dynamic_weight_factor", "=", "0.6", "# Factor to adjust weight based on proximity to multiple nodes", "feedback_weight_adjustment", "=", "0.1", "# Weight adjustment based on previously selected nodes", "if", "unvisited_nodes", ":", "base_distance_weight", "=", "0.5", "# Base weight for distance", "nearby_connections_weight", "=", "0.3", "# Weight reflecting connections to nearby nodes", "alignment_weight", "=", "0.2", "# Maintain alignment towards destination", "# Calculate previous selections' feedback adjustment", "previous_node_score_adjustment", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Sum scores for nearby connections from current to unvisited nodes", "nearby_connections_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Calculate alignment towards destination", "alignment_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combine scores and apply adjustments based on distances to previous selections", "score", "=", "(", "-", "base_distance_weight", "*", "direct_distance", "+", "nearby_connections_weight", "*", "nearby_connections_score", "+", "alignment_weight", "*", "alignment_score", "-", "feedback_weight_adjustment", "*", "previous_node_score_adjustment", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.242484209153323}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "from", "collections", "import", "defaultdict", "def", "calculate_density", "(", "node", ",", "unvisited", ",", "distance_matrix", ")", ":", "density", "=", "0", "for", "other_node", "in", "unvisited", ":", "if", "node", "!=", "other_node", ":", "density", "+=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "+", "1e-5", ")", "# Small epsilon to avoid division by zero", "return", "density", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "destination_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "density_score", "=", "calculate_density", "(", "node", ",", "unvisited_nodes", ",", "distance_matrix", ")", "# New scoring equation incorporating direct distance, density, and distance to destination", "score", "=", "(", "0.4", "*", "density_score", ")", "-", "(", "0.5", "*", "direct_distance", ")", "+", "(", "0.1", "*", "destination_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.416174792054036}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.4", "# Weight for potential connectivity to destination", "exploration_weight", "=", "0.2", "# Weight for encouraging exploration", "# Function to assess connectivity based on distance to the destination", "def", "calculate_connectivity", "(", "node", ")", ":", "return", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Function to assess penalty for frequent visit based on visit counts", "def", "calculate_visit_count", "(", "node", ")", ":", "return", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", "global", "node_visit_counts", "node_visit_counts", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "# Update visit counts at each call", "node_visit_counts", "[", "node", "]", "=", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", "+", "1", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity", "=", "calculate_connectivity", "(", "node", ")", "visit_count", "=", "calculate_visit_count", "(", "node", ")", "# Combined scoring mechanism with exploration factor based on visit counts", "exploration_factor", "=", "1.0", "/", "(", "1", "+", "visit_count", ")", "# Less frequent visits increase score", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "-", "connectivity_weight", "*", "connectivity", "+", "exploration_weight", "*", "exploration_factor", ")", "# Introduce randomness to encourage exploration", "score", "+=", "random", ".", "uniform", "(", "-", "0.1", ",", "0.1", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.18813055888646}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "min_total_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "# Calculate the total distance if we go to this node", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "for", "neighbor", "in", "unvisited_nodes", "if", "neighbor", "!=", "node", ")", "# Select the node that minimizes the total distance", "if", "total_distance", "<", "min_total_distance", ":", "min_total_distance", "=", "total_distance", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 31.616956377461854}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the average distance to the remaining unvisited nodes", "average_distance", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "# Calculate a score based on direct distance, average distance, and penalty for being far from destination", "def", "score", "(", "node", ")", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "2", "return", "direct_distance", "+", "penalty", "-", "(", "average_distance", "-", "direct_distance", ")", "*", "0.3", "# Select the node with the minimum score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "score", ")", "return", "next_node"], "code_perf": 7.305663453730409}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "+", "avg_distance_to_unvisited", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "average_distance_weight", "=", "0.5", "# Weight for average distance to unvisited nodes", "adjacency_bonus_weight", "=", "0.5", "# Weight for the bonus for adjacency to unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "adjacency_bonus", "=", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "5", "]", ")", "# Example adjacency condition", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", ")", "+", "(", "average_distance_to_remaining", "*", "average_distance_weight", ")", "+", "(", "adjacency_bonus", "*", "adjacency_bonus_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.4597365709491275}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "weighted_nodes", "=", "[", "]", "# Calculate weights for each unvisited node based on their distance", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Weight based on the inverse of the distance to the destination", "weight", "=", "1", "/", "(", "distance_to_node", "+", "1", ")", "*", "distance_to_destination", "# Adding 1 to avoid division by zero", "weighted_nodes", ".", "append", "(", "(", "node", ",", "weight", ")", ")", "# Normalize weights", "total_weight", "=", "sum", "(", "weight", "for", "_", ",", "weight", "in", "weighted_nodes", ")", "normalized_weights", "=", "[", "(", "node", ",", "weight", "/", "total_weight", ")", "for", "node", ",", "weight", "in", "weighted_nodes", "]", "# Randomly choose a node based on weighted probabilities", "next_node", "=", "random", ".", "choices", "(", "[", "node", "for", "node", ",", "_", "in", "normalized_weights", "]", ",", "weights", "=", "[", "weight", "for", "_", ",", "weight", "in", "normalized_weights", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 23.161580872320485}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "urgency_weight", "=", "0.3", "# Weight for nearest-neighbor attraction", "exploration_weight", "=", "0.3", "# Weight for exploring less-visited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_penalty", "=", "(", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "1", "closest_neighbor_distance", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "*", "distance_penalty", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "(", "direct_distance", "*", "distance_weight", ")", "+", "(", "closest_neighbor_distance", "*", "urgency_weight", ")", "+", "(", "cluster_average_distance", "*", "exploration_weight", ")", "-", "(", "distance_penalty", "*", "direct_distance", "*", "0.1", ")", "-", "(", "0.5", "*", "total_distance_to_destination", "*", "0.1", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.347290899670178}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate average and variance of distances to unvisited nodes", "distances", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "average_distance", "=", "sum", "(", "distances", ")", "/", "len", "(", "distances", ")", "variance_distance", "=", "sum", "(", "(", "d", "-", "average_distance", ")", "**", "2", "for", "d", "in", "distances", ")", "/", "len", "(", "distances", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Compute a risk factor based on the distance variance", "risk_factor", "=", "variance_distance", "*", "(", "direct_distance", "/", "average_distance", ")", "if", "average_distance", ">", "0", "else", "0", "# Score is computed considering direct distance and risk factor", "score", "=", "direct_distance", "+", "risk_factor", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "distances_to_unvisited", "=", "np", ".", "array", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "distances_to_destination", "=", "np", ".", "array", "(", "[", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "avg_distance", "=", "np", ".", "mean", "(", "distances_to_unvisited", ")", "avg_distance_to_dest", "=", "np", ".", "mean", "(", "distances_to_destination", ")", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "for", "candidate", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate", "]", "cluster_score", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "[", "distance_matrix", "[", "candidate", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "candidate", "]", ")", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Closeness to other unvisited nodes", "score", "=", "(", "immediate_distance", "*", "1.4", ")", "+", "(", "avg_distance", "*", "0.3", ")", "+", "(", "avg_distance_to_dest", "*", "0.2", ")", "+", "cluster_score", "*", "0.1", "# Weighted scoring with cluster influence", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "candidate", "return", "best_next_node"], "code_perf": 7.096145707600836}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.4", "# Weight for connectivity to unvisited nodes", "future_gain_weight", "=", "0.2", "# Weight for potential future savings", "# Function to calculate connectivity score based on unvisited nodes", "def", "calculate_connectivity_score", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "calculate_connectivity_score", "(", "node", ")", "# Adjusted future gain based on dynamic scaling", "future_gain", "=", "sum", "(", "distance_matrix", "[", "next_node", "]", "[", "node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combined scoring mechanism with consideration for the number of unvisited nodes", "adjusted_score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "-", "future_gain_weight", "*", "future_gain", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "if", "adjusted_score", ">", "max_score", ":", "max_score", "=", "adjusted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.4597365709491275}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_modified_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "average_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max", "(", "1", ",", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "modified_distance", "=", "direct_distance", "+", "average_distance", "*", "0.5", "if", "modified_distance", "<", "min_modified_distance", ":", "min_modified_distance", "=", "modified_distance", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.685946007189195}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "total_weighted_distance", "=", "0", "weights", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "weights", "[", "node", "]", "=", "distance", "+", "random", ".", "uniform", "(", "0", ",", "1", ")", "# Add randomness to distance", "total_weighted_distance", "+=", "weights", "[", "node", "]", "# Normalize the weights", "for", "node", "in", "weights", ":", "weights", "[", "node", "]", "/=", "total_weighted_distance", "# Select next node based on weighted probabilities", "rand_value", "=", "random", ".", "random", "(", ")", "cumulative_weight", "=", "0", "for", "node", ",", "weight", "in", "weights", ".", "items", "(", ")", ":", "cumulative_weight", "+=", "weight", "if", "cumulative_weight", ">=", "rand_value", ":", "next_node", "=", "node", "break", "return", "next_node"], "code_perf": 28.117157447487635}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "total_distance_to_others", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "current_node", "]", "for", "node", "in", "unvisited_nodes", ")", "mean_distance", "=", "total_distance_to_others", "/", "unvisited_count", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_adjustment", "=", "0.3", "*", "(", "mean_distance", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "score", "=", "direct_distance", "+", "proximity_adjustment", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.583058552198324}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the degree of each node in the unvisited set", "node_degree", "=", "{", "node", ":", "sum", "(", "1", "for", "i", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "distance_matrix", "[", "node", "]", "[", "i", "]", ">", "0", ")", "for", "node", "in", "unvisited_nodes", "}", "# Calculate average distance to all unvisited nodes", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Calculate scores for each unvisited node based on distance and degree", "scores", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "/", "(", "node_degree", "[", "node", "]", "+", "1", ")", ")", "+", "(", "avg_distance", "/", "(", "node_degree", "[", "node", "]", "+", "1", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the unvisited node with the minimum score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "closest_unvisited_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "penalty_factor", "=", "0.5", "# Penalty applied for the number of unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty_score", "=", "penalty_factor", "*", "num_unvisited", "score", "=", "direct_distance", "+", "penalty_score", "-", "closest_unvisited_distance", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.7", "# Weight for immediate distance", "historical_weight", "=", "0.3", "# Weight for historical cost evaluation", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "len", "(", "unvisited_nodes", ")", "*", "0.1", "*", "direct_distance", "# Proportional penalty for longer paths", "historical_cost", "=", "(", "total_distance_to_destination", "+", "direct_distance", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Historical cost with additional weight", "score", "=", "-", "(", "direct_distance", "+", "penalty", ")", "*", "distance_weight", "+", "(", "historical_cost", "*", "historical_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "cluster_penalty", "=", "len", "(", "unvisited_nodes", ")", "*", "0.2", "# Penalty based on cluster size", "distance_to_destination_weight", "=", "0.5", "# Weight for distance to destination", "cluster_gain_weight", "=", "0.5", "# Weight for potential future cluster distance reduction", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_cluster", "=", "total_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination_score", "=", "distance_to_destination_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "cluster_gain", "=", "cluster_gain_weight", "*", "(", "avg_distance_to_cluster", "-", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "score", "=", "-", "direct_distance", "-", "cluster_penalty", "+", "distance_to_destination_score", "+", "cluster_gain", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.5896920510091475}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "visit_decay_factor", "=", "0.9", "cluster_weight", "=", "0.4", "distance_weight", "=", "0.5", "unvisited_density_weight", "=", "0.1", "temporal_weight", "=", "0.2", "# Calculate distances to the destination", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate cluster density score based on nearby nodes (less than a threshold distance)", "cluster_connections", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<", "2", ")", "cluster_density_score", "=", "cluster_connections", "/", "max", "(", "1", ",", "len", "(", "unvisited_nodes", ")", ")", "# Simulating visit frequency with a decay", "visit_frequency_score", "=", "1", "# Placeholder for an external tracking variable", "# Dynamic temporal score to weight recent visits less", "temporal_score", "=", "visit_frequency_score", "*", "visit_decay_factor", "# Aggregate score encompassing distance, cluster density, and visit temporal", "weighted_score", "=", "(", "distance_weight", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "cluster_weight", "*", "cluster_density_score", "+", "temporal_weight", "*", "(", "1", "-", "temporal_score", ")", ")", "score", "=", "direct_distance", "+", "weighted_score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.450370583313572}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm incorporates a scoring mechanism that combines the distance to the next node, ", "# the sum of distances to all unvisited nodes, and an inverse of their average to determine ", "# proximity, adjusting the influence of the destination based on the remaining unvisited nodes.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "average_distance_to_unvisited", "=", "total_distance_to_unvisited", "/", "(", "len", "(", "unvisited_nodes", ")", ")", "if", "unvisited_nodes", "else", "0", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "average_distance_to_unvisited", "/", "(", "1", "+", "distance_to_next", ")", ")", "-", "(", "0.5", "*", "distance_to_destination", ")", "+", "(", "0.1", "*", "len", "(", "unvisited_nodes", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.479134306806891}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "environmental_factor", "=", "average_distance", "-", "direct_distance", "score", "=", "direct_distance", "+", "(", "environmental_factor", "**", "2", ")", "# Emphasizing closer nodes while penalizing further ones", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.704986410219112}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.3", "# Weight for connectivity to unvisited nodes", "future_gain_weight", "=", "0.2", "# Weight for potential future savings", "density_weight", "=", "0.1", "# Weight for density of unvisited nodes", "def", "calculate_connectivity_score", "(", "node", ")", ":", "connectivity_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "connectivity_score", "+=", "distance_matrix", "[", "node", "]", "[", "other", "]", "return", "connectivity_score", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "def", "calculate_density_score", "(", "node", ")", ":", "return", "len", "(", "unvisited_nodes", ")", "/", "(", "1", "+", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "longest_path_penalty", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "calculate_connectivity_score", "(", "node", ")", "density_score", "=", "calculate_density_score", "(", "node", ")", "future_gain", "=", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combined scoring mechanism with a penalty for the longest path", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "density_weight", "*", "density_score", "-", "future_gain_weight", "*", "future_gain", "-", "longest_path_penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.743105978622728}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "historical_cost_weight", "=", "0.4", "# Weight for historical cost to visited nodes", "proximity_weight", "=", "0.3", "# Weight for proximity to destination", "unvisited_penalty_weight", "=", "0.2", "# Weight for unvisited nodes penalty", "volatility_weight", "=", "0.1", "# Weight for randomness in selection", "avg_historical_cost", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "historically_traveled_cost", "=", "historical_cost_weight", "*", "avg_historical_cost", "unvisited_penalty", "=", "unvisited_penalty_weight", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "/", "len", "(", "unvisited_nodes", ")", "randomness", "=", "volatility_weight", "*", "random", ".", "uniform", "(", "-", "1", ",", "1", ")", "score", "=", "-", "direct_distance", "+", "proximity_score", "-", "historically_traveled_cost", "-", "unvisited_penalty", "+", "randomness", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.693585731398818}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance", "cluster_weight", "=", "0.25", "# Weight for cluster savings", "future_cost_weight", "=", "0.15", "# Weight for anticipated future costs", "unvisited_count_weight", "=", "0.1", "# Weight for favoring unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "decay_factor", "=", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Decay factor related to the count of unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate future cost based on remaining unvisited nodes", "future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "cluster_weight", "*", "-", "future_cost", ")", "-", "(", "future_cost_weight", "*", "total_distance_to_destination", ")", "score", "*=", "(", "1", "+", "unvisited_count_weight", "*", "decay_factor", ")", "# Apply decay factor to score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.526271790227707}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "decay_factor", "=", "0.05", "# Time-based decay for potential future routes", "proximity_weight", "=", "0.7", "# Reinforced weight for nodes closer to the destination", "savings_weight", "=", "0.3", "# Weight factor emphasizing the savings from fewer total nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "proximity_weight", "*", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", ")", "# Inverse proximity", "future_node_scores", "=", "[", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", "if", "next_node", "!=", "node", "]", "average_future_score", "=", "sum", "(", "future_node_scores", ")", "/", "(", "len", "(", "future_node_scores", ")", "or", "1", ")", "savings_score", "=", "savings_weight", "*", "(", "1", "/", "(", "average_future_score", "+", "1", ")", ")", "# Emphasizing total remaining routes", "score", "=", "(", "1", "-", "decay_factor", ")", "*", "(", "-", "direct_distance", ")", "+", "proximity_score", "+", "savings_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.434641241915527}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_distance_weight", "=", "0.4", "# Weight for the immediate distance factor", "future_savings_weight", "=", "0.4", "# Weight for potential future savings", "distance_penalty_weight", "=", "0.2", "# Weight for penalty on longer distances", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_savings", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "average_future_savings", "=", "future_savings", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "1", ")", "distance_penalty", "=", "(", "immediate_distance", "/", "total_distance_to_destination", ")", "if", "total_distance_to_destination", "else", "0", "score", "=", "-", "(", "immediate_distance", "*", "immediate_distance_weight", ")", "+", "(", "average_future_savings", "*", "future_savings_weight", ")", "-", "(", "distance_penalty", "*", "distance_penalty_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.469175068989248}
{"code_tokens": ["import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_combined_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score: prioritize shorter distance to unvisited node and minimize overall trip distance", "combined_score", "=", "distance_to_next", "+", "(", "0.5", "*", "distance_to_destination", ")", "if", "combined_score", "<", "min_combined_score", ":", "min_combined_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.6", "# Weight for direct distance", "connectivity_weight", "=", "0.4", "# Weight for unvisited nodes' connectivity", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_factor", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "*", "len", "(", "unvisited_nodes", ")", "path_penalty", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "0.3", "# Assuming a path penalty based on direct distance", "score", "=", "-", "(", "(", "direct_distance", "*", "distance_weight", ")", "+", "path_penalty", ")", "+", "(", "connectivity_factor", "*", "connectivity_weight", ")", "+", "(", "total_distance_to_destination", "*", "0.2", ")", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 29.921201636618314}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "proximity_weight", "=", "0.4", "# Weight for proximity to unvisited nodes", "exploration_weight", "=", "0.2", "# Weight for playful exploration for better long-term routes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "exploration_score", "=", "(", "1", "/", "(", "1", "+", "direct_distance", ")", ")", "# Further nodes contribute less to exploration", "score", "=", "(", "direct_distance", "*", "direct_distance_weight", ")", "+", "(", "proximity_score", "*", "proximity_weight", ")", "-", "(", "exploration_score", "*", "exploration_weight", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.97078101021607}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "future_path_weight", "=", "0.3", "clustering_penalty_weight", "=", "0.2", "historical_weight", "=", "0.1", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "historical_paths", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "# Initialize historical path savings for each unvisited node", "for", "node", "in", "unvisited_nodes", ":", "historical_paths", "[", "node", "]", "+=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "potential_future_savings", "=", "future_path_weight", "*", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "historical_savings", "=", "historical_paths", "[", "node", "]", "*", "historical_weight", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "potential_future_savings", "+", "historical_savings", "# Clustering penalty based on distance from current node to destination", "if", "direct_distance", "<", "total_distance_to_destination", "/", "2", ":", "score", "-=", "clustering_penalty_weight", "*", "(", "total_distance_to_destination", "-", "direct_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.811600468764397}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_combined_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate accessibility score based on the average distance to all other unvisited nodes", "if", "len", "(", "unvisited_nodes", ")", ">", "1", ":", "accessibility_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "else", ":", "accessibility_score", "=", "0", "# No other nodes to connect to", "# Combined score: prioritize closeness to next node and accessibility to others ", "combined_score", "=", "(", "1", "/", "(", "1", "+", "distance_to_next", ")", ")", "+", "(", "1", "/", "(", "1", "+", "accessibility_score", ")", ")", "-", "(", "0.5", "*", "distance_to_destination", ")", "if", "combined_score", ">", "max_combined_score", ":", "max_combined_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.874305764170124}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "heuristic_weight", "=", "0.5", "# Weight for heuristic factor", "distance_weight", "=", "0.5", "# Weight for distance cost", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Count the number of times each node has been visited to compute the heuristic", "visit_count", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Heuristic calculation based on frequency of visits (lower is better)", "heuristic_score", "=", "1", "/", "(", "visit_count", "[", "node", "]", "+", "1", ")", "# Avoid division by zero", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", ")", "*", "distance_weight", "+", "(", "heuristic_score", "*", "heuristic_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "average_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_score", "=", "direct_distance", "+", "average_distance_to_destination", "*", "0.3", "# Incorporating average distance to destination", "# Weighted score with additional adaptive factor for better exploration", "adaptive_factor", "=", "(", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "*", "0.5", "score", "=", "distance_score", "*", "(", "1", "+", "adaptive_factor", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "max_distance_to_remaining", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "direct_influence_weight", "=", "0.5", "# Weight for direct distance influence", "risk_factor_weight", "=", "0.5", "# Weight for risk evaluation", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "risk_factor", "=", "risk_factor_weight", "*", "(", "max_distance_to_remaining", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "score", "=", "(", "direct_influence_weight", "*", "direct_distance", ")", "+", "risk_factor", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.074495226186865}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "volatility_weight", "=", "0.4", "# Weight for distance variance", "proximity_weight", "=", "0.6", "# Weight for proximity to destination", "total_distances", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "average_distance", "=", "sum", "(", "total_distances", ")", "/", "(", "len", "(", "total_distances", ")", "or", "1", ")", "distance_variance", "=", "sum", "(", "(", "d", "-", "average_distance", ")", "**", "2", "for", "d", "in", "total_distances", ")", "**", "0.5", "avg_proximity_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "-", "(", "direct_distance", "-", "volatility_weight", "*", "distance_variance", ")", "+", "(", "proximity_weight", "*", "avg_proximity_to_destination", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "visit_counts", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "# Track how many times nodes have been considered", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "visit_penalty", "=", "(", "1", "/", "(", "visit_counts", "[", "node", "]", "+", "1", ")", ")", "*", "0.5", "# Reducing influence over time", "# Adaptive weight that favors exploration of less favored paths", "adaptive_weight", "=", "(", "1", "-", "(", "visit_counts", "[", "node", "]", "/", "len", "(", "unvisited_nodes", ")", ")", ")", "*", "3", "# Favor less visited nodes", "score", "=", "-", "direct_distance", "+", "(", "avg_distance_to_destination", "-", "distance_to_destination", ")", "+", "visit_penalty", "+", "adaptive_weight", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "# Increment visit count for the next node if selected", "if", "next_node", ":", "visit_counts", "[", "next_node", "]", "+=", "1", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Introduce a randomness factor", "exploration_factor", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "*", "0.2", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Centrality defined as the sum of distances to all other unvisited nodes", "centrality_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "# Assess proximity to destination with a modified score", "proximity_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score with an emphasis on exploration", "score", "=", "(", "direct_distance", "*", "0.4", ")", "+", "(", "centrality_score", "*", "0.3", ")", "+", "(", "proximity_score", "*", "0.3", ")", "+", "exploration_factor", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 19.522826742822616}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "historical_weight", "=", "0.3", "efficiency_weight", "=", "0.2", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "historical_average", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "efficiency_score", "=", "total_distance_to_destination", "/", "(", "direct_distance", "+", "1", ")", "# Avoid division by zero", "score", "=", "-", "(", "direct_distance", "*", "efficiency_weight", ")", "+", "(", "historical_average", "*", "historical_weight", ")", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "efficiency_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.360266270806328}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "base_distance_weight", "=", "1.0", "# Base weight for distance", "proximity_weight", "=", "0.5", "# Weight for proximity to destination", "penalty_weight", "=", "0.2", "# Penalty for already visited nodes", "dynamic_distance_weight", "=", "base_distance_weight", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Dynamic weight based on unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Distance to destination", "penalty_score", "=", "sum", "(", "1", "for", "next", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "next", "not", "in", "unvisited_nodes", "and", "distance_matrix", "[", "current_node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", ")", "# Penalty for visited node connections", "score", "=", "-", "dynamic_distance_weight", "*", "direct_distance", "+", "proximity_weight", "*", "(", "-", "proximity_score", ")", "-", "penalty_weight", "*", "penalty_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 12.426762749374152}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_penalty_factor", "=", "0.5", "# Weight for direct distance penalty", "proximity_weight", "=", "0.5", "# Weight for proximity to destination", "future_potential_gain_weight", "=", "0.3", "# Weight for future gains", "refined_score_weight", "=", "0.2", "# Weight for refining score based on closeness", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "potential_gain", "=", "future_potential_gain_weight", "*", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", ")", "refined_score", "=", "refined_score_weight", "*", "(", "1", "/", "(", "direct_distance", "+", "1", ")", ")", "# Reduces score based on distance", "score", "=", "-", "distance_penalty_factor", "*", "direct_distance", "+", "proximity_score", "+", "potential_gain", "+", "refined_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.849464994204346}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "attractiveness_factor", "=", "0.6", "# Factor promoting attractive nodes", "historical_factor", "=", "0.4", "# Factor for penalizing previous visits", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "historical_visits", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "# Track historical visits", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "total_distance_to_destination", ")", "penalty", "=", "historical_visits", "[", "node", "]", "*", "historical_factor", "score", "=", "(", "attractiveness_factor", "*", "(", "1", "/", "(", "1", "+", "direct_distance", ")", ")", "*", "connectivity_score", ")", "-", "penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 16.413804089322703}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "# Calculate connectivity penalty based on the number of close neighbors", "connectivity_penalty", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "float", "(", "'inf'", ")", ")", "# Weighted score incorporating distance and connectivity", "score", "=", "distance_to_next", "+", "distance_to_destination", "+", "(", "1.5", "*", "connectivity_penalty", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate distances and density scores for each unvisited node", "scores", "=", "{", "}", "total_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "density_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-6", ")", "# Combined score considering distance and density", "scores", "[", "node", "]", "=", "distance_to_node", "+", "(", "density_score", "*", "0.5", ")", "# Select the unvisited node with the minimum score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.526271790227707}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "utility_weight", "=", "0.6", "distance_decay", "=", "0.4", "exploration_factor", "=", "0.1", "# random exploration", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Utility score based on how 'useful' visiting the node might be", "utility_score", "=", "-", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "# Distance decay based on how far the node is from the current node", "decay_score", "=", "max", "(", "0", ",", "(", "1", "-", "(", "direct_distance", "/", "max", "(", "1", ",", "avg_distance_to_destination", ")", ")", ")", ")", "# Introduce randomness to diversify exploration", "random_exploration", "=", "random", ".", "uniform", "(", "0", ",", "exploration_factor", ")", "weighted_score", "=", "(", "utility_weight", "*", "utility_score", "+", "distance_decay", "*", "decay_score", "+", "random_exploration", ")", "score", "=", "direct_distance", "+", "weighted_score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.540277593785493}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Gather distances to current and destination nodes from unvisited nodes", "distances_to_current", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "distances_to_destination", "=", "{", "node", ":", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "# Cost-benefit analysis: distance to next node versus the return path distance", "cost_score", "=", "distances_to_current", "[", "node", "]", "+", "distances_to_destination", "[", "node", "]", "# Greedy selection based on the shortest cost score", "if", "cost_score", "<", "best_score", ":", "best_score", "=", "cost_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["# {This algorithm uses a scoring system that factors in both the total distance traveled to all unvisited nodes and the nearest neighbor distance, prioritizing nodes that minimize these combined distances.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "nearest_neighbor_distance", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "score", "=", "(", "total_distance_to_unvisited", "+", "nearest_neighbor_distance", "+", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "# Lower score is better", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 21.51502557645197}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "average_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "average_to_destination", "score", "=", "direct_distance", "+", "penalty", "+", "(", "penalty", "**", "2", ")", "/", "2", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.982565909123039}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm selects the next node based on a hybrid scoring system that rewards nodes not only for being closer to the current node but also for connecting to the destination node, while penalizing longer average distances to remaining unvisited nodes.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "score", "=", "(", "1", "/", "(", "1", "+", "distance_to_next", ")", ")", "+", "(", "1", "/", "(", "1", "+", "distance_to_destination", ")", ")", "-", "average_distance_to_unvisited", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.324400403716702}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm introduces a weighted scoring system that combines proximity to unvisited nodes, overall path efficiency, and a penalty for selecting nodes further from the destination, encouraging shorter routes.}", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "total_cost", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "# Calculate the total distance to the destination from each unvisited node and the number of connections", "for", "node", "in", "unvisited_nodes", ":", "total_cost", "[", "node", "]", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "# Determine the proximity scores and penalties", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "penalty", "=", "0.5", "*", "distance_to_destination", "# Penalty for being farther from the destination", "score", "=", "direct_distance", "+", "penalty", "+", "(", "total_cost", "[", "node", "]", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "# Adding path efficiency", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.530645631685772}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "node_scores", "=", "{", "}", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Score is influenced by the difference from the average distance", "score", "=", "direct_distance", "-", "average_distance", "node_scores", "[", "node", "]", "=", "score", "# Introduce a random factor to select from candidates with lower scores", "candidates", "=", "[", "node", "for", "node", ",", "score", "in", "node_scores", ".", "items", "(", ")", "if", "score", "<=", "0", "]", "if", "candidates", ":", "return", "random", ".", "choice", "(", "candidates", ")", "# If all scores are positive, select the node with the smallest score", "return", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")"], "code_perf": 17.13048630897591}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "avg_cluster_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "+", "(", "avg_cluster_distance", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "/", "2", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.450370583313572}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "neighborhood_radius", "=", "5", "# Defined distance threshold for neighborhood influence", "close_nodes_count", "=", "sum", "(", "1", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<=", "neighborhood_radius", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "neighborhood_score", "=", "close_nodes_count", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "# Normalize neighborhood effect", "score", "=", "direct_distance", "+", "0.4", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "-", "0.2", "*", "neighborhood_score", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.466511785330852}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "num_unvisited", "if", "num_unvisited", ">", "0", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "num_unvisited", "if", "num_unvisited", ">", "0", "else", "0", "# Dynamic scaling factor based on the number of unvisited nodes", "scaling_factor", "=", "1", "/", "num_unvisited", "if", "num_unvisited", ">", "0", "else", "1", "score", "=", "(", "direct_distance", "+", "scaling_factor", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "0.4", "*", "future_cost", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.381570892673917}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "decay_factor", "=", "0.9", "# Dynamic decay factor to reduce long-distance influence", "weighted_distances", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combine distances with decay to emphasize closer nodes", "weighted_distance", "=", "distance_to_node", "+", "decay_factor", "*", "distance_to_destination", "weighted_distances", "[", "node", "]", "=", "weighted_distance", "next_node", "=", "min", "(", "weighted_distances", ",", "key", "=", "weighted_distances", ".", "get", ")", "return", "next_node"], "code_perf": 7.90467678521368}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance to unvisited nodes", "destination_weight", "=", "0.3", "# Weight for attractiveness to destination", "density_weight", "=", "0.2", "# Encouragement for exploring dense clusters of unvisited nodes", "total_distance_from_current", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate node density score based on proximity to other unvisited nodes", "nearby_nodes", "=", "[", "other_node", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "2", "*", "direct_distance", "]", "density_score", "=", "len", "(", "nearby_nodes", ")", "score", "=", "(", "total_distance_from_current", "/", "(", "unvisited_count", "or", "1", ")", "*", "distance_weight", ")", "+", "(", "distance_to_destination", "*", "destination_weight", ")", "+", "(", "density_score", "*", "density_weight", ")", "-", "direct_distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 24.10787759666214}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.3", "# Weight for direct distance", "novelty_weight", "=", "0.5", "# Weight for novelty of unvisited nodes", "urgency_weight", "=", "0.2", "# Weight for urgency based on proximity to destination", "# Function to calculate novelty score based on visitation", "def", "calculate_novelty_score", "(", "node", ")", ":", "return", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "current_node", "]", "+", "1", ")", "# More visits yield lower scores", "# Function to calculate urgency score based on proximity to destination", "def", "calculate_urgency_score", "(", "node", ")", ":", "return", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", "# Closer nodes yield higher scores", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "novelty_score", "=", "calculate_novelty_score", "(", "node", ")", "urgency_score", "=", "calculate_urgency_score", "(", "node", ")", "# Combined scoring mechanism with urgency and novelty", "score", "=", "(", "novelty_weight", "*", "novelty_score", "-", "distance_weight", "*", "direct_distance", "+", "urgency_weight", "*", "urgency_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.173909407879244}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# This algorithm implements a 'dynamic scoring' mechanism that accounts for both the direct distance to the next node and the overall unvisited nodes' influence, adjusting scores based on the clustering of remaining nodes.", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "dynamic_weight_factor", "=", "0.7", "# Adjusts the influence of remaining nodes", "cluster_influence_threshold", "=", "15", "# Distance threshold for cluster influence", "# Determine clusters of unvisited nodes that are within the influence threshold", "clusters", "=", "[", "node", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<=", "cluster_influence_threshold", "]", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_effect", "=", "(", "len", "(", "clusters", ")", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", ")", "if", "clusters", "else", "0", "adjusted_score", "=", "direct_distance", "+", "dynamic_weight_factor", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "cluster_effect", "if", "adjusted_score", "<", "min_cost", ":", "min_cost", "=", "adjusted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.438127015117454}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Inverse distance score to encourage closer nodes", "inverse_distance_score", "=", "1", "/", "(", "1", "+", "direct_distance", ")", "# Randomization factor to introduce exploration", "random_factor", "=", "random", ".", "uniform", "(", "0.8", ",", "1.2", ")", "# Degree of separation score: a penalty for being far from the destination", "degree_of_separation", "=", "1", "/", "(", "1", "+", "distance_to_destination", ")", "if", "distance_to_destination", ">", "0", "else", "0", "# Connection penalty for nodes that are isolated from the rest of unvisited nodes", "isolation_penalty", "=", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", ">", "10", ")", "# Final score calculation", "score", "=", "(", "0.5", "*", "inverse_distance_score", "*", "random_factor", ")", "-", "(", "0.3", "*", "degree_of_separation", ")", "-", "(", "0.2", "*", "isolation_penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.41851679943486}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "increase_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "proximity", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "randomness_factor", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "# Random value between 0 and 1", "score", "=", "increase_cost", "+", "0.5", "*", "proximity", "+", "randomness_factor", "# Incorporating randomness", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.98730270215744}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_cost", "=", "-", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "max_remaining_distance", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "min_remaining_distance", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "distance_range", "=", "max_remaining_distance", "-", "min_remaining_distance", "normalization_factor", "=", "distance_range", "if", "distance_range", ">", "0", "else", "1", "# Avoid division by zero", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "inverse_remaining_score", "=", "(", "total_remaining_distance", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "/", "normalization_factor", "score", "=", "direct_distance", "-", "inverse_remaining_score", "# Penalizing farther nodes", "if", "score", ">", "max_cost", ":", "max_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 29.171100788635968}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "novelty_weight", "=", "0.3", "# Weight for novelty of unvisited nodes", "urgency_weight", "=", "0.2", "# Weight for urgency based on distance to destination", "min_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "novelty_score", "=", "(", "min_distance", "-", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "# Novelty based on distance", "urgency_score", "=", "1", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "# Urgency based on distance to destination", "# Calculate combined score", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "novelty_weight", "*", "novelty_score", "+", "urgency_weight", "*", "urgency_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.158279716303616}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "future_impact_threshold", "=", "15", "# Distance threshold for future impact influence", "close_nodes_count", "=", "sum", "(", "1", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<=", "future_impact_threshold", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_benefit", "=", "sum", "(", "1", "for", "future_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "future_node", "]", "<=", "future_impact_threshold", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "score", "=", "direct_distance", "-", "0.5", "*", "future_benefit", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate basic distances", "basic_distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Estimate connectivity based on remaining unvisited nodes", "connectivity_scores", "=", "{", "node", ":", "sum", "(", "1", "for", "next_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "<", "1.5", "*", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "for", "node", "in", "unvisited_nodes", "}", "# Compute a combined score: favor shorter paths with added connectivity influence", "combined_scores", "=", "{", "node", ":", "basic_distances", "[", "node", "]", "/", "(", "1", "+", "connectivity_scores", "[", "node", "]", ")", "+", "random", ".", "uniform", "(", "0", ",", "0.1", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the unvisited node with the smallest combined score", "next_node", "=", "min", "(", "combined_scores", ",", "key", "=", "combined_scores", ".", "get", ")", "return", "next_node"], "code_perf": 23.94910976309827}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance", "cluster_weight", "=", "0.25", "# Weight for cluster potential savings", "edge_efficiency_weight", "=", "0.15", "# Weight for cluster efficiency consideration", "decay_weight", "=", "0.1", "# Weight for decaying trend factor", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Dummy trend data simulating initial visitation counts for nodes", "visit_trend", "=", "{", "node", ":", "1", "for", "node", "in", "unvisited_nodes", "}", "# Initialize trend counts", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "edge_efficiency", "=", "(", "direct_distance", "/", "(", "total_distance_to_destination", "if", "total_distance_to_destination", ">", "0", "else", "1", ")", ")", "# Calculate cluster matter by considering the average distance to unvisited nodes", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Dynamic decay factor decreasing influence of previously visited nodes", "decay_factor", "=", "decay_weight", "*", "(", "1", "/", "visit_trend", "[", "node", "]", ")", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "cluster_weight", "*", "cluster_average_distance", ")", "+", "(", "edge_efficiency_weight", "*", "edge_efficiency", ")", "-", "decay_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.532185548989515}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "clustering_weight", "=", "0.4", "# Weight for clustering metric", "time_penalty_weight", "=", "0.2", "# Weight for time penalty", "connectivity_bonus_weight", "=", "0.1", "# Bonus for connectivity", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Clustering score based on the number of direct neighbors within unvisited nodes", "clustering_score", "=", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "10", ")", "# Arbitrary distance for clustering", "# Time penalty for the distance from current node to unvisited nodes", "time_penalty", "=", "direct_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Connectivity bonus based on total connections to other unvisited nodes", "connectivity_bonus", "=", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "10", ")", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "clustering_weight", "*", "clustering_score", "-", "time_penalty_weight", "*", "time_penalty", "+", "connectivity_bonus_weight", "*", "connectivity_bonus", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "potential_nodes", "=", "[", "]", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "variance", "=", "sum", "(", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "-", "average_distance", ")", "**", "2", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "weighted_score", "=", "direct_distance", "+", "(", "variance", "*", "0.2", ")", "# Introduce variance as a weighting factor", "penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "average_distance", ")", "*", "0.5", "# Penalize nodes beyond average distance", "final_score", "=", "weighted_score", "+", "penalty", "potential_nodes", ".", "append", "(", "(", "node", ",", "final_score", ")", ")", "# Select the node with the least final score", "next_node", "=", "min", "(", "potential_nodes", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm utilizes a combination of proximity, a heuristic penalty for farther distances, ", "# and dynamic adjustment based on the average distance to all unvisited nodes, emphasizing nodes ", "# that are both closer and have fewer connections to the remaining nodes.}", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "heuristic_penalty", "=", "(", "distance_to_next", "/", "(", "avg_distance_to_remaining", "+", "1", ")", ")", "*", "(", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "score", "=", "distance_to_next", "+", "heuristic_penalty", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.857189911690752}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate node connectivity (degree) as the number of direct connections in the distance matrix", "connectivity", "=", "{", "node", ":", "sum", "(", "1", "for", "d", "in", "distance_matrix", "[", "node", "]", "if", "d", "<", "float", "(", "'inf'", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "# Calculate adjusted distances with a random factor and connectivity weighting", "adjusted_distances", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "(", "1", "+", "random", ".", "uniform", "(", "-", "0.1", ",", "0.1", ")", ")", ")", "/", "(", "connectivity", "[", "node", "]", "+", "1", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the unvisited node with the smallest adjusted distance", "next_node", "=", "min", "(", "adjusted_distances", ",", "key", "=", "adjusted_distances", ".", "get", ")", "return", "next_node"], "code_perf": 7.079722946517163}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.6", "# Weight for closeness to the nearest unvisited node", "route_cost_weight", "=", "0.4", "# Weight for potential route cost to remaining nodes", "closest_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "closest_distance", "*", "proximity_weight", ")", "+", "(", "total_distance_to_unvisited", "*", "route_cost_weight", ")", "+", "distance_to_destination", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 18.704820740310073}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# We use the reciprocal of the distance to prioritize closer nodes", "score", "=", "1", "/", "(", "distance_to_node", "+", "1e-5", ")", "# Adding a small constant to avoid division by zero", "# Optionally add a small penalty based on the distance to the destination to encourage a route that heads in the right direction", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "-=", "(", "distance_to_destination", "/", "(", "max", "(", "distance_to_destination", ",", "1", ")", ")", ")", "*", "0.1", "# Weighted penalty", "scores", "[", "node", "]", "=", "score", "next_node", "=", "max", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "# Choose the node with the highest score", "return", "next_node"], "code_perf": 6.960195635715911}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {The algorithm employs a modified grouping strategy where distances are normalized, ", "# allowing the algorithm to weigh not only proximity but also the relative distance ", "# to the destination node when forming clusters and selecting the next node.}", "import", "numpy", "as", "np", "from", "collections", "import", "defaultdict", "# Normalize distances from the current node to all unvisited nodes", "distances", "=", "np", ".", "array", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "normalized_distances", "=", "distances", "/", "np", ".", "sum", "(", "distances", ")", "# Create clusters based on normalized distances", "clusters", "=", "defaultdict", "(", "list", ")", "for", "idx", ",", "node", "in", "enumerate", "(", "unvisited_nodes", ")", ":", "clusters", "[", "np", ".", "round", "(", "normalized_distances", "[", "idx", "]", ",", "2", ")", "]", ".", "append", "(", "node", ")", "# Select the cluster with the highest mean distance to the destination node", "target_distances", "=", "{", "cluster", ":", "np", ".", "mean", "(", "[", "distance_matrix", "[", "destination_node", "]", "[", "node", "]", "for", "node", "in", "nodes", "]", ")", "for", "cluster", ",", "nodes", "in", "clusters", ".", "items", "(", ")", "}", "farthest_cluster", "=", "max", "(", "target_distances", ",", "key", "=", "target_distances", ".", "get", ")", "# Select the closest node from the farthest cluster", "next_node", "=", "min", "(", "clusters", "[", "farthest_cluster", "]", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "return", "next_node"], "code_perf": 14.942636270561096}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "focus_factor", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "/", "(", "average_distance", "+", "1", ")", "# Normalizing factor to prevent division by zero", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "distance_to_node", "*", "focus_factor", "-", "(", "(", "1", "/", "(", "average_distance", "+", "1", ")", ")", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.555906268154391}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_hybrid_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.7", "# Weight for proximity to the next node", "estimated_cost_weight", "=", "0.3", "# Weight for estimated total cost to finish tour", "direct_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty_factor", "=", "0.1", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "# Penalty for remaining unvisited nodes", "total_estimated_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "hybrid_score", "=", "(", "proximity_weight", "*", "direct_distance", ")", "+", "(", "estimated_cost_weight", "*", "total_estimated_cost", ")", "+", "penalty_factor", "if", "hybrid_score", "<", "min_hybrid_score", ":", "min_hybrid_score", "=", "hybrid_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 15.632924313572472}
{"code_tokens": ["import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_combined_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate happiness score based on the sum of distances to all other unvisited nodes", "happiness_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "# Combined score: maximize happiness while minimizing distances", "combined_score", "=", "(", "happiness_score", "/", "len", "(", "unvisited_nodes", ")", ")", "-", "(", "distance_to_next", "+", "0.5", "*", "distance_to_destination", ")", "if", "combined_score", ">", "max_combined_score", ":", "max_combined_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.791674262630402}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.6", "# Emphasizing proximity", "savings_weight", "=", "0.4", "# Contribution of potential savings", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Introducing a new factor: clustering potential based on the number of connections", "clustering_potential", "=", "len", "(", "unvisited_nodes", ")", "*", "(", "1", "/", "(", "1", "+", "direct_distance", ")", ")", "score", "=", "clustering_potential", "*", "savings_weight", "-", "(", "direct_distance", "*", "proximity_weight", ")", "+", "(", "0.1", "*", "cluster_average_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.919779418501521}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "tabu_list", "=", "set", "(", ")", "tabu_tenure", "=", "2", "# Restricting the last two visited nodes", "best_next_node", "=", "None", "minimal_round_trip_distance", "=", "float", "(", "'inf'", ")", "# Collect unvisited nodes while maintaining tabu restrictions", "candidate_nodes", "=", "[", "node", "for", "node", "in", "unvisited_nodes", "if", "node", "not", "in", "tabu_list", "]", "for", "node", "in", "candidate_nodes", ":", "round_trip_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Incorporate a random factor to differentiate close scores", "score", "=", "round_trip_distance", "+", "random", ".", "uniform", "(", "0", ",", "0.1", ")", "# Adding a small random factor", "if", "score", "<", "minimal_round_trip_distance", ":", "minimal_round_trip_distance", "=", "score", "best_next_node", "=", "node", "# Update the tabu list", "tabu_list", ".", "add", "(", "current_node", ")", "if", "len", "(", "tabu_list", ")", ">", "tabu_tenure", ":", "tabu_list", ".", "pop", "(", ")", "# Remove the oldest entry in the tabu list", "return", "best_next_node"], "code_perf": 8.230873349700776}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Adjusted for distance efficiency", "connectivity_weight", "=", "0.3", "# Weight for connectivity to unvisited nodes", "heuristic_weight", "=", "0.3", "# Weight for overall spatial positioning of unvisited nodes", "# Distance covered so far", "distance_covered", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "heuristic_score", "=", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Introducing a variability factor based on distance covered", "variability_factor", "=", "1", "+", "(", "distance_covered", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "+", "1", ")", ")", "score", "=", "-", "distance_weight", "*", "direct_distance", "*", "variability_factor", "+", "connectivity_weight", "*", "connectivity_score", "+", "heuristic_weight", "*", "heuristic_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.8337281388317646}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "density_weight", "=", "0.3", "# Weight for density of unvisited nodes", "heuristic_weight", "=", "0.2", "# Weight for heuristic estimate of journey costs", "# Function to calculate density score based on unvisited nodes", "def", "calculate_density_score", "(", "node", ")", ":", "return", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "10", ")", "# Example threshold", "# Function to estimate heuristic journey cost to destination through unvisited nodes", "def", "calculate_heuristic_score", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "density_score", "=", "calculate_density_score", "(", "node", ")", "heuristic_score", "=", "calculate_heuristic_score", "(", "node", ")", "# Combined scoring mechanism with new factors", "score", "=", "(", "distance_weight", "*", "(", "-", "direct_distance", ")", "+", "density_weight", "*", "density_score", "+", "heuristic_weight", "*", "heuristic_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.582021334684685}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "# Calculate cumulative distance for each unvisited node", "for", "node", "in", "unvisited_nodes", ":", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Score favors nodes with both shorter distance to the current node and lower cumulative distance", "scores", "[", "node", "]", "=", "distance_to_node", "+", "cumulative_distance", "*", "0.3", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 13.403771075780126}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "visibility_weight", "=", "0.5", "# Weight for visibility of unvisited nodes", "risk_weight", "=", "0.3", "# Weight for assessing travel risk", "decay_weight", "=", "0.2", "# Weight for decay factor based on unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "decay_factor", "=", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Decay factor related to the count of unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate visibility as the inverse of distance to encourage closer nodes", "visibility_score", "=", "1", "/", "(", "1", "+", "direct_distance", ")", "# Calculate risk based on average distance to unvisited nodes", "risk_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Calculate the overall score", "score", "=", "(", "visibility_weight", "*", "visibility_score", ")", "-", "(", "risk_weight", "*", "risk_score", ")", "score", "*=", "(", "1", "+", "decay_weight", "*", "decay_factor", ")", "# Apply decay factor to score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.471548119658621}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity to destination", "disparity_weight", "=", "0.2", "# Weight for journey disparity", "selection_pressure_weight", "=", "0.3", "# Weight for selecting unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "unvisited_count", "or", "1", ")", "score", "=", "(", "proximity_weight", "*", "(", "1", "/", "(", "direct_distance", "+", "1e-6", ")", ")", "+", "(", "average_distance_to_destination", "*", "selection_pressure_weight", ")", "-", "(", "total_distance_to_destination", "*", "disparity_weight", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.861406632755298}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "potential_nodes", "=", "[", "]", "min_distance_to_unvisited", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "adjustment_factor", "=", "(", "min_distance_to_unvisited", "-", "direct_distance", ")", "*", "0.1", "# Encouragement to explore closer nodes", "randomness_factor", "=", "random", ".", "uniform", "(", "0.0", ",", "0.2", ")", "score", "=", "direct_distance", "+", "adjustment_factor", "+", "randomness_factor", "# Score calculation", "potential_nodes", ".", "append", "(", "(", "node", ",", "score", ")", ")", "next_node", "=", "min", "(", "potential_nodes", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 8.302344037190007}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm identifies the next node to visit based on a scoring system that combines the nearest unvisited node's distance, the total distance to all unvisited nodes, and a penalty term for visited nodes, creating a balance between exploration and exploitation.}", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "penalty_for_visited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "v", "]", "for", "v", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "v", "not", "in", "unvisited_nodes", ")", "score", "=", "distance_to_next", "+", "(", "total_distance_to_unvisited", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "+", "penalty_for_visited", "# Lower score preferred", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 11.840570099260535}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "connectivity_score", "=", "{", "node", ":", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "neighbor", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<", "10", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "euclidean_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "1", "/", "(", "1", "+", "euclidean_distance", ")", ")", "+", "(", "0.5", "*", "connectivity_score", "[", "node", "]", ")", "-", "(", "0.2", "*", "distance_to_destination", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.2725766365688616}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "cluster_threshold", "=", "3", "# Distance threshold to form clusters", "clusters", "=", "{", "}", "# Form clusters based on proximity", "for", "node", "in", "unvisited_nodes", ":", "cluster_key", "=", "tuple", "(", "sorted", "(", "[", "current_node", ",", "node", "]", ")", ")", "# Create a key for the cluster", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "<=", "cluster_threshold", ":", "if", "cluster_key", "not", "in", "clusters", ":", "clusters", "[", "cluster_key", "]", "=", "[", "]", "clusters", "[", "cluster_key", "]", ".", "append", "(", "node", ")", "# Determine the next node from the closest cluster", "best_node", "=", "None", "best_distance", "=", "float", "(", "'inf'", ")", "for", "cluster", "in", "clusters", ".", "values", "(", ")", ":", "for", "node", "in", "cluster", ":", "if", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "direct_distance", "<", "best_distance", ":", "best_distance", "=", "direct_distance", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "candidates", "=", "list", "(", "unvisited_nodes", ")", "total_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "scored_candidates", "=", "[", "]", "for", "node", "in", "candidates", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Scoring mechanism incorporating the direct distance, distance to destination, and total distance to remaining nodes", "score", "=", "(", "0.5", "*", "direct_distance", ")", "+", "(", "0.5", "*", "distance_to_destination", ")", "+", "(", "total_distance_to_remaining", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", ")", "scored_candidates", ".", "append", "(", "(", "node", ",", "score", ")", ")", "scored_candidates", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "return", "scored_candidates", "[", "0", "]", "[", "0", "]"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "heuristic_weight", "=", "0.5", "# Weight for future path heuristics", "competition_weight", "=", "0.1", "# Weight for competitive distance to closest unvisited node", "# Calculate the closest unvisited node distance", "closest_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Heuristic: estimated average distance to the destination from the node", "heuristic_estimate", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "len", "(", "unvisited_nodes", ")", "# Score calculation with competition adjustment", "score", "=", "direct_distance_weight", "*", "direct_distance", "+", "heuristic_weight", "*", "heuristic_estimate", "-", "competition_weight", "*", "closest_distance", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.134254743487464}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance to unvisited nodes", "future_cost_weight", "=", "0.4", "# Weight for estimated future costs", "randomness_weight", "=", "0.1", "# Weight to introduce randomness", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "estimated_future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", ")", "+", "(", "future_cost_weight", "*", "estimated_future_cost", ")", "+", "(", "randomness_weight", "*", "random", ".", "uniform", "(", "0", ",", "1", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.902432416372622}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_distance", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for distance to the next node", "potential_gain_weight", "=", "0.5", "# Weight for potential gain from unvisited nodes", "diminishing_return_weight", "=", "0.1", "# Weight for diminishing returns based on distance", "potential_gains", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "potential_gain", "=", "len", "(", "unvisited_nodes", ")", "-", "1", "# Potential gain as the number of unvisited nodes", "potential_gains", "[", "node", "]", "=", "potential_gain", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "(", "distance_weight", "*", "-", "direct_distance", ")", "+", "(", "potential_gain_weight", "*", "potential_gain", ")", "-", "(", "diminishing_return_weight", "*", "(", "direct_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", ")", "if", "score", "<", "min_distance", ":", "min_distance", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 36.1397423465301}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the degree of each node in the unvisited set", "node_degree", "=", "{", "node", ":", "sum", "(", "1", "for", "i", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "distance_matrix", "[", "node", "]", "[", "i", "]", ">", "0", ")", "for", "node", "in", "unvisited_nodes", "}", "# Calculate scores for each unvisited node", "scores", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "(", "1", "+", "(", "1", "/", "(", "node_degree", "[", "node", "]", "+", "1", ")", ")", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the unvisited node with the minimum score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "time_factor", "=", "len", "(", "unvisited_nodes", ")", "# Initial time factor based on count of unvisited nodes", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "cluster_weight", "=", "0.4", "# Weight for clustering unvisited nodes", "proximity_weight", "=", "0.2", "# Weight for proximity to destination", "centroid", "=", "[", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", "]", "min_centroid_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "cluster_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "centroid_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "cluster_score", "# Proximity to destination score ", "proximity_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score incorporating time decay factor", "score", "=", "-", "distance_weight", "*", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "cluster_weight", "*", "cluster_score", "+", "proximity_weight", "*", "proximity_score", "score", "*=", "(", "1", "+", "1", "/", "(", "time_factor", "+", "1", ")", ")", "# Applying decay that increases over time", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.696674800295234}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "centrality_weight", "=", "0.3", "# Weight for node centrality based on connections", "opportunity_cost_weight", "=", "0.2", "# Weight for opportunity costs considering future paths", "historical_efficiency_weight", "=", "0.1", "# Weight for past performance of node", "diversification_penalty_weight", "=", "0.05", "# Penalty for choosing nodes visited recently", "def", "calculate_centrality_score", "(", "node", ")", ":", "return", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "def", "calculate_opportunity_cost", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "def", "calculate_diversification_penalty", "(", "node", ",", "history", ")", ":", "return", "0.1", "if", "history", ".", "count", "(", "node", ")", ">", "1", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "centrality_score", "=", "calculate_centrality_score", "(", "node", ")", "opportunity_cost", "=", "calculate_opportunity_cost", "(", "node", ")", "diversification_penalty", "=", "calculate_diversification_penalty", "(", "node", ",", "[", "current_node", "]", ")", "# Placeholder for actual history", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "centrality_weight", "*", "centrality_score", "-", "opportunity_cost_weight", "*", "opportunity_cost", "-", "diversification_penalty_weight", "*", "diversification_penalty", "+", "historical_efficiency_weight", "*", "(", "1", "/", "(", "1", "+", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "or", "1", ")", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 29.06397578909622}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the average direct distance to unvisited nodes", "direct_distances", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "average_distance", "=", "np", ".", "mean", "(", "direct_distances", ")", "# Score nodes based on their direct distance and a penalty for being farther from the average", "node_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "average_distance", ")", "*", "0.3", "# Penalty for exceeding the average", "score", "=", "direct_distance", "+", "penalty", "node_scores", "[", "node", "]", "=", "score", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_bonus", "=", "0.3", "# Bonus for being close to the destination", "distance_penalty", "=", "0.7", "# Penalty based on average distance to other unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_others", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_distance", "+", "total_distance_to_destination", ")", "+", "(", "distance_penalty", "*", "average_distance_to_others", ")", "-", "(", "proximity_bonus", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.601193301220019}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "node_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Penalizing distances that are farther ", "distance_penalty", "=", "max", "(", "0", ",", "distance_to_destination", "-", "direct_distance", ")", "# Scoring incorporating dynamic penalty and reward", "score", "=", "direct_distance", "+", "distance_penalty", "-", "(", "1", "/", "(", "1", "+", "node_count", ")", ")", "*", "distance_to_destination", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 13.387092344926653}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "dynamic_influence_weight", "=", "0.75", "# Weight for dynamic influence", "influence_distance_threshold", "=", "15", "# Distance threshold for influence", "far_nodes", "=", "[", "node", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ">", "influence_distance_threshold", "]", "total_influence", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "dynamic_factor", "=", "(", "total_influence", "/", "(", "1", "+", "total_distance", ")", ")", "if", "total_distance", "else", "0", "score", "=", "direct_distance", "+", "dynamic_influence_weight", "*", "dynamic_factor", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate the potential future degradation based on the distance to the destination", "degradation_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "# Combine the metrics into a comprehensive score", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "-", "(", "distance_to_destination", "/", "(", "degradation_score", "+", "1", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.790135325136555}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance", "historical_cost_weight", "=", "0.3", "# Weight for historical cost", "distance_to_destination_weight", "=", "0.2", "# Weight for proximity to destination", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "min_unvisited_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "historical_cost", "=", "sum", "(", "distance_matrix", "[", "previous", "]", "[", "node", "]", "for", "previous", "in", "unvisited_nodes", "if", "previous", "!=", "node", ")", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "historical_cost_weight", "*", "-", "historical_cost", ")", "+", "(", "distance_to_destination_weight", "*", "-", "min_unvisited_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 17.772091960451117}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "distances", "=", "[", "]", "# Gather distances to all unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "distances", ".", "append", "(", "(", "node", ",", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", ")", "# Sort by distance", "distances", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "# Calculate weighted scores combining local distance and distance to destination", "weighted_scores", "=", "{", "}", "for", "node", ",", "local_distance", "in", "distances", ":", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "weighted_score", "=", "(", "local_distance", "+", "distance_to_destination", ")", "/", "2", "# Average distance", "weighted_scores", "[", "node", "]", "=", "weighted_score", "# Select the node with the minimum weighted score", "next_node", "=", "min", "(", "weighted_scores", ",", "key", "=", "weighted_scores", ".", "get", ")", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm evaluates the next node based on a combination of distance, ", "# the average distance to unvisited nodes, and a boost for nodes closest to the destination.}", "next_node", "=", "None", "max_eval", "=", "float", "(", "'-inf'", ")", "# Calculate the average distance to unvisited nodes", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Distance to the destination", "# Evaluation score considering distance to the next node, average distance, and proximity to destination", "eval_score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "+", "(", "1", "/", "(", "distance_to_destination", "+", "1", ")", "*", "0.5", ")", "-", "(", "avg_distance_to_unvisited", "/", "(", "avg_distance_to_unvisited", "+", "1", ")", ")", "if", "eval_score", ">", "max_eval", ":", "max_eval", "=", "eval_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.281798253848895}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "urgency_factor", "=", "0.5", "# Factor to simulate the urgency of reaching the destination", "if", "unvisited_nodes", ":", "density_penalty_weight", "=", "0.4", "# Weight for higher penalty based on neighbor density", "destination_reciprocal_weight", "=", "0.6", "# Weight for the reciprocals of distances to destination", "# Calculate the density of unvisited nodes' neighbors", "neighbor_density", "=", "{", "node", ":", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "10", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Reciprocation of distance to destination", "destination_reciprocal_distance", "=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1e-7", ")", "# Adding small value to avoid division by zero", "# Incorporate density penalty based on neighbor density", "density_penalty", "=", "density_penalty_weight", "*", "neighbor_density", "[", "node", "]", "# Combined score considering urgency", "score", "=", "destination_reciprocal_weight", "*", "destination_reciprocal_distance", "-", "density_penalty", "-", "direct_distance", "*", "urgency_factor", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.656222112300163}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Total distance to finish", "connectivity_score", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "neighbour", "]", "for", "neighbour", "in", "unvisited_nodes", "if", "neighbour", "!=", "node", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "exploration_factor", "=", "connectivity_score", "[", "node", "]", "*", "0.05", "# Reward for potential connections", "weighted_score", "=", "distance", "+", "(", "total_remaining_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", ")", "-", "exploration_factor", "# Combine metrics", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.906840759597606}
{"code_tokens": ["# {This algorithm enhances the selection process by integrating a weighted distance factor and a heuristic that prioritizes nodes based on their average distance to unvisited nodes along with a penalty for distance traveled.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "weighted_distance", "=", "distance_to_next", "*", "(", "0.7", "+", "(", "len", "(", "unvisited_nodes", ")", "**", "-", "0.3", ")", ")", "# Weighted distance factor", "average_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "score", "=", "(", "1", "/", "(", "1", "+", "weighted_distance", ")", ")", "+", "(", "0.5", "*", "(", "1", "/", "(", "average_distance_to_remaining", "+", "0.1", ")", ")", ")", "# Heuristic scoring", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.143092188442038}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "time_weight", "=", "0.5", "# Weight for estimated travel time to next node", "distance_penalty_weight", "=", "0.3", "# Weight for the overall remaining distance to destination", "connection_weight_factor", "=", "0.2", "# Weight for connection density", "total_connection_weight", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "connection_count", "=", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<=", "5", ")", "total_connection_weight", "[", "node", "]", "=", "connection_count", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "travel_time", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "connection_density_weight", "=", "total_connection_weight", "[", "node", "]", "score", "=", "(", "travel_time", "*", "time_weight", ")", "+", "(", "remaining_distance_to_destination", "*", "distance_penalty_weight", ")", "-", "(", "connection_density_weight", "*", "connection_weight_factor", ")", "# Introducing a small random perturbation", "score", "+=", "random", ".", "uniform", "(", "-", "0.05", ",", "0.05", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.384673503646269}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "visit_count", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "# Initialize visit count for unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "novelty_factor", "=", "1", "/", "(", "1", "+", "visit_count", "[", "node", "]", ")", "# Prefer less frequently visited nodes", "score", "=", "(", "distance_to_node", "*", "0.5", ")", "+", "(", "distance_to_destination", "*", "0.3", ")", "-", "(", "novelty_factor", "*", "10", ")", "# Weighted score", "scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "# Update visit count for the selected node", "visit_count", "[", "next_node", "]", "+=", "1", "return", "next_node"], "code_perf": 7.602975755903087}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "scores", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "attractiveness_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "attractiveness_score", "/", "(", "1", "+", "direct_distance", ")", ")", "-", "(", "0.5", "*", "direct_distance", ")", "+", "(", "random", ".", "uniform", "(", "0", ",", "1", ")", "*", "0.1", ")", "scores", ".", "append", "(", "(", "score", ",", "node", ")", ")", "next_node", "=", "max", "(", "scores", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "[", "1", "]", "if", "scores", "else", "None", "return", "next_node"], "code_perf": 6.8361662895294035}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_connectivity_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "score", "=", "direct_distance", "-", "future_connectivity_score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 28.81442622590815}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm selects the next node based on a combination of the minimum distance to the next node, ", "# the maximum distance to unvisited nodes, and a penalty for node degree of connectivity, promoting ", "# visits to nodes that are both reachable and centrally located.}", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "max_distance_to_unvisited", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "connectivity_penalty", "=", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", "]", ")", "score", "=", "distance_to_next", "+", "max_distance_to_unvisited", "-", "connectivity_penalty", "# Lower score is better", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.535700438456931}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to destination", "savings_weight", "=", "0.4", "# Weight for savings among unvisited nodes", "penalty_weight", "=", "0.2", "# Weight for distance penalties", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "savings_from_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Penalty if node is further than a specified threshold from the destination", "penalty", "=", "penalty_weight", "*", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ">", "total_distance_to_destination", "else", "0", ")", "score", "=", "(", "direct_distance", "-", "(", "savings_from_unvisited", "*", "savings_weight", ")", "-", "penalty", ")", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.751833592578322}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate average distance to unvisited nodes", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Calculate scores for nodes", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Penalty for longer distances", "distance_penalty", "=", "(", "distance", "/", "avg_distance", ")", "if", "avg_distance", ">", "0", "else", "1", "# Safety factor based on connection density", "connectivity_factor", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "connectivity_factor", ">", "2", "*", "avg_distance", ":", "# Arbitrary threshold to avoid highly connected but distant nodes", "connectivity_factor", "=", "1", "/", "(", "connectivity_factor", "+", "1", ")", "else", ":", "connectivity_factor", "=", "1", "# Score combining factors and adding some randomness", "scores", "[", "node", "]", "=", "distance_penalty", "*", "connectivity_factor", "*", "random", ".", "uniform", "(", "0.9", ",", "1.1", ")", "# Select node with the best score (lowest)", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.02197469922589}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "cluster_interest_weight", "=", "0.4", "destination_closeness_weight", "=", "0.2", "cluster_distances", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_interest", "=", "cluster_distances", "[", "node", "]", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "1", ")", "destination_closeness", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "-", "(", "direct_distance", "*", "direct_distance_weight", ")", "+", "(", "cluster_interest", "*", "cluster_interest_weight", ")", "-", "(", "destination_closeness", "*", "destination_closeness_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.7794802341537}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "connectivity_weight", "=", "0.3", "# Weight for connectivity to unvisited nodes", "future_gain_weight", "=", "0.2", "# Weight for potential future savings", "# Function to calculate connectivity score based on unvisited nodes", "def", "calculate_connectivity_score", "(", "node", ")", ":", "connectivity_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "connectivity_score", "+=", "distance_matrix", "[", "node", "]", "[", "other", "]", "return", "connectivity_score", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "calculate_connectivity_score", "(", "node", ")", "future_gain", "=", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combined scoring mechanism with penalties for longer paths", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "-", "future_gain_weight", "*", "future_gain", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.337920465110309}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.6", "# Weight for proximity influence", "history_weight", "=", "0.4", "# Weight for influence from previously visited nodes", "total_visited_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_visited_distance", "=", "total_visited_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "historical_penalty", "=", "1", "/", "(", "1", "+", "average_visited_distance", "-", "direct_distance", ")", "score", "=", "(", "direct_distance", "*", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "(", "historical_penalty", "*", "history_weight", "*", "total_visited_distance", ")", "-", "(", "direct_distance", "*", "proximity_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 35.49539831123198}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_remaining", "=", "len", "(", "unvisited_nodes", ")", "distance_weight", "=", "1.0", "/", "(", "total_remaining", "+", "1", ")", "# Dynamic weight decreasing with more remaining nodes", "cluster_weight", "=", "0.4", "# Higher emphasis on cluster proximity", "heuristic_weight", "=", "0.2", "# Weight for potential future positioning ", "# Calculate clusters for unvisited nodes", "def", "calculate_cluster_score", "(", "node", ")", ":", "cluster_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "cluster_score", "+=", "distance_matrix", "[", "node", "]", "[", "other", "]", "return", "cluster_score", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_score", "=", "calculate_cluster_score", "(", "node", ")", "heuristic_score", "=", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "total_remaining", "or", "1", ")", "# Combined scoring mechanism with adjusted weights", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "cluster_weight", "*", "cluster_score", "+", "heuristic_weight", "*", "heuristic_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.225849199638102}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Calculate the clustering score based on the average distance to unvisited nodes", "clustering_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "for", "neighbor", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", "clustering_scores", "[", "node", "]", "=", "1", "/", "(", "1", "+", "avg_distance", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "distance_penalty", "=", "distance_to_destination", "/", "(", "1", "+", "direct_distance", ")", "# Penalty for longer distances", "clustering_score", "=", "clustering_scores", "[", "node", "]", "# Modified scoring function incorporating clustering and distance penalty", "score", "=", "direct_distance", "+", "0.5", "*", "distance_penalty", "-", "0.5", "*", "clustering_score", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.862697283780713}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance to unvisited nodes", "attractiveness_weight", "=", "0.4", "# Weight for attractiveness to destination", "penalty_weight", "=", "0.2", "# Weight for penalizing too long travel", "total_travelled_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "(", "1", "/", "direct_distance", ")", "*", "direct_weight", ")", "+", "(", "(", "1", "/", "(", "distance_to_destination", "+", "1", ")", ")", "*", "attractiveness_weight", ")", "-", "(", "(", "total_travelled_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "0.1", ")", ")", "*", "penalty_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.047448137698869}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate a penalty based on distance to the destination", "def", "score", "(", "node", ")", ":", "return", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "2", ")", "# Select the node with the minimum score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "score", ")", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "+", "(", "0.1", "*", "(", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "distance_matrix", ")", "-", "1", ")", ")", ")", "# Dynamic adjustment", "cluster_weight", "=", "0.4", "*", "(", "1", "-", "(", "len", "(", "unvisited_nodes", ")", "/", "len", "(", "distance_matrix", ")", ")", ")", "# Decreases as unvisited decrease", "exploration_weight", "=", "0.2", "# Emphasis on exploring less connected nodes", "# Calculate a cluster score for the unvisited nodes", "def", "calculate_cluster_score", "(", "node", ")", ":", "cluster_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "cluster_score", "+=", "distance_matrix", "[", "node", "]", "[", "other", "]", "return", "cluster_score", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_score", "=", "calculate_cluster_score", "(", "node", ")", "# Exploration potential (how many unvisited nodes are reachable from this node within a certain threshold)", "exploration_potential", "=", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "10", ")", "# Arbitrary threshold", "# Combined scoring mechanism", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "cluster_weight", "*", "cluster_score", "+", "exploration_weight", "*", "exploration_potential", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.51144696717363}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "connectivity_scores", "=", "{", "node", ":", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "5", ")", "for", "node", "in", "unvisited_nodes", "}", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "nearest_distance", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "connectivity_score", "=", "connectivity_scores", "[", "node", "]", "exploration_factor", "=", "random", ".", "uniform", "(", "0.8", ",", "1.2", ")", "# Exploration factor", "score", "=", "(", "distance_to_node", "+", "nearest_distance", "*", "0.3", ")", "/", "(", "connectivity_score", "+", "1", ")", "*", "exploration_factor", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.49295922507493}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "distance_to_node", "+", "0.5", "*", "distance_to_destination", "# Applying penalty based on destination distance", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "total_distance_traveled", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Penalty factor based on total distance traveled so far", "penalty_factor", "=", "total_distance_traveled", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Decay factor based on remaining unvisited nodes", "decay_factor", "=", "len", "(", "unvisited_nodes", ")", "/", "len", "(", "distance_matrix", ")", "score", "=", "distance_to_node", "+", "penalty_factor", "-", "decay_factor", "*", "distance_to_node", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance consideration", "penalty_weight", "=", "0.3", "# Penalty weight for less direct routes", "savings_weight", "=", "0.2", "# Weight for savings from visiting nearby nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "indirect_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate savings by visiting this node based on distances to other unvisited nodes", "savings", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "score", "=", "(", "direct_weight", "*", "(", "-", "direct_distance", ")", ")", "+", "(", "penalty_weight", "*", "indirect_distance_to_destination", ")", "+", "(", "savings_weight", "*", "savings", ")", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.387679142586634}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "# Calculate immediate distances", "immediate_distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Calculate the closest unvisited node", "closest_unvisited_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "immediate_distances", "[", "node", "]", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "immediate_distances", "[", "node", "]", "# Penalty for potential backtracking: if the node is significantly further from the destination than the closest node", "backtrack_penalty", "=", "(", "distance_matrix", "[", "closest_unvisited_node", "]", "[", "destination_node", "]", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "/", "(", "1", "+", "distance_matrix", "[", "closest_unvisited_node", "]", "[", "destination_node", "]", ")", "# Combine metrics to compute a weighted score using both immediate distance and backtrack penalty", "weighted_score", "=", "distance", "+", "backtrack_penalty", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.478177742012496}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "median_distance_to_unvisited", "=", "sorted", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "[", "len", "(", "unvisited_nodes", ")", "//", "2", "]", "if", "unvisited_nodes", "else", "0", "score", "=", "(", "median_distance_to_unvisited", "-", "distance_to_next", ")", "# Higher score for nodes with lower median distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.685179210579767}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_penalty_weight", "=", "0.6", "# Penalty for larger distance", "clustering_bonus_weight", "=", "0.3", "# Bonus for proximity to clusters of unvisited nodes", "temporal_weight", "=", "0.1", "# Weight for considering the order of future visits", "# Calculate clustering score based on proximity to unvisited nodes", "clustering_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1e-5", ")", "for", "node", "in", "unvisited_nodes", ")", "# Avoid division by zero", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_penalty", "=", "-", "distance_penalty_weight", "*", "direct_distance", "# Temporal score based on distance to destination for remaining nodes", "temporal_score", "=", "-", "temporal_weight", "*", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "score", "=", "distance_penalty", "+", "clustering_bonus_weight", "*", "clustering_score", "+", "temporal_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.975909391726282}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "penalty_weight", "=", "0.3", "# Weight for encouraging visiting unvisited nodes", "distance_weight", "=", "0.7", "# Weight for proximity to the destination node", "total_unvisited_penalty", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "-", "direct_distance", "+", "(", "total_unvisited_penalty", "*", "penalty_weight", ")", "-", "(", "distance_to_destination", "*", "distance_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.6455935091714355}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "cumulative_distance_weight", "=", "0.4", "# Weight for cumulative distance of unvisited nodes", "connectivity_weight", "=", "0.2", "# Weight for connectivity to unvisited nodes", "# Function to calculate cumulative distance to unvisited nodes", "def", "calculate_cumulative_distance", "(", ")", ":", "return", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Function to calculate connectivity score based on unvisited nodes", "def", "calculate_connectivity_score", "(", "node", ")", ":", "return", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "+", "1e-10", ")", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "cumulative_distance", "=", "calculate_cumulative_distance", "(", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "calculate_connectivity_score", "(", "node", ")", "# Combined scoring mechanism", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "-", "cumulative_distance_weight", "*", "cumulative_distance", "+", "connectivity_weight", "*", "connectivity_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 27.68027188493391}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_nodes", "=", "len", "(", "distance_matrix", ")", "degree_centrality", "=", "[", "0", "]", "*", "total_nodes", "for", "node", "in", "range", "(", "total_nodes", ")", ":", "degree_centrality", "[", "node", "]", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "total_nodes", ")", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<", "10", ")", "# Arbitrary distance threshold", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Temporal decay for the visiting score", "visit_score", "=", "2", "# Starting score for each unvisited node", "decay_factor", "=", "0.85", "# Decay for the visit score, to be adjusted", "visit_score", "*=", "decay_factor", "# Hybrid scoring mechanism", "score", "=", "(", "direct_distance", "*", "0.4", "+", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "*", "0.3", "+", "(", "degree_centrality", "[", "node", "]", "/", "total_nodes", ")", "*", "0.2", "+", "visit_score", "*", "0.1", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.501505956627025}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.6", "# Increased weight for proximity to destination", "efficiency_weight", "=", "0.4", "# Weight for travel efficiency", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "travel_cost", "=", "direct_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Efficiency factor based on unvisited count", "average_distance_to_other_nodes", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_distance", "+", "total_distance_to_destination", ")", "+", "(", "average_distance_to_other_nodes", "*", "efficiency_weight", ")", "-", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.793770156235117}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "visit_frequency", "=", "{", "node", ":", "0", "for", "node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "}", "# Tracks how many times each node has been visited", "if", "unvisited_nodes", ":", "immediate_weight", "=", "0.5", "# Weight for immediate travel cost", "popularity_weight", "=", "0.2", "# Influence of node visit popularity", "future_potential_weight", "=", "0.3", "# Weight for future gains", "exploration_weight", "=", "0.1", "# Encourages exploration of less visited nodes", "total_visit_count", "=", "sum", "(", "visit_frequency", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Dynamic future potential score based on the average distance and historical frequency", "future_average_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "visit_penalty", "=", "(", "visit_frequency", "[", "node", "]", "/", "(", "total_visit_count", "+", "1", ")", ")", "*", "0.5", "# Normalize penalty by total visits", "# Randomized exploration factor", "exploration_bonus", "=", "random", ".", "uniform", "(", "0", ",", "exploration_weight", ")", "if", "visit_frequency", "[", "node", "]", "<", "2", "else", "0", "score", "=", "(", "-", "immediate_weight", "*", "direct_distance", ")", "-", "visit_penalty", "+", "(", "future_potential_weight", "*", "future_average_distance", ")", "+", "exploration_bonus", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "visit_frequency", "[", "next_node", "]", "+=", "1", "# Update visit frequency for the selected next node", "return", "next_node"], "code_perf": 7.30070390462935}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "adjusted_weight", "=", "1.0", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Dynamic weight based on remaining nodes", "future_gain", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "*", "adjusted_weight", "+", "0.7", "*", "(", "future_gain", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 13.81518622657934}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate scores for each unvisited node", "scores", "=", "{", "}", "connectivity_penalty", "=", "{", "node", ":", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connection_factor", "=", "connectivity_penalty", "[", "node", "]", "euclidean_score", "=", "distance_to_node", "/", "(", "1", "+", "connection_factor", ")", "# Normalize by connectivity", "# Adding a penalty for how far the next node is to the final destination", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "scoring_factor", "=", "euclidean_score", "+", "distance_to_destination", "scores", "[", "node", "]", "=", "scoring_factor", "# Lower score is better", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 14.115707035213294}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "penalized_scores", "=", "{", "}", "visited_count", "=", "len", "(", "distance_matrix", ")", "-", "len", "(", "unvisited_nodes", ")", "-", "1", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "(", "0.5", "**", "visited_count", ")", "*", "(", "1", "+", "(", "unvisited_count", "*", "0.1", ")", ")", "# Adjust penalty with unvisited nodes", "score", "=", "distance_to_node", "+", "(", "penalty", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "# Combine distance and adjusted penalty", "penalized_scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "penalized_scores", ",", "key", "=", "penalized_scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.045722891418002}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_current", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate a weighted score (minimizing travel distance while considering destination proximity)", "score", "=", "distance_to_current", "+", "0.5", "*", "distance_to_destination", "scores", "[", "node", "]", "=", "score", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "base_distance_weight", "=", "0.6", "# Higher weight for direct distance", "connectivity_weight", "=", "0.2", "# Weight for connectivity to unvisited nodes", "heuristic_weight", "=", "0.2", "# Weight for overall spatial positioning of unvisited nodes", "# Adjust weights based on the number of unvisited nodes", "dynamic_factor", "=", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "distance_weight", "=", "base_distance_weight", "*", "dynamic_factor", "connectivity_weight", "*=", "dynamic_factor", "heuristic_weight", "*=", "dynamic_factor", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average connectivity", "heuristic_score", "=", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average distance to destination", "score", "=", "(", "distance_weight", "*", "direct_distance", ")", "+", "(", "connectivity_weight", "*", "connectivity_score", ")", "+", "(", "heuristic_weight", "*", "heuristic_score", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.267441399691243}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_cost_weight", "=", "0.6", "exploration_penalty_weight", "=", "0.3", "connectivity_weight", "=", "0.1", "# Weight for encouraging selection based on proximity to destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Estimated cost based on direct distance to destination and return", "estimated_cost", "=", "(", "total_cost_weight", "*", "direct_distance", "+", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "# Exploration penalty for being connected to previously visited nodes", "exploration_penalty", "=", "exploration_penalty_weight", "*", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "not", "in", "unvisited_nodes", "and", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "!=", "float", "(", "'inf'", ")", ")", "# Connectivity score to encourage closeness to destination", "connectivity_score", "=", "connectivity_weight", "*", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", ")", "score", "=", "estimated_cost", "+", "exploration_penalty", "-", "connectivity_score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 25.588241220978922}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {The algorithm uses a scoring mechanism that combines distance and the number of unvisited nodes remaining to select the next node.}", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_nodes", "=", "len", "(", "unvisited_nodes", ")", "-", "1", "# Exclude the next node itself", "score", "=", "distance", "+", "(", "remaining_nodes", "*", "0.1", ")", "# Adding a penalty for unvisited nodes", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "connectivity_weight", "=", "0.6", "# Weight for connectivity to other nodes", "destination_weight", "=", "0.4", "# Weight for distance to destination", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_from_node", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "+", "total_distance_to_destination", "average_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "direct_distance", "*", "connectivity_weight", ")", "+", "(", "total_distance_from_node", "*", "(", "1", "-", "connectivity_weight", ")", ")", "+", "(", "average_distance_to_destination", "*", "destination_weight", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 18.794489718587293}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate direct distances and urgency scores", "direct_distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "urgency_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "urgency_score", "=", "0", "for", "other_node", "in", "unvisited_nodes", ":", "if", "node", "!=", "other_node", ":", "pair_distance", "=", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "if", "pair_distance", "<", "15", ":", "# Using a similar threshold from No.1", "urgency_score", "+=", "(", "15", "-", "pair_distance", ")", "urgency_scores", "[", "node", "]", "=", "urgency_score", "# Calculate average distance", "average_distance", "=", "np", ".", "mean", "(", "list", "(", "direct_distances", ".", "values", "(", ")", ")", ")", "# Score nodes based on direct distance, urgency, and penalty for distance to destination", "node_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "direct_distances", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "penalty", "=", "distance_to_destination", "*", "0.5", "# Total score", "score", "=", "direct_distance", "-", "(", "urgency_scores", "[", "node", "]", "*", "0.5", ")", "+", "penalty", "-", "average_distance", "node_scores", "[", "node", "]", "=", "score", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 16.945703872050153}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "potential_nodes", "=", "[", "]", "distances", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "average_distance", "=", "sum", "(", "distances", ")", "/", "len", "(", "distances", ")", "variance", "=", "sum", "(", "(", "d", "-", "average_distance", ")", "**", "2", "for", "d", "in", "distances", ")", "/", "len", "(", "distances", ")", "exploration_factor", "=", "variance", "**", "0.5", "if", "variance", ">", "0", "else", "1", "# Standard deviation for exploration", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "/", "exploration_factor", "# Incorporate exploration factor", "potential_nodes", ".", "append", "(", "(", "node", ",", "score", ")", ")", "next_node", "=", "min", "(", "potential_nodes", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_connections", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "connection_penalty", "=", "remaining_connections", "/", "max", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ",", "1", ")", "# Avoid division by zero", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "-", "(", "0.5", "*", "connection_penalty", ")", "# Strike a balance between distance and connections", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "import", "numpy", "as", "np", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "future_cost_weight", "=", "0.3", "# Weight for potential future cost", "penalty_weight", "=", "0.2", "# Weight for discouraging over-frequent visits", "# Function to calculate potential future cost based on unvisited nodes", "def", "calculate_future_cost", "(", "node", ")", ":", "return", "np", ".", "mean", "(", "[", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "]", ")", "# Function to assess penalty for frequent visit based on visit counts", "def", "calculate_visit_penalty", "(", "node", ")", ":", "return", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", "**", "2", "# Initialize visit counts for nodes if not present", "global", "node_visit_counts", "node_visit_counts", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "# Update visit counts at each call", "node_visit_counts", "[", "node", "]", "=", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", "+", "1", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_cost", "=", "calculate_future_cost", "(", "node", ")", "penalty", "=", "calculate_visit_penalty", "(", "node", ")", "# Combined scoring mechanism with new penalty for frequent visits", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "future_cost_weight", "*", "future_cost", "-", "penalty_weight", "*", "penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.349781351250228}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "max_distance", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_potential", "=", "max_distance", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Encourage nodes closer to the destination", "score", "=", "direct_distance", "+", "(", "future_potential", "*", "0.5", ")", "# Weigh immediate distance against potential", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.450370583313572}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "heuristic_weight", "=", "1.5", "# You can adjust this weight for experimentation", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate the weighted score", "if", "distance_to_destination", ">", "0", ":", "# Avoid division by zero", "score", "=", "distance_to_node", "+", "heuristic_weight", "*", "distance_to_destination", "# Select the node with the minimum score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.46985744010961}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "novelty_weight", "=", "0.4", "# Weight for novelty score", "future_distance_weight", "=", "0.2", "# Weight for potential future distance", "# Function to calculate novelty score based on unvisited nodes", "def", "calculate_novelty_score", "(", "node", ")", ":", "novelty_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "novelty_score", "+=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "+", "1e-6", ")", "# Avoid division by zero", "return", "novelty_score", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "novelty_score", "=", "calculate_novelty_score", "(", "node", ")", "future_distance", "=", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combined scoring mechanism", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "novelty_weight", "*", "novelty_score", "-", "future_distance_weight", "*", "future_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.811288564013772}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.6", "# Weight for priority towards closer unvisited nodes", "cumulative_penalty_weight", "=", "0.4", "# Weight for penalizing longer paths", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_penalty_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "1", "/", "(", "direct_distance", "+", "1", ")", ")", "*", "proximity_weight", "-", "(", "total_penalty_distance", "*", "cumulative_penalty_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 24.24887347248822}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "penalty_factor", "=", "0.5", "# Penalty for longer detours", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "detour_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "direct_distance", "+", "(", "penalty_factor", "*", "(", "detour_distance", "-", "distance_to_destination", ")", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.5", "# Weight for direct distance", "hazard_score_weight", "=", "0.5", "# Weight for remaining distance to unvisited nodes", "revisit_penalty_weight", "=", "0.1", "# Penalty for revisiting nodes", "# Calculate hazard score and neighborhood score", "total_hazard_score", "=", "sum", "(", "min", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", ",", "distance_matrix", "[", "next", "]", "[", "current_node", "]", ")", "for", "next", "in", "unvisited_nodes", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "hazard_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "(", "len", "(", "unvisited_nodes", ")", ">", "1", ")", "else", "0", "# Penalty for the cases where we revisit nodes (if applicable)", "revisit_penalty", "=", "0", "if", "node", "in", "unvisited_nodes", "else", "float", "(", "'inf'", ")", "score", "=", "direct_distance_weight", "*", "direct_distance", "+", "hazard_score_weight", "*", "hazard_score", "-", "revisit_penalty_weight", "*", "revisit_penalty", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.4323878079629}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for distance", "penalty_weight", "=", "0.4", "# Weight for penalty due to connectivity", "unvisited_ratio_weight", "=", "0.2", "# Weight for unvisited nodes consideration", "# Function to calculate connectivity score based on unvisited nodes", "def", "calculate_penalty_score", "(", "node", ")", ":", "penalty_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "penalty_score", "+=", "distance_matrix", "[", "node", "]", "[", "other", "]", "return", "penalty_score", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty_score", "=", "calculate_penalty_score", "(", "node", ")", "unvisited_ratio", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Normalized value", "# Combined scoring mechanism with distance normalization", "score", "=", "(", "distance_weight", "*", "direct_distance", "+", "penalty_weight", "*", "penalty_score", "*", "unvisited_ratio", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.415646917127168}
{"code_tokens": ["# {This algorithm incorporates a dynamic weighting approach, where the score calculation not only considers proximity and accessibility but also introduces a factor for node connectivity, thus selecting nodes based on their overall importance in the unvisited set.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "connectivity_score", "=", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "10", "]", ")", "# Example threshold for connectivity", "score", "=", "(", "average_distance_to_unvisited", "-", "distance_to_next", ")", "+", "connectivity_score", "# Higher score for nodes with better connectivity", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.41724333977419}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for distance proximity", "frequency_penalty_weight", "=", "0.4", "# Weight for visitation frequency penalty", "cluster_bonus_weight", "=", "0.2", "# Weight for cluster proximity", "exploration_factor", "=", "0.1", "# Factor to promote exploration", "# Track visitation frequency (higher means less penalty for re-visiting)", "visitation_frequency", "=", "{", "node", ":", "1", "for", "node", "in", "unvisited_nodes", "}", "# Function to calculate cluster score based on unvisited nodes within a threshold", "def", "calculate_cluster_score", "(", "node", ")", ":", "cluster_score", "=", "0", "within_distance", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "5", ":", "# threshold distance", "cluster_score", "+=", "1", "within_distance", "+=", "distance_matrix", "[", "node", "]", "[", "other", "]", "return", "cluster_score", "*", "(", "1", "/", "(", "within_distance", "+", "1", ")", ")", "if", "within_distance", ">", "0", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "frequency_penalty", "=", "visitation_frequency", "[", "node", "]", "cluster_score", "=", "calculate_cluster_score", "(", "node", ")", "exploration_bonus", "=", "(", "1", "/", "(", "1", "+", "direct_distance", ")", ")", "*", "exploration_factor", "# Encourage less immediate choices", "# Combined scoring mechanism with prospective penalties and bonuses", "score", "=", "(", "-", "proximity_weight", "*", "direct_distance", "/", "frequency_penalty", "+", "cluster_bonus_weight", "*", "cluster_score", "+", "exploration_bonus", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.261114770485035}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "total_edges", "=", "{", "node", ":", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", ">", "0", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Heuristic score based on closeness to unvisited nodes", "heuristic_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "# Connection factor rewarding nodes with more connections", "connection_factor", "=", "total_edges", "[", "node", "]", "# Score combines distance, heuristic score, and connection factor", "score", "=", "-", "direct_distance", "+", "(", "1", "/", "(", "1", "+", "distance_to_destination", ")", ")", "+", "(", "connection_factor", "/", "(", "1", "+", "heuristic_score", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.716039802681834}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "score_dict", "=", "{", "}", "current_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "variance_penalty", "=", "sum", "(", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "-", "current_distance", ")", "**", "2", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "score", "=", "distance", "+", "0.1", "*", "variance_penalty", "score_dict", "[", "node", "]", "=", "score", "min_score", "=", "min", "(", "score_dict", ".", "values", "(", ")", ")", "best_candidates", "=", "[", "node", "for", "node", ",", "score", "in", "score_dict", ".", "items", "(", ")", "if", "score", "==", "min_score", "]", "if", "best_candidates", ":", "return", "random", ".", "choice", "(", "best_candidates", ")", "return", "None"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "exploration_weight", "=", "1.5", "# Weight to encourage exploration of diverse nodes", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "clustering_weight", "=", "0.4", "# Weight for clustering tendency among unvisited nodes", "circular_penalty_weight", "=", "0.1", "# Penalty for favoring circular routes", "future_proximity_weight", "=", "0.1", "# Weight for remaining path lengths to unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "clustering_score", "=", "total_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "circular_penalty", "=", "distance_matrix", "[", "node", "]", "[", "current_node", "]", "# Penalize backtracking", "# Estimate future distances to remaining unvisited nodes for exploratory purposes", "future_proximity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combined score with exploration incentive", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "clustering_weight", "*", "clustering_score", "-", "circular_penalty_weight", "*", "circular_penalty", "+", "future_proximity_weight", "*", "future_proximity_score", "# Exploration incentive for diversity in node selection", "exploration_incentive", "=", "exploration_weight", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "clustering_score", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "score", "+=", "exploration_incentive", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.737016616337991}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "dispersion_factor", "=", "3", "# Defined factor for dispersion influence", "# Calculate average distance to destination and the dispersion of unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "dispersion_effect", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "1", "+", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "+", "0.4", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "0.2", "*", "(", "1", "/", "(", "1", "+", "dispersion_effect", ")", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.466511785330852}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "cluster_density", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "# Calculate cluster density based on proximity", "for", "node", "in", "unvisited_nodes", ":", "for", "other_node", "in", "unvisited_nodes", ":", "if", "node", "!=", "other_node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "15", ":", "# Proximity influence threshold", "cluster_density", "[", "node", "]", "+=", "1", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "potential_energy", "=", "(", "1", "/", "(", "1", "+", "cluster_density", "[", "node", "]", ")", ")", "# Inverse of cluster density affects attractiveness", "score", "=", "direct_distance", "+", "0.5", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "0.5", "*", "potential_energy", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.450370583313572}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "# Calculate the average distance to the destination", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Scoring based on a combination of direct travel cost and adjusted distance to destination", "score", "=", "direct_distance", "+", "0.7", "*", "distance_to_destination", "-", "0.3", "*", "avg_distance_to_destination", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.6455935091714355}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.4", "# Weight for node connectivity", "recency_weight", "=", "0.2", "# Weight for recency of visiting nodes", "# Calculate the total degree of connection (number of edges) for each unvisited node", "connectivity_scores", "=", "{", "node", ":", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", ">", "0", "and", "neighbor", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Connectivity score for node based on the number of edges to other unvisited nodes", "connectivity_score", "=", "connectivity_scores", "[", "node", "]", "# Decay penalty based on how recently the node was visited", "recency_penalty", "=", "sum", "(", "(", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "prev", "]", "+", "1", ")", ")", "for", "prev", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "prev", "not", "in", "unvisited_nodes", "and", "prev", "!=", "current_node", ")", "# Calculate the score with adjusted weights", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "-", "recency_weight", "*", "recency_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.6", "# Weight for direct distance influence", "cluster_weight", "=", "0.3", "# Weight for potential cluster efficiency", "connectivity_weight", "=", "0.1", "# Weight for connectivity attractiveness", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "relative_distance", "=", "direct_distance", "/", "(", "total_distance_to_destination", "+", "1e-5", ")", "# Avoid division by zero", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "neighbor_count", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "0.5", "*", "max", "(", "direct_distance", ",", "total_distance_to_destination", ")", ")", "attractiveness_score", "=", "neighbor_count", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "score", "=", "(", "direct_weight", "*", "-", "relative_distance", ")", "+", "(", "cluster_weight", "*", "cluster_average_distance", ")", "+", "(", "connectivity_weight", "*", "attractiveness_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.732479458434302}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "weighted_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "penalty", "=", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "*", "(", "distance_to_destination", "**", "2", ")", "# Penalty increases quadratically with distance to destination", "weighted_scores", "[", "node", "]", "=", "distance_to_node", "+", "penalty", "next_node", "=", "min", "(", "weighted_scores", ",", "key", "=", "weighted_scores", ".", "get", ")", "return", "next_node"], "code_perf": 13.976611480508053}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# This algorithm incorporates a penalty for the distance to the destination node and rewards nodes that reduce the overall path length without increasing the distance to unvisited nodes excessively.", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "score", "=", "(", "avg_distance_to_unvisited", "-", "distance_to_next", ")", "-", "(", "0.5", "*", "distance_to_destination", ")", "# Adjust score to consider closer access to destination", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.791674262630402}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "euclidean_factor", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "*", "(", "1", "-", "(", "avg_distance_to_remaining", "/", "(", "distance_to_next", "+", "1", ")", ")", ")", "# Encourage path efficiency", "score", "=", "euclidean_factor", "*", "(", "avg_distance_to_remaining", "-", "distance_to_next", ")", "# Balance between immediate and future distances", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.563308132108515}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "exploration_weight", "=", "0.4", "# Weight for exploration effect", "direct_distance_weight", "=", "0.4", "# Weight for direct distance consideration", "randomness_weight", "=", "0.2", "# Weight for introducing randomness", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "exploration_factor", "=", "(", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "**", "0.5", ")", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "0", "else", "1", "random_bonus", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "*", "randomness_weight", "score", "=", "(", "exploration_weight", "*", "exploration_factor", ")", "-", "(", "direct_distance", "*", "direct_distance_weight", ")", "+", "random_bonus", "+", "(", "total_distance_to_destination", "*", "0.1", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.077958574404446}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "adjusted_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "dest", "]", "for", "dest", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Adjusted penalty using remaining unvisited nodes", "scores", "[", "node", "]", "=", "distance_to_node", "+", "0.5", "*", "adjusted_penalty", "# Combine distance and adjusted penalty ", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.526271790227707}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "decay_factor", "=", "0.1", "# Decay factor to penalize nodes based on the number of ticks they are unvisited", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance to unvisited nodes", "attractiveness_weight", "=", "0.3", "# Weight for attractiveness to destination", "novelty_weight", "=", "0.2", "# Weight for novelty score based on closeness to unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Novelty score based on the proximity to all other unvisited nodes", "novelty_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "+", "1e-6", ")", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "# Decay penalty based on number of unvisited nodes; assuming more unvisited increases the penalty", "decay_penalty", "=", "decay_factor", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "score", "=", "(", "direct_distance", "*", "direct_weight", ")", "+", "(", "distance_to_destination", "*", "attractiveness_weight", ")", "+", "(", "novelty_score", "*", "novelty_weight", ")", "-", "decay_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 31.897666343918456}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.5", "# Weight for direct distance", "connectivity_weight", "=", "0.3", "# Weight for node connectivity based on unvisited neighbors", "penalty_weight", "=", "0.2", "# Weight for cost penalty of longer paths", "# Calculate a cumulative connectivity factor based on the number of unvisited neighbors", "connectivity_factor", "=", "sum", "(", "1", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<", "100", ")", "# Arbitrary threshold", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "connectivity_factor", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_distance_weight", "*", "direct_distance", "+", "(", "connectivity_score", "*", "connectivity_weight", ")", "-", "(", "penalty_weight", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "connectivity_factor", ")", ")", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "avg_distance_to_unvisited", "=", "total_distance_to_unvisited", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "# Score incorporating distance to destination as a penalty", "score", "=", "(", "avg_distance_to_unvisited", "*", "0.4", ")", "-", "(", "distance_to_next", "*", "0.4", ")", "-", "(", "distance_to_destination", "*", "0.2", ")", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.791674262630402}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Count visits to each node (assuming a visit count array is maintained)", "visit_counts", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Historical bias: favor less frequently visited nodes", "historical_score", "=", "-", "visit_counts", "[", "node", "]", "# Negate to favor less visited", "# Assess spatial distribution: if nodes are farther apart, reduce penalty", "spatial_spread_penalty", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "+", "1", ")", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "# Assess the average direct distance to the destination", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Combined score with added historical and spatial factors", "score", "=", "(", "direct_distance", "*", "0.4", "+", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "*", "0.3", "+", "historical_score", "*", "0.2", "+", "spatial_spread_penalty", "*", "0.1", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.927728979285774}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance", "future_cost_weight", "=", "0.3", "# Weight for future cost consideration", "revisit_penalty_weight", "=", "0.2", "# Weight for penalizing revisit paths", "unvisited_count_weight", "=", "0.1", "# Weight for favoring unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "revisit_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "unvisited_count", "or", "1", ")", "future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "unvisited_count", "or", "1", ")", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "future_cost_weight", "*", "future_cost", ")", "-", "(", "revisit_penalty_weight", "*", "revisit_penalty", ")", "score", "+=", "unvisited_count_weight", "*", "(", "1", "/", "(", "unvisited_count", "+", "1", ")", ")", "# Favor unvisited nodes dynamically", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.737016616337991}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distances", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "average_distance", "=", "sum", "(", "distances", ")", "/", "len", "(", "unvisited_nodes", ")", "nearest_distance", "=", "min", "(", "distances", ")", "# Calculate penalty based on distance to the destination", "destination_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Cost is a combination of direct distance, average distance, and destination penalty", "total_cost", "=", "direct_distance", "+", "(", "average_distance", "*", "0.3", ")", "+", "(", "destination_penalty", "*", "0.7", ")", "-", "nearest_distance", "*", "0.2", "if", "total_cost", "<", "min_cost", ":", "min_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate average distance to unvisited nodes", "distances", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "avg_distance", "=", "np", ".", "mean", "(", "distances", ")", "# Calculate distance penalty based on proximity to destination", "distance_penalty", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "# Incorporate a dynamic weighting factor influenced by the distance to destination", "node_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Score calculation with an additional distance penalty factor", "score", "=", "(", "direct_distance", "*", "0.5", ")", "+", "(", "avg_distance", "*", "0.3", ")", "+", "(", "distance_penalty", "*", "0.2", ")", "node_scores", "[", "node", "]", "=", "score", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate total distance from the starting node to current node", "cumulative_distance", "=", "0", "for", "i", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", ":", "cumulative_distance", "+=", "distance_matrix", "[", "0", "]", "[", "i", "]", "# Assuming starting node is index 0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate a weighted score combining direct distance and cumulative distance", "if", "distance_to_destination", ">", "0", ":", "# Avoid division by zero", "score", "=", "(", "direct_distance", "+", "cumulative_distance", ")", "/", "distance_to_destination", "else", ":", "score", "=", "float", "(", "'inf'", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 16.162390287076988}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for immediate distance", "historical_weight", "=", "0.3", "# Weight for historical cost", "exploration_weight", "=", "0.2", "# Weight for penalizing longer unseen paths", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_historical_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "unseen_penalty", "=", "max", "(", "0", ",", "total_distance_to_destination", "-", "direct_distance", ")", "*", "exploration_weight", "score", "=", "(", "direct_distance", "*", "distance_weight", ")", "+", "(", "average_historical_cost", "*", "historical_weight", ")", "+", "unseen_penalty", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.262182358478151}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for distance", "density_weight", "=", "0.4", "# Weight for density of unvisited connections", "penalty_weight", "=", "0.1", "# Penalty for already visited nodes", "randomness_weight", "=", "0.1", "# Weight for introducing randomness", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "density_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "penalty_score", "=", "sum", "(", "1", "for", "next", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "next", "not", "in", "unvisited_nodes", "and", "distance_matrix", "[", "current_node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", ")", "# Introduce randomness", "randomness_score", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "density_weight", "*", "density_score", "-", "penalty_weight", "*", "penalty_score", "+", "randomness_weight", "*", "randomness_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.475739668689723}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "exploration_factor", "=", "random", ".", "uniform", "(", "0.5", ",", "1", ")", "# Random factor to encourage exploration", "relative_distance", "=", "distance_to_node", "/", "total_distance", "if", "total_distance", "!=", "0", "else", "0", "# New scoring mechanism", "score", "=", "(", "distance_to_node", "**", "2", ")", "*", "(", "1", "+", "relative_distance", ")", "/", "(", "1", "+", "distance_to_destination", ")", "*", "exploration_factor", "scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.025679827125096}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "nearest_neighbor_weight", "=", "0.6", "# Weight for nearest neighbor heuristic", "connectivity_weight", "=", "0.4", "# Weight for connectivity among unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "nearest_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "(", "nearest_distance", "+", "total_distance_to_destination", ")", "+", "(", "average_distance_to_unvisited", "*", "connectivity_weight", ")", "+", "(", "nearest_neighbor_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 16.46879537882864}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.6", "# Adjusted weight for proximity to destination", "connection_penalty_factor", "=", "0.4", "# Weight for connections of unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connection_count", "=", "sum", "(", "1", "for", "next_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "<", "float", "(", "'inf'", ")", ")", "connection_penalty", "=", "connection_count", "*", "connection_penalty_factor", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", ")", "-", "connection_penalty", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.4257563991146025}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "next_node", "=", "None", "min_adjusted_cost", "=", "float", "(", "'inf'", ")", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "increase_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Adjust the cost based on the average distance to unvisited nodes", "adjusted_cost", "=", "increase_cost", "+", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "-", "average_distance", ")", "*", "0.5", "# Introduce a penalty for being farther from the destination", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "penalty", "=", "distance_to_destination", "*", "0.3", "# Penalty factor", "total_cost", "=", "adjusted_cost", "+", "penalty", "if", "total_cost", "<", "min_adjusted_cost", ":", "min_adjusted_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.926865856011277}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "minimal_weighted_distance", "=", "float", "(", "'inf'", ")", "visit_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "weight", "=", "(", "visit_count", "+", "1", ")", "/", "(", "visit_count", "+", "1", ")", "# Adjusting weight based on visit count", "weighted_distance", "=", "distance", "*", "weight", "if", "weighted_distance", "<", "minimal_weighted_distance", ":", "minimal_weighted_distance", "=", "weighted_distance", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate the average distance to unvisited nodes for heuristic", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_value", "=", "(", "distance_to_node", "+", "avg_distance_to_unvisited", ")", "/", "2", "# Balance distance and heuristic", "total_score", "=", "distance_to_node", "+", "heuristic_value", "# Combine actual distance with heuristic", "if", "total_score", "<", "best_score", ":", "best_score", "=", "total_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for distance", "future_cost_weight", "=", "0.4", "# Weight for potential future costs", "penalty_weight", "=", "0.2", "# Penalty for already visited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_unvisited", "=", "total_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_cost_score", "=", "average_distance_to_unvisited", "# Heuristic based on average distance to unvisited nodes", "penalty_score", "=", "sum", "(", "1", "for", "next", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "next", "not", "in", "unvisited_nodes", "and", "distance_matrix", "[", "current_node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", ")", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "future_cost_weight", "*", "future_cost_score", "-", "penalty_weight", "*", "penalty_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "unvisited_neighbors", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "0", ")", "# Score based on inverse distance to destination and number of unvisited neighbors", "score", "=", "(", "1", "/", "(", "distance_to_destination", "+", "1", ")", ")", "*", "(", "unvisited_neighbors", "+", "1", ")", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 18.704820740310073}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_unvisited", "=", "total_distance_to_unvisited", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "average_distance_to_unvisited", ")", "score", "=", "direct_distance", "+", "max", "(", "0", ",", "penalty", ")", "# Avoid negative penalties", "scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.679045268646809}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "influence_factor", "=", "1.0", "if", "unvisited_nodes", ":", "nearest_weight", "=", "0.5", "# Weight for proximity to the nearest unvisited node", "clustering_weight", "=", "0.4", "# Weight for node clustering potential", "destination_weight", "=", "0.1", "# Weight for proximity to destination", "# Update the influence factor based on the number of unvisited nodes", "influence_factor", "*=", "(", "1", "+", "len", "(", "unvisited_nodes", ")", "/", "len", "(", "distance_matrix", ")", ")", "# Select the closest unvisited node to seed initial clustering", "nearest_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "clustering_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Score is dynamically influenced by proximity to both the nearest node and destination", "score", "=", "(", "nearest_weight", "*", "-", "direct_distance", "+", "clustering_weight", "*", "clustering_score", "*", "influence_factor", "+", "destination_weight", "*", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.6210528270874125}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "adjusted_score", "=", "(", "total_distance_to_unvisited", "/", "len", "(", "unvisited_nodes", ")", ")", "-", "distance_to_next", "# Adjusting score with total distance concept", "if", "adjusted_score", ">", "max_score", ":", "max_score", "=", "adjusted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity to destination", "complexity_penalty", "=", "0.5", "# Weight for complexity of unvisited connections", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connection_complexity", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "float", "(", "'inf'", ")", ")", "# Adjust score calculation to incorporate connection complexity and proximity to destination", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", ")", "-", "(", "complexity_penalty", "*", "connection_complexity", ")", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.450370583313572}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "uncertainty_factor", "=", "len", "(", "unvisited_nodes", ")", "*", "0.5", "# Increased impact of unvisited nodes", "immediate_weight", "=", "0.5", "# Weight for immediate travel cost", "future_potential_weight", "=", "0.3", "# Potential future gains weight", "risk_penalty_weight", "=", "0.2", "# Risk penalty for distant nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_average_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "# Average distance to remaining nodes", "risk_penalty", "=", "risk_penalty_weight", "*", "max", "(", "0", ",", "immediate_weight", "*", "direct_distance", "-", "future_average_distance", ")", "# Penalty if immediate distance is significantly higher than average", "score", "=", "(", "-", "immediate_weight", "*", "direct_distance", ")", "-", "(", "uncertainty_factor", "+", "risk_penalty", ")", "+", "(", "future_potential_weight", "*", "future_average_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.337399612637006}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "penalized_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "len", "(", "unvisited_nodes", ")", "# Penalty based on distance to destination", "penalized_scores", "[", "node", "]", "=", "distance_to_node", "+", "penalty", "next_node", "=", "min", "(", "penalized_scores", ",", "key", "=", "penalized_scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.101442436613793}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "exploration_weight", "=", "0.4", "# Incentive for exploring densely connected nodes", "immediate_weight", "=", "0.4", "# Weight for immediate travel cost", "future_potential_weight", "=", "0.3", "# Potential future gains weight", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_average_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "# Average distance to remaining nodes", "# Connection strength metric based on distance to other unvisited nodes", "connection_strength", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", ">", "0", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "score", "=", "(", "-", "immediate_weight", "*", "direct_distance", ")", "+", "(", "future_potential_weight", "*", "future_average_distance", ")", "+", "(", "exploration_weight", "*", "connection_strength", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 17.162483837025434}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Step 1: Group unvisited nodes into clusters based on proximity", "clusters", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "not", "in", "clusters", ":", "clusters", "[", "distance", "]", "=", "[", "]", "clusters", "[", "distance", "]", ".", "append", "(", "node", ")", "# Step 2: Sort clusters by distance", "sorted_clusters", "=", "sorted", "(", "clusters", ".", "items", "(", ")", ")", "# Step 3: Selecting the best node from the nearest cluster", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "distance", ",", "nodes", "in", "sorted_clusters", ":", "for", "node", "in", "nodes", ":", "# Cost calculation based on direct distance and distance to destination", "score", "=", "distance", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "max_distance", "=", "np", ".", "max", "(", "distance_matrix", "[", "current_node", ",", "list", "(", "unvisited_nodes", ")", "]", ")", "best_next_node", "=", "None", "best_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Implementing min-max normalization for distance", "normalized_distance", "=", "(", "direct_distance", "-", "0", ")", "/", "(", "max_distance", "-", "0", ")", "if", "max_distance", ">", "0", "else", "direct_distance", "# Deterrent factor based on distance to destination", "deterrent_factor", "=", "(", "1", "-", "normalized_distance", ")", "*", "(", "1", "+", "(", "0.5", "*", "len", "(", "unvisited_nodes", ")", ")", ")", "# Calculate total cost combining normalized distance with deterrent factor", "total_cost", "=", "direct_distance", "+", "deterrent_factor", "if", "total_cost", "<", "best_cost", ":", "best_cost", "=", "total_cost", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 36.1397423465301}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate the number of connections remaining for each unvisited node", "remaining_connections", "=", "{", "node", ":", "sum", "(", "1", "for", "next_node", "in", "unvisited_nodes", "if", "next_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "next_node", "]", ">", "0", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Penalty for revisiting nearby nodes (if feasible distance is low)", "revisit_penalty", "=", "direct_distance", "if", "direct_distance", "<", "2", "else", "0", "# Score calculation", "score", "=", "(", "direct_distance", "+", "revisit_penalty", ")", "+", "(", "0.5", "*", "distance_to_destination", ")", "-", "(", "0.3", "*", "remaining_connections", "[", "node", "]", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.223538322856397}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to destination", "diversity_weight", "=", "0.6", "# Weight for route diversity based on unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "diversity_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "+", "1e-5", ")", "for", "next", "in", "unvisited_nodes", ")", "# Entropy-based diversity measure", "adjusted_score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", ")", "+", "(", "diversity_weight", "*", "diversity_score", ")", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "adjusted_score", ">", "max_score", ":", "max_score", "=", "adjusted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 27.832904589490873}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "exploration_weight", "=", "0.3", "# Weight for random exploration", "decay_weight", "=", "0.1", "# Weight for decay of previously visited nodes", "proximity_weight", "=", "0.1", "# Weight focusing on nearby nodes", "# Simulating visit trend with decay based on how many steps have been taken", "visit_trend", "=", "{", "node", ":", "1", "for", "node", "in", "unvisited_nodes", "}", "# Initialize trend counts", "decay_factor", "=", "0.9", "# Decay factor for trend", "for", "node", "in", "visit_trend", ":", "visit_trend", "[", "node", "]", "*=", "decay_factor", "# Apply decay to simulate less interest in older nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_factor", "=", "1", "/", "(", "1", "+", "direct_distance", ")", "# Closer nodes get higher scores", "exploration_factor", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "# Random factor to promote exploration", "score", "=", "(", "distance_weight", "*", "-", "direct_distance", "*", "proximity_factor", ")", "+", "(", "exploration_weight", "*", "exploration_factor", ")", "+", "(", "decay_weight", "*", "visit_trend", "[", "node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 12.111711142340818}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Calculate penalties for clustering based on diversity", "diversity_penalty", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node1", "]", "[", "node2", "]", "+", "1", ")", "for", "node1", "in", "unvisited_nodes", "for", "node2", "in", "unvisited_nodes", "if", "node1", "!=", "node2", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Evaluate future path: estimated total distance to destination from current unvisited node", "future_path_length", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Assess node degree: how many connections this node has to other unvisited nodes", "node_degree", "=", "len", "(", "[", "neighbor", "for", "neighbor", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<", "5", "]", ")", "# Combined score using weights to incorporate direct distance, future path length, node degree, and diversity penalty", "score", "=", "(", "direct_distance", "*", "0.4", "+", "future_path_length", "*", "0.4", "+", "node_degree", "*", "0.1", "+", "diversity_penalty", "*", "0.1", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "importance_weight", "=", "0.5", "# Weight for direct importance", "future_savings_weight", "=", "0.5", "# Weight for future savings potential", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate potential future savings based on the distance to remaining unvisited nodes", "future_savings", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", ")", "+", "(", "future_savings", "*", "future_savings_weight", ")", "+", "(", "importance_weight", "*", "(", "1", "/", "(", "direct_distance", "+", "1", ")", ")", ")", "# Adding 1 to avoid division by zero", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.578944072341474}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "cluster_weight", "=", "0.3", "edge_connection_weight", "=", "0.2", "penalty_weight", "=", "0.1", "def", "calculate_cluster_score", "(", "node", ")", ":", "cluster_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "return", "cluster_score", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "def", "calculate_edge_connection_score", "(", "node", ")", ":", "return", "len", "(", "[", "1", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "10", "]", ")", "# Example threshold", "def", "calculate_penalty_score", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_score", "=", "calculate_cluster_score", "(", "node", ")", "edge_connection_score", "=", "calculate_edge_connection_score", "(", "node", ")", "penalty_score", "=", "calculate_penalty_score", "(", "node", ")", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "cluster_weight", "*", "cluster_score", "+", "edge_connection_weight", "*", "edge_connection_score", "-", "penalty_weight", "*", "penalty_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.355321178255981}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "node_scores", "=", "{", "}", "# Calculate score for each unvisited node based on direct distance and cumulative distance to other unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "# Create a composite score based on direct distance and cumulative distance", "node_scores", "[", "node", "]", "=", "direct_distance", "+", "(", "cumulative_distance", "*", "0.05", ")", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 8.2699981173128}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "reverse_connectivity_weight", "=", "0.3", "# Weight for reverse connectivity", "stochastic_weight", "=", "0.2", "# Weight for introducing diversity", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "reverse_connectivity_score", "=", "sum", "(", "distance_matrix", "[", "next", "]", "[", "node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Stochastic element for diversifying node selection", "stochastic_score", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "# Calculate combined score", "score", "=", "(", "distance_weight", "*", "direct_distance", "+", "reverse_connectivity_weight", "*", "reverse_connectivity_score", "-", "stochastic_weight", "*", "stochastic_score", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.15894968131569}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "efficiency_weight", "=", "0.5", "# Weight for route efficiency", "clustering_weight", "=", "0.25", "# Weight for clustering potential", "distance_penalty_weight", "=", "0.15", "# Weight for distance penalties", "average_distance_weight", "=", "0.1", "# Weight for average distance normalization", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance", "/", "(", "unvisited_count", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "unvisited_count", "or", "1", ")", "score", "=", "(", "efficiency_weight", "/", "direct_distance", "+", "(", "cluster_average_distance", "*", "clustering_weight", ")", "-", "(", "distance_penalty_weight", "*", "direct_distance", ")", "+", "(", "average_distance", "*", "average_distance_weight", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.856841984636008}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "connectivity_weight", "=", "0.4", "# Weight for cluster connectivity", "distance_weight", "=", "0.4", "# Weight for direct distance cost", "randomness_weight", "=", "0.2", "# Weight for introducing randomness", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "extra_cost", "=", "0.3", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Introducing a randomization factor to the score", "random_factor", "=", "random", ".", "uniform", "(", "-", "0.5", ",", "0.5", ")", "*", "randomness_weight", "score", "=", "-", "(", "direct_distance", "+", "extra_cost", ")", "+", "(", "connectivity_weight", "*", "cluster_average_distance", ")", "+", "(", "distance_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "random_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.2776073947566235}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "cluster_weight", "=", "0.4", "# Weight for cluster savings", "future_cost_weight", "=", "0.2", "# Weight for future cost consideration", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "node", "in", "unvisited_nodes", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "(", "len", "(", "unvisited_nodes", ")", "**", "2", ")", "or", "1", ")", "# Total distance among unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Logarithmic integration for cluster scoring", "logarithmic_cluster_score", "=", "(", "cluster_average_distance", "+", "1", ")", "# Prevent log(0) issues", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "cluster_weight", "*", "logarithmic_cluster_score", ")", "+", "(", "future_cost_weight", "*", "future_cost", ")", "-", "(", "0.1", "*", "direct_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.582021334684685}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "exploration_factor", "=", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Encourage exploration of less connected paths", "immediate_cost_weight", "=", "0.4", "# Weight for immediate travel cost", "average_cost_weight", "=", "0.4", "# Weight for average distance to remaining nodes", "exploration_weight", "=", "0.2", "# Exploration weight to balance less connected nodes", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average distance to unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "weighted_cost", "=", "immediate_cost_weight", "*", "direct_distance", "+", "average_cost_weight", "*", "average_distance", "# Exploring less connected nodes will add a penalty to their distance for diversity", "connectivity_penalty", "=", "exploration_weight", "*", "(", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1", ")", ")", "# Higher cost penalty for low connectivity", "score", "=", "weighted_cost", "+", "connectivity_penalty", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_future_connectivity", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "0.0001", ")", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "direct_distance", "+", "avg_future_connectivity", "+", "distance_to_destination", "*", "0.5", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 9.081500873469672}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<", "min_distance", ":", "min_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance from current node", "connection_potential_weight", "=", "0.4", "# Weight for potential connections to unvisited nodes", "synergy_factor_weight", "=", "0.2", "# Weight for synergy towards unvisited nodes and destination", "decay_factor", "=", "0.1", "# Decay factor for longer direct distances", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "normalized_distance", "=", "direct_distance", "**", "decay_factor", "connection_potential", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "+", "1e-6", ")", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "synergy_factor", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "+", "1e-6", ")", "for", "other_node", "in", "unvisited_nodes", ")", "+", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1e-6", ")", ")", "score", "=", "-", "(", "normalized_distance", "*", "direct_distance_weight", ")", "+", "(", "connection_potential", "*", "connection_potential_weight", ")", "+", "(", "synergy_factor", "*", "synergy_factor_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 30.509381410280767}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate the heuristic value for each unvisited node", "heuristic_values", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "avg_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "heuristic_values", "[", "node", "]", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "avg_distance_to_remaining", "# Select the node with the minimum heuristic value", "next_node", "=", "min", "(", "heuristic_values", ",", "key", "=", "heuristic_values", ".", "get", ")", "return", "next_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "visit_frequency", "=", "{", "node", ":", "0", "for", "node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "}", "# Tracks how many times each node has been visited", "if", "unvisited_nodes", ":", "immediate_weight", "=", "0.4", "# Weight for immediate travel cost", "popularity_weight", "=", "0.3", "# Influence of node visit popularity", "future_potential_weight", "=", "0.3", "# Weight for future gains", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_average_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "# Average distance to remaining nodes", "# Popularity-based penalty for the frequency of visits", "popularity_penalty", "=", "visit_frequency", "[", "node", "]", "*", "0.2", "# Higher frequency means higher penalty", "score", "=", "(", "-", "immediate_weight", "*", "direct_distance", ")", "-", "popularity_penalty", "+", "(", "future_potential_weight", "*", "future_average_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "visit_frequency", "[", "next_node", "]", "+=", "1", "# Update visit frequency for the selected next node", "return", "next_node"], "code_perf": 6.355321178255981}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "similarity_factor", "=", "0.5", "# Similarity modifier", "num_visited_nodes", "=", "len", "(", "distance_matrix", ")", "-", "len", "(", "unvisited_nodes", ")", "exploration_factor", "=", "1", "-", "(", "num_visited_nodes", "/", "(", "len", "(", "distance_matrix", ")", "-", "1", ")", ")", "# Inverse relationship", "best_next_node", "=", "None", "best_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate total cost using a balancing equation", "total_cost", "=", "direct_distance", "*", "(", "1", "+", "similarity_factor", "*", "exploration_factor", ")", "+", "distance_to_destination", "*", "(", "1", "-", "exploration_factor", ")", "if", "total_cost", "<", "best_cost", ":", "best_cost", "=", "total_cost", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 7.580061584981928}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "total_cost", "=", "distance_to_node", "+", "(", "0.5", "*", "distance_to_destination", ")", "# Penalty factor", "if", "total_cost", "<", "min_cost", ":", "min_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_connections", "=", "{", "node", ":", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connection_score", "=", "total_connections", "[", "node", "]", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "heuristic_distance", "=", "(", "direct_distance", "*", "0.7", ")", "+", "(", "connection_score", "*", "0.3", ")", "score", "=", "heuristic_distance", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.033111229051515}
{"code_tokens": ["import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate the clustering density based on proximity to unvisited nodes", "density_score", "=", "0", "if", "unvisited_nodes", ":", "distances_to_unvisited", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "density_score", "=", "sum", "(", "distances_to_unvisited", ")", "/", "len", "(", "distances_to_unvisited", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Improved scoring: penalizes distance and rewards density", "score", "=", "distance_to_next", "+", "distance_to_destination", "-", "density_score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Penalty for clustering: the closer the unvisited nodes are to each other, the higher the penalty", "clustering_penalty", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node1", "]", "[", "node2", "]", "+", "1", ")", "for", "node1", "in", "unvisited_nodes", "for", "node2", "in", "unvisited_nodes", "if", "node1", "!=", "node2", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate centrality as the number of unvisited neighbors", "centrality_score", "=", "len", "(", "[", "neighbor", "for", "neighbor", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<", "5", "]", ")", "# Assess average distance to destination", "total_distance", "=", "sum", "(", "distance_matrix", "[", "other_node", "]", "[", "destination_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Combined score using weights to incorporate centrality, distance, and clustering penalty", "score", "=", "direct_distance", "*", "0.5", "+", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "*", "0.3", "+", "centrality_score", "*", "0.1", "+", "clustering_penalty", "*", "0.1", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.4257563991146025}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for harmonic distance", "connectivity_weight", "=", "0.3", "# Weight for connectivity", "steepness_factor", "=", "0.2", "# Weight for steepness adjustment", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Connectivity score based on harmonic mean", "connectivity_score", "=", "len", "(", "unvisited_nodes", ")", "/", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "+", "1e-9", ")", "for", "next", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Steepness adjustment based on distance difference to the destination", "steepness_adjustment", "=", "abs", "(", "direct_distance", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "/", "(", "direct_distance", "+", "1e-9", ")", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "-", "steepness_factor", "*", "steepness_adjustment", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 20.61661691491117}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm incorporates not only distance and penalties but also a heuristic ", "# that considers the potential future cost to complete the tour from the next node.}", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Compute the estimated future cost to complete the tour.", "future_cost", "=", "distance_to_destination", "+", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "# Introducing a weighting factor for both distances", "proximity_factor", "=", "1", "/", "(", "distance_to_next", "+", "1", ")", "score", "=", "(", "proximity_factor", "*", "(", "1", "/", "(", "future_cost", "+", "1", ")", ")", ")", "-", "(", "distance_to_next", "*", "0.3", ")", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.485814210108867}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate the connectivity score (number of connections to other unvisited nodes)", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "# Calculate average distance to remaining unvisited nodes", "avg_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "# Introduce a backtracking penalty based on distance from the destination", "backtracking_penalty", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "(", "1", "+", "distance_to_next", ")", "# Score calculation combining distance, connectivity, and penalties", "score", "=", "(", "connectivity_score", "*", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "*", "(", "avg_distance_to_remaining", "-", "backtracking_penalty", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 20.130506198725378}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_distance_so_far", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Using a weighted sum of direct distance and total distance so far", "score", "=", "(", "direct_distance", "+", "0.5", "*", "total_distance_so_far", ")", "/", "distance_to_destination", "if", "distance_to_destination", ">", "0", "else", "float", "(", "'inf'", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 12.987830113598308}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Historical distances to penalize backtracking", "historical_penalty", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "visited_node", "]", "for", "visited_node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate the density of nodes in the local area", "local_density", "=", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "neighbor", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<", "5", ")", "# Total distance to destination and normalized score", "total_distance", "=", "sum", "(", "distance_matrix", "[", "other_node", "]", "[", "destination_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Combined score incorporating historical penalty and local density", "score", "=", "(", "direct_distance", "*", "0.4", "+", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "*", "0.3", "+", "local_density", "*", "0.2", "+", "historical_penalty", "*", "0.1", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.501505956627025}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "dynamic_risk_factor", "=", "0.5", "# Higher factor for significant distance penalties", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "unvisited_clustering_weight", "=", "0.4", "# Weight for clustering unvisited nodes", "destination_proximity_weight", "=", "0.2", "# Weight for closeness to destination", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance_to_destination", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate clustering potential considering distances to unvisited nodes", "clustering_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "+", "1e-5", ")", "for", "next", "in", "unvisited_nodes", ")", "# Avoid division by zero", "# Estimate score for proximity to the final destination", "destination_proximity_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score with dynamic risk penalty", "score", "=", "(", "-", "direct_distance_weight", "*", "direct_distance", "+", "unvisited_clustering_weight", "*", "clustering_score", "-", "dynamic_risk_factor", "*", "(", "direct_distance", "-", "avg_distance_to_destination", ")", "+", "destination_proximity_weight", "*", "destination_proximity_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 27.342423621463173}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.6", "# Weight for proximity to destination", "clustering_weight", "=", "0.2", "# Weight for clustering savings", "cumulative_distance_weight", "=", "0.2", "# Weight for cumulative distance traveled", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "prev_node", "]", "for", "prev_node", "in", "unvisited_nodes", "if", "prev_node", "!=", "current_node", ")", "average_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "(", "proximity_weight", "*", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1e-5", ")", ")", "+", "# Exponential decay for distance", "(", "average_remaining_distance", "*", "clustering_weight", ")", "-", "(", "(", "cumulative_distance", "**", "2", ")", "*", "cumulative_distance_weight", ")", "-", "direct_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.398965865659608}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "base_distance_weight", "=", "0.4", "# Base weight for direct distance", "pathway_weight", "=", "0.4", "# Weight for promising future paths", "alignment_weight", "=", "0.2", "# Weight for alignment towards destination", "access_factor", "=", "0.3", "# Factor for assessing the access potential of a node", "if", "unvisited_nodes", "and", "len", "(", "unvisited_nodes", ")", ">", "0", ":", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "destination_alignment_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate a new score with dynamic adjustments", "score", "=", "(", "-", "base_distance_weight", "*", "direct_distance", "+", "pathway_weight", "*", "average_distance_to_unvisited", "+", "alignment_weight", "*", "destination_alignment_score", "-", "access_factor", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "len", "(", "unvisited_nodes", "&", "{", "node", "}", ")", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.696674800295234}
{"code_tokens": ["import", "heapq", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_heap", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "total_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heapq", ".", "heappush", "(", "min_heap", ",", "(", "total_distance", ",", "node", ")", ")", "next_node", "=", "None", "min_total_distance", "=", "float", "(", "'inf'", ")", "while", "min_heap", ":", "distance", ",", "node", "=", "heapq", ".", "heappop", "(", "min_heap", ")", "remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "for", "unvisited", "in", "unvisited_nodes", "if", "unvisited", "!=", "node", ")", "total_cost", "=", "distance", "+", "remaining_distance", "if", "total_cost", "<", "min_total_distance", ":", "min_total_distance", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 21.51502557645197}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance minimization", "destination_weight", "=", "0.4", "# Weight for attractiveness to destination", "density_penalty_weight", "=", "0.2", "# Encouragement for exploring dense clusters of unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate node density score based on proximity to other unvisited nodes", "density_penalty", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "!=", "0", "else", "float", "(", "'inf'", ")", ")", "for", "other_node", "in", "unvisited_nodes", ")", "score", "=", "(", "-", "direct_distance", "*", "direct_distance_weight", ")", "+", "(", "total_distance_to_destination", "*", "destination_weight", ")", "-", "(", "density_penalty", "*", "density_penalty_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 12.410494437963301}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate the average distance to all unvisited nodes", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Calculate the maximum distance to any unvisited node to use as a penalty", "max_distance_penalty", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Define weight factors", "weight_factor_average", "=", "0.2", "# Influence of average distance", "weight_factor_penalty", "=", "0.5", "# Influence of penalty for distance", "# Calculate scores for each unvisited node combining distance, average distance, and penalty", "node_scores", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "weight_factor_average", "*", "average_distance", "-", "weight_factor_penalty", "*", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "/", "max_distance_penalty", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the node with the minimum score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.4929677555855285}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "time_saved_weight", "=", "0.4", "# Weight for estimated time saved", "density_weight", "=", "0.2", "# Weight for connectivity density", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate estimated time saved by considering shorter routes from the current node", "time_saved", "=", "sum", "(", "max", "(", "0", ",", "distance_matrix", "[", "node", "]", "[", "next", "]", "-", "direct_distance", ")", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Density score based on the number of reachable nodes", "density_score", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Penalty for density", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "time_saved_weight", "*", "time_saved", "+", "density_weight", "*", "density_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.438423742765935}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "connectivity_weight", "=", "0.3", "# Weight for connectivity to unvisited nodes", "potential_weight", "=", "0.2", "# Weight for future potential based on remaining nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average connectivity", "# Potential score based on the distance to the destination from unvisited nodes", "potential_score", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "dest", "]", "for", "dest", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "density_factor", "=", "(", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "# Adjust score based on density of unvisited nodes", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "potential_weight", "*", "potential_score", "*", "density_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.349781351250228}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "travel_cost_weight", "=", "0.4", "# Weight for historical travel costs", "interconnectedness_weight", "=", "0.2", "# Weight for node interconnectedness", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "travel_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# assuming direct cost in distance_matrix", "average_connections", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "score", "=", "(", "-", "direct_distance", "*", "direct_distance_weight", ")", "+", "(", "travel_cost", "*", "travel_cost_weight", ")", "+", "(", "average_connections", "*", "interconnectedness_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 14.488654484787507}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance to the next node", "visited_weight", "=", "0.3", "# Weight for average distance to visited nodes", "crowding_weight", "=", "0.2", "# Weight for crowding effects", "visited_nodes", "=", "set", "(", "range", "(", "len", "(", "distance_matrix", ")", ")", ")", "-", "set", "(", "unvisited_nodes", ")", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_visited", "=", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "visited_node", "]", "for", "visited_node", "in", "visited_nodes", ")", "/", "(", "len", "(", "visited_nodes", ")", "or", "1", ")", ")", "crowding_effect", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "(", "direct_weight", "*", "direct_distance", ")", "+", "(", "crowding_effect", "*", "crowding_weight", ")", "-", "(", "average_distance_to_visited", "*", "visited_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.9744221702289995}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Calculate the total distance from each unvisited node to the destination node", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_destination", "=", "total_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Avoid division by zero", "if", "distance_to_destination", ">", "0", ":", "# Combined metric: distance ratio adjusted by average distance to destination", "score", "=", "(", "distance_to_node", "/", "distance_to_destination", ")", "+", "(", "average_distance_to_destination", "/", "distance_to_destination", ")", "# Select the node with the minimum score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.571847164232607}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "exploration_factor", "=", "1", "/", "(", "1", "+", "distance_to_destination", ")", "# Encourages exploring nodes close to the destination", "penalty_factor", "=", "(", "distance_to_node", "**", "2", ")", "/", "(", "1", "+", "distance_to_destination", ")", "# Penalizes long distances to nodes", "scores", "[", "node", "]", "=", "(", "distance_to_node", "+", "penalty_factor", ")", "*", "exploration_factor", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.699237951584123}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate average distance to unvisited nodes", "avg_distance", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "# Calculate distance to the nearest unvisited node", "nearest_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Calculate distance to destination node", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Score nodes based on nearest distance, average distance, and distance to destination", "node_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "score", "=", "nearest_distance", "+", "(", "avg_distance", "*", "0.5", ")", "+", "(", "distance_to_destination", "*", "0.3", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", ")", "node_scores", "[", "node", "]", "=", "score", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 26.04202206317254}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "urgency_factor_weight", "=", "0.5", "# Weight for urgency influence", "urgency_threshold", "=", "15", "# Threshold to assess urgency based on distances", "urgency_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "urgency_score", "=", "0", "for", "other_node", "in", "unvisited_nodes", ":", "if", "node", "!=", "other_node", ":", "pair_distance", "=", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "urgency_score", "+=", "(", "urgency_threshold", "-", "pair_distance", ")", "if", "pair_distance", "<", "urgency_threshold", "else", "0", "urgency_scores", "[", "node", "]", "=", "urgency_score", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "urgency_effect", "=", "urgency_scores", "[", "node", "]", "*", "urgency_factor_weight", "score", "=", "direct_distance", "-", "urgency_effect", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 16.555495628879836}
{"code_tokens": ["# {The new algorithm integrates a weighted scoring mechanism that combines distance, connectivity, and heuristic cost to prioritize unvisited nodes for exploration, balancing immediate travel efficiency with potential future benefits.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate scores based on a combination of distance, connectivity, and a heuristic cost towards destination", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "heuristic_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "scores", "[", "node", "]", "=", "distance_score", "+", "connectivity_score", "+", "heuristic_cost", "# Lower score is better", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate the total distance to all unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Define a decay factor to decrease the influence of distant nodes", "decay_factor", "=", "0.3", "# Adjust based on how much to consider distance", "# Score calculation for each unvisited node", "scores", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "(", "1", "-", "decay_factor", ")", "+", "(", "total_distance", "/", "len", "(", "unvisited_nodes", ")", ")", "*", "decay_factor", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "savings_weight", "=", "0.5", "# Weight for travel time savings", "cumulative_distance_weight", "=", "0.3", "# Weight for cumulative distance", "frequency_weight", "=", "0.2", "# Weight for historical frequency", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "savings", "=", "total_distance_to_destination", "-", "direct_distance", "# Savings from direct travel", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "prev_node", "]", "[", "node", "]", "for", "prev_node", "in", "unvisited_nodes", ")", "# Cumulative distance from unvisited nodes", "frequency", "=", "sum", "(", "1", "for", "prev_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "prev_node", "]", "[", "node", "]", "<", "float", "(", "'inf'", ")", ")", "# Historical frequency of travel", "score", "=", "(", "savings", "*", "savings_weight", ")", "-", "(", "cumulative_distance", "*", "cumulative_distance_weight", ")", "+", "(", "frequency", "*", "frequency_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 17.772091960451117}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.6", "# Increase importance of distance", "historical_weight", "=", "0.4", "# New weight for historical cost", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Historical cost based on the average distance to recently visited nodes (exemplified as a simple case)", "historical_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "prev", "]", "for", "prev", "in", "unvisited_nodes", "if", "prev", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "# Combine scores: heuristic focused on minimizing direct distance and historical cost", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "historical_weight", "*", "(", "1", "/", "(", "1", "+", "historical_cost", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.292630627028169}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "scores", "=", "{", "}", "base_threshold", "=", "10", "# Base maximum distance to consider for next node", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate score using a dynamic threshold based on remaining unvisited nodes", "heuristic_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "score", "=", "distance_to_node", "+", "(", "heuristic_cost", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "# Dynamic scoring", "# Only consider nodes within base threshold for initial filtering", "if", "distance_to_node", "<", "base_threshold", ":", "scores", "[", "node", "]", "=", "score", "if", "not", "scores", ":", "# Fallback to closest unvisited node", "scores", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_cost", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "score", "=", "immediate_distance", "+", "future_cost", "*", "0.5", "+", "random", ".", "uniform", "(", "-", "0.5", ",", "0.5", ")", "# Adding randomness", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 12.545630680974632}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "connectivity_weight", "=", "0.6", "# Higher weight for connectivity influence", "distance_weight", "=", "0.4", "# Weight for direct distance cost", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "decay_factor", "=", "0.1", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "# Adjusted penalty based on the number of unvisited nodes", "connectivity_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "score", "=", "connectivity_weight", "*", "connectivity_score", "-", "(", "distance_weight", "*", "(", "direct_distance", "+", "decay_factor", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 29.583950098361058}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.6", "# Higher weight for direct distance", "connectivity_weight", "=", "0.2", "# Lower weight for connectivity", "heuristic_weight", "=", "0.2", "# Weight for heuristic distance", "# Calculate average distance to the destination to establish a baseline", "average_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Calculate density factor based on unvisited nodes proximity", "density_factor", "=", "sum", "(", "1", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<", "average_distance_to_destination", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average connectivity", "heuristic_score", "=", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average distance to destination", "# Decay function to reduce impact of distant nodes", "decay_factor", "=", "1", "/", "(", "1", "+", "direct_distance", ")", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "heuristic_weight", "*", "heuristic_score", "+", "density_factor", "*", "decay_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.757533122971525}
{"code_tokens": ["import", "random", "import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "average_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "num_unvisited", "adaptability_factor", "=", "1", "/", "(", "num_unvisited", "+", "1", ")", "# Inverse of the number of unvisited nodes", "gaussian_noise", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "0.1", ")", "# Gaussian noise for perturbation", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_adjustment", "=", "(", "average_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "*", "adaptability_factor", "score", "=", "direct_distance", "+", "distance_adjustment", "+", "gaussian_noise", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.822924770575606}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "min_distance_to_unvisited", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "score", "=", "(", "min_distance_to_unvisited", "*", "1.5", ")", "-", "(", "distance_to_next", ")", "+", "(", "1", "/", "(", "total_distance_to_unvisited", "+", "1", ")", ")", "# Encourages visiting closer nodes", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate a score for each unvisited node based on distance and average proximity to other unvisited nodes", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_others", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "scores", "[", "node", "]", "=", "distance_to_node", "+", "average_distance_to_others", "# Lower score is better", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 8.4323878079629}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate the average distance to all unvisited nodes", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Define a weight factor to prioritize distances relative to the average", "weight_factor", "=", "0.5", "# Adjust based on the importance of proximity vs. average distance", "# Score calculation for each unvisited node", "scores", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "(", "1", "-", "weight_factor", ")", "+", "avg_distance", "*", "weight_factor", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate average distance to unvisited nodes", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Calculate diversity scores", "diversity_scores", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", "}", "# Calculate clustering factor based on proximity to other unvisited nodes", "clustering_scores", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "for", "node", "in", "unvisited_nodes", "}", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "diversity_penalty", "=", "1", "/", "(", "diversity_scores", "[", "node", "]", "+", "1", ")", "# Reduce score for diverse connections", "clustering_factor", "=", "1", "/", "(", "clustering_scores", "[", "node", "]", "+", "1", ")", "# Favor nodes that are clustered closely with others", "score", "=", "(", "distance", "+", "(", "avg_distance", "*", "0.5", ")", ")", "*", "diversity_penalty", "*", "clustering_factor", "*", "random", ".", "uniform", "(", "0.9", ",", "1.1", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.851333339843542}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Weight factors", "distance_weight", "=", "0.7", "nearest_neighbor_weight", "=", "0.2", "backtracking_penalty", "=", "0.3", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "nearest_neighbor_distance", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "backtrack_score", "=", "0", "if", "node", "==", "destination_node", "else", "backtracking_penalty", "# Weighted scoring combining factors", "score", "=", "(", "distance_weight", "*", "direct_distance", "+", "nearest_neighbor_weight", "*", "nearest_neighbor_distance", "+", "backtrack_score", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.2275608713313915}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_nodes", "=", "len", "(", "unvisited_nodes", ")", "exploration_penalty", "=", "(", "remaining_nodes", "**", "2", ")", "*", "0.05", "# Increased penalty for more unvisited nodes", "reward", "=", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "0.1", "# Reward for proximity to destination", "weighted_score", "=", "(", "1.5", "*", "direct_distance", ")", "+", "exploration_penalty", "+", "reward", "# Combine metrics", "if", "weighted_score", ">", "max_score", ":", "max_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 36.150644428250445}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to destination", "centrality_weight", "=", "0.6", "# Weight for centrality among unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Calculate geometric center of unvisited nodes", "centroid_x", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "centroid_y", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "current_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_centroid", "=", "(", "(", "centroid_x", "-", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "**", "2", "+", "(", "centroid_y", "-", "distance_matrix", "[", "node", "]", "[", "current_node", "]", ")", "**", "2", ")", "**", "0.5", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", ")", "+", "(", "centrality_weight", "*", "distance_to_centroid", ")", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.677994462706118}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "next_node", "=", "None", "lowest_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "# Calculate the cost of visiting the node", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Estimate the average distance to return to destination node after visiting 'node'", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "total_cost", "=", "distance_to_node", "+", "avg_distance_to_destination", "if", "total_cost", "<", "lowest_cost", ":", "lowest_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.4323878079629}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_return_distance", "=", "distance_matrix", "[", "destination_node", "]", "[", "current_node", "]", "return_penalty_weight", "=", "0.5", "# Weight for penalizing high return distance", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "estimated_return_cost", "=", "return_penalty_weight", "*", "total_return_distance", "score", "=", "direct_distance", "+", "estimated_return_cost", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity to unvisited nodes", "attractiveness_weight", "=", "0.3", "# Weight for attractiveness to destination", "exploration_weight", "=", "0.2", "# Weight for exploration based on unvisited nodes count", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Score based on direct proximity, bonusing for exploring unvisited nodes", "score", "=", "(", "(", "1", "/", "(", "direct_distance", "+", "1", ")", ")", "*", "proximity_weight", ")", "+", "(", "(", "1", "/", "(", "distance_to_destination", "+", "1", ")", ")", "*", "attractiveness_weight", ")", "+", "(", "(", "num_unvisited", "/", "(", "num_unvisited", "+", "1", ")", ")", "*", "exploration_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.355769634210006}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "cluster_weight", "=", "0.5", "visit_frequency_weight", "=", "0.5", "min_connections", "=", "2", "# threshold for considering a node well-connected", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Cluster density (number of connections to other unvisited nodes)", "connections", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "cluster_density_score", "=", "connections", "/", "max", "(", "min_connections", ",", "len", "(", "unvisited_nodes", ")", ")", "# Frequency of visits (simulate as a simple count here, to be tracked externally)", "visit_frequency_score", "=", "1", "# Make adjustments based on an external count of visits", "weighted_score", "=", "(", "0.6", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "0.2", "*", "cluster_density_score", "+", "0.2", "*", "visit_frequency_score", ")", "score", "=", "direct_distance", "+", "weighted_score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.4257563991146025}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate the density of unvisited nodes around each unvisited node", "density_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "density_scores", "[", "node", "]", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Inverse distance contribution to the score", "inverse_distance_score", "=", "1", "/", "(", "direct_distance", "+", "1e-6", ")", "# Adding a small constant to avoid division by zero", "# Combined score as a function of distance and local density", "score", "=", "direct_distance", "-", "inverse_distance_score", "*", "density_scores", "[", "node", "]", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.417270907690677}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.4", "# Weight for connectivity to unvisited nodes", "edge_penalty_weight", "=", "0.2", "# Weight for the number of edges connected", "# Function to calculate edge connectivity score based on unvisited nodes", "def", "calculate_edge_score", "(", "node", ")", ":", "edge_count", "=", "0", "for", "other", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", ":", "if", "other", "in", "unvisited_nodes", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", ">", "0", ":", "edge_count", "+=", "1", "return", "edge_count", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "edge_score", "=", "calculate_edge_score", "(", "node", ")", "# Combined scoring mechanism with adaptive penalties for longer paths", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "edge_score", "-", "edge_penalty_weight", "*", "max", "(", "0", ",", "direct_distance", "-", "edge_score", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "# Adjust penalty based on proximity to previously selected nodes", "proximity_penalty", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1", ")", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Diversity score based on distance to other unvisited nodes", "diversity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "# Assess the direct distance to the destination", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score using weights to prioritize farther nodes and reduce clustering effect", "score", "=", "(", "-", "direct_distance", "*", "0.4", ")", "+", "(", "diversity_score", "*", "0.4", ")", "-", "(", "proximity_penalty", "*", "0.2", ")", "-", "(", "distance_to_destination", "*", "0.1", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 11.732385265220568}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate a score for each unvisited node based on distance components and centrality", "scores", "=", "{", "}", "centrality_weight", "=", "1.0", "distance_to_destination_weight", "=", "1.5", "distance_from_current_weight", "=", "1.0", "for", "node", "in", "unvisited_nodes", ":", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "distance_from_current", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "centrality_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "+", "1e-6", ")", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "# Weighted score calculation", "total_score", "=", "(", "distance_to_destination_weight", "*", "distance_to_destination", ")", "+", "(", "distance_from_current_weight", "*", "distance_from_current", ")", "-", "(", "centrality_weight", "*", "centrality_score", ")", "scores", "[", "node", "]", "=", "total_score", "# Lower score is better", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 29.253206020802814}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_density_weight", "=", "0.4", "# Weight for connectivity to unvisited nodes", "exploration_bonus_weight", "=", "0.2", "# Weight for nodes on path towards destination", "# Establish the distance towards the destination", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Exploration bonus for nodes that bring the tour closer to the destination", "exploration_bonus", "=", "max", "(", "0", ",", "distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "# Combined score", "score", "=", "-", "direct_distance_weight", "*", "direct_distance", "+", "connectivity_density_weight", "*", "connectivity_score", "+", "exploration_bonus_weight", "*", "exploration_bonus", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.672733099544949}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "distances", "=", "[", "(", "node", ",", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "for", "node", "in", "unvisited_nodes", "]", "# Calculate probabilities based on inverted distances", "total_probability", "=", "sum", "(", "1", "/", "distance", "for", "node", ",", "distance", "in", "distances", ")", "probabilities", "=", "[", "(", "node", ",", "(", "1", "/", "distance", ")", "/", "total_probability", ")", "for", "node", ",", "distance", "in", "distances", "]", "# Choose the next node based on weighted random selection", "random_choice", "=", "random", ".", "random", "(", ")", "cumulative_probability", "=", "0.0", "for", "node", ",", "probability", "in", "probabilities", ":", "cumulative_probability", "+=", "probability", "if", "cumulative_probability", ">=", "random_choice", ":", "return", "node", "return", "unvisited_nodes", "[", "0", "]", "# Fallback to first unvisited node if no selection is made"], "code_perf": 19.094920292439113}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "penalty_factor", "=", "total_distance_to_unvisited", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "+", "penalty_factor", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "connectivity_weight", "=", "0.7", "# Weight for maximizing connectivity", "distance_weight", "=", "0.3", "# Weight for direct distance cost", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "reciprocal_distance", "=", "1", "/", "(", "direct_distance", "+", "1e-6", ")", "# Avoid division by zero", "max_unvisited_distance", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "score", "=", "(", "connectivity_weight", "*", "reciprocal_distance", ")", "-", "(", "distance_weight", "*", "direct_distance", ")", "+", "(", "0.2", "*", "max_unvisited_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.890711822682379}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "node_selection_count", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "neighbor_count", "=", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other", "]", "<=", "5", ")", "# Introducing a random exploration factor", "exploration_factor", "=", "random", ".", "uniform", "(", "0.1", ",", "1.0", ")", "*", "(", "1", "/", "(", "node_selection_count", "[", "node", "]", "+", "1", ")", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "score", "=", "(", "-", "distance_to_node", "+", "0.3", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "0.2", "*", "neighbor_count", "+", "exploration_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "# Increase selection count for the chosen node", "node_selection_count", "[", "node", "]", "+=", "1", "return", "next_node"], "code_perf": 12.087042205762707}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "past_choices", "=", "{", "}", "distance_weight", "=", "0.5", "connectivity_weight", "=", "0.3", "randomness_weight", "=", "0.2", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Score combining distance, connectivity, and randomness based on prior selections", "adjustment", "=", "past_choices", ".", "get", "(", "node", ",", "1", ")", "# Default to 1 if not yet chosen", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "randomness_weight", "*", "random", ".", "uniform", "(", "0.8", ",", "1.2", ")", "*", "adjustment", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "# Update past choices to reinforce or discourage future selections", "past_choices", "[", "next_node", "]", "=", "past_choices", ".", "get", "(", "next_node", ",", "1", ")", "*", "0.9", "# Diminish influence for next selection", "return", "next_node"], "code_perf": 7.035223850384397}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "weighting_factor", "=", "0.6", "# Weight for accounting total distance", "normalization_factor", "=", "0.4", "# Weight for normalizing proximity influence", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "# Calculate a normalized distance summing distances from the current node to all remaining unvisited nodes", "normalized_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "normalized_distance", "=", "normalized_distance_sum", "/", "(", "unvisited_count", "or", "1", ")", "# Calculate an overall score incorporating all components", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", ")", "*", "weighting_factor", "+", "(", "normalized_distance", "*", "normalization_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.35828255629592}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_min_distance", "=", "-", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "min_distance_to_visited", "=", "float", "(", "'inf'", ")", "for", "visited_node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", ":", "if", "visited_node", "!=", "current_node", "and", "visited_node", "not", "in", "unvisited_nodes", ":", "min_distance_to_visited", "=", "min", "(", "min_distance_to_visited", ",", "distance_matrix", "[", "node", "]", "[", "visited_node", "]", ")", "if", "min_distance_to_visited", ">", "max_min_distance", ":", "max_min_distance", "=", "min_distance_to_visited", "next_node", "=", "node", "return", "next_node"], "code_perf": 23.64492312854192}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "exploration_weight", "=", "0.5", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate proximity score based on direct distance", "proximity_score", "=", "1", "/", "(", "1", "+", "direct_distance", ")", "# Penalty for being less connected (based on the degree of the node)", "connectivity_score", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "connectivity_penalty", "=", "(", "1", "/", "(", "connectivity_score", "+", "1", ")", ")", "if", "connectivity_score", ">", "0", "else", "0", "# Calculate an average direct distance to the destination from unvisited nodes", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "num_unvisited", "# New scoring mechanism incorporating proximity, connectivity and exploration weight", "score", "=", "(", "1", "-", "exploration_weight", ")", "*", "direct_distance", "+", "(", "exploration_weight", "*", "(", "avg_distance_to_destination", "-", "direct_distance", ")", ")", "+", "connectivity_penalty", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 25.851354390236374}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "savings_weight", "=", "0.3", "# Weight for potential savings", "complexity_weight", "=", "0.3", "# Weight for travel complexity", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "complexity_factor", "=", "(", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "1", "savings", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "-", "direct_distance", "avg_distance_to_remaining", "=", "savings", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "cost", "=", "(", "weighted_distance", ":=", "(", "direct_distance", "*", "distance_weight", ")", "+", "(", "total_distance_to_destination", "*", "distance_weight", ")", "+", "(", "avg_distance_to_remaining", "*", "savings_weight", ")", "+", "(", "complexity_factor", "*", "direct_distance", "*", "complexity_weight", ")", ")", "if", "cost", "<", "min_cost", ":", "min_cost", "=", "cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.437843667925288}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "average_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "centrality_factor", "=", "1.0", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Factor to emphasize central nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Closer to destination is better", "centrality_score", "=", "centrality_factor", "*", "(", "average_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "score", "=", "direct_distance", "+", "proximity_score", "-", "centrality_score", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.146032265880553}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "max_distance_to_unvisited", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "proximity_weight", "=", "0.6", "# Weight applied to encourage nodes nearer to the destination", "penalty_weight", "=", "0.4", "# Weight applied to discourage far nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "proximity_weight", "*", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "penalty_score", "=", "penalty_weight", "*", "max_distance_to_unvisited", "score", "=", "-", "(", "direct_distance", "+", "proximity_score", "+", "penalty_score", ")", "# Minimize this score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.602975755903087}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "if", "not", "unvisited_nodes", ":", "return", "None", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Total distance to finish", "average_remaining_distance", "=", "total_remaining_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "# Average distance to remaining nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "locality_factor", "=", "(", "1", "/", "(", "direct_distance", "+", "1e-5", ")", ")", "# Reward for being closer", "weighted_score", "=", "direct_distance", "+", "average_remaining_distance", "-", "locality_factor", "# Combine metrics", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# This algorithm introduces a weighted scoring system that combines both the proximity to current and remaining nodes,", "# while also considering the remaining unvisited nodes' distances to each other.", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "inter_distance_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "score", "=", "(", "avg_distance_to_unvisited", "-", "distance_to_next", ")", "+", "(", "1", "/", "(", "inter_distance_score", "+", "1", ")", ")", "# Adds the influence of inter-distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.449252949833896}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "clusters", "=", "{", "}", "# Create clusters based on proximity", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "not", "in", "clusters", ":", "clusters", "[", "distance", "]", "=", "[", "]", "clusters", "[", "distance", "]", ".", "append", "(", "node", ")", "# Find the closest cluster", "closest_distance", "=", "min", "(", "clusters", ".", "keys", "(", ")", ")", "closest_cluster", "=", "clusters", "[", "closest_distance", "]", "# Select the nearest node in the closest cluster", "next_node", "=", "min", "(", "closest_cluster", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "candidates", "=", "list", "(", "unvisited_nodes", ")", "scored_candidates", "=", "[", "]", "for", "node", "in", "candidates", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "0.3", "# Weighting the distance to destination", "remaining_unvisited_penalty", "=", "len", "(", "unvisited_nodes", ")", "**", "1.5", "# Exponential penalty for remaining unvisited nodes", "score", "=", "direct_distance", "+", "proximity_to_destination", "+", "remaining_unvisited_penalty", "scored_candidates", ".", "append", "(", "(", "node", ",", "score", ")", ")", "scored_candidates", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "return", "scored_candidates", "[", "0", "]", "[", "0", "]"], "code_perf": 7.244455041163539}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.3", "# Weight for connectivity to unvisited nodes", "decay_weight", "=", "0.2", "# Weight for decay of distance to already visited nodes", "similarity_weight", "=", "0.1", "# Weight for similarity based on clustering", "total_nodes", "=", "len", "(", "distance_matrix", ")", "visited_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "i", "]", "for", "i", "in", "range", "(", "total_nodes", ")", "if", "i", "not", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Similarity score based on distance to the other unvisited nodes", "similarity_score", "=", "sum", "(", "1", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "next", "]", ")", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Decay function to down-weight the distance based on visited path", "decay_score", "=", "visited_distance", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "# Calculate combined score", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "-", "decay_weight", "*", "decay_score", "+", "similarity_weight", "*", "similarity_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.352049902469115}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to destination", "clustering_weight", "=", "0.3", "# Weight for clustering savings", "cumulative_distance_weight", "=", "0.2", "# Weight for cumulative distance traveled", "remaining_nodes", "=", "len", "(", "unvisited_nodes", ")", "# An additional decay factor to weights based on remaining nodes", "decay_factor", "=", "1.0", "/", "(", "remaining_nodes", "or", "1", ")", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "prev_node", "]", "for", "prev_node", "in", "unvisited_nodes", "if", "prev_node", "!=", "current_node", ")", "max_direct_distance", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "decay_factor", "+", "cluster_average_distance", "*", "clustering_weight", "-", "(", "cumulative_distance", "*", "cumulative_distance_weight", ")", "-", "(", "direct_distance", "/", "max_direct_distance", "if", "max_direct_distance", "else", "0", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.61725099940036}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "decay_factor", "=", "0.9", "# Factor to reduce the influence of distant nodes", "if", "unvisited_nodes", ":", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "avg_position", "=", "sum", "(", "node", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_to_avg", "=", "abs", "(", "node", "-", "avg_position", ")", "scoring_penalty", "=", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "*", "decay_factor", "# Combined scoring mechanism", "score", "=", "-", "direct_distance", "+", "scoring_penalty", "-", "proximity_to_avg", "*", "0.2", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 17.864305425083952}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "return_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "total_cost", "=", "distance", "+", "return_cost", "if", "total_cost", "<", "min_cost", ":", "min_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for proximity to the destination", "cluster_weight", "=", "0.3", "# Weight for clustering benefits", "detour_penalty_weight", "=", "0.3", "# Weight for penalizing long detours", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate the cluster effect based on the proximity of unvisited nodes", "cluster_effect", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Calculate the score with a focus on minimizing distance while rewarding clustering", "score", "=", "(", "direct_distance", "*", "distance_weight", ")", "+", "(", "distance_to_destination", "*", "(", "1", "-", "distance_weight", ")", ")", "+", "(", "cluster_effect", "*", "cluster_weight", ")", "# Adding penalty for long detours (higher detour distance leads to higher score)", "detour_penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "(", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "/", "2", ")", ")", "*", "detour_penalty_weight", "score", "+=", "detour_penalty", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.959257799597408}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Emphasis on direct distance", "cluster_density_weight", "=", "0.4", "# Weight for density of unvisited nodes within radius", "future_distance_weight", "=", "0.2", "# Weight for distance towards destination", "radius", "=", "2", "# Define a radius for density calculation", "def", "calculate_density_score", "(", "node", ")", ":", "density_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<=", "radius", ":", "density_score", "+=", "1", "return", "density_score", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "density_score", "=", "calculate_density_score", "(", "node", ")", "future_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined scoring mechanism", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "cluster_density_weight", "*", "density_score", "-", "future_distance_weight", "*", "future_distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "weighted_average_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "weight_factor", "=", "1", "/", "(", "distance_to_next", "+", "1", ")", "# Avoid division by zero", "score", "=", "(", "weight_factor", "*", "weighted_average_distance", ")", "-", "distance_to_next", "# Balance immediate and average distances", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.351656602584806}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "penalty_factor", "=", "1.2", "# Penalty for longer paths", "boosting_factor", "=", "1.8", "# Boost for nodes closer to destination", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "penalty_factor", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "boosting_factor", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "score", "=", "distance_to_next", "+", "distance_to_destination", "+", "(", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.440933038664742}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "historical_frequency", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "decay_factor", "=", "0.8", "# Adjusted decay factor for historical visit penalty", "cluster_factor", "=", "1.5", "# Importance of node clusters", "# Calculate average distance to destination", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Cluster nodes by proximity to the destination", "node_clusters", "=", "{", "node", ":", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "}", "sorted_clusters", "=", "sorted", "(", "node_clusters", ",", "key", "=", "node_clusters", ".", "get", ")", "for", "node", "in", "sorted_clusters", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_importance", "=", "(", "len", "(", "unvisited_nodes", ")", "-", "sorted_clusters", ".", "index", "(", "node", ")", ")", "*", "cluster_factor", "visit_penalty", "=", "historical_frequency", "[", "node", "]", "*", "decay_factor", "if", "historical_frequency", "[", "node", "]", ">", "0", "else", "0", "weighted_heuristic", "=", "(", "0.5", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "0.5", "*", "cluster_importance", "-", "visit_penalty", ")", "score", "=", "direct_distance", "+", "weighted_heuristic", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "historical_frequency", "[", "node", "]", "+=", "1", "# Update historical frequency", "return", "best_node"], "code_perf": 18.24350614776489}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "average_distance_to_unvisited", "=", "total_distance_to_unvisited", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "penalty_factor", "=", "distance_to_next", "**", "2", "# Square penalty to emphasize distance", "score", "=", "(", "(", "1", "/", "(", "average_distance_to_unvisited", "+", "1", ")", ")", "*", "(", "1", "/", "penalty_factor", ")", "-", "distance_to_next", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.04871395129536}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_priority", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "min_distance_to_unvisited", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "priority_score", "=", "(", "distance_to_destination", "-", "distance_to_next", ")", "+", "min_distance_to_unvisited", "if", "priority_score", ">", "max_priority", ":", "max_priority", "=", "priority_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.064842752012117}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "estimated_tour_length", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "distance_penalty_factor", "=", "0.3", "# Adjusted penalty factor for distance from destination", "proximity_boost_factor", "=", "1.2", "# Factor to boost closer nodes", "closest_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "distance_penalty_factor", "*", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "estimated_tour_length", ")", "proximity_boost", "=", "proximity_boost_factor", "*", "(", "closest_distance", "-", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "score", "=", "direct_distance", "+", "estimated_tour_length", "+", "penalty", "-", "proximity_boost", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.196121014937377}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "distance_to_destination", ">", "0", ":", "# Avoid division by zero", "# Calculate a heuristic score that combines distances and unvisited penalty", "score", "=", "(", "distance_to_node", "+", "(", "distance_to_destination", "/", "(", "num_unvisited", "+", "1", ")", ")", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.081438908556759}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "accessibility_weight", "=", "0.4", "# Weight for accessibility of unvisited nodes", "synergy_weight", "=", "0.2", "# Weight for synergistic potential of future paths", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "accessibility_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "+", "1e-6", ")", "for", "next", "in", "unvisited_nodes", ")", "# Inverse distance for accessibility", "# Synergy score based on the total distance to remaining nodes", "synergy_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "dest", "]", "for", "dest", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "accessibility_weight", "*", "accessibility_score", "-", "synergy_weight", "*", "synergy_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 29.398046084473137}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "proximity_threshold", "=", "5", "# Distance threshold to filter nodes", "decay_factor", "=", "0.6", "# Factor to prioritize shorter paths", "if", "unvisited_nodes", ":", "immediate_neighbor_weight", "=", "0.4", "# Weight for favorability of immediate neighbors", "distance_penalty_weight", "=", "0.3", "# Weight for the distance to nodes", "destination_importance_weight", "=", "0.3", "# Weight for proximity to the destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "direct_distance", ">", "proximity_threshold", ":", "continue", "# Skip nodes that are further away than the threshold", "# Calculate favorability for immediate neighboring nodes", "immediate_neighbor_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "for", "neighbor", "in", "unvisited_nodes", "if", "neighbor", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<", "proximity_threshold", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "# Decay factor based distance penalty", "distance_penalty", "=", "decay_factor", "*", "direct_distance", "# Combine scores", "score", "=", "immediate_neighbor_weight", "*", "immediate_neighbor_score", "-", "distance_penalty_weight", "*", "distance_penalty", "+", "destination_importance_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.592448515442133}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance to unvisited nodes", "attractiveness_weight", "=", "0.3", "# Weight for attractiveness to destination", "urgency_weight", "=", "0.2", "# Urgency to visit unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "mean_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Mean score based on mean distances to unvisited nodes to encourage visiting closer nodes", "mean_distance_score", "=", "mean_distance_to_unvisited", "*", "urgency_weight", "score", "=", "(", "direct_distance", "*", "direct_weight", ")", "+", "(", "distance_to_destination", "*", "attractiveness_weight", ")", "-", "mean_distance_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 34.3815120356238}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "proximity_factor", "=", "1", "/", "(", "avg_distance", "+", "1", ")", "# Avoid division by zero and incentivize closer nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "travel_penalty", "=", "direct_distance", "*", "1.5", "# Heavier penalty for going further", "score", "=", "travel_penalty", "*", "proximity_factor", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.184080168914175}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm evaluates nodes by considering the minimum distance to the nearest unvisited node and a penalty for the distance to the destination, aiming to balance exploration and direct path optimization.}", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "distance_to_next", "+", "0.5", "*", "distance_to_destination", "# Combination of distance to next and penalty for distance to destination", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "estimated_distance_to_destination", "=", "total_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "estimated_completion_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# New scoring mechanism", "score", "=", "direct_distance", "+", "estimated_completion_cost", "+", "(", "estimated_distance_to_destination", "-", "estimated_completion_cost", ")", "/", "3", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.6490879527083395}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "(", "num_unvisited", "-", "1", ")", "*", "0.5", "# Penalty for remaining unvisited nodes", "total_cost", "=", "direct_distance", "+", "penalty", "if", "total_cost", "<", "min_cost", ":", "min_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "unvisited_penalty_weight", "=", "0.3", "# Weight for unvisited nodes penalty", "destination_weight", "=", "0.2", "# Weight for proximity to destination", "# Track the penalty for unvisited nodes", "unvisited_penalty", "=", "{", "node", ":", "1", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "unvisited_penalty_value", "=", "unvisited_penalty", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined scoring mechanism with dynamic penalties and adjustments", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "-", "unvisited_penalty_weight", "*", "unvisited_penalty_value", "+", "-", "destination_weight", "*", "distance_to_destination", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.331995111188165}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_importance", "=", "0.4", "# Importance of direct distance to the node", "connectivity_importance", "=", "0.4", "# Importance of connectivity to unvisited nodes", "return_savings_weight", "=", "0.2", "# Importance of potential savings when returning", "connectivity_sum", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_connectivity", "=", "connectivity_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "return_savings", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "(", "average_connectivity", "*", "connectivity_importance", ")", "-", "(", "direct_distance", "*", "distance_importance", ")", "+", "(", "return_savings", "*", "return_savings_weight", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.450370583313572}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "density_weight", "=", "0.6", "# Weight for density of unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "density_scores", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "# Calculate density score based on proximity of unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "density_scores", "[", "node", "]", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "node", "!=", "other_node", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", ")", "*", "direct_weight", "+", "(", "density_scores", "[", "node", "]", "*", "density_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 29.583950098361058}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm prioritizes nodes based on the combination of the minimum distance to the next node and the maximum distance to the destination node, enhancing both immediate and long-term traversal efficiency.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "1", "/", "(", "1", "+", "distance_to_next", ")", ")", "+", "(", "1", "/", "(", "1", "+", "distance_to_destination", ")", ")", "# Incentivizes closer nodes to both current and destination", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.6608569721620725}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "# Direct distance to the current node", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Average distance to all remaining unvisited nodes", "average_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Score based on direct distance and average distance to further nodes", "score", "=", "direct_distance", "+", "average_distance", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.4323878079629}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate the score considering both distances", "score", "=", "distance_to_node", "+", "0.5", "*", "distance_to_destination", "# Adding a weight to distance to the destination", "# Select the node with the minimum score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for distance to destination", "dynamic_density_weight", "=", "0.4", "# Weight for dynamic density of unvisited connections", "exploration_weight", "=", "0.2", "# Weight for exploring nodes with more unvisited connections", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculating dynamic density score as inverse distance to other unvisited nodes", "dynamic_density_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", ">", "0", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Exploration score based on the number of connections to unvisited nodes", "exploration_score", "=", "sum", "(", "1", "for", "next", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "next", "in", "unvisited_nodes", "and", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", ")", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "dynamic_density_weight", "*", "dynamic_density_score", "+", "exploration_weight", "*", "exploration_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 17.499755192762866}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_factor", "=", "0.5", "# Weight for distance cost", "future_savings_factor", "=", "0.5", "# Weight for potential savings by clustering ", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "potential_save", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "-", "direct_distance", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", ")", "+", "(", "potential_save", "*", "future_savings_factor", ")", "-", "(", "direct_distance", "*", "distance_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.694396629126081}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to destination", "connectivity_weight", "=", "0.4", "# Weight for node connectivity", "penalty_weight", "=", "0.2", "# Weight for penalty adjustments", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty_factor", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "1", "# Calculate Node Connectivity Factor (NCF)", "connectivity", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "2", "*", "direct_distance", ")", "# Calculate score using a new scoring mechanism", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", ")", "+", "(", "connectivity", "*", "connectivity_weight", ")", "-", "(", "penalty_weight", "*", "direct_distance", ")", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 24.343742676081742}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "unvisited_nodes", "=", "np", ".", "array", "(", "list", "(", "unvisited_nodes", ")", ")", "distances", "=", "distance_matrix", "[", "current_node", ",", "unvisited_nodes", "]", "destination_distances", "=", "distance_matrix", "[", "unvisited_nodes", ",", "destination_node", "]", "# Heuristic for connectivity: sum of distances to all other unvisited nodes", "connectivity_scores", "=", "np", ".", "array", "(", "[", "np", ".", "sum", "(", "distance_matrix", "[", "node", ",", "unvisited_nodes", "]", ")", "for", "node", "in", "unvisited_nodes", "]", ")", "# Calculate penalties for distance to destination", "distance_penalty", "=", "np", ".", "exp", "(", "destination_distances", "/", "np", ".", "mean", "(", "destination_distances", ")", ")", "# Combined score: distance + connectivity penalty + distance penalty", "scores", "=", "distances", "+", "connectivity_scores", "+", "distance_penalty", "next_node", "=", "unvisited_nodes", "[", "np", ".", "argmin", "(", "scores", ")", "]", "return", "next_node"], "code_perf": 22.357538305755874}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Factors for scoring", "edge_weight", "=", "1.0", "novelty_weight", "=", "0.3", "clustering_weight", "=", "0.7", "visit_weights", "=", "{", "node", ":", "1", "for", "node", "in", "unvisited_nodes", "}", "# Simulating visit frequency", "# Dynamic adjustments for novelty and clustering", "min_connections", "=", "2", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Cluster density (connections to unvisited nodes)", "connections", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "clustering_score", "=", "connections", "/", "max", "(", "min_connections", ",", "len", "(", "unvisited_nodes", ")", ")", "# Novelty score based on visit frequency", "novelty_score", "=", "(", "1", "/", "visit_weights", "[", "node", "]", ")", "if", "visit_weights", "[", "node", "]", "else", "0", "# Overall score calculation", "overall_score", "=", "(", "edge_weight", "*", "direct_distance", "+", "novelty_weight", "*", "novelty_score", "-", "clustering_weight", "*", "clustering_score", ")", "if", "overall_score", "<", "best_score", ":", "best_score", "=", "overall_score", "best_node", "=", "node", "# Simulate visiting node", "if", "best_node", "is", "not", "None", ":", "visit_weights", "[", "best_node", "]", "+=", "1", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.7", "# Weight for direct distance", "distribution_weight", "=", "0.3", "# Weight for distribution of unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_nodes_count", "=", "len", "(", "unvisited_nodes", ")", "-", "1", "# Count without the current node", "distribution_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "remaining_nodes_count", "+", "1", ")", "# Introducing a decay factor based on the number of remaining nodes", "decay_factor", "=", "(", "1", "/", "(", "remaining_nodes_count", "+", "1", ")", ")", "if", "remaining_nodes_count", ">", "0", "else", "1", "score", "=", "(", "direct_distance", "*", "distance_weight", ")", "+", "(", "distribution_cost", "*", "decay_factor", "*", "distribution_weight", ")", "+", "(", "total_distance_to_destination", ")", "if", "score", "<", "min_cost", ":", "# Select the node with the minimum cost", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.954962939632543}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "max_penalty_factor", "=", "0.3", "# Maximum penalty for distance", "min_connections", "=", "2", "# threshold for considering a node well-connected", "# Calculate average distance to the destination", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Dynamic penalty for longer distances", "distance_penalty", "=", "max", "(", "0", ",", "(", "direct_distance", "-", "avg_distance_to_destination", ")", "*", "max_penalty_factor", ")", "# Cluster density (number of connections to other unvisited nodes)", "connections", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "cluster_density_score", "=", "connections", "/", "max", "(", "min_connections", ",", "len", "(", "unvisited_nodes", ")", ")", "# Stochastic factor: random exploration enhancement", "stochastic_factor", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "*", "0.2", "score", "=", "direct_distance", "+", "distance_penalty", "-", "cluster_density_score", "+", "stochastic_factor", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.075498000885283}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "pathway_penalty_factor", "=", "0.4", "# Factor to penalize longer paths", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "if", "num_unvisited", "==", "0", ":", "return", "None", "# Dynamic weights based on the number of unvisited nodes", "distance_weight", "=", "1", "/", "(", "num_unvisited", "**", "0.6", ")", "# Weight decreases with more unvisited nodes", "immediate_weight", "=", "0.4", "# Weight for immediate travel cost", "future_potential_weight", "=", "0.4", "# Potential future gains weight", "risk_penalty_weight", "=", "0.2", "# Risk penalty for distant nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_average_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "num_unvisited", "or", "1", ")", "# Average distance to remaining nodes", "# Calculate risk penalty for immediate distance", "risk_penalty", "=", "risk_penalty_weight", "*", "max", "(", "0", ",", "immediate_weight", "*", "direct_distance", "-", "future_average_distance", ")", "# Combined score", "score", "=", "(", "-", "immediate_weight", "*", "direct_distance", ")", "-", "(", "pathway_penalty_factor", "*", "direct_distance", ")", "+", "(", "future_potential_weight", "*", "future_average_distance", ")", "-", "risk_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.4597365709491275}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance", "cluster_weight", "=", "0.3", "# Weight for cluster potential savings", "destination_weight", "=", "0.2", "# Weight based on distance to the destination", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "triangular_distance", "=", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "direct_distance", ")", "/", "2", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "cluster_weight", "*", "cluster_average_distance", ")", "+", "(", "destination_weight", "*", "triangular_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.252798419041268}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm prioritizes nodes based on the combination of the minimum distance to the next node and the average distance to the unvisited nodes, incentivizing both proximity and accessibility.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "score", "=", "(", "average_distance_to_unvisited", "-", "distance_to_next", ")", "# Higher score for nodes closer to others", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.41724333977419}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "# Total distance to reach remaining nodes", "total_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Weighted score combining distance to node and potential future distance", "heuristic_value", "=", "total_distance_remaining", "/", "len", "(", "unvisited_nodes", ")", "score", "=", "distance_to_node", "+", "heuristic_value", "*", "(", "1", "+", "len", "(", "unvisited_nodes", ")", "/", "len", "(", "distance_matrix", ")", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_weight", "=", "0.5", "# Weight for immediate travel distance", "centrality_weight", "=", "0.4", "# Weight for centrality score", "unvisited_count_weight", "=", "0.1", "# Weight for count of remaining unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "centrality_score", "=", "1", "/", "(", "1", "+", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", ")", "# Inverse of total distance to unvisited nodes", "unvisited_count_penalty", "=", "len", "(", "unvisited_nodes", ")", "# Simple penalty based on unvisited count to prioritize nodes", "score", "=", "(", "direct_distance", "*", "immediate_weight", ")", "+", "(", "centrality_score", "*", "centrality_weight", ")", "-", "(", "unvisited_count_penalty", "*", "unvisited_count_weight", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.748165332946904}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "potential_nodes", "=", "[", "]", "distances", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "# Calculate the average distance to encourage exploration", "average_distance", "=", "sum", "(", "distances", ")", "/", "len", "(", "distances", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Novelty factor based on proximity to destination", "novelty_score", "=", "distance_to_destination", "/", "(", "1", "+", "average_distance", ")", "# Avoid division by zero", "# Weighted score combining direct distance and novelty", "score", "=", "direct_distance", "+", "novelty_score", "*", "0.5", "# Weight novelty less to prioritize closeness", "potential_nodes", ".", "append", "(", "(", "node", ",", "score", ")", ")", "next_node", "=", "min", "(", "potential_nodes", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 7.293570122723144}
{"code_tokens": ["# {This algorithm utilizes a multi-factor scoring system that balances distance, potential future distances to other nodes, and a weighted importance score based on the degree of connectivity, thereby prioritizing nodes that not only connect well but also minimize potential future travel.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_distance_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "10", ")", "# Example threshold", "# Modified scoring equation with additional weight for future distance", "score", "=", "(", "future_distance_score", "/", "(", "distance_to_next", "+", "1", ")", ")", "+", "(", "connectivity_score", "*", "1.5", ")", "# Weighted for more influence", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.391431511815483}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.4", "# Weight for connectivity to unvisited nodes", "penalty_weight", "=", "0.2", "# Weight for penalty based on impact on overall tour", "# Function to calculate connectivity score based on unvisited nodes", "def", "calculate_connectivity_score", "(", "node", ")", ":", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "return", "connectivity_score", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "calculate_connectivity_score", "(", "node", ")", "# Penalty based on the estimated additional length incurred by selecting this node", "estimated_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combined scoring mechanism adapting to new conditions", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "-", "penalty_weight", "*", "estimated_penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.375985222515361}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "scores", "=", "{", "}", "decay_factor", "=", "0.5", "# Decay factor for distance influence", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Penalize distance based on a decay factor", "penalized_distance", "=", "distance_to_node", "*", "decay_factor", "# Calculate score with edge weight consideration for returning to destination", "return_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "score", "=", "penalized_distance", "+", "return_cost", "scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "# Calculate distances to all unvisited nodes", "distances", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "# Determine the maximum distance to unvisited nodes", "max_distance_to_unvisited", "=", "max", "(", "distances", ")", "if", "distances", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Distance scaling based on the furthest unvisited node", "distance_scaling", "=", "distance", "/", "(", "max_distance_to_unvisited", "+", "1e-5", ")", "# Future cost estimation: heuristic based on average distance to remaining nodes", "future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "adj", "]", "for", "adj", "in", "unvisited_nodes", "if", "adj", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "# Combine metrics to compute an adaptive score", "score", "=", "distance", "+", "distance_scaling", "*", "future_cost", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.160947025264944}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "# Predictive model for remaining path costs using the average distance to the remaining unvisited nodes", "avg_remaining_distance", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "for", "node", "in", "unvisited_nodes", "for", "unvisited", "in", "unvisited_nodes", "if", "unvisited", "!=", "node", "]", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "isolation_penalty", "=", "len", "(", "[", "nn", "for", "nn", "in", "unvisited_nodes", "if", "nn", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "nn", "]", "==", "np", ".", "inf", "]", ")", "*", "0.3", "attraction_factor", "=", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Combine distance, isolation penalty, attraction factor, and predicted costs into the score", "scores", "[", "node", "]", "=", "distance_to_node", "+", "isolation_penalty", "-", "attraction_factor", "*", "0.1", "+", "avg_remaining_distance", "*", "0.2", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Penalty based on the total distance to remaining unvisited nodes", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "penalty_factor", "=", "total_remaining_distance", "/", "len", "(", "unvisited_nodes", ")", "score", "=", "distance_to_node", "+", "penalty_factor", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate distances to unvisited nodes", "distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "min_distance", "=", "min", "(", "distances", ".", "values", "(", ")", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distances", "[", "node", "]", "# Connectivity score based on the sum of distances to the unvisited nodes", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Penalty for being farther than the minimum distance", "distance_penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "min_distance", ")", "# Score combines distance and connectivity with the penalty", "score", "=", "direct_distance", "+", "distance_penalty", "+", "connectivity_score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.622307843135376}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "# Calculate the number of connections for each unvisited node", "connectivity_scores", "=", "{", "node", ":", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "0", ")", "for", "node", "in", "unvisited_nodes", "}", "total_connectivity", "=", "sum", "(", "connectivity_scores", ".", "values", "(", ")", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "connectivity_penalty", "=", "connectivity_scores", "[", "node", "]", "/", "(", "total_connectivity", "if", "total_connectivity", ">", "0", "else", "1", ")", "score", "=", "(", "average_distance_to_remaining", "-", "distance_to_next", ")", "-", "connectivity_penalty", "# Balanced score with connectivity penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.41724333977419}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "experience_weight", "=", "0.5", "# Weight to influence score based on previously visited nodes", "nearby_weight", "=", "0.5", "# Weight to influence score based on nearby unvisited nodes", "experience_scores", "=", "{", "node", ":", "1.0", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1", ")", "for", "node", "in", "unvisited_nodes", "}", "proximity_threshold", "=", "3", "significant_neighbors", "=", "[", "node", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<=", "proximity_threshold", "]", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "normalized_experience", "=", "sum", "(", "experience_scores", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "neighborhood_effect", "=", "len", "(", "significant_neighbors", ")", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "# New score computation incorporating experience and neighborhood effects", "score", "=", "(", "1", "-", "experience_weight", ")", "*", "direct_distance", "+", "experience_weight", "*", "(", "1", "/", "normalized_experience", ")", "+", "nearby_weight", "*", "neighborhood_effect", "*", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "avg_distance_to_destination", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.958619780000175}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Create clusters based on distance", "clusters", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "not", "in", "clusters", ":", "clusters", "[", "distance", "]", "=", "[", "]", "clusters", "[", "distance", "]", ".", "append", "(", "node", ")", "# Identify the densest cluster", "densest_cluster", "=", "max", "(", "clusters", ".", "values", "(", ")", ",", "key", "=", "len", ")", "# From the densest cluster, select the closest node to the current node", "next_node", "=", "min", "(", "densest_cluster", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "return", "next_node"], "code_perf": 26.04202206317254}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to unvisited nodes", "cost_weight", "=", "0.4", "# Weight based on combined route cost", "direct_distance_weight", "=", "0.2", "# Weight for direct distance to next node", "current_route_cost", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# To introduce an inverse cost measure, we use the inverse of direct_distance", "inverse_direct_distance", "=", "1", "/", "(", "direct_distance", "+", "1e-10", ")", "# Small value to avoid division by zero", "# Calculate proximity to other unvisited nodes", "proximity_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "proximity_average", "=", "proximity_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combined score", "score", "=", "(", "proximity_weight", "*", "proximity_average", ")", "+", "(", "cost_weight", "*", "(", "current_route_cost", "+", "direct_distance", ")", ")", "+", "(", "direct_distance_weight", "*", "inverse_direct_distance", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 33.22614057443141}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "max_attractiveness_score", "=", "float", "(", "'-inf'", ")", "avg_distance_to_unvisited", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_remaining", "=", "sum", "(", "[", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "]", ")", "risk_adjusted_score", "=", "(", "avg_distance_to_unvisited", "/", "(", "distance_to_node", "+", "1e-9", ")", ")", "*", "(", "1", "+", "total_distance_to_remaining", ")", "if", "risk_adjusted_score", ">", "max_attractiveness_score", ":", "max_attractiveness_score", "=", "risk_adjusted_score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.581581373023452}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "import", "numpy", "as", "np", "def", "connectivity_score", "(", "node", ",", "unvisited", ",", "distance_matrix", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "for", "neighbor", "in", "unvisited", ")", "/", "(", "len", "(", "unvisited", ")", "or", "1", ")", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "alignment_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "conn_score", "=", "connectivity_score", "(", "node", ",", "unvisited_nodes", ",", "distance_matrix", ")", "# Adjusting score by introducing a dynamic factor based on distances", "distance_factor", "=", "1", "/", "(", "1", "+", "direct_distance", ")", "score", "=", "(", "0.4", "*", "distance_factor", "+", "0.3", "*", "conn_score", "+", "0.3", "*", "(", "1", "/", "(", "1", "+", "alignment_distance", ")", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.772507973586887}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_destination", "=", "total_distance_to_destination", "/", "unvisited_count", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate node degree (number of unvisited neighbor nodes)", "node_degree", "=", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "neighbor", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", ">", "0", ")", "# Future cost estimate based on the average distance to remaining unvisited nodes", "future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "unvisited_count", "# Score calculation based on direct distance, future cost, and node degree weighted contribution", "score", "=", "direct_distance", "+", "average_distance_to_destination", "+", "future_cost", "-", "(", "node_degree", "*", "0.5", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "novelty_scores", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "visit_counts", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "novelty_scores", "[", "node", "]", "=", "1", "/", "(", "1", "+", "visit_counts", "[", "node", "]", ")", "*", "(", "1", "/", "(", "1", "+", "avg_distance", ")", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "visit_penalty", "=", "visit_counts", "[", "node", "]", "*", "0.5", "decay_factor", "=", "0.2", "# Decay for exploration impact", "# Adjusted score calculation integrating decay factor and novelty", "score", "=", "direct_distance", "+", "distance_to_destination", "-", "novelty_scores", "[", "node", "]", "-", "visit_penalty", "+", "decay_factor", "*", "avg_distance", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "if", "next_node", ":", "visit_counts", "[", "next_node", "]", "+=", "1", "return", "next_node"], "code_perf": 8.566318326349702}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate total distance to all unvisited nodes", "total_distance", "=", "sum", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "# Compute a decay factor for penalizing selection of distant nodes", "decay_factor", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Reduces score for larger unvisited sets", "# Compute scores for unvisited nodes using a combined score with novel weights", "node_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cost_factor", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "decay_factor", "# Use a new scoring formula combining distances with a cost penalty", "score", "=", "direct_distance", "+", "(", "total_distance", "/", "len", "(", "unvisited_nodes", ")", ")", "+", "cost_factor", "node_scores", "[", "node", "]", "=", "score", "# Select the node with the minimal score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.958619780000175}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# Randomly sample a subset of unvisited nodes", "sample_size", "=", "min", "(", "3", ",", "len", "(", "unvisited_nodes", ")", ")", "# Sample size of 3 or less if fewer nodes available", "sampled_nodes", "=", "random", ".", "sample", "(", "unvisited_nodes", ",", "sample_size", ")", "# Select the closest node from the sampled nodes", "next_node", "=", "min", "(", "sampled_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "return", "next_node"], "code_perf": 16.84916790502168}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "future_path_weight", "=", "0.4", "# Weight for potential future path minimization", "connectivity_weight", "=", "0.2", "# Weight for favoring nodes with fewer connections", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_path_savings", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Encourage visiting less connected nodes by evaluating their connectivity", "node_connectivity", "=", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "float", "(", "'inf'", ")", ")", "connectivity_score", "=", "(", "len", "(", "unvisited_nodes", ")", "-", "node_connectivity", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "future_path_weight", "*", "future_path_savings", ")", "-", "(", "connectivity_weight", "*", "connectivity_score", ")", "# Penalty for nodes diverging significantly from the ideal path", "if", "direct_distance", ">", "total_distance_to_destination", ":", "score", "-=", "(", "direct_distance", "-", "total_distance_to_destination", ")", "*", "0.1", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.399039966495614}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "importance_factor", "=", "{", "node", ":", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", "for", "node", "in", "unvisited_nodes", "}", "estimated_shortest_distance", "=", "sum", "(", "min", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "importance_score", "=", "importance_factor", "[", "node", "]", "*", "estimated_shortest_distance", "score", "=", "direct_distance", "+", "importance_score", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.6", "# Weight for direct travel distance", "penalty_weight", "=", "0.4", "# Weight for penalizing unvisited nodes", "penalty_factor", "=", "len", "(", "unvisited_nodes", ")", "# Penalty scales with unvisited count", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_penalty", "=", "penalty_factor", "*", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "score", "=", "-", "(", "direct_distance", "*", "direct_distance_weight", ")", "+", "(", "total_penalty", "*", "penalty_weight", ")", "+", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "(", "1", "-", "direct_distance_weight", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 11.088349028266956}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "minimum_distance_threshold", "=", "1.0", "# Minimum distance for exploratory selection", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to unvisited nodes", "clustering_weight", "=", "0.3", "# Weight for clustering effect of unvisited nodes", "direct_path_weight", "=", "0.2", "# Weight for direct path distance", "exploratory_weight", "=", "0.1", "# Weight for randomness in exploration", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "1", "/", "(", "direct_distance", "+", "1e-9", ")", "if", "direct_distance", "<", "minimum_distance_threshold", "else", "0", "clustering_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "+", "1e-9", ")", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", ")", "score", "=", "proximity_weight", "*", "proximity_score", "+", "clustering_weight", "*", "clustering_score", "-", "direct_path_weight", "*", "direct_distance", "# Introduce probabilistic factor for random exploration", "if", "random", ".", "random", "(", ")", "<", "0.15", ":", "# 15% chance to randomly pick an unvisited node", "score", "+=", "exploratory_weight", "*", "random", ".", "choice", "(", "[", "1", ",", "0", "]", ")", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 17.042846551295384}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "total_weight", "=", "0", "weighted_probabilities", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "weighted_distance", "=", "distance", "*", "np", ".", "exp", "(", "-", "0.1", "*", "len", "(", "unvisited_nodes", ")", ")", "# Exponential decay based on remaining nodes", "probability", "=", "1", "/", "weighted_distance", "# Higher distance gives higher probability", "weighted_probabilities", "[", "node", "]", "=", "probability", "total_weight", "+=", "probability", "# Normalize probabilities", "for", "node", "in", "weighted_probabilities", ":", "weighted_probabilities", "[", "node", "]", "/=", "total_weight", "# Select the next node based on calculated probabilities", "next_node", "=", "random", ".", "choices", "(", "list", "(", "weighted_probabilities", ".", "keys", "(", ")", ")", ",", "weights", "=", "weighted_probabilities", ".", "values", "(", ")", ",", "k", "=", "1", ")", "[", "0", "]", "return", "next_node"], "code_perf": 18.952080697477243}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# This algorithm selects the next node to visit by incorporating a score based on the total distance to remaining unvisited nodes ", "# and the distance to the destination, emphasizing both short paths and strategic choices.", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "total_distance_to_unvisited", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", ")", "+", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "-", "(", "distance_to_destination", "/", "2", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.093500943435799}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm incorporates a dynamic scoring system that emphasizes both distance and a heuristic cost associated with the remaining unvisited nodes, encouraging a more balanced route.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ",", "1", ")", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "*", "(", "1", "/", "(", "avg_distance_to_remaining", "+", "1", ")", ")", "# Encourages shorter paths while considering the average distance to remaining nodes", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.178661666035703}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "closest_node", "=", "None", "shortest_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "estimated_total_distance", "=", "distance_to_node", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "0.5", "# Half the distance to the destination as a penalty", "if", "estimated_total_distance", "<", "shortest_distance", ":", "shortest_distance", "=", "estimated_total_distance", "closest_node", "=", "node", "return", "closest_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate density effect based on distances among unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node1", "]", "[", "node2", "]", "for", "node1", "in", "unvisited_nodes", "for", "node2", "in", "unvisited_nodes", "if", "node1", "!=", "node2", ")", "density_effect", "=", "total_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "1", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Adjusted score considering density effect and direct distance", "score", "=", "direct_distance", "*", "(", "1", "+", "density_effect", "/", "(", "1", "+", "distance_to_destination", ")", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.853284221035899}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "centrality_weight", "=", "0.3", "exploration_weight", "=", "0.2", "def", "calculate_centrality_score", "(", "node", ")", ":", "return", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "15", ")", "# Centrality based on proximity", "def", "calculate_exploration_score", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "centrality_score", "=", "calculate_centrality_score", "(", "node", ")", "exploration_score", "=", "calculate_exploration_score", "(", "node", ")", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "centrality_weight", "*", "centrality_score", "+", "exploration_weight", "*", "exploration_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.582021334684685}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Calculate average distance to destination and direct distance", "average_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "num_unvisited", "# Calculate distance decay factor", "reached_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "distance_decay_factor", "=", "reached_distance", "/", "(", "1", "+", "total_distance_to_destination", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Score based on the direct distance modified by distance decay and average destination distance", "score", "=", "(", "1", "-", "distance_decay_factor", ")", "*", "direct_distance", "+", "distance_decay_factor", "*", "average_distance_to_destination", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_weight", "=", "0.4", "# Weight for immediate travel cost", "future_potential_weight", "=", "0.4", "# Weight for potential future gains", "connectivity_weight", "=", "0.2", "# Weight for connectivity score", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average distance from current to unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "average_distance", ")", "# Count of well-connected nodes", "# New score incorporating connectivity", "score", "=", "(", "-", "immediate_weight", "*", "direct_distance", ")", "+", "(", "future_potential_weight", "*", "average_distance", ")", "+", "(", "connectivity_weight", "*", "connectivity_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 20.221768077112188}
{"code_tokens": ["import", "random", "import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "def", "calculate_total_distance", "(", "tour", ")", ":", "total_distance", "=", "0", "for", "i", "in", "range", "(", "len", "(", "tour", ")", "-", "1", ")", ":", "total_distance", "+=", "distance_matrix", "[", "tour", "[", "i", "]", "]", "[", "tour", "[", "i", "+", "1", "]", "]", "total_distance", "+=", "distance_matrix", "[", "tour", "[", "-", "1", "]", "]", "[", "tour", "[", "0", "]", "]", "# Return to start", "return", "total_distance", "current_tour", "=", "[", "current_node", "]", "+", "list", "(", "unvisited_nodes", ")", "current_distance", "=", "calculate_total_distance", "(", "current_tour", ")", "temperature", "=", "1.0", "cooling_rate", "=", "0.99", "iterations", "=", "100", "for", "_", "in", "range", "(", "iterations", ")", ":", "# Swap two random unvisited nodes to generate a new solution", "new_tour", "=", "current_tour", "[", ":", "]", "if", "len", "(", "unvisited_nodes", ")", ">", "2", ":", "idx1", ",", "idx2", "=", "random", ".", "sample", "(", "range", "(", "1", ",", "len", "(", "new_tour", ")", ")", ",", "2", ")", "new_tour", "[", "idx1", "]", ",", "new_tour", "[", "idx2", "]", "=", "new_tour", "[", "idx2", "]", ",", "new_tour", "[", "idx1", "]", "new_distance", "=", "calculate_total_distance", "(", "new_tour", ")", "# Acceptance criteria", "if", "new_distance", "<", "current_distance", ":", "current_tour", "=", "new_tour", "current_distance", "=", "new_distance", "else", ":", "acceptance_prob", "=", "math", ".", "exp", "(", "(", "current_distance", "-", "new_distance", ")", "/", "temperature", ")", "if", "random", ".", "random", "(", ")", "<", "acceptance_prob", ":", "current_tour", "=", "new_tour", "current_distance", "=", "new_distance", "# Cool down", "temperature", "*=", "cooling_rate", "return", "current_tour", "[", "1", "]", "# Return the first unvisited node in the final tour"], "code_perf": 21.771147688102566}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity to destination", "clustering_weight", "=", "0.5", "# Weight for the clustering effect based on connection", "# Calculate baseline distance to destination for weighting", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "# Distance from current node to candidate node", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate cluster metrics", "cluster_distances", "=", "[", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "]", "cluster_max_distance", "=", "max", "(", "cluster_distances", ",", "default", "=", "0", ")", "cluster_min_distance", "=", "min", "(", "cluster_distances", ",", "default", "=", "0", ")", "# Novel score includes distance metrics weighted towards clusters", "score", "=", "(", "1", "/", "(", "1", "+", "direct_distance", ")", ")", "+", "proximity_weight", "*", "(", "1", "/", "(", "1", "+", "distance_to_destination", ")", ")", "+", "clustering_weight", "*", "(", "1", "-", "(", "cluster_max_distance", "/", "(", "cluster_min_distance", "+", "1", ")", ")", "if", "cluster_min_distance", ">", "0", "else", "0", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.013242446563844}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.4", "# Weight for connectivity to unvisited nodes", "penalty_weight", "=", "0.2", "# Weight for penalties on longer paths", "# Function to calculate degree score based on connectivity", "def", "calculate_degree_score", "(", "node", ")", ":", "return", "len", "(", "[", "other", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "]", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "degree_score", "=", "calculate_degree_score", "(", "node", ")", "future_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combined scoring mechanism accounting for degree and penalties", "score", "=", "(", "-", "direct_distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "degree_score", "-", "penalty_weight", "*", "future_penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.526271790227707}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to the destination", "penalty_weight", "=", "0.4", "# Weight for distance penalties", "risk_weight", "=", "0.2", "# Weight for average risk assessment of unvisited nodes", "total_distance_from_current", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "proximity_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "risk_assessment", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "proximity_weight", "*", "proximity_distance", ")", "+", "(", "penalty_weight", "*", "risk_assessment", ")", "+", "(", "risk_weight", "*", "total_distance_from_current", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "next_node", "=", "None", "best_average_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "# Calculate the direct distance to the node", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate the average distance to the remaining unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "average_distance", "=", "total_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "+", "1e-5", ")", "# Combine direct distance and average distance to get a composite score", "composite_score", "=", "direct_distance", "+", "average_distance", "if", "composite_score", "<", "best_average_distance", ":", "best_average_distance", "=", "composite_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.4323878079629}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "min_total_distance", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "total_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "next_candidate", "in", "unvisited_nodes", ":", "if", "next_candidate", "!=", "node", ":", "total_distance", "+=", "distance_matrix", "[", "node", "]", "[", "next_candidate", "]", "total_distance", "+=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "remaining_neighbors", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "0", ")", "score", "=", "total_distance", "-", "(", "1", "/", "(", "remaining_neighbors", "+", "1", ")", ")", "# Aim to minimize distance, penalize fewer neighbors", "if", "score", "<", "min_total_distance", ":", "min_total_distance", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 21.813812563750965}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "min_distance_to_destination", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "weight_factor", "=", "0.5", "# Adjust the balance between immediate distance and future potential", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Score combining immediate distance and a weighted minimum future distance", "score", "=", "direct_distance", "+", "weight_factor", "*", "distance_to_destination", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Start with positive infinity for minimization", "# Calculate average distance to the destination", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_destination", "=", "total_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "# Calculate direct distance to the current node and its contribution to a score", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "ratio_score", "=", "direct_distance", "/", "(", "average_distance_to_destination", "if", "average_distance_to_destination", ">", "0", "else", "1", ")", "# A combined score with adjusted average and direct distance", "score", "=", "direct_distance", "+", "ratio_score", "*", "0.5", "# Using a weight for the ratio", "# Selecting the node that minimizes this score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Calculate the average distance to unvisited nodes", "if", "unvisited_nodes", ":", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Cost is a combination of direct distance and average distance to unvisited nodes", "total_cost", "=", "direct_distance", "+", "average_distance", "if", "total_cost", "<", "min_cost", ":", "min_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for distance", "density_weight", "=", "0.3", "# Weight for density of unvisited connections", "exploration_weight", "=", "0.3", "# Weight for exploration of connected nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "density_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average density", "connection_score", "=", "sum", "(", "1", "for", "next", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", "and", "next", "not", "in", "unvisited_nodes", ")", "# Connections to already visited nodes", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "density_weight", "*", "density_score", "+", "exploration_weight", "*", "connection_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.37815587401459}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_modified_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "average_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max", "(", "1", ",", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "modified_distance", "=", "direct_distance", "+", "average_distance", "*", "0.5", "# Introduce randomness to select among the best candidates", "if", "modified_distance", "<", "min_modified_distance", ":", "min_modified_distance", "=", "modified_distance", "next_node", "=", "node", "# Random selection among the best options with similar modified distances", "candidates", "=", "[", "node", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "==", "min_modified_distance", "]", "if", "candidates", ":", "next_node", "=", "random", ".", "choice", "(", "candidates", ")", "# Randomly select one of the nearest", "return", "next_node"], "code_perf": 8.685946007189195}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate distances and scores", "distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "destination_distances", "=", "{", "node", ":", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Calculate adjusted scores with a random factor", "adjusted_scores", "=", "{", "node", ":", "distances", "[", "node", "]", "+", "(", "random", ".", "uniform", "(", "0.1", ",", "0.5", ")", "*", "destination_distances", "[", "node", "]", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the unvisited node with the smallest adjusted score", "next_node", "=", "min", "(", "adjusted_scores", ",", "key", "=", "adjusted_scores", ".", "get", ")", "return", "next_node"], "code_perf": 8.209272107733582}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "# Calculate potential future penalty based on distances to unvisited nodes", "future_penalty", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Create a score that balances direct distance with future penalties", "score", "=", "direct_distance", "+", "(", "future_penalty", "/", "2", ")", "-", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "3", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.5896920510091475}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "import", "numpy", "as", "np", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "connectivity_factor", "=", "{", "node", ":", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "float", "(", "'inf'", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "average_distance", ")", "connectivity_score", "=", "connectivity_factor", "[", "node", "]", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Hybrid scoring mechanism", "score", "=", "direct_distance", "+", "distance_penalty", "-", "(", "0.5", "*", "connectivity_score", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate total distance to unvisited nodes", "total_distance", "=", "sum", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "# Compute scores for unvisited nodes using a hybrid scoring system", "node_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "distance_ratio", "=", "total_distance", "/", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "direct_distance", ">", "0", "else", "0", "# New score combining direct distance, distance to destination, and exploration factor", "score", "=", "(", "direct_distance", "*", "0.5", ")", "+", "(", "distance_to_destination", "*", "0.3", ")", "+", "(", "distance_ratio", "*", "0.1", ")", "+", "(", "random", ".", "uniform", "(", "0", ",", "1", ")", "*", "0.1", ")", "node_scores", "[", "node", "]", "=", "score", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 36.04617974626496}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "min_distance_to_nearest", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "penalty", "=", "len", "(", "unvisited_nodes", ")", "*", "0.5", "# Adjust the penalty based on the number of unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "+", "min_distance_to_nearest", "-", "penalty", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "density_weight", "=", "0.4", "# Weight for node density", "penalty_weight", "=", "0.2", "# Weight for penalties on recently visited nodes", "# Calculate density of unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "density_score", "=", "[", "1", "-", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "/", "(", "average_distance", "+", "1", ")", ")", "for", "node", "in", "unvisited_nodes", "]", "for", "idx", ",", "node", "in", "enumerate", "(", "unvisited_nodes", ")", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Penalty based on distance to previously visited nodes", "penalty_score", "=", "sum", "(", "(", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "prev", "]", "+", "1", ")", ")", "for", "prev", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "prev", "not", "in", "unvisited_nodes", ")", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "density_weight", "*", "density_score", "[", "idx", "]", "-", "penalty_weight", "*", "penalty_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_cost_weight", "=", "0.50", "# Weight for the direct distance cost", "centrality_weight", "=", "0.25", "# Weight based on node centrality", "risk_penalty_weight", "=", "0.15", "# Weight to penalize revisiting nodes too soon", "efficiency_bonus_weight", "=", "0.10", "# Weight for bonuses based on future route impact", "def", "calculate_centrality", "(", "node", ")", ":", "return", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "def", "calculate_risk_penalty", "(", "node", ")", ":", "# Penalty mechanism for nodes that have been visited recently", "return", "1.0", "if", "node", "in", "unvisited_nodes", "else", "0.0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "centrality", "=", "calculate_centrality", "(", "node", ")", "risk_penalty", "=", "calculate_risk_penalty", "(", "node", ")", "# Updated scoring equation", "score", "=", "(", "-", "distance_cost_weight", "*", "direct_distance", "+", "centrality_weight", "*", "centrality", "-", "risk_penalty_weight", "*", "risk_penalty", "+", "efficiency_bonus_weight", "*", "(", "1", "/", "(", "1", "+", "direct_distance", ")", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 27.44484528630771}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Define a distance threshold for clustering", "distance_threshold", "=", "1.5", "# Adjust based on the problem scale", "# Create clusters based on proximity", "clusters", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "added_to_cluster", "=", "False", "for", "cluster", "in", "clusters", ":", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<", "distance_threshold", ":", "cluster", ".", "append", "(", "node", ")", "added_to_cluster", "=", "True", "break", "if", "not", "added_to_cluster", ":", "clusters", ".", "append", "(", "[", "node", "]", ")", "# Penalty calculation for distant nodes", "penalties", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "-", "distance_threshold", ")", "**", "2", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ">", "distance_threshold", "else", "0", "for", "node", "in", "unvisited_nodes", "}", "# Select the nearest cluster", "if", "not", "clusters", ":", "return", "None", "nearest_cluster", "=", "min", "(", "clusters", ",", "key", "=", "lambda", "cluster", ":", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "penalties", "[", "node", "]", "for", "node", "in", "cluster", ")", ")", "# Select the node from the nearest cluster with the least penalized distance", "next_node", "=", "min", "(", "nearest_cluster", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "penalties", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "candidates", "=", "list", "(", "unvisited_nodes", ")", "scored_candidates", "=", "[", "]", "for", "node", "in", "candidates", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_factor", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", "score", "=", "direct_distance", "+", "0.5", "*", "connectivity_factor", "# Weight the connectivity factor", "scored_candidates", ".", "append", "(", "(", "node", ",", "score", ")", ")", "scored_candidates", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "return", "scored_candidates", "[", "0", "]", "[", "0", "]"], "code_perf": 7.526271790227707}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "distance_weight", "=", "0.6", "# Higher weight for direct distance", "clustering_weight", "=", "0.4", "# Weight for clustering effect", "if", "unvisited_nodes", ":", "# Calculate average distance to unvisited nodes", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Decode unvisited nodes into clusters based on distances", "clusters", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_index", "=", "int", "(", "distance", "//", "10", ")", "# Example clustering by distance in ranges of 10", "if", "cluster_index", "not", "in", "clusters", ":", "clusters", "[", "cluster_index", "]", "=", "[", "]", "clusters", "[", "cluster_index", "]", ".", "append", "(", "node", ")", "# Calculate scores using clusters", "cluster_scores", "=", "{", "index", ":", "0", "for", "index", "in", "clusters", ".", "keys", "(", ")", "}", "for", "index", ",", "cluster", "in", "clusters", ".", "items", "(", ")", ":", "for", "node", "in", "cluster", ":", "# Adjust the score based on distance decay and clustering", "distance_to_cluster", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "cluster", ")", "/", "len", "(", "cluster", ")", "cluster_scores", "[", "index", "]", "+=", "-", "distance_weight", "*", "distance_to_cluster", "# Select node from the best scoring cluster", "best_cluster_index", "=", "max", "(", "cluster_scores", ",", "key", "=", "cluster_scores", ".", "get", ")", "potential_nodes", "=", "clusters", "[", "best_cluster_index", "]", "# Choose the next node within the best cluster", "next_node", "=", "min", "(", "potential_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the minimum distance to the nearest unvisited node", "nearest_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Calculate the total distance of remaining unvisited nodes", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "node", "in", "unvisited_nodes", "for", "next_node", "in", "unvisited_nodes", "if", "node", "!=", "next_node", ")", "# Score nodes based on the distance to the node and a penalty for total remaining distance", "node_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Adjust score by combining the direct distance and penalties", "score", "=", "direct_distance", "+", "(", "total_remaining_distance", "/", "len", "(", "unvisited_nodes", ")", ")", "+", "(", "nearest_distance", "*", "0.5", ")", "node_scores", "[", "node", "]", "=", "score", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "node_degree", "=", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", "]", ")", "heuristic", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score considering distance, node degree, and heuristic", "score", "=", "direct_distance", "+", "(", "1", "/", "(", "node_degree", "+", "1", ")", ")", "+", "(", "heuristic", "*", "0.5", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "context_factor", "=", "0.5", "# Factor that adjusts scores based on the number of visited nodes", "num_visited", "=", "len", "(", "distance_matrix", ")", "-", "len", "(", "unvisited_nodes", ")", "# Assuming distance_matrix is square and includes all nodes", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance to unvisited nodes", "recent_penalty_weight", "=", "0.3", "# Weight for penalizing recent visits", "destination_closeness_weight", "=", "0.3", "# Weight for closeness to destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Dynamic contextual adjustment based on recently visited nodes", "recent_visit_penalty", "=", "0", "if", "node", "in", "distance_matrix", "[", "current_node", "]", "[", ":", "num_visited", "]", ":", "# Assuming a way to check if node was recently visited", "recent_visit_penalty", "=", "1", "# Fixed penalty for visiting a recent node", "# Estimate closeness score to destination", "destination_closeness_score", "=", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score with context factor and recent visit penalty", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "recent_penalty_weight", "*", "recent_visit_penalty", "+", "destination_closeness_weight", "*", "destination_closeness_score", "# Adjust score with context factor", "score", "*=", "(", "1", "+", "context_factor", "*", "num_visited", ")", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.7290456301202415}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "total_score", "=", "0", "attractiveness_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "distance_to_next", ")", "# Attractiveness score: higher for nodes with more connections and lower distances", "attractiveness_score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "*", "(", "connectivity_score", "+", "1", ")", "attractiveness_scores", "[", "node", "]", "=", "attractiveness_score", "total_score", "+=", "attractiveness_score", "# Select the next node probabilistically based on the attractiveness scores", "if", "total_score", ">", "0", ":", "selection_probability", "=", "{", "node", ":", "score", "/", "total_score", "for", "node", ",", "score", "in", "attractiveness_scores", ".", "items", "(", ")", "}", "r", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "cumulative_probability", "=", "0.0", "for", "node", ",", "probability", "in", "selection_probability", ".", "items", "(", ")", ":", "cumulative_probability", "+=", "probability", "if", "r", "<", "cumulative_probability", ":", "next_node", "=", "node", "break", "return", "next_node"], "code_perf": 29.74889925733399}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "synergy_weight", "=", "0.2", "# Weight for benefits of visiting clustered nodes", "desirability_weight", "=", "0.5", "# Weight for current node desirability", "distance_weight", "=", "0.3", "# Weight for direct distance", "if", "unvisited_nodes", ":", "cluster_threshold", "=", "10", "# Distance threshold for clustering nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate desirability based on distance to the destination", "desirability_score", "=", "1", "/", "(", "direct_distance", "+", "1", ")", "# Avoid division by zero", "# Calculate synergy index based on proximity to other unvisited nodes", "synergy_score", "=", "sum", "(", "1", "for", "next_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "<", "cluster_threshold", ")", "# Combined score incorporating the new metrics", "score", "=", "(", "desirability_weight", "*", "desirability_score", ")", "-", "(", "distance_weight", "*", "direct_distance", ")", "+", "(", "synergy_weight", "*", "synergy_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "exploration_weight", "=", "0.4", "# Weight for exploration based on unvisited connections", "return_weight", "=", "0.2", "# Weight for the return distance to the origin", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "return_distance", "=", "distance_matrix", "[", "node", "]", "[", "current_node", "]", "# Distance back to the current node", "exploration_score", "=", "sum", "(", "1", "for", "next_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next_node", "]", ">", "0", ")", "# Count of available paths", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "exploration_weight", "*", "exploration_score", "-", "return_weight", "*", "return_distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "synergy_weight", "=", "0.4", "# Weight for synergy with unvisited nodes", "future_cost_weight", "=", "0.2", "# Weight for future cost estimation", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Synergy score based on both the direct distance and the distances to all unvisited nodes", "synergy_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "for", "unvisited", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Future cost estimation based on average distance of unvisited nodes from the current node", "future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "for", "unvisited", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "distance_weight", "*", "direct_distance", "+", "synergy_weight", "*", "synergy_score", "+", "future_cost_weight", "*", "future_cost", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.274546296838132}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_visited_distance", "=", "sum", "(", "distance_matrix", "[", "destination_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "total_visited_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Penalty based on cumulative distance", "# Score is the sum of direct distance and a penalty for distant nodes", "score", "=", "direct_distance", "+", "penalty", "*", "0.5", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "heuristic_adjustment_factor", "=", "1.5", "# Factor to emphasize diverse pathways", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.6", "# Weight for direct distance", "connectivity_weight", "=", "0.2", "# Weight for connectivity to unvisited nodes", "proximity_weight", "=", "0.1", "# Weight for proximity to destination", "penalty_weight", "=", "0.1", "# Weight for penalizing longer connections", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Score based on proximity to destination", "proximity_score", "=", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score integrating proximity, connectivity, and direct distance adjustments", "score", "=", "-", "direct_distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "proximity_weight", "*", "proximity_score", "-", "penalty_weight", "*", "len", "(", "unvisited_nodes", ")", "# Amplifying nodes contributing to diverse pathways", "diversity_score", "=", "len", "(", "unvisited_nodes", ")", "-", "connectivity_score", "score", "*=", "(", "1", "+", "heuristic_adjustment_factor", "*", "diversity_score", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.700584024139377}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to destination", "clustering_weight", "=", "0.6", "# Weight for clustering unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "clustering_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", "if", "next_node", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", ")", "+", "(", "clustering_weight", "*", "clustering_score", ")", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 14.714782087705544}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "route_estimation_weight", "=", "0.3", "connectivity_weight", "=", "0.2", "# Estimating total distance of route to the destination", "total_route_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Estimating potential future distances using a modified heuristic", "estimated_route_distance", "=", "total_route_distance", "+", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", "if", "next_node", "!=", "node", ")", "# Score calculation with an adjusted focus on historical path", "score", "=", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "direct_distance", "+", "(", "estimated_route_distance", "*", "route_estimation_weight", ")", "-", "(", "len", "(", "unvisited_nodes", ")", "*", "connectivity_weight", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "elif", "score", "==", "max_score", ":", "# Introduce randomness to diversify paths", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.553983904466108}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.3", "cluster_weight", "=", "0.4", "future_savings_weight", "=", "0.2", "synergy_weight", "=", "0.3", "# Weight for synergy score", "decay_factor", "=", "0.1", "# Decay for distance impact", "# Function to calculate cluster score based on unvisited nodes", "def", "calculate_cluster_score", "(", "node", ")", ":", "cluster_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "cluster_score", "+=", "distance_matrix", "[", "node", "]", "[", "other", "]", "return", "cluster_score", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Function to calculate synergy score based on proximity to unvisited nodes", "def", "calculate_synergy_score", "(", "node", ")", ":", "synergy_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "synergy_score", "+=", "1", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "other", "]", ")", "# Inverse distance", "return", "synergy_score", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_score", "=", "calculate_cluster_score", "(", "node", ")", "synergy_score", "=", "calculate_synergy_score", "(", "node", ")", "# Combined scoring mechanism with decay factor", "score", "=", "(", "-", "direct_distance_weight", "*", "direct_distance", "+", "cluster_weight", "*", "cluster_score", "+", "future_savings_weight", "*", "(", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "+", "synergy_weight", "*", "synergy_score", "*", "(", "1", "-", "decay_factor", "*", "direct_distance", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.077865430561266}
{"code_tokens": ["# {The algorithm employs a weighted score that combines the direct distance to unvisited nodes with a penalty based on the distance to the farthest unvisited node, promoting a balanced exploration strategy.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "max_distance_to_unvisited", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "num_unvisited_nodes", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Dynamic penalty based on the farthest unvisited node to encourage diversity in picking closer or strategic nodes", "penalty", "=", "(", "max_distance_to_unvisited", "-", "direct_distance", ")", "**", "1.5", "score", "=", "direct_distance", "+", "(", "total_distance_to_unvisited", "/", "num_unvisited_nodes", ")", "+", "penalty", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 23.399244781450058}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the reciprocal of distances to unvisited nodes for better exploration", "reciprocal_distances", "=", "np", ".", "array", "(", "[", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1e-6", ")", "for", "node", "in", "unvisited_nodes", "]", ")", "# Calculate distance to the destination", "distance_to_destination", "=", "np", ".", "array", "(", "[", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "# Introduce a randomness factor", "random_factor", "=", "np", ".", "random", ".", "rand", "(", "len", "(", "unvisited_nodes", ")", ")", "*", "0.1", "# Compute scores for unvisited nodes using a combined score with new weights", "node_scores", "=", "{", "}", "for", "idx", ",", "node", "in", "enumerate", "(", "unvisited_nodes", ")", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "weighted_score", "=", "(", "direct_distance", "*", "0.5", ")", "+", "(", "reciprocal_distances", "[", "idx", "]", "*", "0.3", ")", "+", "(", "distance_to_destination", "[", "idx", "]", "*", "0.2", ")", "+", "random_factor", "[", "idx", "]", "node_scores", "[", "node", "]", "=", "weighted_score", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 31.384545037107614}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "heuristic_adjustment_factor", "=", "1.2", "# Factor to amplify diverse pathways contribution", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "connectivity_weight", "=", "0.3", "# Weight for connectivity to unvisited nodes", "loop_closure_weight", "=", "0.1", "# Weight for forming shorter loops", "future_path_weight", "=", "0.1", "# Weight for potential future path lengths", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Estimate potential loop closure score considering closeness to the destination", "loop_closure_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score incorporating heuristic adjustment for diverse pathways exploration", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "loop_closure_weight", "*", "loop_closure_score", "+", "future_path_weight", "*", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Amplifying nodes contributing to diverse pathways", "diversity_score", "=", "len", "(", "unvisited_nodes", ")", "-", "connectivity_score", "score", "*=", "(", "1", "+", "heuristic_adjustment_factor", "*", "diversity_score", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.253153475532606}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_risk_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "risk_weight", "=", "0.4", "# Weight for risk based on distance to unvisited nodes", "destination_weight", "=", "0.2", "# Weight for proximity to destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "risk_factor", "=", "direct_distance", "/", "(", "distance_to_destination", "+", "1", ")", "# Adding 1 to avoid division by zero", "score", "=", "(", "direct_weight", "*", "direct_distance", ")", "+", "(", "risk_weight", "*", "risk_factor", ")", "+", "(", "destination_weight", "*", "distance_to_destination", ")", "if", "score", "<", "min_risk_score", ":", "# Minimizing risk score", "min_risk_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.260495508984471}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "connectivity_scores", "=", "{", "node", ":", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "!=", "float", "(", "'inf'", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "closeness_factor", "=", "0.3", "# Factor to increase score for closer nodes", "maximum_connectivity", "=", "max", "(", "connectivity_scores", ".", "values", "(", ")", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "estimated_tour_length", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "connectivity_score", "=", "connectivity_scores", "[", "node", "]", "/", "maximum_connectivity", "if", "maximum_connectivity", ">", "0", "else", "0", "closeness_score", "=", "closeness_factor", "/", "(", "1", "+", "direct_distance", ")", "# Closer nodes get higher weight", "score", "=", "direct_distance", "+", "estimated_tour_length", "-", "(", "closeness_score", "+", "connectivity_score", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "proximity_weight", "=", "0.3", "# Weight for proximity to unvisited nodes", "recency_weight", "=", "0.2", "# Weight for the recency of visited connections", "risk_weight", "=", "0.1", "# Weight for potential distance to destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "*", "(", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "# Proximity to unvisited nodes", "recency_penalty", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "previous", "]", "+", "1", ")", "for", "previous", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "previous", "not", "in", "unvisited_nodes", ")", "# Adjusted penalty based on distance to already visited nodes", "risk_factor", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "(", "1", "if", "node", "!=", "destination_node", "else", "0", ")", "# Potential distance to destination", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "proximity_weight", "*", "proximity_score", "-", "recency_weight", "*", "recency_penalty", "-", "risk_weight", "*", "risk_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.560484930318687}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.5", "# Weight for direct distance", "local_density_weight", "=", "0.3", "# Weight for density of unvisited nodes", "future_profit_weight", "=", "0.2", "# Weight for potential future savings", "length_penalty_weight", "=", "0.2", "# Weight for long paths penalty", "# Function to calculate local density score for unvisited nodes", "def", "calculate_local_density", "(", "node", ")", ":", "density_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "density_score", "+=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "+", "1e-5", ")", "# Avoid division by zero", "return", "density_score", "# Function to estimate future profit based on potential savings", "def", "estimate_future_profit", "(", "node", ")", ":", "total_future_savings", "=", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "return", "total_future_savings", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "local_density_score", "=", "calculate_local_density", "(", "node", ")", "future_profit", "=", "estimate_future_profit", "(", "node", ")", "# Combined scoring mechanism with length penalty", "score", "=", "(", "direct_distance_weight", "*", "(", "-", "direct_distance", ")", "+", "local_density_weight", "*", "local_density_score", "+", "future_profit_weight", "*", "future_profit", "-", "length_penalty_weight", "*", "(", "direct_distance", "**", "2", ")", ")", "# Penalizing longer distances", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 27.17921754169139}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Define a cost function that considers both distance and potential future visits", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Estimate remaining distance to all unvisited nodes as a penalty", "estimated_remaining_distance", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "node", "]", "[", "nn", "]", "for", "nn", "in", "unvisited_nodes", "if", "nn", "!=", "node", "]", ")", "scores", "[", "node", "]", "=", "distance_to_node", "+", "estimated_remaining_distance", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 8.4323878079629}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "cluster_weight", "=", "0.4", "# Weight for climbing towards clustered nodes", "randomness_weight", "=", "0.2", "# Weight to introduce randomness to exploration", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate cluster score based on proximity to other unvisited nodes", "cluster_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Introduce some randomness in the decision to encourage exploration", "randomness_bonus", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "*", "randomness_weight", "# Calculate combined score", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "cluster_weight", "*", "cluster_score", "+", "randomness_bonus", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.043324678645813}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate the average distance to all unvisited nodes", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Define a weight factor to prioritize the average distance", "weight_factor", "=", "0.3", "# Adjust this value to weigh the influence of the average distance", "# Calculate scores for each unvisited node combining distance to current and average distance", "node_scores", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "weight_factor", "*", "average_distance", "for", "node", "in", "unvisited_nodes", "}", "# Select the node with the minimum score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["# {The new algorithm introduces a volatility score that decreases with fewer unvisited neighbors and balances it with a distance penalty to enhance exploration of less connected nodes.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_penalty", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "1.5", "# Emphasize distance", "volatility_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "/", "max", "(", "1", ",", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "heuristic_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "float", "(", "'inf'", ")", "scores", "[", "node", "]", "=", "distance_penalty", "-", "volatility_score", "+", "heuristic_cost", "# Adjusted score equation", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 26.04202206317254}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate distance to destination for all unvisited nodes", "distances_to_destination", "=", "{", "node", ":", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Assign a score based on distance to current node and cost to destination", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_current", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "distance_to_current", "+", "distances_to_destination", "[", "node", "]", "+", "np", ".", "random", ".", "rand", "(", ")", "# Adding randomness for exploration", "scores", "[", "node", "]", "=", "score", "# Select the node with the minimum score", "best_next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "best_next_node"], "code_perf": 12.346417146857679}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "exploration_weight", "=", "0.3", "# Weight for potential exploration benefit", "randomness_weight", "=", "0.3", "# Weight for random exploration", "# Function to calculate average distance to unvisited nodes", "def", "calculate_average_distance", "(", "node", ")", ":", "return", "np", ".", "mean", "(", "[", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "]", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_distance_to_futures", "=", "calculate_average_distance", "(", "node", ")", "# Incorporate randomness for node selection", "random_factor", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "*", "randomness_weight", "# Combined scoring mechanism with new exploration advantage", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "exploration_weight", "*", "avg_distance_to_futures", "+", "random_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.557668990494236}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "connection_weight", "=", "0.4", "# Weight encouraging exploration of less connected nodes", "historical_weight", "=", "0.3", "# Weight for considering path efficiency", "direct_weight", "=", "0.3", "# Weight for direct distance", "# Calculate historical penalties based on previous selections", "historical_penalty", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate score for exploring less connected nodes", "connection_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "# Evaluate the destination alignment", "destination_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combine scores into a final score for the node", "score", "=", "(", "connection_weight", "*", "connection_score", "-", "historical_weight", "*", "historical_penalty", "-", "direct_weight", "*", "direct_distance", "+", "1", "/", "(", "destination_distance", "+", "1", ")", ")", "# Adding a small value to avoid division by zero", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.676070316431697}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "connection_bonus", "=", "2.0", "decay_factor", "=", "0.8", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "proximity_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "direct_distance", "+", "(", "decay_factor", "*", "proximity_to_destination", ")", "-", "(", "connection_bonus", "*", "connectivity_score", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.81837595974678}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "min_distance_to_unvisited", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "adjustment_factor", "=", "(", "min_distance_to_unvisited", "-", "direct_distance", ")", "*", "0.2", "# Encouragement to explore closer nodes", "score", "=", "direct_distance", "+", "adjustment_factor", "+", "random", ".", "uniform", "(", "0.0", ",", "0.1", ")", "# Minor stochastic element", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.489818592463232}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "total_distance_traveled", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "if", "node", "!=", "current_node", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "# Penalty for total distance traveled so far", "penalty_score", "=", "total_distance_traveled", "*", "0.1", "# Combined score emphasizing proximity while penalizing longer paths", "score", "=", "distance_to_next", "+", "distance_to_destination", "+", "penalty_score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "scores", "=", "{", "}", "penalty_factor", "=", "0.5", "# A factor to penalize longer distances", "bonus_factor", "=", "2.0", "# A factor to reward nodes with more connections", "for", "node", "in", "unvisited_nodes", ":", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "penalty_factor", "connection_bonus", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "*", "bonus_factor", "indirect_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "scores", "[", "node", "]", "=", "distance_score", "-", "connection_bonus", "+", "indirect_distance", "# Lower score is better", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 10.131823712511094}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.6", "# Weight to favor closer nodes", "destination_weight", "=", "0.4", "# Weight to consider distance to final destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "proximity_weight", "*", "direct_distance", ")", "+", "(", "destination_weight", "*", "distance_to_destination", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.6490879527083395}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "penalty_weight", "=", "0.3", "# Weight for penalty on longer detours", "cluster_weight", "=", "0.2", "# Weight for clustering benefits", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "total_distance_to_destination", ")", "*", "penalty_weight", "cluster_contribution", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "score", "=", "-", "(", "direct_distance", "+", "penalty", ")", "+", "(", "cluster_contribution", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "*", "cluster_weight", ")", "+", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "distance_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.327080615198767}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "time_decay_factor", "=", "0.2", "# Factor to penalize long-term travel costs", "novelty_weight", "=", "0.4", "# Weight for visiting less frequently seen nodes", "clustering_weight", "=", "0.4", "# Weight for proximity to other nodes", "# Calculate proximity clustering", "clustering_scores", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "clustering_scores", "[", "node", "]", "novelty_penalty", "=", "novelty_weight", "*", "(", "1", "if", "node", "not", "in", "unvisited_nodes", "else", "0", ")", "# Penalty for novelty", "# Time-based cost adjustment", "adjusted_cost", "=", "direct_distance", "*", "(", "1", "+", "time_decay_factor", ")", "score", "=", "adjusted_cost", "+", "novelty_penalty", "+", "clustering_weight", "*", "proximity_score", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.267441399691243}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "savings_weight", "=", "0.6", "# Adjusted weight for cluster savings", "distance_weight", "=", "0.4", "# Adjusted weight for direct distance cost", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "unvisited_count", "or", "1", ")", "# Introducing a factor that favors nodes which lead to a denser cluster", "cluster_density_factor", "=", "(", "1", "/", "(", "direct_distance", "+", "1", ")", ")", "*", "(", "unvisited_count", "/", "len", "(", "unvisited_nodes", ")", ")", "score", "=", "(", "savings_weight", "*", "cluster_average_distance", "*", "cluster_density_factor", ")", "-", "(", "distance_weight", "*", "direct_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.388323820032392}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "frequency_weight", "=", "0.4", "# Weight for historical visit frequency", "future_path_weight", "=", "0.2", "# Weight for potential future paths", "# Calculate the historical visit frequency of unvisited nodes", "visit_frequency", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "# Example frequency, this would need actual visit tracking in practical use", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Historical visit frequency score inversely related to frequency", "frequency_score", "=", "(", "1", "/", "(", "visit_frequency", "[", "node", "]", "+", "1", ")", ")", "# Penalizing frequent visits", "# Future path estimation based on average distance to other unvisited nodes", "future_path_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "for", "unvisited", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combined score", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "frequency_weight", "*", "frequency_score", "+", "future_path_weight", "*", "future_path_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.4597365709491275}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "unvisited_count_penalty", "=", "len", "(", "unvisited_nodes", ")", "/", "4.0", "# Dynamic penalty based on remaining unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "weighted_score", "=", "distance_to_node", "+", "(", "distance_to_destination", "*", "0.4", ")", "+", "(", "0.2", "*", "unvisited_count_penalty", ")", "# Weighing factors", "if", "weighted_score", "<", "min_score", ":", "min_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.331995111188165}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_distance", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "base_distance_weight", "=", "0.4", "# Weight for direct distance", "proximity_weight", "=", "0.4", "# Weight for proximity towards unvisited nodes", "clustering_weight", "=", "0.2", "# Weight for clustering potential based on remaining nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Calculate clustering potential based on distance to the nearest unvisited node", "clustering_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Calculate final score considering minimum distance bias", "score", "=", "-", "base_distance_weight", "*", "direct_distance", "+", "proximity_weight", "*", "proximity_score", "+", "clustering_weight", "*", "clustering_score", "*", "(", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "# Select the node with the best score", "if", "score", "<", "min_distance", ":", "min_distance", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 36.15975931430669}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "revisit_penalty_weight", "=", "0.3", "# Weight for the penalty of close neighbors", "connectivity_weight", "=", "0.3", "# Weight based on connectivity to other nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate penalty based on proximity to other unvisited nodes", "revisit_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<=", "2", "for", "other_node", "in", "unvisited_nodes", ")", "*", "2", "# Calculate connectivity (weighted by number of connections to other unvisited nodes)", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_distance_weight", "*", "direct_distance", ")", "+", "(", "revisit_penalty_weight", "*", "revisit_penalty", ")", "+", "(", "connectivity_weight", "*", "connectivity_score", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.974931194699994}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "clustering_weight", "=", "0.6", "# Weight for clustering savings among unvisited nodes", "proximity_weight", "=", "0.4", "# Weight for proximity to destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "max_distance_to_others", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "proximity_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "direct_distance", "+", "max_distance_to_others", "*", "clustering_weight", ")", "-", "(", "proximity_weight", "*", "proximity_to_destination", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.467431340841463}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_reduction_factor", "=", "0.4", "# Encourage visiting closer nodes", "synergy_factor", "=", "0.3", "# Reward visiting nodes near previously visited nodes", "dynamic_penalty_weight", "=", "0.3", "# Penalty for distant return routes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "prev", "]", "for", "prev", "in", "unvisited_nodes", "if", "prev", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "# Average distance to unvisited nodes", "distance_penalty", "=", "dynamic_penalty_weight", "*", "(", "max", "(", "0", ",", "direct_distance", "-", "cumulative_distance", ")", ")", "synergy_score", "=", "synergy_factor", "*", "sum", "(", "distance_matrix", "[", "node", "]", "[", "prev", "]", "for", "prev", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average distance to unvisited nodes from current node", "score", "=", "(", "-", "distance_reduction_factor", "*", "direct_distance", ")", "+", "synergy_score", "-", "distance_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.376134948213863}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Start with positive infinity for minimization", "# Compute total current tour length as a penalty factor", "current_tour_length", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Find cluster center (average position) of unvisited nodes", "cluster_center_x", "=", "sum", "(", "node", "%", "len", "(", "distance_matrix", ")", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "cluster_center_y", "=", "sum", "(", "node", "//", "len", "(", "distance_matrix", ")", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Compute distances to the cluster center for each unvisited node", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_cluster_center", "=", "(", "(", "node", "%", "len", "(", "distance_matrix", ")", "-", "cluster_center_x", ")", "**", "2", "+", "(", "node", "//", "len", "(", "distance_matrix", ")", "-", "cluster_center_y", ")", "**", "2", ")", "**", "0.5", "# Modify the score using a dynamic penalty based on tour length", "score", "=", "direct_distance", "+", "distance_to_cluster_center", "+", "(", "0.1", "*", "current_tour_length", "/", "len", "(", "unvisited_nodes", ")", ")", "# Selecting the node that minimizes this score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 23.211915320210384}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "dynamic_cost_weight", "=", "0.4", "# Weight for travel cost to unvisited nodes", "node_density_weight", "=", "0.4", "# Weight for density of unvisited neighbors", "backtracking_penalty_weight", "=", "0.2", "# Weight for backtracking penalties", "for", "node", "in", "unvisited_nodes", ":", "travel_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "node_density", "=", "sum", "(", "1", "for", "next_node", "in", "unvisited_nodes", "if", "next_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "next_node", "]", ">", "0", ")", "backtracking_penalty", "=", "backtracking_penalty_weight", "*", "(", "distance_matrix", "[", "node", "]", "[", "current_node", "]", "if", "node", "in", "unvisited_nodes", "else", "0", ")", "score", "=", "-", "dynamic_cost_weight", "*", "travel_cost", "+", "node_density_weight", "*", "node_density", "-", "backtracking_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Score is a combination of direct distance and a penalty based on distance to destination", "score", "=", "direct_distance", "+", "distance_to_destination", "*", "0.5", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "avg_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "+", "0.5", "*", "(", "avg_distance_remaining", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "0.3", "*", "(", "direct_distance", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.446177884235821}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "connectivity_scores", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", "}", "total_connectivity", "=", "sum", "(", "connectivity_scores", ".", "values", "(", ")", ")", "if", "total_connectivity", ">", "0", ":", "connectivity_weights", "=", "{", "node", ":", "score", "/", "total_connectivity", "for", "node", ",", "score", "in", "connectivity_scores", ".", "items", "(", ")", "}", "else", ":", "connectivity_weights", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "weighted_distance", "=", "direct_distance", "*", "(", "1", "+", "connectivity_weights", "[", "node", "]", ")", "score", "=", "weighted_distance", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.976337600597958}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for direct proximity to destination", "cluster_savings_weight", "=", "0.3", "# Weight for savings from visited clusters", "penalty_weight", "=", "0.2", "# Penalty for distances to unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_savings_sum", "=", "sum", "(", "distance_matrix", "[", "other_node", "]", "[", "node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_savings", "=", "cluster_savings_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "total_distance_to_destination", "-", "direct_distance", "*", "proximity_weight", "+", "cluster_average_savings", "*", "cluster_savings_weight", "-", "penalty_weight", "*", "direct_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.559793003881697}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "connectivity_factor", "=", "len", "(", "unvisited_nodes", ")", "# Factor based on the number of unvisited nodes", "immediate_weight", "=", "0.4", "# Weight for immediate travel cost", "efficiency_weight", "=", "0.4", "# Weight for route efficiency", "adaptability_weight", "=", "0.2", "# Adaptability weight based on connectivity", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average distance to remaining nodes", "connectivity_score", "=", "connectivity_factor", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Measure of potential interactions", "score", "=", "(", "-", "immediate_weight", "*", "direct_distance", ")", "+", "(", "efficiency_weight", "*", "average_distance_to_unvisited", ")", "-", "(", "adaptability_weight", "*", "connectivity_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.41724333977419}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "exploration_factor", "=", "0.3", "# Factor to encourage exploration of non-optimal paths", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "historical_efficiency_weight", "=", "0.4", "# Weight for historical path efficiency", "loop_closure_weight", "=", "0.1", "# Weight for forming shorter loops", "historical_efficiencies", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "historical_efficiency", "=", "historical_efficiencies", ".", "get", "(", "node", ",", "1", ")", "# Default to 1 if not calculated", "# Estimate potential loop closure score", "loop_closure_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score calculating historical efficiency", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "historical_efficiency_weight", "*", "historical_efficiency", "+", "loop_closure_weight", "*", "loop_closure_score", "# Randomize exploration component to introduce variability", "exploration_score", "=", "random", ".", "uniform", "(", "0", ",", "exploration_factor", ")", "score", "+=", "exploration_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "historical_efficiencies", "[", "next_node", "]", "=", "historical_efficiency", "+", "1", "# Increment efficiency for selected node", "return", "next_node"], "code_perf": 10.43943041605413}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "visit_preference_radius", "=", "5", "# Radius to consider neighboring nodes for visit preference", "neighbor_count", "=", "sum", "(", "1", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<=", "visit_preference_radius", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "visit_preference_effect", "=", "neighbor_count", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "# Normalize visit preference", "score", "=", "direct_distance", "+", "0.5", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "0.4", "*", "visit_preference_effect", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.450370583313572}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Define a user threshold for distance penalty", "distance_threshold", "=", "5", "# adjustable threshold value", "penalty_factor", "=", "1.5", "# factor by which we penalize long distances", "adjusted_distances", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "random_factor", "=", "random", ".", "uniform", "(", "-", "0.1", ",", "0.1", ")", "# Apply penalty if distance exceeds the threshold", "if", "distance", ">", "distance_threshold", ":", "distance", "*=", "penalty_factor", "adjusted_distances", "[", "node", "]", "=", "distance", "*", "(", "1", "+", "random_factor", ")", "# Select the unvisited node with the smallest adjusted distance", "next_node", "=", "min", "(", "adjusted_distances", ",", "key", "=", "adjusted_distances", ".", "get", ")", "return", "next_node"], "code_perf": 6.9904101862612125}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Clustering the unvisited nodes based on their distance from the current node", "clusters", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_key", "=", "round", "(", "distance", "//", "10", ")", "# Group by distance ranges", "if", "cluster_key", "not", "in", "clusters", ":", "clusters", "[", "cluster_key", "]", "=", "[", "]", "clusters", "[", "cluster_key", "]", ".", "append", "(", "node", ")", "# Evaluating nodes within clusters", "for", "cluster", "in", "clusters", ".", "values", "(", ")", ":", "if", "cluster", ":", "min_distance_node", "=", "min", "(", "cluster", ",", "key", "=", "lambda", "n", ":", "distance_matrix", "[", "current_node", "]", "[", "n", "]", ")", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "min_distance_node", "]", "future_cost", "=", "sum", "(", "distance_matrix", "[", "min_distance_node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Score that considers intra-cluster proximity, future costs and randomness", "score", "=", "direct_distance", "+", "(", "1.5", "*", "future_cost", ")", "+", "(", "0.1", "*", "random", ".", "uniform", "(", "0", ",", "1", ")", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "min_distance_node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "accessibility_weight", "=", "0.4", "# Weight for accessibility to unvisited nodes", "distance_weight", "=", "0.4", "# Weight for proximity to the destination node", "penalty_weight", "=", "0.2", "# Penalty for distance beyond a threshold", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "distance_threshold", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_visited_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "prev", "]", "for", "prev", "in", "(", "set", "(", "range", "(", "len", "(", "distance_matrix", ")", ")", ")", "-", "set", "(", "unvisited_nodes", ")", ")", "if", "prev", "!=", "node", ")", "/", "(", "len", "(", "set", "(", "range", "(", "len", "(", "distance_matrix", ")", ")", ")", "-", "set", "(", "unvisited_nodes", ")", ")", "or", "1", ")", "penalty", "=", "penalty_weight", "*", "max", "(", "0", ",", "direct_distance", "-", "distance_threshold", ")", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", "+", "penalty", ")", "+", "(", "average_visited_distance", "*", "accessibility_weight", ")", "+", "(", "distance_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.537059114376442}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "clustering_threshold", "=", "15", "# Distance threshold for clustering influence", "# Calculate the number of nodes within the clustering threshold", "cluster_count", "=", "sum", "(", "1", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<=", "clustering_threshold", ")", "# Calculate total distance and average proximity to destination", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "clustering_effect", "=", "cluster_count", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "# Normalize clustering influence", "score", "=", "direct_distance", "+", "0.5", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "0.5", "*", "clustering_effect", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.450370583313572}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_cost_weight", "=", "0.4", "# Weight for immediate travel cost", "potential_saving_weight", "=", "0.4", "# Weight for potential savings", "risk_factor_weight", "=", "0.2", "# Weight for risk based on distance variability", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "distance_variance", "=", "sum", "(", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "-", "average_distance", ")", "**", "2", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "risk_factor", "=", "risk_factor_weight", "*", "distance_variance", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Cumulative savings calculation assuming shortcuts", "potential_saving", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", "if", "next_node", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "score", "=", "(", "-", "immediate_cost_weight", "*", "direct_distance", ")", "+", "(", "potential_saving_weight", "*", "potential_saving", ")", "-", "risk_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.424216980256856}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "+", "(", "1", "/", "(", "distance_to_destination", "+", "1", ")", ")", "# Promote closer nodes", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.6608569721620725}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "average_distance", ")", "connectivity_factor", "=", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "float", "(", "'inf'", ")", ")", "connectivity_score", "=", "connectivity_factor", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "score", "=", "direct_distance", "+", "distance_penalty", "-", "(", "connectivity_score", "*", "average_distance", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "novelty_weight", "=", "0.4", "# Weight for novelty based on connectivity", "frequency_weight", "=", "0.2", "# Weight for visitation frequency", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Novelty score based on the number of connections to unvisited nodes", "connectivity_score", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", ">", "0", ")", "# Frequency penalty for nodes visited frequently", "frequency_penalty", "=", "sum", "(", "1", "for", "prev", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "prev", "not", "in", "unvisited_nodes", "and", "prev", "!=", "current_node", ")", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "novelty_weight", "*", "connectivity_score", "-", "frequency_weight", "*", "frequency_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate penalties based on distance from the destination", "penalties", "=", "{", "node", ":", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Calculate the effective cost for each unvisited node", "effective_costs", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "penalties", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Select the node with the lowest effective cost", "next_node", "=", "min", "(", "effective_costs", ",", "key", "=", "effective_costs", ".", "get", ")", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity to unvisited nodes", "future_benefit_weight", "=", "0.3", "# Weight for potential future benefits of node selection", "urgency_weight", "=", "0.2", "# Weight for urgency based on distance to destination and unvisited nodes", "time_decay_factor", "=", "0.8", "# Factor to reduce score over distance", "for", "node", "in", "unvisited_nodes", ":", "proximity_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_benefit_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "urgency_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "time_decay_factor", "score", "=", "(", "(", "1", "/", "(", "proximity_score", "+", "1", ")", ")", "*", "proximity_weight", "+", "(", "future_benefit_score", "*", "future_benefit_weight", ")", "-", "urgency_score", "*", "urgency_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.780818176533601}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_future_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "future_cost_weight", "=", "0.5", "# Weight for estimated future costs", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "estimated_future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_neighbor", "]", "for", "next_neighbor", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "future_cost", "=", "estimated_future_cost", "+", "total_distance_to_destination", "score", "=", "(", "direct_distance", "*", "distance_weight", ")", "+", "(", "future_cost", "*", "future_cost_weight", ")", "if", "score", "<", "min_future_cost", ":", "min_future_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "total_weight", "=", "0", "weighted_distances", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Scale the weight inversely with the distance and add randomness", "noise", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "# Random factor to encourage exploration", "weighted_distance", "=", "distance", "/", "(", "1", "+", "noise", ")", "weighted_distances", "[", "node", "]", "=", "weighted_distance", "total_weight", "+=", "weighted_distance", "# Normalize weights and randomly select the next node based on probabilities", "probabilities", "=", "{", "node", ":", "weight", "/", "total_weight", "for", "node", ",", "weight", "in", "weighted_distances", ".", "items", "(", ")", "}", "next_node", "=", "random", ".", "choices", "(", "list", "(", "probabilities", ".", "keys", "(", ")", ")", ",", "weights", "=", "probabilities", ".", "values", "(", ")", ")", "[", "0", "]", "return", "next_node"], "code_perf": 29.80610408155138}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "exploration_factor", "=", "0.5", "# Factor to promote exploration of diverse routes", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.3", "# Weight for direct distance", "exploration_weight", "=", "0.4", "# Weight for encouraging exploration", "destination_alignment_weight", "=", "0.3", "# Weight for alignment towards destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate exploration score based on distance to unvisited nodes", "exploration_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "+", "1e-5", ")", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Estimate score for alignment towards the final destination", "destination_alignment_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score incorporating exploration preference", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "exploration_weight", "*", "exploration_score", "+", "destination_alignment_weight", "*", "destination_alignment_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 18.684491648863947}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.6", "# Updated weight for proximity to destination", "connectivity_weight", "=", "0.4", "# Updated weight for connectivity", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Implementing a penalty based on the distance to the destination", "penalty", "=", "(", "direct_distance", "/", "total_distance_to_destination", ")", "if", "total_distance_to_destination", ">", "0", "else", "1", "# Assessing connectivity based on distance to all other unvisited nodes", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combining scores with adjusted weights", "score", "=", "-", "(", "direct_distance", "*", "penalty", ")", "+", "(", "connectivity_weight", "*", "connectivity_score", ")", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.847815130900893}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_remaining", "=", "total_distance_to_remaining", "/", "len", "(", "unvisited_nodes", ")", "direct_influence_weight", "=", "0.5", "# Modified weight for direct distance influence", "future_cost_weight", "=", "0.5", "# Balanced weight for future path estimation", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_cost", "=", "future_cost_weight", "*", "(", "average_distance_to_remaining", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "score", "=", "(", "direct_influence_weight", "*", "direct_distance", ")", "+", "future_cost", "+", "direct_distance", "*", "(", "1", "-", "future_cost_weight", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.450370583313572}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct proximity", "exploration_weight", "=", "0.3", "# Weight for less connected (exploration) nodes", "penalty_weight", "=", "0.3", "# Penalty for distances to remaining unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "exploration_score", "=", "len", "(", "unvisited_nodes", ")", "-", "sum", "(", "1", "for", "next_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "<", "direct_distance", ")", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "exploration_weight", "*", "exploration_score", ")", "-", "(", "penalty_weight", "*", "total_distance_to_unvisited", ")", "+", "(", "0.5", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.132008077168107}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.5", "# Weight for direct distance", "neighborhood_weight", "=", "0.3", "# Weight for neighborhood influence", "revisit_penalty_weight", "=", "0.1", "# Penalty for revisiting nodes", "hazard_score_weight", "=", "0.1", "# Weight for remaining distance to unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "neighborhood_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average neighborhood influence", "# Penalty for the cases where we revisit nodes (if applicable)", "revisit_penalty", "=", "0", "if", "node", "in", "unvisited_nodes", "else", "float", "(", "'inf'", ")", "# Hazard score calculated based on remaining distance to all unvisited nodes", "hazard_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "direct_distance_weight", "*", "direct_distance", "+", "neighborhood_weight", "*", "neighborhood_score", "-", "revisit_penalty_weight", "*", "revisit_penalty", "-", "hazard_score_weight", "*", "hazard_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.582021334684685}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "candidates", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_bonus", "=", "1", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "# Closer nodes get higher scores", "random_factor", "=", "random", ".", "uniform", "(", "0.9", ",", "1.1", ")", "# Introduce variability", "score", "=", "(", "distance_to_node", "*", "0.5", ")", "+", "(", "distance_to_destination", "*", "0.3", ")", "+", "(", "proximity_bonus", "*", "0.2", ")", "*", "random_factor", "candidates", ".", "append", "(", "(", "node", ",", "score", ")", ")", "next_node", "=", "min", "(", "candidates", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 6.882177178371151}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connection_count", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "penalty_score", "=", "(", "len", "(", "unvisited_nodes", ")", "-", "connection_count", ")", "*", "10", "# Higher penalty for fewer connections", "scores", "[", "node", "]", "=", "distance_score", "+", "penalty_score", "# Lower score is better", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<", "min_distance", ":", "min_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Step 1: Determine the closest unvisited node", "nearest_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "nearest_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "nearest_node", "]", "# Step 2: Random exploration decision", "exploration_factor", "=", "0.3", "# 30% chance to explore other nodes", "if", "random", ".", "random", "(", ")", "<", "exploration_factor", ":", "# Explore farther nodes among unvisited ones", "next_node", "=", "max", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "else", ":", "# Stick with the nearest node", "next_node", "=", "nearest_node", "return", "next_node"], "code_perf": 15.362391628652322}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "# Calculate the centroid of unvisited nodes for clustering", "centroid_x", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "centroid_y", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "current_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "direct_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Proximity score", "proximity_score", "=", "1", "/", "(", "direct_distance_to_destination", "+", "1", ")", "# Clustering score based on average distance to remaining unvisited nodes", "avg_distance_to_cluster", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "# New score with an emphasis on clustering", "score", "=", "proximity_score", "*", "(", "avg_distance_to_cluster", "-", "distance_to_next", ")", "*", "(", "1", "/", "(", "1", "+", "centroid_x", "+", "centroid_y", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.437308110660587}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "proximity_weight", "=", "0.5", "# Weight for proximity to unvisited nodes", "future_cost_weight", "=", "0.1", "# Weight for minimizing future distance", "# Calculate the total distance from the current node to all unvisited nodes", "total_future_distance", "=", "sum", "(", "min", "(", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "for", "unvisited", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Proximity score based on the average distance to each unvisited node", "proximity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "for", "unvisited", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Calculate future travel cost from the current node to this node and then the minimum distance to all unvisited nodes", "future_cost", "=", "total_future_distance", "-", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "unvisited", "]", "for", "unvisited", "in", "unvisited_nodes", ")", "cost", "=", "(", "direct_distance_weight", "*", "direct_distance", ")", "+", "(", "proximity_weight", "*", "proximity_score", ")", "+", "(", "future_cost_weight", "*", "future_cost", ")", "if", "cost", "<", "min_cost", ":", "min_cost", "=", "cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.751184264970153}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate the distance to the destination from the current node", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Introduce a dynamic penalty factor based on the distance to the destination", "penalty_factor", "=", "1", "/", "(", "distance_to_destination", "+", "1", ")", "# Calculate scores for each unvisited node", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "desirability_score", "=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", "# Compute the multiplicative score with penalty", "scores", "[", "node", "]", "=", "(", "distance_to_node", "*", "penalty_factor", ")", "*", "desirability_score", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.699237951584123}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_penalty", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance to nodes", "future_savings_weight", "=", "0.4", "# Weight for heuristic savings based on clustering", "detour_penalty_weight", "=", "0.1", "# Weight for penalty on detour", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_savings", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "detour_penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "(", "total_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", ")", ")", "*", "detour_penalty_weight", "score", "=", "(", "direct_weight", "*", "direct_distance", ")", "+", "(", "future_savings_weight", "*", "future_savings", ")", "+", "detour_penalty", "if", "score", "<", "min_penalty", ":", "min_penalty", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.857602299783965}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "efficiency_weight", "=", "0.6", "# Weight for route efficiency", "proximity_weight", "=", "0.4", "# Weight for proximity", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "efficiency_factor", "=", "(", "1", "/", "direct_distance", ")", "if", "direct_distance", ">", "0", "else", "0", "proximity_gain", "=", "proximity_weight", "*", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ">", "0", "else", "0", "density_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "node", "!=", "other_node", ")", "if", "unvisited_count", ">", "1", "else", "0", "score", "=", "(", "efficiency_weight", "*", "efficiency_factor", ")", "+", "proximity_gain", "+", "density_score", "*", "(", "0.1", "*", "(", "unvisited_count", "-", "1", ")", ")", "-", "total_distance_to_destination", "*", "0.01", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 27.4298589597145}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "potential_nodes", "=", "[", "]", "total_distance_to_visited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "current_node", "]", "for", "node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "node", "not", "in", "unvisited_nodes", ")", "min_distance_to_visited", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "node", "not", "in", "unvisited_nodes", ")", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_remaining_distance", "/", "len", "(", "unvisited_nodes", ")", "direct_influence_weight", "=", "0.6", "exploration_weight", "=", "0.4", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "exploration_score", "=", "(", "total_distance_to_visited", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "+", "min_distance_to_visited", "score", "=", "(", "direct_influence_weight", "*", "direct_distance", ")", "+", "(", "exploration_weight", "*", "exploration_score", ")", "+", "average_distance", "# Introduce a random perturbation", "if", "random", ".", "random", "(", ")", "<", "0.1", ":", "# 10% chance to explore other nodes", "score", "*=", "1.1", "# Slightly increase the score to promote exploration", "potential_nodes", ".", "append", "(", "(", "node", ",", "score", ")", ")", "# Select the node with the least score", "next_node", "=", "min", "(", "potential_nodes", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 7.2000754805639495}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "total_distance_to_other_nodes", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "nn", "]", "for", "nn", "in", "unvisited_nodes", "if", "nn", "!=", "node", ")", "scores", "[", "node", "]", "=", "total_distance_to_other_nodes", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 31.616956377461854}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "# Calculate distances to unvisited nodes and their density", "unvisited_distances", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "density_factor", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "sum", "(", "unvisited_distances", ")", "+", "1e-5", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Dynamic factor based on distance and density of unvisited nodes", "dynamic_factor", "=", "density_factor", "*", "distance", "# Calculate remaining distance to destination", "remaining_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Weighted score combining proximity, dynamic factor, and remaining distance", "weighted_score", "=", "distance", "+", "dynamic_factor", "+", "remaining_distance_to_destination", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "unvisited_nodes", "=", "list", "(", "unvisited_nodes", ")", "def", "connectivity_score", "(", "node", ")", ":", "# Example connectivity score based on the number of links to other unvisited nodes", "return", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "0", ")", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity", "=", "connectivity_score", "(", "node", ")", "# Assess node's connectivity", "score", "=", "distance", "/", "(", "connectivity", "+", "1", ")", "# Combine distance and connectivity", "scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "destination_weight", "=", "0.5", "# Weight emphasizing distance to destination", "unvisited_gain_weight", "=", "0.3", "# Weight for potential gain from visiting unvisited nodes", "cumulative_penalty_weight", "=", "0.2", "# Penalty for cumulative distance traveled", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "prev_node", "]", "for", "prev_node", "in", "unvisited_nodes", "if", "prev_node", "!=", "current_node", ")", "unvisited_total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "potential_gain", "=", "(", "unvisited_total_distance", "-", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "destination_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "potential_gain", "*", "unvisited_gain_weight", "-", "(", "cumulative_distance", "*", "cumulative_penalty_weight", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 15.715431383749756}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity to destination", "clustering_weight", "=", "0.2", "# Weight for clustering savings", "travel_efficiency_weight", "=", "0.2", "# Weight for travel efficiency based on distances", "exploration_weight", "=", "0.1", "# Weight for exploration of unvisited nodes", "min_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "max_distance", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "normalized_distances", "=", "[", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "-", "min_distance", ")", "/", "(", "max_distance", "-", "min_distance", "or", "1", ")", "for", "node", "in", "unvisited_nodes", "]", "for", "idx", ",", "node", "in", "enumerate", "(", "unvisited_nodes", ")", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "(", "cluster_average_distance", "*", "clustering_weight", ")", "-", "(", "travel_efficiency_weight", "*", "normalized_distances", "[", "idx", "]", ")", "+", "(", "exploration_weight", "*", "(", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.072850394801886}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "centrality_weight", "=", "0.3", "# Weight for centrality based on connections", "flexibility_weight", "=", "0.1", "# Weight for diversification/penalty for unvisited distance", "destination_weight", "=", "0.1", "# Weight for proximity to destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "centrality_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "# Total distance to other unvisited nodes", "# Flexibility score that encourages visiting nodes far from unvisited nodes", "flexibility_score", "=", "-", "sum", "(", "distance_matrix", "[", "next", "]", "[", "node", "]", "for", "next", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Proximity score based on distance to destination", "proximity_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "centrality_weight", "*", "centrality_score", "+", "flexibility_weight", "*", "flexibility_score", "-", "destination_weight", "*", "proximity_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.032529844514729}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "distance_weight", "=", "0.5", "# Adjust weight for direct distance", "connectivity_weight", "=", "0.3", "# Weight for future connectivity potential", "alignment_weight", "=", "0.2", "# Weight for alignment towards destination", "node_value_factor", "=", "0.1", "# Factor to assess individual node importance", "if", "unvisited_nodes", ":", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate connectivity potential based on unvisited nodes' distances", "connectivity_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "+", "1e-5", ")", "for", "next", "in", "unvisited_nodes", ")", "# Estimate score for final destination alignment", "alignment_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Node value based on deviation from the direct route (less deviation = higher value)", "node_value", "=", "max", "(", "0", ",", "1", "-", "(", "direct_distance", "/", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "current_node", ")", ")", ")", "# Combined score", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "alignment_weight", "*", "alignment_score", "+", "node_value_factor", "*", "node_value", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 27.79525652377466}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_penalty", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.6", "# Weight for the distance to the closest unvisited node", "penalty_weight", "=", "0.4", "# Weight for the penalty based on the max distance to unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "max_distance_to_unvisited", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "score", "=", "(", "direct_weight", "*", "direct_distance", ")", "+", "(", "penalty_weight", "*", "max_distance_to_unvisited", ")", "if", "score", "<", "min_penalty", ":", "# Minimize the score to select best node", "min_penalty", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.954056460225529}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity to destination", "distribution_weight", "=", "0.5", "# Weight for distribution savings among unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_others", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", ")", "+", "(", "average_distance_to_others", "*", "distribution_weight", ")", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.292595875030693}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_penalty", "=", "0.7", "# Penalty for direct distance", "centroid_weight", "=", "0.2", "# Weight for proximity to centroid", "adaptive_factor", "=", "0.1", "# Adaptative cost based on unvisited node density", "# Calculate centroid of unvisited nodes", "centroid_x", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "centroid_y", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate distance to centroid", "centroid_distance", "=", "(", "(", "centroid_x", "-", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "**", "2", "+", "(", "centroid_y", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "**", "2", ")", "**", "0.5", "score", "=", "(", "-", "direct_penalty", "*", "direct_distance", ")", "+", "(", "centroid_weight", "*", "(", "1", "/", "(", "centroid_distance", "+", "1", ")", ")", ")", "-", "(", "adaptive_factor", "*", "len", "(", "unvisited_nodes", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.923510031959008}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity to destination", "clustering_weight", "=", "0.5", "# Weight for clustering effectiveness", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty_factor", "=", "(", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "1", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "*", "penalty_factor", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", ")", "+", "(", "cluster_average_distance", "*", "clustering_weight", ")", "-", "(", "penalty_factor", "*", "direct_distance", ")", "*", "0.2", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.223884321270529}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to unvisited nodes", "connectivity_weight", "=", "0.4", "# Weight for connectivity potential with remaining nodes", "clustering_weight", "=", "0.2", "# Weight for clustering benefits", "for", "node", "in", "unvisited_nodes", ":", "proximity_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "clustering_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "connectivity_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "+", "1", ")", "for", "other_node", "in", "unvisited_nodes", ")", "# Lower distance yields higher score", "score", "=", "(", "proximity_weight", "*", "-", "proximity_distance", ")", "+", "(", "connectivity_weight", "*", "connectivity_score", ")", "+", "(", "clustering_weight", "*", "clustering_distance_sum", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.452474303536334}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "total_distance_to_others", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "current_node", "]", "for", "node", "in", "unvisited_nodes", ")", "mean_distance", "=", "total_distance_to_others", "/", "unvisited_count", "branch_factor_weight", "=", "0.5", "/", "unvisited_count", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_adjustment", "=", "0.3", "*", "(", "mean_distance", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "branch_factor", "=", "sum", "(", "1", "for", "next_candidate", "in", "unvisited_nodes", "if", "next_candidate", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "next_candidate", "]", ">", "0", ")", "score", "=", "direct_distance", "+", "proximity_adjustment", "-", "(", "branch_factor", "*", "branch_factor_weight", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.583058552198324}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Define a threshold distance to form clusters", "cluster_threshold", "=", "3.0", "clusters", "=", "[", "]", "# Create clusters based on distance threshold", "for", "node", "in", "unvisited_nodes", ":", "added_to_cluster", "=", "False", "for", "cluster", "in", "clusters", ":", "if", "all", "(", "distance_matrix", "[", "node", "]", "[", "member", "]", "<", "cluster_threshold", "for", "member", "in", "cluster", ")", ":", "cluster", ".", "append", "(", "node", ")", "added_to_cluster", "=", "True", "break", "if", "not", "added_to_cluster", ":", "clusters", ".", "append", "(", "[", "node", "]", ")", "best_node", "=", "None", "best_distance", "=", "float", "(", "'inf'", ")", "for", "cluster", "in", "clusters", ":", "if", "len", "(", "cluster", ")", "==", "0", ":", "continue", "# Calculate cluster centroid", "centroid", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "node", "]", "for", "node", "in", "cluster", "]", ",", "axis", "=", "0", ")", "centroid_dist", "=", "np", ".", "linalg", ".", "norm", "(", "distance_matrix", "[", "current_node", "]", "-", "centroid", ")", "# Select the closest node to the current node", "for", "node", "in", "cluster", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "+", "centroid_dist", "if", "score", "<", "best_distance", ":", "best_distance", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance", "future_path_weight", "=", "0.4", "# Weight for potential future path minimization", "unvisited_count_weight", "=", "0.1", "# Weight for favoring unvisited nodes", "# Length of the current path to the destination node", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_path_savings", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "future_path_weight", "*", "future_path_savings", ")", "# Introduce a penalty for nodes that are further away from the current path goal", "if", "direct_distance", ">", "total_distance_to_destination", ":", "score", "-=", "(", "direct_distance", "-", "total_distance_to_destination", ")", "*", "0.2", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.314108263984119}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Step 1: Randomly select a starting node from unvisited nodes", "current_best_node", "=", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "current_best_score", "=", "distance_matrix", "[", "current_node", "]", "[", "current_best_node", "]", "# Step 2: Iterate over neighbors to find a better option", "for", "node", "in", "unvisited_nodes", ":", "if", "node", "==", "current_best_node", ":", "continue", "# Calculate direct distance to current node and potential future cost", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "estimated_future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "total_cost", "=", "direct_distance", "+", "estimated_future_cost", "# Step 3: Accept better candidates", "if", "total_cost", "<", "current_best_score", ":", "current_best_score", "=", "total_cost", "current_best_node", "=", "node", "return", "current_best_node"], "code_perf": 16.72424086230994}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "min_cumulative_distance", "=", "float", "(", "'inf'", ")", "# Explore all unvisited nodes to calculate cumulative distance", "for", "next_node", "in", "unvisited_nodes", ":", "# Start with the distance from the current node to the next node", "cumulative_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "next_node", "]", "# Consider paths from the next node to all remaining unvisited nodes", "for", "other_node", "in", "unvisited_nodes", ":", "if", "other_node", "!=", "next_node", ":", "cumulative_distance", "+=", "distance_matrix", "[", "next_node", "]", "[", "other_node", "]", "# Add distance to the final destination to factor in total travel", "cumulative_distance", "+=", "distance_matrix", "[", "next_node", "]", "[", "destination_node", "]", "# Update the best node if a smaller cumulative distance is found", "if", "cumulative_distance", "<", "min_cumulative_distance", ":", "min_cumulative_distance", "=", "cumulative_distance", "best_node", "=", "next_node", "return", "best_node"], "code_perf": 21.813812563750965}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "novelty_weight", "=", "0.3", "# Weight for encouraging exploration of less connected nodes", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.3", "# Weight for connectivity to unvisited nodes", "future_distance_weight", "=", "0.3", "# Weight for estimating future distance to destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Estimating future distance to the destination based on remaining unvisited nodes", "future_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "(", "1", "/", "(", "connectivity_score", "+", "1", ")", ")", "+", "future_distance_weight", "*", "future_distance", "# Novelty score encouraging exploration of less connected nodes", "novelty_score", "=", "len", "(", "unvisited_nodes", ")", "-", "connectivity_score", "score", "+=", "novelty_weight", "*", "novelty_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.588676951579085}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "synergy_factor_weight", "=", "0.6", "# Weight for synergies with unvisited nodes", "immediate_cost_weight", "=", "0.4", "# Weight for immediate travel cost", "time_penalty_weight", "=", "0.3", "# Penalty for longer time required to reach nodes", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "synergy_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", ")", "# Improved potential based on proximity to unvisited nodes", "time_penalty", "=", "time_penalty_weight", "*", "immediate_distance", "# Penalty based on immediate distance", "score", "=", "(", "synergy_factor_weight", "*", "synergy_score", ")", "-", "(", "immediate_cost_weight", "*", "immediate_distance", ")", "-", "time_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.60864807388745}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate the efficiency score based on inter-node distances", "inter_node_distances", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "efficiency_score", "=", "inter_node_distances", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Randomness factor to promote exploration", "randomness_factor", "=", "random", ".", "uniform", "(", "0.8", ",", "1.2", ")", "# Small perturbation", "# Total score combining the direct distance and efficiency", "score", "=", "direct_distance", "+", "efficiency_score", "*", "randomness_factor", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.483605259946312}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate average distance to unvisited nodes", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Calculate popularity scores (number of visits)", "popularity_scores", "=", "{", "node", ":", "1", "for", "node", "in", "unvisited_nodes", "}", "# Initialize scores", "# Find the next node based on a scoring mechanism", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "popularity_penalty", "=", "1", "/", "popularity_scores", "[", "node", "]", "# More visited, higher penalty", "score", "=", "(", "distance", "+", "(", "avg_distance", "*", "0.5", ")", ")", "*", "popularity_penalty", "# Weighted score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "# Update popularity score", "popularity_scores", "[", "node", "]", "+=", "1", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "future_cost_weight", "=", "0.4", "# Weight for estimated future travel cost", "risk_factor_weight", "=", "0.1", "# Weight for penalizing distant, less-connected nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Heuristic for assessing the future cost based on remaining unvisited nodes", "future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", ")", "average_future_cost", "=", "future_cost", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "1", ")", "# Risk factor: distance from current node to the candidate node", "risk_factor", "=", "1", "/", "(", "1", "+", "(", "1.0", "/", "(", "direct_distance", "+", "1e-10", ")", ")", ")", "# Avoid division by zero", "# Scoring based on distance, estimated future cost, and risk", "score", "=", "(", "distance_weight", "*", "direct_distance", ")", "+", "(", "future_cost_weight", "*", "average_future_cost", ")", "-", "(", "risk_factor_weight", "*", "risk_factor", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.404130610165701}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.6", "# Increased emphasis on direct distance", "angle_weight", "=", "0.4", "# Weight for the angle towards the destination", "def", "calculate_angle_score", "(", "node", ")", ":", "current_vector", "=", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ",", "0", ")", "# Vector from current node to candidate node", "destination_vector", "=", "(", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", ",", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "# Vector from current to destination via candidate", "# Angle between vectors using a simplified cosine approach", "dot_product", "=", "current_vector", "[", "0", "]", "*", "destination_vector", "[", "0", "]", "+", "current_vector", "[", "1", "]", "*", "destination_vector", "[", "1", "]", "magnitude_current", "=", "(", "current_vector", "[", "0", "]", "**", "2", ")", "**", "0.5", "magnitude_destination", "=", "(", "destination_vector", "[", "0", "]", "**", "2", "+", "destination_vector", "[", "1", "]", "**", "2", ")", "**", "0.5", "angle_score", "=", "dot_product", "/", "(", "magnitude_current", "*", "magnitude_destination", ")", "if", "magnitude_current", "and", "magnitude_destination", "else", "0", "return", "angle_score", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "angle_score", "=", "calculate_angle_score", "(", "node", ")", "# Combined scoring mechanism", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "angle_weight", "*", "angle_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.4354773332610655}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_destination", "=", "total_distance_to_unvisited", "/", "len", "(", "unvisited_nodes", ")", "deviation_penalty_weight", "=", "0.6", "# Weight applied to distances that deviate from the average", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "distance_deviation", "=", "distance_to_destination", "-", "average_distance_to_destination", "score", "=", "direct_distance", "+", "(", "distance_deviation", "**", "2", ")", "*", "deviation_penalty_weight", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.1702537676166065}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "average_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "+", "(", "average_distance", "-", "average_to_destination", ")", "*", "0.5", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "weighted_average_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1e-6", ")", ")", "+", "0.5", "*", "(", "1", "/", "(", "weighted_average_distance", "+", "1e-6", ")", ")", "# Inverse distance weighted score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.209735944458233}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the distances to the destination for unvisited nodes", "dist_to_destination", "=", "{", "node", ":", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Calculate scores for each unvisited node based on edge weight and distance to destination", "scores", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "(", "dist_to_destination", "[", "node", "]", "*", "0.5", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the unvisited node with the minimum score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "weight_distance", "=", "0.4", "# Weight for direct distance", "weight_penalty", "=", "0.3", "# Weight for penalty on detours", "weight_influence", "=", "0.3", "# Weight for influence of unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "detour_penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", ")", "*", "weight_penalty", "influence_factor", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "*", "weight_influence", "score", "=", "-", "(", "direct_distance", "+", "detour_penalty", ")", "+", "influence_factor", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.210619917350515}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "total_unvisited", "=", "len", "(", "unvisited_nodes", ")", "scores", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "(", "1", "-", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "/", "total_unvisited", ")", "+", "(", "1", "/", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "+", "1e-6", ")", ")", "*", "0.5", ")", "for", "node", "in", "unvisited_nodes", "}", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.328044086934473}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "appeal_scores", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate appeal based on distance and proximity to destination", "destination_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "appeal", "=", "(", "1", "/", "distance", ")", "+", "(", "1", "/", "(", "destination_distance", "+", "1", ")", ")", "# Avoid div by zero", "appeal_scores", ".", "append", "(", "(", "node", ",", "appeal", ")", ")", "# Normalize appeal scores to create probabilities", "total_appeal", "=", "sum", "(", "score", "for", "_", ",", "score", "in", "appeal_scores", ")", "probabilities", "=", "[", "score", "/", "total_appeal", "for", "_", ",", "score", "in", "appeal_scores", "]", "# Perform a weighted random selection based on appeal", "next_node", "=", "random", ".", "choices", "(", "[", "node", "for", "node", ",", "_", "in", "appeal_scores", "]", ",", "probabilities", ")", "[", "0", "]", "return", "next_node"], "code_perf": 20.450958887222093}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_so_far", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "temperature", "=", "1.0", "# Exploration factor", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Introduce a dynamic adjustment factor based on average distance so far", "adjustment_factor", "=", "(", "avg_distance_so_far", "-", "distance_to_destination", ")", "/", "(", "1", "+", "direct_distance", ")", "# Random exploration component based on temperature", "random_exploration", "=", "random", ".", "uniform", "(", "-", "temperature", ",", "temperature", ")", "score", "=", "direct_distance", "+", "adjustment_factor", "+", "random_exploration", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 14.305543396149801}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "node_scores", "=", "{", "}", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_destination", "=", "total_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate a score considering both direct distance and an additional penalty based on distance to destination", "penalty", "=", "(", "distance_to_destination", "-", "average_distance_to_destination", ")", "*", "0.2", "score", "=", "direct_distance", "+", "penalty", "node_scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.220769184424113}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate cumulative distance for each unvisited node", "cumulative_distances", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "cumulative_distances", "[", "node", "]", "=", "total_distance", "+", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Select the node with the minimum cumulative distance", "next_node", "=", "min", "(", "cumulative_distances", ",", "key", "=", "cumulative_distances", ".", "get", ")", "return", "next_node"], "code_perf": 21.51502557645197}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to destination", "novelty_weight", "=", "0.4", "# Weight for novelty of unvisited nodes", "cumulative_distance_weight", "=", "0.2", "# Weight for cumulative distance traveled", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "prev_node", "]", "for", "prev_node", "in", "unvisited_nodes", "if", "prev_node", "!=", "current_node", ")", "# Introducing a random perturbation for variability", "random_factor", "=", "random", ".", "uniform", "(", "0.95", ",", "1.05", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "importance_factor", "=", "1", "/", "(", "1", "+", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", ")", "# Novelty score", "score", "=", "(", "random_factor", "*", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "novelty_weight", "*", "importance_factor", "-", "cumulative_distance", "*", "cumulative_distance_weight", ")", "-", "direct_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.5794721009351695}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Define a decay factor for the penalty based on the number of visited nodes", "decay_factor", "=", "0.5", "# Decay modifier", "num_visited_nodes", "=", "len", "(", "distance_matrix", ")", "-", "len", "(", "unvisited_nodes", ")", "decay_penalty", "=", "decay_factor", "*", "np", ".", "sqrt", "(", "num_visited_nodes", ")", "# Square root for slower growth", "best_next_node", "=", "None", "best_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate total cost using a weighted average approach", "total_cost", "=", "(", "1", "-", "decay_penalty", ")", "*", "direct_distance", "+", "decay_penalty", "*", "(", "direct_distance", "/", "(", "num_visited_nodes", "+", "1", ")", ")", "if", "total_cost", "<", "best_cost", ":", "best_cost", "=", "total_cost", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 32.802720577955526}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "detour_penalty_factor", "=", "0.5", "# Factor to penalize detour distances", "if", "unvisited_nodes", ":", "historical_favorability_weight", "=", "0.4", "# Weight for historical favorability", "heuristic_cost_weight", "=", "0.3", "# Weight for heuristic cost", "destination_distance_weight", "=", "0.3", "# Weight for distance to the destination", "total_detour", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate historical favorability score based on previous visits", "historical_favorability_score", "=", "1", "/", "(", "1", "+", "direct_distance", ")", "# Favor more frequently visited nodes with lower distances", "# Estimate heuristic cost from this node to the destination", "heuristic_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "total_detour", "# Combined score that incorporates all aspects", "score", "=", "(", "historical_favorability_weight", "*", "historical_favorability_score", "+", "heuristic_cost_weight", "*", "heuristic_cost", "+", "detour_penalty_factor", "*", "direct_distance", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.311179595125857}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate the average distance to all unvisited nodes", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate score: current distance + penalty based on distance to the destination + factor of average distance to unvisited", "score", "=", "distance_to_node", "+", "(", "distance_to_destination", "*", "0.5", ")", "+", "(", "average_distance_to_unvisited", "*", "0.3", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "import", "numpy", "as", "np", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "penalties", "=", "np", ".", "array", "(", "[", "0.5", ",", "0.3", ",", "0.2", "]", ")", "# Weights for the scoring components: proximity, connectivity, final destination alignment", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_distances", "=", "np", ".", "array", "(", "[", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "]", ")", "connectivity_score", "=", "np", ".", "mean", "(", "remaining_distances", ")", "if", "remaining_distances", ".", "size", ">", "0", "else", "0", "destination_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "-", "penalties", "[", "0", "]", "*", "direct_distance", "+", "penalties", "[", "1", "]", "*", "connectivity_score", "+", "penalties", "[", "2", "]", "*", "(", "1", "/", "(", "1", "+", "destination_distance", ")", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.561695143395568}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "distance_to_current", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "distance_to_current", "+", "0.5", "*", "distance_to_destination", "# Adjust weight as needed", "scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for the distance to the closest unvisited node", "destination_attraction_weight", "=", "0.6", "# Weight for attractiveness to destination", "unvisited_proximity_weight", "=", "0.2", "# Weight for average proximity to remaining unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# New scoring formula incorporating unvisited proximity", "score", "=", "(", "average_distance_to_unvisited", "*", "unvisited_proximity_weight", ")", "+", "(", "distance_to_destination", "*", "destination_attraction_weight", ")", "-", "(", "direct_distance", "*", "distance_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.878379998401399}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "proximity_threshold", "=", "10", "# Distance threshold for proximity influence", "proximity_count", "=", "sum", "(", "1", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<=", "proximity_threshold", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_effect", "=", "proximity_count", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "# Normalize proximity influence", "score", "=", "direct_distance", "+", "0.6", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "0.4", "*", "proximity_effect", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.4257563991146025}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "diversity_weight", "=", "0.4", "# Weight for encouraging diversity in unvisited nodes", "heuristic_weight", "=", "0.2", "# Weight for future path cost estimation", "# Calculate diversity factor for unvisited nodes", "def", "calculate_diversity_score", "(", "node", ")", ":", "diversity_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "diversity_score", "+=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "+", "1", ")", "# Inverse distance for diversity", "return", "diversity_score", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "diversity_score", "=", "calculate_diversity_score", "(", "node", ")", "# Future path cost estimation as average distance to destination", "heuristic_score", "=", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combined scoring mechanism", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "diversity_weight", "*", "diversity_score", "+", "heuristic_weight", "*", "heuristic_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.485094271030722}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate the distance to the destination from the current node", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Calculate the average distance to unvisited nodes for variance consideration", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Introduce a novelty factor based on distance variance", "novelty_factor", "=", "0.5", "# Weighting to prioritize exploration", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_variance_score", "=", "abs", "(", "distance_to_node", "-", "avg_distance_to_unvisited", ")", "# Combine scores: base score with novelty weighting and proximity to destination", "scores", "[", "node", "]", "=", "(", "distance_to_node", "*", "1.2", ")", "+", "(", "distance_to_destination", "*", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", ")", ")", "-", "(", "novelty_factor", "*", "distance_variance_score", ")", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.809195521046739}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "min_edge_to_destination", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "float", "(", "'inf'", ")", "max_distance_to_remaining", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "direct_influence_weight", "=", "0.4", "# Weight for direct distance influence", "dynamic_influence_weight", "=", "0.6", "# Weight for dynamic scoring based on edge attributes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "dynamic_score", "=", "(", "max_distance_to_remaining", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "min_edge_to_destination", "score", "=", "(", "direct_influence_weight", "*", "direct_distance", ")", "+", "(", "dynamic_influence_weight", "*", "dynamic_score", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.768431081957852}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "num_unvisited", "future_penalty_factor", "=", "2.0", "# Factor to penalize the number of unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_penalty", "=", "future_penalty_factor", "*", "(", "num_unvisited", "-", "1", ")", "# Penalize more if there are many unvisited nodes", "score", "=", "direct_distance", "+", "average_distance", "+", "future_penalty", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "heuristic_factor", "=", "sum", "(", "distance_matrix", "[", "n", "]", "[", "destination_node", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "# Novel score calculation combining immediate distance, total unvisited distance, and heuristic factor", "score", "=", "(", "heuristic_factor", "*", "0.4", ")", "-", "(", "distance_to_next", "*", "0.4", ")", "-", "(", "total_distance_to_unvisited", "*", "0.2", ")", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 16.555495628879836}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate distances, destination penalties, and rewards for each unvisited node", "scores", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "dest", "]", "for", "dest", "in", "unvisited_nodes", ")", "/", "max", "(", "1", ",", "len", "(", "unvisited_nodes", ")", ")", ")", "*", "0.3", "-", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "0.2", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the unvisited node with the minimum score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.068738438850235}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "connectivity_factor", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "score", "=", "direct_distance", "+", "distance_to_destination", "*", "0.5", "+", "connectivity_factor", "*", "0.5", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.2173267372805}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "min_distance", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Calculate the sum of distances to all unvisited nodes", "total_distance", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Select the node with the minimum total distance", "for", "node", ",", "distance", "in", "total_distance", ".", "items", "(", ")", ":", "if", "distance", "<", "min_distance", ":", "min_distance", "=", "distance", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "penalty_factor", "=", "(", "0.5", "*", "unvisited_count", ")", "/", "unvisited_count", "if", "unvisited_count", ">", "0", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "min_distance_to_nearest", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "score", "=", "direct_distance", "+", "min_distance_to_nearest", "-", "penalty_factor", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.301930936042854}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "# Encourage connection to well-connected nodes", "score", "=", "(", "1", "/", "(", "immediate_distance", "+", "1", ")", ")", "+", "connectivity_score", "# Balance between short distance and good connectivity", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 29.961865547673252}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "cluster_radius", "=", "2.0", "# Define a radius to consider nearby nodes as a cluster", "clusters", "=", "{", "}", "# Cluster unvisited nodes based on distance", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "<=", "cluster_radius", ":", "clusters", ".", "setdefault", "(", "current_node", ",", "[", "]", ")", ".", "append", "(", "node", ")", "# Calculate the centrality and adjusted scores for nodes in the clusters", "for", "cluster", "in", "clusters", ".", "values", "(", ")", ":", "for", "node", "in", "cluster", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "n", "]", "[", "destination_node", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "centrality_score", "=", "(", "1", "-", "(", "len", "(", "cluster", ")", "/", "len", "(", "unvisited_nodes", ")", ")", ")", "# Penalize densely populated clusters", "score", "=", "(", "0.5", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "0.3", "*", "centrality_score", "+", "0.2", "*", "direct_distance", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.587015219151294}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "penalty_factor", "=", "len", "(", "unvisited_nodes", ")", "*", "0.2", "# Penalty for having more unvisited nodes", "proximity_weight", "=", "0.5", "# Weight for proximity to destination", "connectivity_weight", "=", "0.5", "# Weight for the number of connections remaining", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "connectivity_score", "=", "connectivity_weight", "*", "(", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", ")", "# Avoid division by zero", "score", "=", "direct_distance", "+", "total_distance_to_unvisited", "+", "penalty_factor", "-", "proximity_score", "+", "connectivity_score", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.450370583313572}
{"code_tokens": ["import", "random", "import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "iterations", "=", "100", "best_node", "=", "None", "best_distance", "=", "float", "(", "'inf'", ")", "# Temperature parameter for simulated annealing", "temperature", "=", "1000.0", "cooling_rate", "=", "0.99", "for", "_", "in", "range", "(", "iterations", ")", ":", "candidate_node", "=", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "total_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate_node", "]", "# Calculate estimated distance to remaining unvisited nodes", "temp_distance", "=", "total_distance", "for", "next_node", "in", "unvisited_nodes", "-", "{", "candidate_node", "}", ":", "temp_distance", "+=", "distance_matrix", "[", "candidate_node", "]", "[", "next_node", "]", "# Calculate acceptance probability", "if", "temp_distance", "<", "best_distance", ":", "best_distance", "=", "temp_distance", "best_node", "=", "candidate_node", "else", ":", "# Simulated annealing acceptance criterion", "acceptance_probability", "=", "math", ".", "exp", "(", "-", "(", "temp_distance", "-", "best_distance", ")", "/", "temperature", ")", "if", "random", ".", "random", "(", ")", "<", "acceptance_probability", ":", "best_node", "=", "candidate_node", "# Reduce temperature", "temperature", "*=", "cooling_rate", "return", "best_node"], "code_perf": 26.011753768469376}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "clusters", "=", "{", "}", "cluster_size", "=", "3", "# Define size of each cluster for grouping", "cluster_id", "=", "0", "# Group unvisited nodes into clusters based on proximity", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_key", "=", "cluster_id", "//", "cluster_size", "if", "cluster_key", "not", "in", "clusters", ":", "clusters", "[", "cluster_key", "]", "=", "[", "]", "clusters", "[", "cluster_key", "]", ".", "append", "(", "node", ")", "cluster_id", "+=", "1", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Evaluate nodes in each cluster, prioritizing the nearest cluster", "for", "cluster", "in", "clusters", ".", "values", "(", ")", ":", "if", "cluster", ":", "# Check if the cluster is not empty", "cluster_average", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "cluster", ")", "/", "len", "(", "cluster", ")", "for", "node", "in", "cluster", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "+", "(", "cluster_average", "-", "direct_distance", ")", "*", "0.5", "# Adaptive scoring", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.078628932818816}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "scores", "=", "{", "}", "nearest_unvisited_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "weight_distance", "=", "0.5", "weight_connectivity", "=", "0.3", "weight_nearest", "=", "0.2", "for", "node", "in", "unvisited_nodes", ":", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "-", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "/", "10", ")", "nearest_score", "=", "abs", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "-", "nearest_unvisited_distance", ")", "scores", "[", "node", "]", "=", "(", "weight_distance", "*", "distance_score", ")", "+", "(", "weight_connectivity", "*", "connectivity_score", ")", "+", "(", "weight_nearest", "*", "nearest_score", ")", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "decay_factor", "=", "0.1", "# Decay factor to reduce the weight of distance over iterations", "neighborhood_weight", "=", "0.7", "# Weight for prioritizing nodes near visited nodes", "# Calculate neighborhood influence", "neighborhood_influence", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "adjusted_distance", "=", "direct_distance", "*", "(", "1", "-", "decay_factor", ")", "# Apply decay factor to direct distance", "proximity_score", "=", "total_distance_to_unvisited", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "neighborhood_score", "=", "neighborhood_weight", "*", "(", "1", "/", "(", "neighborhood_influence", "+", "0.1", ")", ")", "# Avoid division by zero", "score", "=", "adjusted_distance", "+", "proximity_score", "+", "neighborhood_score", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.333600324930725}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "estimated_tour_length", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "distance_penalty_factor", "=", "0.4", "# Adjusted penalty factor for distance from destination", "proximity_boost_factor", "=", "1.5", "# Factor to boost closer nodes", "closest_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "distance_penalty_factor", "*", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "estimated_tour_length", ")", "proximity_boost", "=", "proximity_boost_factor", "*", "(", "closest_distance", "-", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "score", "=", "direct_distance", "+", "penalty", "-", "proximity_boost", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.214644172070734}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "sustainability_boost_factor", "=", "0.3", "# Boost for nodes not frequently visited", "history", "=", "{", "}", "# Dictionary to track visit frequencies", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "sustainability_weight", "=", "0.3", "# Weight for sustainability boost", "future_potential_weight", "=", "0.3", "# Weight for future potential pathways", "for", "node", "in", "unvisited_nodes", ":", "# Track visit frequency", "history", "[", "node", "]", "=", "history", ".", "get", "(", "node", ",", "0", ")", "+", "1", "# Increment visit count, can be from past runs", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate future potential pathways scored on unvisited connections", "future_potential_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Evaluate sustainability score based on visit frequency", "sustainability_score", "=", "1", "/", "(", "history", "[", "node", "]", "**", "0.5", ")", "# Combined score incorporating various factors", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "sustainability_weight", "*", "sustainability_score", "+", "future_potential_weight", "*", "future_potential_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.37815587401459}
{"code_tokens": ["import", "random", "import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Initial parameters", "current_best_distance", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "temperature", "=", "1.0", "cooling_rate", "=", "0.99", "# Set a threshold for stopping the selection", "for", "i", "in", "range", "(", "100", ")", ":", "# Number of iterations for exploration", "potential_node", "=", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "# Randomly choose a node", "# Calculate the distance to the chosen node", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "potential_node", "]", "# Accept the node based on the current temperature", "if", "distance_to_node", "<", "current_best_distance", "or", "random", ".", "random", "(", ")", "<", "math", ".", "exp", "(", "-", "(", "distance_to_node", "-", "current_best_distance", ")", "/", "temperature", ")", ":", "current_best_distance", "=", "distance_to_node", "next_node", "=", "potential_node", "# Cool down the temperature", "temperature", "*=", "cooling_rate", "return", "next_node"], "code_perf": 19.973517491768202}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Create a dictionary to hold clusters", "clusters", "=", "{", "}", "cluster_size", "=", "3", "# Adjust this size based on problem constraints", "# Assign unvisited nodes to clusters based on distance similarity", "for", "node", "in", "unvisited_nodes", ":", "cluster_key", "=", "tuple", "(", "sorted", "(", "distance_matrix", "[", "current_node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", ")", "if", "cluster_key", "not", "in", "clusters", ":", "clusters", "[", "cluster_key", "]", "=", "[", "]", "clusters", "[", "cluster_key", "]", ".", "append", "(", "node", ")", "# Find centroids of clusters", "cluster_centroids", "=", "{", "}", "for", "cluster_key", ",", "nodes", "in", "clusters", ".", "items", "(", ")", ":", "centroid", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "nodes", ")", "/", "len", "(", "nodes", ")", "cluster_centroids", "[", "centroid", "]", "=", "nodes", "# Select the nearest centroid node based on distance to the current node", "best_node", "=", "None", "best_distance", "=", "float", "(", "'inf'", ")", "for", "centroid", ",", "nodes", "in", "cluster_centroids", ".", "items", "(", ")", ":", "for", "node", "in", "nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance_to_node", "<", "best_distance", ":", "best_distance", "=", "distance_to_node", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the average distances to all unvisited nodes", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Select the next node based on a combination of the nearest neighbor heuristic and average distance", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "-", "avg_distance", "*", "0.1", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate a weighted score for each unvisited node", "weighted_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "randomness_factor", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "# Introduce a random factor", "weighted_scores", "[", "node", "]", "=", "distance", "*", "(", "1", "-", "randomness_factor", ")", "# Weighting the distance by the random factor", "# Select the node with the minimum weighted score", "next_node", "=", "min", "(", "weighted_scores", ",", "key", "=", "weighted_scores", ".", "get", ")", "return", "next_node"], "code_perf": 18.58812643146793}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "closeness_weight", "=", "0.6", "# Weight for proximity", "detour_penalty_weight", "=", "0.4", "# Penalty for indirect routes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "detour_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Relative closeness factor", "closeness_score", "=", "direct_distance", "# Detour penalty", "detour_penalty", "=", "detour_distance", "-", "direct_distance", "# Total score combines proximity with penalization for detours", "score", "=", "(", "closeness_weight", "*", "closeness_score", ")", "+", "(", "detour_penalty_weight", "*", "detour_penalty", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.80356546673329}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_weight", "=", "0.7", "# Weight for immediate distance to unvisited nodes", "future_weight", "=", "0.3", "# Weight for estimated future cost", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "predicted_future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", "if", "next_node", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "score", "=", "(", "immediate_weight", "*", "immediate_distance", ")", "+", "(", "future_weight", "*", "predicted_future_cost", ")", "+", "total_distance_to_destination", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.452849439060603}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "mean_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "0.5", "*", "(", "mean_distance_to_unvisited", "-", "distance_to_next", ")", ")", "-", "(", "0.5", "*", "distance_to_destination", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "cluster_weight", "=", "0.3", "# Weight for proximity to clusters of unvisited nodes", "exploration_weight", "=", "0.3", "# Weight for exploration of less-visited nodes", "# Calculate clusters for unvisited nodes", "def", "calculate_cluster_score", "(", "node", ")", ":", "cluster_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "cluster_score", "+=", "distance_matrix", "[", "node", "]", "[", "other", "]", "return", "cluster_score", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Calculate penalty for previously visited nodes", "def", "calculate_exploration_penalty", "(", "node", ")", ":", "penalty", "=", "0", "for", "visited", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", ":", "if", "visited", "not", "in", "unvisited_nodes", ":", "penalty", "+=", "distance_matrix", "[", "node", "]", "[", "visited", "]", "return", "penalty", "/", "(", "len", "(", "distance_matrix", ")", "-", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_score", "=", "calculate_cluster_score", "(", "node", ")", "exploration_penalty", "=", "calculate_exploration_penalty", "(", "node", ")", "# Combined scoring mechanism", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "cluster_weight", "*", "cluster_score", "-", "exploration_weight", "*", "exploration_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.709036631703756}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Dynamic weighting based on the number of connections to unvisited nodes", "connectivity_weight", "=", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "0", "]", ")", "score", "=", "(", "distance_to_node", "+", "distance_to_destination", ")", "/", "(", "connectivity_weight", "+", "1", ")", "# Encourage diversity by adding a small penalty for nodes already visited in the past (represented by a score adjustment)", "historical_penalty", "=", "0.05", "if", "node", "in", "unvisited_nodes", "else", "0", "scores", "[", "node", "]", "=", "score", "+", "historical_penalty", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "future_cost_weight", "=", "0.6", "# Weight for estimated future cost", "randomness_factor", "=", "0.2", "# Introduce randomness for exploration", "# Function to estimate future cost based on remaining nodes", "def", "estimate_future_cost", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_cost", "=", "estimate_future_cost", "(", "node", ")", "random_factor", "=", "random", ".", "uniform", "(", "0", ",", "randomness_factor", ")", "# Introduce randomness", "score", "=", "(", "direct_distance_weight", "*", "direct_distance", "+", "future_cost_weight", "*", "future_cost", "*", "(", "1", "+", "random_factor", ")", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.931930518802751}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "weighted_scores", "=", "{", "}", "remaining_nodes_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "decay_factor", "=", "1", "/", "(", "1", "+", "remaining_nodes_count", ")", "# Decay increases as nodes are left unvisited", "score", "=", "distance_to_node", "*", "decay_factor", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combine distance and decay", "weighted_scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "weighted_scores", ",", "key", "=", "weighted_scores", ".", "get", ")", "return", "next_node"], "code_perf": 14.282829649931207}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the average distance to unvisited nodes", "avg_distance", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "# Score nodes based on their direct distance and the influence of remaining nodes", "node_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Adjust score based on the average distance and remaining unvisited nodes", "score", "=", "direct_distance", "+", "(", "avg_distance", "/", "len", "(", "unvisited_nodes", ")", ")", "node_scores", "[", "node", "]", "=", "score", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "distance_traveled_weight", "=", "0.3", "# Weight based on distance already traveled", "direct_distance_weight", "=", "0.4", "# Weight for direct distance to next node", "future_reward_weight", "=", "0.3", "# Weight for potential future rewards", "if", "unvisited_nodes", ":", "total_distance_traveled", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Dynamic scoring based on the distance already traveled", "distance_traveled_score", "=", "total_distance_traveled", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Calculate potential future rewards based on unvisited connections", "future_reward_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combined score incorporating all factors", "score", "=", "-", "distance_traveled_weight", "*", "distance_traveled_score", "-", "direct_distance_weight", "*", "direct_distance", "+", "future_reward_weight", "*", "future_reward_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.37815587401459}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "risk_factor_weight", "=", "0.3", "# Weight for environmental risk factors", "connectivity_weight", "=", "0.5", "# Weight for connectivity to other unvisited nodes", "distance_weight", "=", "0.2", "# Weight for direct distance", "if", "unvisited_nodes", ":", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "risk_factor", "=", "evaluate_risk_factor", "(", "node", ")", "# Dummy function to evaluate risk", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Combined score", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "-", "risk_factor_weight", "*", "risk_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node", "def", "evaluate_risk_factor", "(", "node", ")", ":", "# Placeholder for actual risk evaluation logic; return a dummy value for demonstration", "return", "1", "# Assuming some fixed risk value for simplicity"], "code_perf": 7.2476407135114895}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "candidates", "=", "list", "(", "unvisited_nodes", ")", "scored_candidates", "=", "[", "]", "for", "node", "in", "candidates", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_bonus", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "*", "0.2", "# Bonus for connected nodes", "remaining_unvisited_penalty", "=", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "*", "0.3", "# Decreasing penalty for unvisited nodes", "score", "=", "direct_distance", "-", "connectivity_bonus", "+", "remaining_unvisited_penalty", "scored_candidates", ".", "append", "(", "(", "node", ",", "score", ")", ")", "scored_candidates", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "return", "scored_candidates", "[", "0", "]", "[", "0", "]"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_destination", "=", "total_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", "penalty_factor", "=", "0.5", "# Factor for penalizing longer routes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Score incorporates direct distance, the average distance penalty, and a weighted distance to the destination", "score", "=", "-", "(", "direct_distance", "+", "penalty_factor", "*", "distance_to_destination", "-", "average_distance_to_destination", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "max_distance", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "direct_influence_weight", "=", "0.5", "# Balance between current and future nodes", "potential_savings_weight", "=", "0.5", "# Influence of prospective paths", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "potential_savings", "=", "1", "/", "(", "total_distance", "-", "direct_distance", "+", "1", ")", "# Avoid division by zero", "score", "=", "(", "direct_influence_weight", "*", "direct_distance", ")", "-", "(", "potential_savings_weight", "*", "potential_savings", "*", "max_distance", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm integrates not only the distance but also a potential future benefit based on the closest unvisited node and overall travel efficiency, thus optimizing selection for greater long-term benefits.}", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_benefit", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "+", "(", "future_benefit", "/", "(", "distance_to_next", "+", "1", ")", ")", "# Encourage routes that are close but also consider future efficiency", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.03621234394371}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "node_potential", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "potential_value", "=", "node_potential", "[", "node", "]", "weighted_distance", "=", "0.5", "*", "direct_distance", "+", "0.5", "*", "potential_value", "threshold_adjustment", "=", "1", "if", "direct_distance", "<", "0.5", "*", "potential_value", "else", "2", "score", "=", "weighted_distance", "*", "threshold_adjustment", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.016912104152127}
{"code_tokens": ["# {The new algorithm adopts a multi-faceted scoring system that integrates the distance score, node connectivity, and an exploration factor that encourages visiting less densely connected nodes to foster exploration.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_combined_score", "=", "float", "(", "'-inf'", ")", "# Define constants for weighting", "alpha", "=", "0.5", "# Weight for distance score", "beta", "=", "0.3", "# Weight for cohesion score", "gamma", "=", "0.2", "# Weight for exploration factor", "# Total number of unvisited nodes", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Cohesion score: inverse average distance to all other unvisited nodes", "cohesion_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "/", "(", "num_unvisited", "-", "1", ")", "if", "num_unvisited", ">", "1", "else", "0", "inverse_cohesion_score", "=", "1", "/", "(", "cohesion_score", "+", "1", ")", "# Inverse to prioritize less connected nodes", "# Exploration factor: assesses how unique the node is based on its connectivity", "exploration_score", "=", "gamma", "*", "(", "1", "/", "(", "(", "len", "(", "[", "other_node", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "(", "distance_to_next", "+", "5", ")", "]", ")", "+", "1", ")", ")", ")", "# Combined score: distance, cohesion, and exploration balance", "combined_score", "=", "(", "inverse_cohesion_score", "*", "beta", "+", "(", "distance_to_next", "*", "-", "1", ")", "*", "alpha", "+", "exploration_score", ")", "if", "combined_score", ">", "max_combined_score", ":", "max_combined_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.241344958429526}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "base_threshold", "=", "10", "# Base maximum distance to consider", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "dynamic_threshold", "=", "base_threshold", "*", "(", "distance_to_destination", "/", "100", ")", "# Dynamic threshold based on distance to destination", "candidates", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance_to_node", "<", "dynamic_threshold", ":", "candidates", ".", "append", "(", "(", "node", ",", "distance_to_node", ")", ")", "if", "not", "candidates", ":", "# If no candidates within dynamic threshold, select the closest node", "candidates", "=", "[", "(", "node", ",", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "for", "node", "in", "unvisited_nodes", "]", "next_node", "=", "min", "(", "candidates", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "cluster_weight", "=", "0.3", "# Weight for clustering attractiveness", "penalty_weight", "=", "0.2", "# Weight for longer paths", "reward_weight", "=", "0.1", "# Weight for rewarding shorter visits", "# Calculate the average distance to the destination for unvisited nodes", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Cluster score based on proximity to other unvisited nodes", "cluster_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "for", "unvisited", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Dynamic penalty for taking longer paths", "path_penalty", "=", "(", "1", "/", "(", "direct_distance", "+", "1", ")", ")", "*", "(", "avg_distance_to_destination", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "# Reward for nodes that are closer to minimizing the full tour length", "reward", "=", "-", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "for", "unvisited", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "*", "reward_weight", "score", "=", "(", "distance_weight", "*", "direct_distance", ")", "+", "(", "cluster_weight", "*", "cluster_score", ")", "+", "(", "penalty_weight", "*", "path_penalty", ")", "+", "reward", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.525851523069856}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "total_unvisited_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", ":", "avg_distance_to_destination", "=", "total_unvisited_distance", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty_factor", "=", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "avg_distance_to_destination", ")", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "score", "=", "direct_distance", "+", "0.4", "*", "penalty_factor", "+", "0.6", "*", "(", "direct_distance", "/", "(", "1", "+", "avg_distance_to_destination", ")", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.177726730081772}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cost_to_benefit_ratio", "=", "remaining_distance", "/", "average_distance", "# Ratio of total remaining to average distance", "total_cost", "=", "direct_distance", "*", "cost_to_benefit_ratio", "# Cost adjusted by ratio", "if", "total_cost", "<", "min_cost", ":", "min_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_nodes", "=", "len", "(", "distance_matrix", ")", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Compute connectivity score based on centrality", "connectivity_score", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "total_nodes", ")", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<", "10", ")", "# Similar arbitrary threshold", "# Historical path cost (assuming we have some historical data)", "historical_path_cost", "=", "0", "# This could be updated in a more complex implementation", "# New scoring mechanism", "score", "=", "(", "direct_distance", "*", "0.4", "+", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "*", "0.3", "+", "connectivity_score", "*", "0.2", "+", "historical_path_cost", "*", "0.1", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.501505956627025}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_weight", "=", "0.7", "# Weight for immediate distance to next node", "future_weight", "=", "0.3", "# Weight for future distances of remaining nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_next_node", "]", "for", "next_next_node", "in", "unvisited_nodes", "if", "next_next_node", "!=", "node", ")", "future_average_distance", "=", "future_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "# New cost scoring calculation", "cost_score", "=", "immediate_distance", "*", "immediate_weight", "+", "(", "total_distance_to_destination", "+", "future_average_distance", ")", "*", "future_weight", "if", "cost_score", "<", "min_cost", ":", "min_cost", "=", "cost_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.452849439060603}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Enhanced weight for direct distance", "connectivity_weight", "=", "0.4", "# Weight for potential future connectivity", "triangular_inequality_weight", "=", "0.2", "# Weight for enforcing triangular inequality", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate potential savings based on direct travel versus indirect travel", "indirect_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "average_distance", "=", "indirect_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Check triangular inequality condition", "triangular_condition", "=", "direct_distance", "<=", "(", "total_distance_to_destination", "+", "average_distance", ")", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "connectivity_weight", "*", "average_distance", ")", "if", "triangular_condition", ":", "score", "+=", "triangular_inequality_weight", "*", "(", "total_distance_to_destination", "-", "direct_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.375267469964429}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Initialize parameters for simulated annealing with a greedy approach", "temperature", "=", "1.0", "cooling_rate", "=", "0.98", "max_iterations", "=", "50", "best_next_node", "=", "None", "best_distance", "=", "float", "(", "'inf'", ")", "# Calculate the average distance of unvisited nodes for adaptive acceptance", "average_distance", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "for", "_", "in", "range", "(", "max_iterations", ")", ":", "# Select the greedy candidate (closest unvisited node)", "greedy_candidate", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "distance_to_greedy_candidate", "=", "distance_matrix", "[", "current_node", "]", "[", "greedy_candidate", "]", "# Evaluate greedy solution first", "if", "distance_to_greedy_candidate", "<", "best_distance", ":", "best_distance", "=", "distance_to_greedy_candidate", "best_next_node", "=", "greedy_candidate", "# Randomly select another candidate to encourage exploration", "rand_candidate", "=", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "distance_to_rand_candidate", "=", "distance_matrix", "[", "current_node", "]", "[", "rand_candidate", "]", "# Explore with acceptance probability based on distance deviation", "if", "distance_to_rand_candidate", ">", "best_distance", ":", "acceptance_probability", "=", "np", ".", "exp", "(", "(", "best_distance", "-", "distance_to_rand_candidate", ")", "/", "(", "temperature", "+", "abs", "(", "distance_to_rand_candidate", "-", "average_distance", ")", ")", ")", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", "<", "acceptance_probability", ":", "best_distance", "=", "distance_to_rand_candidate", "best_next_node", "=", "rand_candidate", "# Cool down the temperature", "temperature", "*=", "cooling_rate", "return", "best_next_node"], "code_perf": 14.874137316768746}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for distance", "clustering_weight", "=", "0.4", "# Weight for clustering of unvisited nodes", "penalty_weight", "=", "0.2", "# Penalty for already visited nodes", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "clustering_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "+", "1", ")", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", ")", "# Clustering based on proximity", "penalty_score", "=", "sum", "(", "1", "for", "next", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "next", "not", "in", "unvisited_nodes", "and", "distance_matrix", "[", "current_node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", ")", "# Penalty for visited node connections", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "clustering_weight", "*", "clustering_score", "-", "penalty_weight", "*", "penalty_score", "-", "(", "distance_to_destination", "/", "(", "direct_distance", "+", "1", ")", ")", "# Decay factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 23.00701927120611}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "cluster_weight", "=", "0.4", "# Weight for cluster potential", "distance_weight", "=", "0.4", "# Weight for immediate distance cost", "connectivity_weight", "=", "0.2", "# Weight for connectivity impact", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "+", "1e-5", ")", "for", "other_node", "in", "unvisited_nodes", ")", "# Avoid div0", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "(", "direct_distance", ")", "+", "(", "cluster_weight", "*", "cluster_average_distance", ")", "+", "(", "distance_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "(", "connectivity_weight", "*", "connectivity_score", ")", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 24.15829773698412}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Clustering the unvisited nodes based on a threshold distance", "clusters", "=", "[", "]", "cluster_threshold", "=", "3", "# Define a reasonable distance to form clusters", "for", "node", "in", "unvisited_nodes", ":", "added_to_cluster", "=", "False", "for", "cluster", "in", "clusters", ":", "if", "any", "(", "distance_matrix", "[", "node", "]", "[", "cluster_node", "]", "<", "cluster_threshold", "for", "cluster_node", "in", "cluster", ")", ":", "cluster", ".", "append", "(", "node", ")", "added_to_cluster", "=", "True", "break", "if", "not", "added_to_cluster", ":", "clusters", ".", "append", "(", "[", "node", "]", ")", "# Select the closest cluster to the current node", "closest_cluster", "=", "min", "(", "clusters", ",", "key", "=", "lambda", "cluster", ":", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "cluster", ")", ")", "# From the closest cluster, select the node that has the minimum distance to the destination", "next_node", "=", "min", "(", "closest_cluster", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "return", "next_node"], "code_perf": 18.704820740310073}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_remaining", "=", "total_distance_to_remaining", "/", "len", "(", "unvisited_nodes", ")", "strategic_importance_weight", "=", "0.5", "# Weight for considering future path importance", "direct_influence_weight", "=", "0.5", "# Weight for direct distance influence", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "strategic_importance", "=", "strategic_importance_weight", "*", "(", "average_distance_to_remaining", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "score", "=", "(", "direct_influence_weight", "*", "direct_distance", ")", "+", "strategic_importance", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.0647958752346804}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "future_cost_weight", "=", "0.4", "# Weight for potential future cost", "risk_penalty_weight", "=", "0.2", "# Weight for risk of longer paths", "# Calculate average distance to unvisited nodes for future cost evaluation", "future_cost", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "risk_penalty", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "*", "0.1", "# Risk penalty based on closest unvisited", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "future_cost_weight", "*", "future_cost", ")", "-", "(", "risk_penalty_weight", "*", "risk_penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "# Constants for weighting", "delta", "=", "0.5", "# Weight for average distance score", "epsilon", "=", "0.5", "# Weight for reachable nodes score", "# Calculate average distance to the remaining nodes", "average_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Reachable nodes score: count how many unvisited nodes can be reached within a threshold", "threshold", "=", "10", "# Example threshold distance", "reachable_nodes_count", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<=", "threshold", ")", "# Combined score incorporating average distance and reachable nodes score", "combined_score", "=", "(", "reachable_nodes_count", "*", "epsilon", "-", "distance_to_next", "*", "delta", "-", "distance_to_destination", ")", "if", "combined_score", ">", "best_score", ":", "best_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.80356546673329}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "average_distance_to_unvisited", "=", "total_distance_to_unvisited", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "penalty", "=", "1", "/", "(", "(", "distance_to_next", "+", "1", ")", "**", "2", ")", "# Squared penalty diminishes score impact for distant nodes", "score", "=", "(", "average_distance_to_unvisited", "-", "distance_to_next", ")", "*", "penalty", "# Combining average distance optimized with penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.362010196137341}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "risk_weight", "=", "0.3", "# Weight for risk of longer travel", "clustering_weight", "=", "0.7", "# Weight for clustering effect of unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "potential_risk", "=", "direct_distance", "/", "total_distance_to_destination", "clustering_effect", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "(", "direct_distance", "*", "risk_weight", ")", "+", "(", "clustering_effect", "*", "clustering_weight", ")", "+", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.619455423471443}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Create a score dictionary for each unvisited node based on various factors", "score_dict", "=", "{", "}", "num_visited", "=", "len", "(", "distance_matrix", ")", "-", "len", "(", "unvisited_nodes", ")", "decay_factor", "=", "0.1", "/", "(", "num_visited", "+", "1", ")", "# Dynamic decay based on number of visits", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# New scoring mechanism considering distance and decay factor", "score", "=", "distance", "*", "(", "1", "+", "decay_factor", ")", "+", "random", ".", "uniform", "(", "0", ",", "decay_factor", "*", "10", ")", "score_dict", "[", "node", "]", "=", "score", "# Find the nodes with the minimum score", "min_score", "=", "min", "(", "score_dict", ".", "values", "(", ")", ")", "best_candidates", "=", "[", "node", "for", "node", ",", "score", "in", "score_dict", ".", "items", "(", ")", "if", "score", "==", "min_score", "]", "# Introduce random selection among the best candidates", "if", "best_candidates", ":", "return", "random", ".", "choice", "(", "best_candidates", ")", "return", "None"], "code_perf": 7.272900576635529}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "total_distance_traversed", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "decay_factor", "=", "0.1", "# Adjust this value to influence the importance of already traversed distance", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "average_distance_to_unvisited", "*", "(", "1", "-", "decay_factor", "*", "total_distance_traversed", ")", ")", "-", "distance_to_next", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.371018871171994}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.6", "# Weight for direct distance", "penalty_weight", "=", "0.4", "# Penalty for detouring to nodes that increase overall distance", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate penalty based on the average distance to all unvisited nodes from the current node", "penalty_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average distance to the destination from unvisited nodes", "avg_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "dest", "]", "for", "dest", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combine scores", "score", "=", "distance_weight", "*", "direct_distance", "+", "penalty_weight", "*", "penalty_score", "-", "avg_to_destination", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.41724333977419}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate scores for each unvisited node based on distance to current and destination", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "# Cumulative cost to reach the node and penalty based on distance to the destination", "score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "0.5", "scores", "[", "node", "]", "=", "score", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm integrates a scoring mechanism that prioritizes nodes based on their average distance to other unvisited nodes and their individual distance to the current node, while also considering an attractiveness score based on their proximity to the destination.}", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "# Average distance from the current node to all unvisited nodes", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Attractiveness factor: inversely proportional to the distance to the destination", "attractiveness_score", "=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1e-5", ")", "# Average distance from the node to all other unvisited nodes", "avg_distance_from_node", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "adj", "]", "for", "adj", "in", "unvisited_nodes", "if", "adj", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "# Combine metrics to compute a weighted score using distance to current, attractiveness, and average distance from node", "weighted_score", "=", "distance_to_node", "+", "avg_distance_from_node", "-", "(", "attractiveness_score", "*", "avg_distance_to_unvisited", ")", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.306667267438964}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "accessibility_weight", "=", "0.4", "# Weight for node accessibility", "visit_frequency_weight", "=", "0.2", "# Weight for visitation frequency preference", "# Function to calculate visit frequency score based on unvisited nodes", "def", "calculate_visit_frequency_score", "(", "node", ")", ":", "visit_count", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "visit_count", "+=", "1", "/", "distance_matrix", "[", "node", "]", "[", "other", "]", "# Inversely proportional to distance", "return", "visit_count", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "accessibility_score", "=", "1", "/", "direct_distance", "if", "direct_distance", ">", "0", "else", "0", "visit_frequency_score", "=", "calculate_visit_frequency_score", "(", "node", ")", "# Combined scoring mechanism with emphasis on exploration of less connected nodes", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "accessibility_weight", "*", "accessibility_score", "+", "visit_frequency_weight", "*", "visit_frequency_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.694816937984934}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "savings_weight", "=", "0.6", "# Increased weight for cluster savings", "distance_weight", "=", "0.4", "# Decreased weight for direct distance cost", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_nodes_count", "=", "len", "(", "unvisited_nodes", ")", "risk_factor", "=", "(", "1", "-", "(", "1", "/", "(", "remaining_nodes_count", "+", "1", ")", ")", ")", "# Risk decreases with more unvisited nodes", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "remaining_nodes_count", "or", "1", ")", "score", "=", "(", "savings_weight", "*", "cluster_average_distance", "*", "risk_factor", ")", "-", "(", "distance_weight", "*", "direct_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.583557707177121}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "nearest_neighbor_weight", "=", "0.5", "# Weight for nearest neighbor distance", "cluster_density_weight", "=", "0.3", "# Weight for cluster density", "destination_penalty_weight", "=", "0.2", "# Weight for penalty based on distance to destination", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_unvisited", "=", "total_distance_to_destination", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "nearest_neighbor_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_density_score", "=", "1", "/", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "or", "1", ")", "destination_penalty", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "destination_penalty_weight", "score", "=", "(", "nearest_neighbor_distance", "*", "nearest_neighbor_weight", ")", "+", "(", "cluster_density_score", "*", "cluster_density_weight", ")", "-", "destination_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 36.005307005294}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance to unvisited nodes", "attractiveness_weight", "=", "0.3", "# Weight for attractiveness to destination", "cluster_density_weight", "=", "0.2", "# Weight for cluster density effect", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate the density of unvisited node clusters around the current node", "cluster_density", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "other_node", "]", "<", "direct_distance", ")", "cluster_size", "=", "len", "(", "unvisited_nodes", ")", "density_score", "=", "(", "cluster_density", "/", "cluster_size", ")", "if", "cluster_size", ">", "0", "else", "0", "score", "=", "(", "distance_to_destination", "*", "attractiveness_weight", ")", "-", "(", "direct_distance", "*", "direct_weight", ")", "+", "(", "density_score", "*", "cluster_density_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.063375569743663}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "# Calculate total distance so far (current cost)", "current_cost", "=", "sum", "(", "distance_matrix", "[", "i", "]", "[", "j", "]", "for", "i", ",", "j", "in", "zip", "(", "[", "current_node", "]", "+", "list", "(", "unvisited_nodes", ")", ",", "list", "(", "unvisited_nodes", ")", "+", "[", "current_node", "]", ")", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Score based on distance and heuristic (simple combination)", "score", "=", "distance", "+", "(", "0.5", "*", "heuristic_cost", ")", "+", "current_cost", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.526271790227707}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "criticality_weight", "=", "0.3", "# Weight for node criticality", "future_cost_weight", "=", "0.3", "# Weight for estimated future costs", "# Function to calculate criticality score based on node degree", "def", "calculate_criticality_score", "(", "node", ")", ":", "return", "len", "(", "unvisited_nodes", ")", "-", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other", "]", "==", "float", "(", "'inf'", ")", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "criticality_score", "=", "calculate_criticality_score", "(", "node", ")", "future_cost", "=", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combined scoring mechanism with penalties for higher costs", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "criticality_weight", "*", "criticality_score", "-", "future_cost_weight", "*", "future_cost", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to destination", "distribution_weight", "=", "0.4", "# Weight for distribution savings among unvisited nodes", "randomness_weight", "=", "0.2", "# Weight to introduce randomness in selection", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_others", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Introduce randomness with a small chance", "randomness_factor", "=", "random", ".", "uniform", "(", "-", "1", ",", "1", ")", "*", "randomness_weight", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", ")", "+", "(", "average_distance_to_others", "*", "distribution_weight", ")", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "randomness_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.541231607983072}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "weighted_distances", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "probability", "=", "distance", "/", "total_distance", "weighted_selection", "=", "(", "1", "-", "probability", ")", "+", "(", "random", ".", "random", "(", ")", "*", "probability", ")", "weighted_distances", ".", "append", "(", "(", "node", ",", "weighted_selection", ")", ")", "# Select the node with the minimum weighted distance", "next_node", "=", "min", "(", "weighted_distances", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "unvisited_nodes", ".", "remove", "(", "next_node", ")", "return", "next_node"], "code_perf": 34.70658926118945}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "decay_factor", "=", "1.2", "# Temporal decay factor to emphasize longer unvisited paths", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for distance", "density_weight", "=", "0.4", "# Weight for density of unvisited connections", "penalty_weight", "=", "0.1", "# Penalty for already visited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "density_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average density", "penalty_score", "=", "sum", "(", "1", "for", "next", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "next", "not", "in", "unvisited_nodes", "and", "distance_matrix", "[", "current_node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", ")", "# Penalty for visited node connections", "temporal_decay", "=", "max", "(", "len", "(", "unvisited_nodes", ")", "-", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ",", "0", ")", "**", "decay_factor", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "density_weight", "*", "density_score", "-", "penalty_weight", "*", "penalty_score", "+", "temporal_decay", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.794051788470489}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to unvisited nodes", "penalty_weight", "=", "0.3", "# Weight for penalizing distance traveled", "explored_ratio_weight", "=", "0.3", "# Weight for considering explored nodes ratio", "explored_count", "=", "len", "(", "unvisited_nodes", ")", "# Total unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Total distances to unvisited", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "explored_ratio", "=", "explored_count", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Avoids division by zero", "score", "=", "(", "average_distance_to_unvisited", "*", "proximity_weight", ")", "-", "(", "direct_distance", "*", "penalty_weight", ")", "+", "(", "explored_ratio", "*", "explored_ratio_weight", ")", "-", "distance_to_destination", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.04185461524508}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Score dictionary to assess nodes based on distance and penalty", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Introducing a revisit penalty based on how many nodes are left", "revisit_penalty", "=", "len", "(", "unvisited_nodes", ")", "*", "0.1", "# Score is based on the shortest distance to the unvisited node reduced by a penalty", "scores", "[", "node", "]", "=", "distance_to_node", "+", "revisit_penalty", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "proximity_score", "=", "(", "avg_distance_to_destination", "-", "distance_to_destination", ")", "**", "2", "score", "=", "direct_distance", "+", "0.4", "*", "proximity_score", "+", "0.6", "*", "distance_to_destination", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.583897236942931}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for distance", "proximity_bonus", "=", "0.4", "# Bonus for proximity to current node", "distance_penalty_factor", "=", "0.1", "# Penalty factor for unvisited nodes", "# Function to calculate proximity score based on current node", "def", "calculate_proximity_score", "(", "node", ")", ":", "return", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1e-5", ")", "# Adding small value to avoid division by zero", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "calculate_proximity_score", "(", "node", ")", "number_of_unvisited", "=", "len", "(", "unvisited_nodes", ")", "distance_penalty", "=", "distance_penalty_factor", "*", "direct_distance", "*", "number_of_unvisited", "# Combined scoring mechanism", "score", "=", "(", "proximity_bonus", "*", "proximity_score", "-", "distance_weight", "*", "distance_penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_remaining", "=", "total_distance_to_remaining", "/", "len", "(", "unvisited_nodes", ")", "direct_influence_weight", "=", "0.4", "# Adjusted weight for direct distance influence", "future_cost_weight", "=", "0.6", "# Adjusted weight for future path estimation", "penalty_factor", "=", "1.5", "# Factor to penalize longer paths", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_cost", "=", "average_distance_to_remaining", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "direct_influence_weight", "*", "direct_distance", ")", "+", "(", "future_cost_weight", "*", "future_cost", ")", "+", "(", "penalty_factor", "*", "max", "(", "0", ",", "direct_distance", "-", "average_distance_to_remaining", ")", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.521648246074054}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Slightly adjusted weight for direct distance", "connectivity_ratio_weight", "=", "0.3", "# Weight for ratio of connectivity to unvisited nodes", "penalty_weight", "=", "0.2", "# Penalty for longer routes", "future_bonus_weight", "=", "0.1", "# Bonus for nodes with higher future connectivity", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Modified connectivity score based on the ratio of connected unvisited nodes", "connectivity_ratio", "=", "len", "(", "[", "next", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "direct_distance", "]", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Future bonus score for nodes with many connections to unvisited nodes", "future_bonus_score", "=", "len", "(", "[", "next", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "2", "*", "direct_distance", "]", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combined score", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_ratio_weight", "*", "connectivity_ratio", "-", "penalty_weight", "*", "(", "direct_distance", "**", "2", ")", "+", "future_bonus_weight", "*", "future_bonus_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 16.581905621192604}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "# Weighted score: direct distance weighted against the average remaining distance", "if", "len", "(", "unvisited_nodes", ")", ">", "1", ":", "score", "=", "direct_distance", "+", "(", "cumulative_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", ")", "else", ":", "score", "=", "direct_distance", "# Only one node remains", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.4323878079629}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "# Calculate the maximum distance to unvisited nodes as a penalty", "max_distance", "=", "max", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Incorporate both the direct distance and the penalty for the longest unvisited node", "total_cost", "=", "direct_distance", "+", "(", "max_distance", "/", "2", ")", "if", "total_cost", "<", "min_cost", ":", "min_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "connectivity_factor", "=", "sum", "(", "1", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "<", "float", "(", "'inf'", ")", ")", "penalty_factor", "=", "0.1", "*", "(", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "distance_matrix", ")", "-", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "# Dynamic penalty based on unvisited count", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "potential_future_cost", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "score", "=", "direct_distance", "+", "penalty_factor", "+", "potential_future_cost", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.301930936042854}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate distances and clustering scores for each unvisited node", "scores", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "0.7", ")", "+", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max", "(", "1", ",", "len", "(", "unvisited_nodes", ")", ")", ")", "*", "0.3", "for", "node", "in", "unvisited_nodes", "}", "# Select the unvisited node with the minimum score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.437843667925288}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "cluster_threshold", "=", "5", "# Distance to consider nodes in the same cluster", "cluster_count", "=", "sum", "(", "1", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<=", "cluster_threshold", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_effect", "=", "cluster_count", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "# Normalize cluster influence", "attractiveness_factor", "=", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "/", "(", "1", "+", "direct_distance", ")", "score", "=", "direct_distance", "+", "0.7", "*", "attractiveness_factor", "+", "0.3", "*", "cluster_effect", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.487558560768807}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "max_cost", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "adjustment", "=", "(", "num_unvisited", "**", "2", ")", "*", "0.5", "# Inverse cost adjustment based on the squared number of unvisited nodes", "total_cost", "=", "direct_distance", "-", "adjustment", "if", "total_cost", ">", "max_cost", ":", "max_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 36.1397423465301}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "total_distances", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_unvisited", "=", "total_distances", "/", "len", "(", "unvisited_nodes", ")", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "+", "avg_distance_to_unvisited", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "candidates", "=", "list", "(", "unvisited_nodes", ")", "scored_candidates", "=", "[", "]", "for", "node", "in", "candidates", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_penalty", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "*", "0.2", "score", "=", "direct_distance", "+", "connectivity_penalty", "scored_candidates", ".", "append", "(", "(", "node", ",", "score", ")", ")", "scored_candidates", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "return", "scored_candidates", "[", "0", "]", "[", "0", "]"], "code_perf": 11.793540910268982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "visit_history", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "# Track how often nodes were previously selected", "distances_to_destination", "=", "[", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "]", "# Calculate average and variance of distances", "avg_distance", "=", "sum", "(", "distances_to_destination", ")", "/", "len", "(", "distances_to_destination", ")", "if", "distances_to_destination", "else", "0", "variance_distance", "=", "sum", "(", "(", "d", "-", "avg_distance", ")", "**", "2", "for", "d", "in", "distances_to_destination", ")", "/", "len", "(", "distances_to_destination", ")", "if", "distances_to_destination", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "historical_efficiency", "=", "visit_history", "[", "node", "]", "*", "0.4", "# Penalty for previous visits", "exploration_score", "=", "(", "1", "/", "(", "1", "+", "variance_distance", ")", ")", "*", "0.6", "# Encourage exploration based on distance variance", "score", "=", "direct_distance", "+", "historical_efficiency", "-", "exploration_score", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "# Update visit history for the selected next node", "if", "next_node", ":", "visit_history", "[", "next_node", "]", "+=", "1", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate distances and penalties for each unvisited node", "scores", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "-", "(", "sum", "(", "distance_matrix", "[", "node", "]", ")", "/", "max", "(", "1", ",", "len", "(", "unvisited_nodes", ")", ")", ")", "*", "0.5", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the unvisited node with the minimum score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.711701977125337}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "synergy_weight", "=", "0.4", "# Weight for synergy with unvisited nodes", "dynamic_penalty_weight", "=", "0.2", "# Weight for dynamic penalties", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "dynamic_penalty", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Calculate synergy score for unvisited nodes", "proximity_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "node", "in", "unvisited_nodes", "for", "other_node", "in", "unvisited_nodes", "if", "node", "!=", "other_node", ")", "synergy_score", "=", "proximity_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "synergy_weight", "*", "synergy_score", ")", "-", "(", "dynamic_penalty_weight", "*", "dynamic_penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.6", "# Weight for proximity to the current node", "destination_weight", "=", "0.4", "# Weight for proximity to the destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "cumulative_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "penalty_for_distance", "=", "direct_distance", "*", "0.3", "# Penalty for distance", "score", "=", "(", "(", "1", "/", "(", "1", "+", "direct_distance", ")", ")", "*", "proximity_weight", ")", "+", "(", "(", "1", "/", "(", "1", "+", "distance_to_destination", ")", ")", "*", "destination_weight", ")", "-", "penalty_for_distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.220140299406597}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "decay_factor", "=", "0.9", "# Factor to decrease importance of scores over unvisited nodes", "synergy_weight", "=", "0.4", "# Weight for synergy of connecting multiple unvisited nodes", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "connectivity_weight", "=", "0.3", "loop_closure_weight", "=", "0.2", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "loop_closure_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate a score with incorporation of a decay factor for distance ", "decay_score", "=", "decay_factor", "**", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "# Compute the synergy score based on connections to other unvisited nodes", "synergy_score", "=", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "10", ")", "# Arbitrary proximity of 10 for synergy", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "*", "decay_score", "+", "connectivity_weight", "*", "connectivity_score", "+", "loop_closure_weight", "*", "loop_closure_score", "+", "synergy_weight", "*", "synergy_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 11.801353860251503}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the total distance to unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Score nodes based on their direct distance and a connectivity penalty", "node_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate connectivity penalty (number of direct connections to other unvisited nodes)", "connectivity", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", "and", "n", "!=", "node", ")", "# Adjust score: lower distance and higher connectivity yields a lower score", "score", "=", "direct_distance", "-", "(", "connectivity", "*", "0.1", ")", "+", "(", "total_distance", "/", "len", "(", "unvisited_nodes", ")", ")", "node_scores", "[", "node", "]", "=", "score", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "visit_counts", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "# Track visit counts", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "visit_penalty", "=", "visit_counts", "[", "node", "]", "*", "(", "1.5", "/", "(", "visit_counts", "[", "node", "]", "+", "1", ")", ")", "# Higher penalty for revisiting", "# Novel mechanism: Penalty reduction for remaining unvisited nodes", "potential_future_visits", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "future_visitation_factor", "=", "(", "len", "(", "unvisited_nodes", ")", "-", "potential_future_visits", ")", "/", "len", "(", "unvisited_nodes", ")", "# Score based on distance, penalty and future visitation potential", "score", "=", "-", "direct_distance", "+", "(", "1.5", "*", "future_visitation_factor", ")", "-", "visit_penalty", "+", "(", "1", "/", "(", "1", "+", "distance_to_destination", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "# Increment visit count for the next node", "if", "next_node", ":", "visit_counts", "[", "next_node", "]", "+=", "1", "return", "next_node"], "code_perf": 7.373133925713997}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance to the next node", "penalty_weight", "=", "0.5", "# Weight for the penalty based on overall travel cost", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "(", "total_distance_to_destination", "-", "direct_distance", ")", "/", "(", "unvisited_count", "or", "1", ")", "score", "=", "(", "direct_distance", "*", "distance_weight", ")", "+", "(", "penalty", "*", "penalty_weight", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.6", "# Weight for proximity to destination", "cost_efficiency_weight", "=", "0.4", "# Weighing the efficiency based on historical costs", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_cost_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "historical_cost", "=", "(", "total_distance_to_destination", "+", "direct_distance", ")", "/", "2", "# Historical cost as a simple average", "score", "=", "-", "(", "direct_distance", "+", "historical_cost", ")", "+", "(", "average_cost_to_destination", "*", "cost_efficiency_weight", ")", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.293501640558723}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "# Incorporate a randomized exploration factor", "exploration_factor", "=", "random", ".", "uniform", "(", "0.5", ",", "1.5", ")", "# Random weight to encourage exploration", "weighted_distance", "=", "(", "0.5", "*", "direct_distance", ")", "+", "(", "0.3", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", ")", "+", "(", "0.2", "*", "(", "connectivity_score", "-", "1", ")", ")", "score", "=", "exploration_factor", "*", "weighted_distance", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 22.55332804468202}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.5", "# Weight for direct distance", "cluster_weight", "=", "0.3", "# Weight for cluster distance savings", "time_savings_weight", "=", "0.2", "# Weight for estimated time savings", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "estimated_time_savings", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "/", "max", "(", "1", ",", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "score", "=", "-", "(", "direct_distance", "*", "direct_distance_weight", "+", "total_distance_to_destination", "*", "direct_distance_weight", ")", "+", "(", "cluster_average_distance", "*", "cluster_weight", ")", "-", "(", "estimated_time_savings", "*", "time_savings_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.773348890487566}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "candidates", "=", "list", "(", "unvisited_nodes", ")", "scored_candidates", "=", "[", "]", "exploration_factor", "=", "0.1", "# Exploration parameter", "# Calculate average distance to remaining unvisited nodes", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "candidates", ")", "/", "len", "(", "candidates", ")", "for", "node", "in", "candidates", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "+", "average_distance", "+", "random", ".", "uniform", "(", "0", ",", "exploration_factor", ")", "# Incorporate randomness", "scored_candidates", ".", "append", "(", "(", "node", ",", "score", ")", ")", "scored_candidates", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "return", "scored_candidates", "[", "0", "]", "[", "0", "]"], "code_perf": 7.340924036519485}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.4", "# Weight for connectivity to unvisited nodes", "potential_weight", "=", "0.2", "# Weight for future potential based on remaining nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "# Average connectivity excluding the current node", "# Potential score based on the average distance to the destination from unvisited nodes", "potential_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "dest", "]", "for", "dest", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Heuristic factor considering the distance to the destination", "heuristic_factor", "=", "1", "/", "(", "1", "+", "direct_distance", ")", "# Inverse of direct distance", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "potential_weight", "*", "potential_score", "*", "heuristic_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.508376650828784}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate weights for each unvisited node", "weighted_distances", "=", "{", "node", ":", "(", "1", "/", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "for", "node", "in", "unvisited_nodes", "}", "# Choose the next node based on the highest weight value", "next_node", "=", "max", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "weighted_distances", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "avg_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "# Attraction score based on proximity to destination", "attraction_score", "=", "distance_to_destination", "**", "-", "1", "if", "distance_to_destination", ">", "0", "else", "float", "(", "'inf'", ")", "# Risk factor representing the potential cost of visiting other nodes", "risk_factor", "=", "distance_to_next", "/", "(", "avg_distance_to_remaining", "+", "1", ")", "# Combined score", "score", "=", "attraction_score", "/", "(", "1", "+", "risk_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.91483687615865}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the centroid of unvisited nodes", "centroid_x", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "centroid_y", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "current_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Select the unvisited node closest to the centroid", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "(", "(", "centroid_x", "-", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "**", "2", "+", "(", "centroid_y", "-", "distance_matrix", "[", "node", "]", "[", "current_node", "]", ")", "**", "2", ")", "**", "0.5", ")", "return", "next_node"], "code_perf": 27.320959871234923}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_bonus_weight", "=", "0.5", "average_distance_weight", "=", "0.2", "revisit_penalty_weight", "=", "0.2", "exploration_bonus_weight", "=", "0.1", "recent_nodes", "=", "[", "current_node", "]", "# Keeping track of recently visited nodes", "recent_node_penalty", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "recent_nodes", ")", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "nearest_distance", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "exploration_bonus", "=", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "score", "=", "(", "nearest_distance", "*", "distance_bonus_weight", "+", "average_distance", "*", "average_distance_weight", "-", "recent_node_penalty", "*", "revisit_penalty_weight", "+", "exploration_bonus", "*", "exploration_bonus_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 26.04202206317254}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "destination_weight", "=", "0.5", "# Weight for proximity to destination", "exploration_weight", "=", "0.4", "# Weight for exploration of unvisited nodes", "historical_weight", "=", "0.1", "# Weight for historical influence", "historical_scores", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "current_node", "in", "historical_scores", ":", "historical_scores", "[", "current_node", "]", "+=", "distance_matrix", "[", "previous_node", "]", "[", "node", "]", "if", "previous_node", "!=", "current_node", "else", "0", "score", "=", "(", "distance_to_destination", "*", "destination_weight", ")", "-", "(", "direct_distance", "*", "exploration_weight", ")", "-", "(", "historical_scores", "[", "node", "]", "*", "historical_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.494765600969778}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "exploration_weight", "=", "1.5", "# Weight for exploration based on node centrality", "penalty_weight", "=", "0.5", "# Penalty for choosing unvisited nodes", "future_benefit_weight", "=", "0.5", "# Weight for potential future benefits", "if", "unvisited_nodes", ":", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "centrality_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", ")", "# Longer distance penalized", "# A potential future score based on proximity to the destination", "future_benefit_score", "=", "1", "/", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ">", "0", "else", "0", "# Combined score with exploration bonus and unvisited node penalty", "score", "=", "(", "centrality_score", "*", "exploration_weight", "-", "penalty_weight", "*", "direct_distance", "+", "future_benefit_weight", "*", "future_benefit_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 30.201074507246904}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "samples", "=", "1000", "# Number of samples to simulate", "best_node", "=", "None", "best_average_score", "=", "float", "(", "'inf'", ")", "for", "_", "in", "range", "(", "samples", ")", ":", "candidate_node", "=", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "# Calculate score based on distance to candidate node and distance to destination", "distance_to_candidate", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate_node", "]", "distance_to_destination", "=", "distance_matrix", "[", "candidate_node", "]", "[", "destination_node", "]", "average_score", "=", "distance_to_candidate", "+", "distance_to_destination", "# Select the node with the best average score over samples", "if", "average_score", "<", "best_average_score", ":", "best_average_score", "=", "average_score", "best_node", "=", "candidate_node", "return", "best_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "total_distance_from_unvisited_to_destination", "=", "sum", "(", "distance_matrix", "[", "n", "]", "[", "destination_node", "]", "for", "n", "in", "unvisited_nodes", ")", "score", "=", "(", "total_distance_to_unvisited", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", ")", "-", "distance_to_next", "+", "(", "0.3", "*", "total_distance_from_unvisited_to_destination", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.41724333977419}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_weighted_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate connection score based on the number of connections to other unvisited nodes", "connection_score", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "float", "(", "'inf'", ")", ")", "# Weighted score: prioritize higher connections while balancing distances", "weighted_score", "=", "(", "connection_score", "+", "1", ")", "/", "(", "distance_to_next", "+", "distance_to_destination", "+", "1e-6", ")", "# Add small epsilon to avoid division by zero", "if", "weighted_score", ">", "max_weighted_score", ":", "max_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "distance_weight", "=", "0.5", "# Weight for direct distance", "remaining_penalty_weight", "=", "0.5", "# Weight for penalty based on unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "for", "unvisited", "in", "unvisited_nodes", "if", "unvisited", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combined scoring mechanism", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "remaining_penalty_weight", "*", "remaining_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.41724333977419}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.3", "# Weight for node connectivity", "attractiveness_weight", "=", "0.3", "# Weight for cumulative attractiveness", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "cumulative_attractiveness", "=", "sum", "(", "1", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "other_node", "]", ")", "for", "other_node", "in", "unvisited_nodes", ")", "score", "=", "(", "total_distance_to_destination", "-", "direct_distance", "*", "distance_weight", ")", "+", "(", "connectivity_score", "*", "connectivity_weight", ")", "+", "(", "cumulative_attractiveness", "*", "attractiveness_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.725498543654062}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "potential_nodes", "=", "[", "]", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "to_destination_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "adjusted_score", "=", "(", "direct_distance", "+", "to_destination_distance", ")", "/", "2", "# Average of distances", "penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "average_distance", ")", "*", "0.4", "# Adjusted penalty", "final_score", "=", "adjusted_score", "+", "penalty", "# Final scoring calculation", "potential_nodes", ".", "append", "(", "(", "node", ",", "final_score", ")", ")", "next_node", "=", "min", "(", "potential_nodes", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 8.096655452454947}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "novelty_weight", "=", "0.4", "# Weight for novelty based on distance to recent nodes", "cluster_weight", "=", "0.2", "# Weight for clustering attractiveness", "# Recently visited nodes tracking (consider previous 2 nodes as an example)", "recent_nodes", "=", "[", "current_node", "]", "# Here we can assume we have a way to track previous nodes visited", "if", "len", "(", "recent_nodes", ")", ">", "2", ":", "recent_nodes", ".", "pop", "(", "0", ")", "# Keep only the last two for this example", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Novelty score based on distance to recent nodes", "novelty_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "recent", "]", "for", "recent", "in", "recent_nodes", ")", "/", "(", "len", "(", "recent_nodes", ")", "or", "1", ")", "# Cluster score based on proximity to the center of unvisited nodes", "cluster_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "for", "unvisited", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "novelty_weight", "*", "novelty_score", "+", "cluster_weight", "*", "cluster_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 14.488654484787507}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "minimal_weighted_distance", "=", "float", "(", "'inf'", ")", "visit_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "(", "1", "/", "(", "1", "+", "np", ".", "log", "(", "visit_count", ")", ")", ")", "# Applying a penalty based on visit count", "weighted_distance", "=", "distance", "*", "penalty", "if", "weighted_distance", "<", "minimal_weighted_distance", ":", "minimal_weighted_distance", "=", "weighted_distance", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "diversity_factor", "=", "len", "(", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ",", "1", ")", "# Encourage diversity based on unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Synergy factor promoting nodes with a balanced mix of short and long distances", "synergy_score", "=", "(", "1", "/", "(", "1", "+", "direct_distance", ")", ")", "*", "(", "1", "/", "(", "1", "+", "distance_to_destination", ")", ")", "# Total score combines direct distance, diversity, and synergy", "score", "=", "-", "direct_distance", "+", "(", "2", "-", "distance_to_destination", ")", "+", "(", "diversity_factor", "*", "synergy_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.951128356421032}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm introduces a scoring system that combines the minimum distance to the next node, the total distance to all unvisited nodes, and a weighted factor for unvisited node density.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "density_factor", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", "# Avoid division by zero", "score", "=", "(", "density_factor", "*", "total_distance", ")", "/", "(", "distance_to_next", "+", "1", ")", "# Higher score for nodes with higher density and shorter distances", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.862738108318953}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "urgency_weight", "=", "2.0", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connection_count", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "urgency_factor", "=", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "score", "=", "direct_distance", "+", "(", "0.5", "*", "connection_count", ")", "-", "(", "urgency_weight", "*", "urgency_factor", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.200398563964161}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "pathway_penalty_factor", "=", "0.5", "# Factor to penalize longer paths", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "potential_pathway_weight", "=", "0.4", "# Weight for promising future paths", "destination_alignment_weight", "=", "0.2", "# Weight for alignment towards destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate potential future pathways based on unvisited connections", "potential_pathway_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Estimate score for alignment towards the final destination", "destination_alignment_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score with penalty for longer paths", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "potential_pathway_weight", "*", "potential_pathway_score", "-", "pathway_penalty_factor", "*", "direct_distance", "+", "destination_alignment_weight", "*", "destination_alignment_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.325818557015709}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "decay_factor", "=", "0.9", "# Factor to reduce the importance of previous distances", "# Calculate total remaining distance", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Calculate an adjusted connectivity score", "connectivity_score", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "neighbour", "]", "for", "neighbour", "in", "unvisited_nodes", "if", "neighbour", "!=", "node", ")", "for", "node", "in", "unvisited_nodes", "}", "# Iterate through unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate a future cost based on neighboring distances", "future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "neighbour", "]", "for", "neighbour", "in", "unvisited_nodes", "if", "neighbour", "!=", "node", ")", "*", "decay_factor", "# Compute weighted score", "weighted_score", "=", "distance", "+", "(", "total_remaining_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", ")", "+", "future_cost", "-", "(", "connectivity_score", "[", "node", "]", "*", "0.1", ")", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 19.845679589015397}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "visit_history", "=", "{", "node", ":", "(", "0", ",", "float", "(", "'inf'", ")", ")", "for", "node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "}", "# (visit count, last visit time)", "if", "unvisited_nodes", ":", "immediate_weight", "=", "0.5", "# Weight for immediate travel cost", "frequency_weight", "=", "0.2", "# Influence of node visit frequency", "reputation_weight", "=", "0.3", "# Weight for reputation score", "current_time", "=", "sum", "(", "visit_history", "[", "node", "]", "[", "0", "]", "for", "node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", ")", "# Simulating time based on visits", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "visit_count", ",", "last_visit_time", "=", "visit_history", "[", "node", "]", "# Calculating the reputation of the node", "reputation_score", "=", "(", "1", "/", "(", "1", "+", "(", "current_time", "-", "last_visit_time", ")", ")", ")", "if", "last_visit_time", "<", "float", "(", "'inf'", ")", "else", "1", "# Frequency-based penalty", "frequency_penalty", "=", "visit_count", "*", "0.1", "score", "=", "(", "-", "immediate_weight", "*", "direct_distance", ")", "-", "(", "frequency_weight", "*", "frequency_penalty", ")", "+", "(", "reputation_weight", "*", "reputation_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "visit_count", ",", "last_visit_time", "=", "visit_history", "[", "next_node", "]", "visit_history", "[", "next_node", "]", "=", "(", "visit_count", "+", "1", ",", "current_time", ")", "# Update visit count and last visit time", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Create a priority list based on distances to unvisited nodes", "priority_nodes", "=", "sorted", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "# Check for the best candidate that minimizes the distance", "for", "node", "in", "priority_nodes", ":", "if", "node", "in", "unvisited_nodes", ":", "next_node", "=", "node", "break", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Create a score dictionary for each unvisited node based on distance and decay penalty", "score_dict", "=", "{", "}", "total_visits", "=", "len", "(", "distance_matrix", ")", "-", "len", "(", "unvisited_nodes", ")", "# Number of nodes visited so far", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "decay_penalty", "=", "(", "1", "/", "(", "total_visits", "+", "1", ")", ")", "*", "distance", "# Penalty decreases with more visits", "score", "=", "distance", "+", "decay_penalty", "# Total score considers distance and decay penalty", "score_dict", "[", "node", "]", "=", "score", "# Find the nodes with the minimum score", "min_score", "=", "min", "(", "score_dict", ".", "values", "(", ")", ")", "best_candidates", "=", "[", "node", "for", "node", ",", "score", "in", "score_dict", ".", "items", "(", ")", "if", "score", "==", "min_score", "]", "# Introduce random selection among the best candidates with an exploration factor", "if", "best_candidates", ":", "exploration_factor", "=", "0.5", "# 50% chance of selecting randomly from the best candidates", "if", "random", ".", "random", "(", ")", "<", "exploration_factor", ":", "return", "random", ".", "choice", "(", "best_candidates", ")", "else", ":", "return", "best_candidates", "[", "0", "]", "# Select the best candidate", "return", "None"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "total_traveled_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "if", "node", "!=", "current_node", ")", "average_travel_cost", "=", "total_traveled_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", "# Avoid division by zero", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "clustering_effect", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "2", ")", "# Penalty for proximity to other unvisited nodes", "score", "=", "direct_distance", "+", "0.3", "*", "clustering_effect", "-", "0.2", "*", "average_travel_cost", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Define a heuristic function that combines distance from the current node and distance to the destination", "def", "heuristic", "(", "node", ")", ":", "return", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Sort unvisited nodes based on the heuristic function", "sorted_nodes", "=", "sorted", "(", "unvisited_nodes", ",", "key", "=", "heuristic", ")", "# Select the node with the highest priority based on the heuristic", "next_node", "=", "sorted_nodes", "[", "0", "]", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "samples", "=", "1000", "# Number of samples to simulate", "best_node", "=", "None", "best_average_score", "=", "float", "(", "'inf'", ")", "for", "_", "in", "range", "(", "samples", ")", ":", "candidate_node", "=", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "# Calculate score based on distance to candidate node and combined distance to destination", "distance_to_candidate", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate_node", "]", "heuristic_cost", "=", "distance_matrix", "[", "candidate_node", "]", "[", "destination_node", "]", "# heuristic estimate to destination", "average_score", "=", "distance_to_candidate", "+", "heuristic_cost", "# Select the node with the best average score over samples", "if", "average_score", "<", "best_average_score", ":", "best_average_score", "=", "average_score", "best_node", "=", "candidate_node", "return", "best_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "scoring_nodes", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "(", "1", "/", "(", "distance", "+", "1", ")", ")", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "scoring_nodes", ".", "append", "(", "(", "node", ",", "score", ")", ")", "if", "not", "scoring_nodes", ":", "return", "None", "total_score", "=", "sum", "(", "score", "for", "_", ",", "score", "in", "scoring_nodes", ")", "weighted_probs", "=", "[", "(", "score", "/", "total_score", ")", "for", "_", ",", "score", "in", "scoring_nodes", "]", "next_node", "=", "random", ".", "choices", "(", "[", "node", "for", "node", ",", "_", "in", "scoring_nodes", "]", ",", "weights", "=", "weighted_probs", ",", "k", "=", "1", ")", "[", "0", "]", "return", "next_node"], "code_perf": 24.68688415183449}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Step 1: Sort unvisited nodes based on their distance from the current node", "sorted_nodes", "=", "sorted", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "# Step 2: Estimate total distance for each sorted node considering future paths", "best_node", "=", "None", "lowest_estimated_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "sorted_nodes", ":", "# Simulate next step by calculating the distance to all remaining unvisited nodes", "total_future_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", "if", "next_node", "!=", "node", ")", "# Total estimated distance when choosing this node next", "estimated_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "total_future_distance", "if", "estimated_distance", "<", "lowest_estimated_distance", ":", "lowest_estimated_distance", "=", "estimated_distance", "best_node", "=", "node", "return", "best_node"], "code_perf": 21.51502557645197}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Estimated cost to average of remaining unvisited nodes", "if", "unvisited_nodes", ":", "average_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "/", "len", "(", "unvisited_nodes", ")", "else", ":", "average_remaining_distance", "=", "0", "# Divergence penalty: determine how much the current path deviates", "curved_penalty", "=", "0.5", "*", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Combined score emphasizing proximity, remaining cost, and path directness", "score", "=", "distance_to_next", "+", "average_remaining_distance", "+", "curved_penalty", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.398261776190935}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Heuristic weight (can be adjusted): Distance to the destination can influence the score", "score", "=", "distance_to_node", "+", "0.5", "*", "distance_to_destination", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "min_distance_to_destination", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_factor", "=", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "min_distance_to_destination", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "score", "=", "direct_distance", "+", "2", "*", "heuristic_factor", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.200398563964161}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "max_distance_to_unvisited", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "# Combined score: favor nearer unvisited nodes while considering maximum distance to retain option viability", "score", "=", "(", "1", "/", "distance_to_next", ")", "-", "(", "max_distance_to_unvisited", "*", "0.1", ")", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.967231738091473}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_destination", "=", "total_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", "clustering_factor", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "dynamic_weight", "=", "1", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", "**", "0.5", ")", "# Weight decreases with more unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_score", "=", "dynamic_weight", "*", "(", "direct_distance", "+", "average_distance_to_destination", ")", "-", "clustering_factor", "if", "heuristic_score", "<", "min_cost", ":", "min_cost", "=", "heuristic_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "# Penalty for the total distance to the destination", "penalty_distance", "=", "distance_to_destination", "# Calculate cumulative distance to all remaining unvisited nodes", "future_distance_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "future_node", "]", "for", "future_node", "in", "unvisited_nodes", "if", "future_node", "!=", "node", ")", "# Combined score emphasizing immediate proximity and future cost", "score", "=", "distance_to_next", "+", "penalty_distance", "+", "(", "0.3", "*", "future_distance_score", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 13.403771075780126}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "cluster_weight", "=", "0.5", "# Weight for clustering value", "surge_penalty_weight", "=", "0.1", "# Weight for corrective surges", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Clustering heuristic based on unvisited density", "cluster_density", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "sum", "(", "1", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<", "total_distance_to_destination", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "density_multiplier", "=", "cluster_density", "if", "direct_distance", "<", "total_distance_to_destination", "else", "1.0", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "cluster_weight", "*", "density_multiplier", ")", "-", "(", "surge_penalty_weight", "*", "max", "(", "0", ",", "direct_distance", "-", "total_distance_to_destination", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "connectivity_weight", "=", "0.3", "# Weight for connectivity attractiveness", "randomness_factor", "=", "0.2", "# Factor to introduce randomness", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "connectivity_scores", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate connectivity based on average distance to its neighbors", "connectivity_scores", "[", "node", "]", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connection_score", "=", "connectivity_scores", "[", "node", "]", "# Incorporating randomness in selection", "random_score", "=", "random", ".", "uniform", "(", "0", ",", "randomness_factor", ")", "score", "=", "(", "1", "/", "(", "1", "+", "direct_distance", ")", "*", "distance_weight", ")", "+", "(", "1", "/", "(", "1", "+", "connection_score", ")", "*", "connectivity_weight", ")", "+", "random_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 11.169733613996108}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "diversity_weight", "=", "0.4", "# Weight for node diversity", "penalty_weight", "=", "0.2", "# Weight for cost penalties on long distances", "# Calculate average distance to all unvisited nodes for diversity scoring", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Diversity score based on how far this node is from the average unvisited distance", "diversity_score", "=", "abs", "(", "direct_distance", "-", "average_distance", ")", "# Cost penalty for visiting nodes that are too far away", "cost_penalty", "=", "(", "direct_distance", "**", "2", ")", "/", "(", "len", "(", "distance_matrix", ")", "or", "1", ")", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "diversity_weight", "*", "diversity_score", "-", "penalty_weight", "*", "cost_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "cluster_weight", "=", "0.4", "# Weight for cluster score", "distance_penalty_weight", "=", "0.6", "# Weight for distance penalty", "# Cluster unvisited nodes based on spatial proximity (simple grouping)", "clusters", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "cluster_id", "=", "tuple", "(", "sorted", "(", "(", "current_node", ",", "node", ")", ")", ")", "# Grouping based on proximity to current_node", "if", "cluster_id", "not", "in", "clusters", ":", "clusters", "[", "cluster_id", "]", "=", "[", "]", "clusters", "[", "cluster_id", "]", ".", "append", "(", "node", ")", "for", "cluster", "in", "clusters", ".", "values", "(", ")", ":", "for", "node", "in", "cluster", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "travel_cost_penalty", "=", "distance_penalty_weight", "*", "(", "direct_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "cluster_score", "=", "cluster_weight", "*", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "cluster", "if", "n", "!=", "node", ")", "score", "=", "cluster_score", "-", "travel_cost_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to the destination", "remaining_cost_weight", "=", "0.6", "# Weight for the cost to remaining unvisited nodes", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "distance_to_current", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "(", "distance_to_destination", "*", "proximity_weight", ")", "-", "(", "total_distance_to_unvisited", "*", "remaining_cost_weight", "/", "len", "(", "unvisited_nodes", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 18.704820740310076}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_cost_weight", "=", "0.5", "bonding_strength_weight", "=", "0.3", "clustering_score_weight", "=", "0.2", "# Calculate average distance to unvisited nodes for bonding strength", "avg_bonding_strength", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Bonding strength: inversely related to average distance to unvisited nodes", "bonding_strength", "=", "bonding_strength_weight", "*", "(", "1", "/", "(", "avg_bonding_strength", "+", "1", ")", ")", "# Clustering score: higher score for nodes that have slightly lower average distances to each other", "cluster_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "clustering_score", "=", "clustering_score_weight", "*", "(", "1", "/", "(", "cluster_distance", "+", "1", ")", ")", "score", "=", "-", "direct_cost_weight", "*", "direct_distance", "+", "bonding_strength", "+", "clustering_score", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.172879370726191}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "clustering_weight", "=", "0.3", "# Weight for clustering of unvisited nodes", "recency_weight", "=", "0.2", "# Weight for recency of visited connections", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "clustering_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Clustering score based on distances to unvisited nodes", "recency_penalty", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "previous", "]", "+", "1", ")", "for", "previous", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "previous", "not", "in", "unvisited_nodes", ")", "# Penalty based on previously visited nodes", "# Adjust score based on total distance to unvisited nodes and use clustering score inversely", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "clustering_weight", "*", "(", "1", "/", "(", "clustering_score", "+", "1", ")", ")", "-", "recency_weight", "*", "recency_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.237872234320987}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "float", "(", "'inf'", ")", ")", "adjusted_distance", "=", "direct_distance", "/", "(", "connectivity_score", "+", "1", ")", "# Avoid division by zero", "score", "=", "adjusted_distance", "-", "(", "connectivity_score", "*", "0.1", ")", "# Slightly favor nodes with more connections", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "potential_nodes", "=", "[", "]", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "remaining_count", "=", "len", "(", "unvisited_nodes", ")", "weight_factor", "=", "1", "/", "(", "remaining_count", "+", "1", ")", "# Weighting based on remaining unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "threshold_penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "average_distance", ")", "*", "0.6", "# Adjusted penalty", "score", "=", "direct_distance", "+", "threshold_penalty", "-", "(", "weight_factor", "*", "direct_distance", ")", "# Incorporate weight factor", "potential_nodes", ".", "append", "(", "(", "node", ",", "score", ")", ")", "next_node", "=", "min", "(", "potential_nodes", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate distances and weighted scores for unvisited nodes", "nearest_distance", "=", "float", "(", "'inf'", ")", "farthest_distance", "=", "float", "(", "'-inf'", ")", "total_distance", "=", "0", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance", "+=", "distance", "nearest_distance", "=", "min", "(", "nearest_distance", ",", "distance", ")", "farthest_distance", "=", "max", "(", "farthest_distance", ",", "distance", ")", "average_distance", "=", "total_distance", "/", "unvisited_count", "if", "unvisited_count", ">", "0", "else", "float", "(", "'inf'", ")", "# Find the best node using a modified scoring system", "min_score", "=", "float", "(", "'inf'", ")", "next_nodes", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "(", "0.5", "*", "distance", ")", "+", "(", "0.3", "*", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "nearest_distance", ")", ")", "+", "(", "0.2", "*", "(", "(", "farthest_distance", "-", "distance", ")", "/", "(", "farthest_distance", "-", "nearest_distance", "+", "1", ")", ")", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_nodes", "=", "[", "node", "]", "elif", "score", "==", "min_score", ":", "next_nodes", ".", "append", "(", "node", ")", "# Introduce random selection among the closest nodes for diversity", "if", "next_nodes", ":", "return", "random", ".", "choice", "(", "next_nodes", ")", "return", "None"], "code_perf": 7.790910989074676}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "urgency_weight", "=", "0.4", "# Weight for urgency based on unvisited nodes", "distance_weight", "=", "0.4", "# Weight for modified distance consideration", "penalty_weight", "=", "0.2", "# Weight for penalty on distant nodes", "if", "unvisited_nodes", ":", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate urgency score: inversely proportional to remaining nodes", "urgency_score", "=", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Prevent division by zero", "# Calculate revised distance factor", "modified_distance_score", "=", "(", "average_distance", "-", "direct_distance", ")", "/", "(", "average_distance", "or", "1", ")", "# Penalty for going to a node further away than average", "penalty_score", "=", "-", "penalty_weight", "*", "(", "direct_distance", ">", "average_distance", ")", "*", "direct_distance", "# Combined score calculation", "score", "=", "urgency_weight", "*", "urgency_score", "+", "distance_weight", "*", "modified_distance_score", "+", "penalty_score", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate the base direct distance for each unvisited node", "direct_distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Calculate attractiveness based on the number of direct connections to other unvisited nodes", "attractiveness", "=", "{", "node", ":", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "neighbor", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", ">", "0", ")", "for", "node", "in", "unvisited_nodes", "}", "# Combine direct distance and attractiveness in a scoring function", "node_scores", "=", "{", "node", ":", "direct_distances", "[", "node", "]", "/", "(", "1", "+", "attractiveness", "[", "node", "]", ")", "# More connections decrease the score", "for", "node", "in", "unvisited_nodes", "}", "# Select the node with the minimum score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.3", "# Weight for connectivity", "traffic_weight", "=", "0.2", "# Weight for traffic simulation score", "heuristic_weight", "=", "0.1", "# Weight for heuristic future path estimation", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Traffic simulation score based on the number of connections from the current node to other unvisited nodes", "traffic_score", "=", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "next", "]", "<", "direct_distance", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Heuristic future path length based on two-hop connections", "heuristic_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "if", "unvisited_nodes", "else", "0", "# Combined score incorporating all factors", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "avg_distance_to_unvisited", "+", "traffic_weight", "*", "traffic_score", "+", "heuristic_weight", "*", "heuristic_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.905374466644961}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Calculate minimum and maximum distances to unvisited nodes", "if", "unvisited_nodes", ":", "distances", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "average_distance", "=", "sum", "(", "distances", ")", "/", "len", "(", "unvisited_nodes", ")", "min_distance", "=", "min", "(", "distances", ")", "max_distance", "=", "max", "(", "distances", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Cost is a combination of direct distance and a modified average distance", "total_cost", "=", "direct_distance", "+", "(", "average_distance", "*", "0.5", ")", "+", "(", "(", "min_distance", "+", "max_distance", ")", "/", "4", ")", "if", "total_cost", "<", "min_cost", ":", "min_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "threshold", "=", "10", "# Maximum distance to consider for next node", "scores", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance_to_node", "<", "threshold", ":", "score", "=", "(", "1", "/", "distance_to_node", ")", "**", "2", "# Square of the inverse distance as a score", "scores", ".", "append", "(", "(", "node", ",", "score", ")", ")", "if", "not", "scores", ":", "# If no nodes within threshold, include all unvisited nodes and score them", "scores", "=", "[", "(", "node", ",", "(", "1", "/", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "**", "2", ")", "for", "node", "in", "unvisited_nodes", "]", "total_score", "=", "sum", "(", "score", "for", "_", ",", "score", "in", "scores", ")", "# Normalize scores and calculate probabilities", "probabilities", "=", "[", "(", "node", ",", "score", "/", "total_score", ")", "for", "node", ",", "score", "in", "scores", "]", "# Introduce randomness in selection based on probabilities", "r", "=", "random", ".", "random", "(", ")", "cumulative_probability", "=", "0.0", "for", "node", ",", "prob", "in", "probabilities", ":", "cumulative_probability", "+=", "prob", "if", "cumulative_probability", ">=", "r", ":", "return", "node", "return", "None", "# Fallback, shouldn't reach here"], "code_perf": 13.194628136092122}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate scores for each unvisited node", "scores", "=", "{", "}", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "# Calculate penalty based on distance to destination", "penalty", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "total_distance_to_destination", "if", "total_distance_to_destination", ">", "0", "else", "0", "# Combine scores with weights", "scores", "[", "node", "]", "=", "(", "distance_score", "+", "penalty", ")", "/", "(", "connectivity_score", "+", "1", ")", "# Prevent division by zero", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 8.951882324620582}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_cost", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "max_distance_remaining", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "score", "=", "direct_distance", "+", "0.4", "*", "(", "max_distance_remaining", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "0.2", "*", "penalty", "if", "score", ">", "max_cost", ":", "max_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 35.54566076257908}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Heuristic: average distance from this node to all unvisited nodes", "heuristic_estimate", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "unvisited_count", "or", "1", ")", "# Score calculation with weights", "score", "=", "direct_distance", "+", "heuristic_estimate", "*", "(", "0.5", "+", "0.5", "*", "(", "unvisited_count", "**", "0.5", ")", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.53926126363547}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.5", "centrality_weight", "=", "0.3", "heuristic_prediction_weight", "=", "0.2", "def", "calculate_node_centrality", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "def", "calculate_average_distance_to_destination", "(", "node", ")", ":", "return", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "centrality_score", "=", "calculate_node_centrality", "(", "node", ")", "heuristic_prediction_score", "=", "calculate_average_distance_to_destination", "(", "node", ")", "score", "=", "(", "-", "direct_distance_weight", "*", "direct_distance", "+", "centrality_weight", "*", "(", "1", "/", "(", "centrality_score", "+", "1", ")", ")", "+", "# Inverse for higher centrality", "heuristic_prediction_weight", "*", "(", "1", "/", "(", "heuristic_prediction_score", "+", "1", ")", ")", ")", "# Inverse for shorter average distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.33534872786982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "# Weights for different scoring criteria", "distance_weight", "=", "0.4", "connectivity_weight", "=", "0.3", "stability_weight", "=", "0.2", "diversity_weight", "=", "0.1", "global", "node_visit_counts", "node_visit_counts", "=", "{", "}", "def", "calculate_connectivity_ratio", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "def", "calculate_stability_score", "(", "node", ")", ":", "return", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", "*", "0.6", "# Penalize frequently visited nodes", "def", "calculate_diversity_score", "(", "node", ")", ":", "return", "1", "/", "(", "1", "+", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", ")", "# Encourage visiting less frequent nodes", "for", "node", "in", "unvisited_nodes", ":", "node_visit_counts", "[", "node", "]", "=", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", "+", "1", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_ratio", "=", "calculate_connectivity_ratio", "(", "node", ")", "stability_score", "=", "calculate_stability_score", "(", "node", ")", "diversity_score", "=", "calculate_diversity_score", "(", "node", ")", "# Adjust score calculation with new elements", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_ratio", "-", "stability_weight", "*", "stability_score", "+", "diversity_weight", "*", "diversity_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.37815587401459}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Define a constrained distance threshold", "distance_threshold", "=", "5.0", "candidates", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "# Calculate the direct distance to the current node", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate the distance to the final destination", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Only consider nodes within the distance threshold", "if", "direct_distance", "<=", "distance_threshold", ":", "candidates", ".", "append", "(", "(", "node", ",", "direct_distance", ",", "distance_to_destination", ")", ")", "# If there are candidates within the threshold, randomly select from them", "if", "candidates", ":", "# Scoring candidates based on distance to the destination", "candidates", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "2", "]", ")", "# Sort by distance to destination", "next_node", "=", "random", ".", "choice", "(", "candidates", ")", "[", "0", "]", "else", ":", "# If no candidates, select the nearest unvisited node by direct distance", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "return", "next_node"], "code_perf": 25.77710744184693}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_penalty", "=", "0.4", "# Penalty weight for longer distances", "average_closeness_weight", "=", "0.3", "# Weight for average closeness to unvisited nodes", "destination_attractiveness_weight", "=", "0.3", "# Weight for attractiveness to destination", "average_position", "=", "[", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "]", "average_distance_to_unvisited", "=", "sum", "(", "average_position", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "average_distance_to_unvisited", "*", "average_closeness_weight", ")", "-", "(", "distance_penalty", "*", "direct_distance", ")", "+", "(", "destination_attractiveness_weight", "*", "distance_to_destination", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.501505956627025}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "connectivity_scores", "=", "{", "node", ":", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "float", "(", "'inf'", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_penalty", "=", "1", "/", "(", "connectivity_scores", "[", "node", "]", "+", "1", ")", "# Penalize nodes with fewer connections", "average_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "distance_adjustment", "=", "direct_distance", "/", "(", "average_distance", "+", "1e-5", ")", "# Avoid division by zero", "score", "=", "direct_distance", "+", "connectivity_penalty", "+", "distance_adjustment", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.70716943457822}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_remaining", "=", "total_distance_to_remaining", "/", "len", "(", "unvisited_nodes", ")", "direct_influence_weight", "=", "0.5", "strategic_importance_weight", "=", "0.3", "penalty_weight", "=", "0.2", "# Weight for penalty of distances from visited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "strategic_importance", "=", "strategic_importance_weight", "*", "(", "average_distance_to_remaining", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "penalty_factor", "=", "penalty_weight", "*", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "n", "not", "in", "unvisited_nodes", ")", "score", "=", "(", "direct_influence_weight", "*", "direct_distance", ")", "+", "strategic_importance", "+", "penalty_factor", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 10.011984885711332}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Initially select the nearest unvisited node", "nearest_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "# Consider the nearest node as a candidate", "candidate_nodes", "=", "[", "nearest_node", "]", "# Evaluate potential next nodes by checking the distance of previously skipped nodes", "for", "node", "in", "unvisited_nodes", ":", "if", "node", "!=", "nearest_node", ":", "candidate_nodes", ".", "append", "(", "node", ")", "# Choose the best candidate by considering the direct distance and potential future paths", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "candidate_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_future_nodes", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "score", "=", "distance_to_node", "+", "distance_to_future_nodes", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "# Risk factor based on variability of distances to neighbors", "neighbor_distances", "=", "[", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "]", "risk_penalty", "=", "(", "(", "max", "(", "neighbor_distances", ",", "default", "=", "0", ")", "-", "min", "(", "neighbor_distances", ",", "default", "=", "0", ")", ")", "/", "(", "sum", "(", "neighbor_distances", ")", "/", "len", "(", "neighbor_distances", ")", ")", ")", "if", "neighbor_distances", "else", "0", "# Combined score emphasizing proximity and penalizing risk", "score", "=", "distance_to_next", "+", "distance_to_destination", "+", "(", "1.5", "*", "risk_penalty", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.31108144791347}
{"code_tokens": ["# {This algorithm prioritizes not only proximity to the current node but also evaluates the remaining travel cost to the destination ", "# and integrates a desirability factor based on previously visited nodes to select the next node.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate the remaining distance to destination if this node is chosen", "remaining_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Desirability factor based on unvisited nodes proximity to the destination", "desirability_factor", "=", "0.5", "/", "(", "remaining_distance_to_destination", "+", "1", ")", "# New score calculation incorporating distance to next, average unvisited distance, and desirability factor", "total_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "avg_distance_to_remaining", "=", "total_distance_to_remaining", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "# Combined score", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "*", "avg_distance_to_remaining", "+", "desirability_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.529899262033295}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "# Calculate the total distance to all unvisited nodes", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Calculate remaining distances to destination", "remaining_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Heuristic factor: ratio of distance to unvisited nodes relative to total unvisited distance", "proximity_weight", "=", "distance", "/", "(", "total_distance_to_unvisited", "+", "1e-5", ")", "# Clustering effect: averages the distances to the unvisited nodes for potential efficiency", "clustering_effect", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "adj", "]", "for", "adj", "in", "unvisited_nodes", "if", "adj", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "# Combine metrics to compute a weighted score using both proximity and clustering effect", "weighted_score", "=", "distance", "+", "proximity_weight", "*", "remaining_distance_to_destination", "-", "clustering_effect", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.4248131215536635}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_distance_to_unvisited", "=", "float", "(", "'inf'", ")", "total_distance_penalty", "=", "0", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "heuristic_weight", "=", "0.5", "# Weight for heuristic distance to destination", "penalty_weight", "=", "0.3", "# Weight for penalty based on unvisited nodes distance", "closest_distance_weight", "=", "0.2", "# Weight for minimum distance to closest unvisited node", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "direct_distance", "<", "min_distance_to_unvisited", ":", "min_distance_to_unvisited", "=", "direct_distance", "total_distance_penalty", "+=", "direct_distance", "score", "=", "(", "distance_to_destination", "*", "heuristic_weight", ")", "-", "(", "total_distance_penalty", "*", "penalty_weight", ")", "+", "(", "min_distance_to_unvisited", "*", "closest_distance_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 25.15531789695016}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "# Calculate connectivity and potential score", "connectivity_scores", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "potential_scores", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "connectivity_count", "=", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<=", "5", ")", "connectivity_scores", "[", "node", "]", "=", "connectivity_count", "/", "(", "1", "+", "num_unvisited", ")", "potential_scores", "[", "node", "]", "=", "1", "/", "(", "1", "+", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Decay factor based on the number of unvisited nodes", "decay_factor", "=", "1", "/", "(", "1", "+", "num_unvisited", ")", "score", "=", "(", "0.5", "*", "direct_distance", ")", "+", "(", "0.3", "*", "(", "1", "-", "distance_to_destination", "/", "(", "1", "+", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", ")", ")", ")", "-", "(", "0.2", "*", "connectivity_scores", "[", "node", "]", ")", "+", "(", "0.4", "*", "potential_scores", "[", "node", "]", ")", "*", "decay_factor", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.539804588429568}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "connectivity_weight", "=", "1.5", "# Weight to boost nodes with more connections (neighbors)", "if", "unvisited_nodes", ":", "connectivity_scores", "=", "{", "node", ":", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "connectivity_scores", "[", "node", "]", "# Cost is a combination of direct distance and connectivity factor ", "total_cost", "=", "direct_distance", "-", "(", "connectivity_weight", "*", "connectivity_score", ")", "if", "total_cost", "<", "min_cost", ":", "min_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "\"\"\"{This algorithm introduces a two-factor scoring system that combines both the distance to unvisited nodes and an estimated cost to reach the destination node, normalized by the number of remaining unvisited nodes, thus ensuring a balanced selection process that mitigates the risk of selecting nodes that are too distant or costly to reach in future steps.}\"\"\"", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "scores", "=", "{", "}", "base_threshold", "=", "15", "# Increased base threshold for more options", "alpha", "=", "0.7", "# Weight for distance consideration", "beta", "=", "0.3", "# Weight for heuristic cost", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate heuristic cost with normalization", "heuristic_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "normalized_heuristic", "=", "heuristic_cost", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Dynamic score based on weighted factors", "score", "=", "(", "alpha", "*", "distance_to_node", ")", "+", "(", "beta", "*", "normalized_heuristic", ")", "# Only consider nodes within base threshold for initial filtering", "if", "distance_to_node", "<", "base_threshold", ":", "scores", "[", "node", "]", "=", "score", "if", "not", "scores", ":", "# Fallback to closest unvisited node", "scores", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "visit_counts", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "importance_weights", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "visit_penalty", "=", "visit_counts", "[", "node", "]", "*", "0.5", "decay_factor", "=", "1", "/", "(", "1", "+", "distance_to_destination", ")", "# Heuristic decay based on distance to destination", "importance_weights", "[", "node", "]", "=", "decay_factor", "*", "(", "1", "-", "(", "visit_counts", "[", "node", "]", "/", "len", "(", "unvisited_nodes", ")", ")", ")", "score", "=", "(", "direct_distance", "+", "0.6", "*", "(", "avg_distance_to_destination", "-", "distance_to_destination", ")", "+", "visit_penalty", "-", "0.3", "*", "importance_weights", "[", "node", "]", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "if", "next_node", ":", "visit_counts", "[", "next_node", "]", "+=", "1", "return", "next_node"], "code_perf": 6.4288763284048205}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate distances to all unvisited nodes", "distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Find minimum distance", "min_distance", "=", "min", "(", "distances", ".", "values", "(", ")", ")", "# Filter candidates - those with minimum distance", "candidates", "=", "[", "node", "for", "node", ",", "dist", "in", "distances", ".", "items", "(", ")", "if", "dist", "==", "min_distance", "]", "# Introduce randomness to select among the best candidates", "if", "candidates", ":", "next_node", "=", "random", ".", "choice", "(", "candidates", ")", "# Randomly select one of the nearest", "else", ":", "next_node", "=", "None", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "cluster_weight", "=", "0.3", "# Weight for proximity to clusters of unvisited nodes", "recency_weight", "=", "0.2", "# Weight for the recency of visited connections", "decay_factor", "=", "0.95", "# Decay factor for the recency penalty", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "+", "1", ")", "for", "next_node", "in", "unvisited_nodes", ")", "# Heuristic score for proximity to clusters", "recency_penalty", "=", "sum", "(", "decay_factor", "**", "(", "i", "+", "1", ")", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "previous", "]", "+", "1", ")", "for", "i", ",", "previous", "in", "enumerate", "(", "range", "(", "len", "(", "distance_matrix", ")", ")", ")", "if", "previous", "not", "in", "unvisited_nodes", ")", "# Adaptive recency penalty", "score", "=", "(", "1", "/", "(", "distance_weight", "*", "direct_distance", "+", "1", ")", ")", "+", "cluster_weight", "*", "cluster_score", "-", "recency_weight", "*", "recency_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 14.621278065959233}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Emphasis on direct distance", "cluster_weight", "=", "0.3", "# Weight for cluster proximity", "path_variability_weight", "=", "0.3", "# Weight for variability of potential routes", "# Calculate clusters for unvisited nodes", "def", "calculate_cluster_score", "(", "node", ")", ":", "cluster_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "cluster_score", "+=", "distance_matrix", "[", "node", "]", "[", "other", "]", "return", "cluster_score", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Calculate variability score based on potential paths", "def", "calculate_path_variability", "(", "node", ")", ":", "variability_score", "=", "0", "for", "next_node", "in", "unvisited_nodes", ":", "variability_score", "+=", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "return", "variability_score", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_score", "=", "calculate_cluster_score", "(", "node", ")", "path_variability", "=", "calculate_path_variability", "(", "node", ")", "# Combined scoring mechanism", "score", "=", "-", "direct_distance_weight", "*", "direct_distance", "+", "cluster_weight", "*", "cluster_score", "-", "path_variability_weight", "*", "path_variability", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.841572561387712}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Start with positive infinity for minimization", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_destination", "=", "total_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "# Calculate the direct distance to the current node", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate the distance to the average of unvisited nodes", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "for", "unvisited", "in", "unvisited_nodes", ")", "/", "unvisited_count", "# Score based on direct distance, average distance to destination, and a penalty for the number of unvisited nodes", "score", "=", "direct_distance", "+", "average_distance_to_destination", "-", "(", "0.1", "*", "average_distance_to_unvisited", ")", "/", "unvisited_count", "# Selecting the node that minimizes this score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.933976205823901}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "distance_to_next", "+", "(", "total_distance_remaining", "*", "0.5", ")", "# Weighted cost for remaining distances", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 16.945703872050153}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "attractiveness_scores", "=", "{", "node", ":", "1", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "for", "node", "in", "unvisited_nodes", "}", "threshold", "=", "10", "# Maximum distance to consider for next node", "candidates", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance_to_node", "<", "threshold", ":", "candidates", ".", "append", "(", "(", "node", ",", "distance_to_node", ",", "attractiveness_scores", "[", "node", "]", ")", ")", "if", "not", "candidates", ":", "# If no candidates within threshold, select the closest node augmented by attractiveness", "candidates", "=", "[", "(", "node", ",", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ",", "attractiveness_scores", "[", "node", "]", ")", "for", "node", "in", "unvisited_nodes", "]", "# Calculate priority based on distance and attractiveness", "next_node", "=", "min", "(", "candidates", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", "/", "x", "[", "2", "]", ")", "[", "0", "]", "# min distance divided by attractiveness", "return", "next_node"], "code_perf": 7.146115673616158}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity to destination", "novelty_weight", "=", "0.3", "# Weight for the uniqueness of unvisited node", "distance_penalty_weight", "=", "0.2", "# Penalty for longer paths", "# Calculate cumulative distance already traveled", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "prev_node", "]", "for", "prev_node", "in", "unvisited_nodes", "if", "prev_node", "!=", "current_node", ")", "# Calculate the uniqueness score of unvisited nodes", "novelty_scores", "=", "{", "node", ":", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "current_node", "]", "+", "1", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "novelty_score", "=", "novelty_scores", "[", "node", "]", "score", "=", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "novelty_score", "*", "novelty_weight", "-", "(", "cumulative_distance", "*", "distance_penalty_weight", ")", "-", "direct_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.445428498797897}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "clustering_weight", "=", "0.3", "# Weight for clustering effectiveness", "randomization_weight", "=", "0.3", "# Weight for introducing randomness", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty_factor", "=", "(", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "1", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "*", "penalty_factor", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "-", "(", "direct_distance", "*", "direct_weight", ")", "+", "(", "cluster_average_distance", "*", "clustering_weight", ")", "-", "(", "penalty_factor", "*", "direct_distance", ")", "*", "0.2", "+", "(", "random", ".", "random", "(", ")", "*", "randomization_weight", ")", "+", "(", "0.5", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.110805249487967}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "potential_nodes", "=", "[", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "total_distance_from_destination", "=", "sum", "(", "distance_matrix", "[", "destination_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "total_distance_from_destination", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Penalize nodes farther from destination", "estimated_cost", "=", "direct_distance", "+", "(", "total_distance_to_unvisited", "/", "len", "(", "unvisited_nodes", ")", ")", "-", "penalty", "potential_nodes", ".", "append", "(", "(", "node", ",", "estimated_cost", ")", ")", "next_node", "=", "min", "(", "potential_nodes", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "heuristic_weight", "=", "0.4", "# Weight for heuristic estimation of remaining distances", "historical_weight", "=", "0.2", "# Weight for rewarding visits to previously prominent nodes", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "# Store historical scores for nodes to allow for reinforcement", "node_scores", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Heuristic: average distance to unvisited nodes", "heuristic_estimate", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "unvisited_count", "or", "1", ")", "# Historical score contribution (regularizes the choice of nodes based on past scores)", "historical_score", "=", "node_scores", "[", "node", "]", "# Score calculation", "score", "=", "-", "direct_distance_weight", "*", "direct_distance", "+", "heuristic_weight", "*", "heuristic_estimate", "+", "historical_weight", "*", "historical_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "# Update historical score for the selected node", "node_scores", "[", "node", "]", "+=", "score", "return", "next_node"], "code_perf": 6.41724333977419}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "avg_closeness", "=", "sum", "(", "distance_matrix", "[", "node1", "]", "[", "node2", "]", "for", "node1", "in", "unvisited_nodes", "for", "node2", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "**", "2", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "direct_distance", "-", "0.25", "*", "(", "avg_closeness", "-", "direct_distance", ")", "+", "0.75", "*", "distance_to_destination", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.602975755903087}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "nearest_weight", "=", "0.6", "# Weight for the nearest neighbor approach", "penalty_weight", "=", "0.4", "# Weight for distance penalty to the destination", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "(", "total_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "*", "penalty_weight", "score", "=", "(", "1", "/", "(", "direct_distance", "+", "1e-6", ")", "*", "nearest_weight", ")", "-", "penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.810452701890485}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "degree_of_connection", "=", "{", "node", ":", "len", "(", "[", "neighbour", "for", "neighbour", "in", "unvisited_nodes", "if", "neighbour", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "neighbour", "]", ">", "0", "]", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connection_bonus", "=", "degree_of_connection", "[", "node", "]", "*", "0.1", "# Reward based on connectivity degree", "weighted_score", "=", "distance", "+", "(", "total_remaining_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", ")", "-", "connection_bonus", "+", "distance", "*", "0.01", "# Combine metrics with an additional weight on current distance", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the average distance to all unvisited nodes", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Calculate scores for each unvisited node", "scores", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "average_distance", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the unvisited node with the minimum score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Start with positive infinity for minimization", "# Calculate the dynamic penalty based on remaining distances", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_destination", "=", "total_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "# Calculate the direct distance to the current node", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate a dynamic penalty based on average remaining distance", "remaining_penalty", "=", "average_distance_to_destination", "*", "(", "1", "+", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "/", "len", "(", "unvisited_nodes", ")", ")", "# Score based on direct distance and the dynamic penalty", "score", "=", "direct_distance", "+", "remaining_penalty", "# Selecting the node that minimizes this score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm uses a balance of direct distance, predicted future distances based on unvisited node metrics, ", "# and a \"penalty\" term that accounts for visiting nodes that are farther away from the current path.}", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "# Calculate the total distance to all unvisited nodes", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Predictive factor: average distance to destination from unvisited nodes", "predicted_future_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "adj", "]", "for", "adj", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "# Penalty for traveling farther away from current path (to balance distant nodes)", "distance_penalty", "=", "abs", "(", "distance_to_node", "-", "(", "total_distance_to_unvisited", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", ")", ")", "# Combine metrics to compute weighted score using direct distance, predicted future distance, and distance penalty", "weighted_score", "=", "distance_to_node", "+", "0.8", "*", "predicted_future_distance", "+", "0.5", "*", "distance_penalty", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.320363359720218}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "inverse_distance", "=", "1", "/", "(", "distance_to_node", "+", "1e-9", ")", "# Avoid division by zero", "connection_strength", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "0", "for", "n", "in", "unvisited_nodes", ")", "score", "=", "inverse_distance", "*", "(", "1", "+", "0.5", "*", "connection_strength", ")", "# Weighting connection strength", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "novelty_scores", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "visit_counts", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "# Calculate the average distance to all other unvisited nodes", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "novelty_scores", "[", "node", "]", "=", "1", "/", "(", "1", "+", "visit_counts", "[", "node", "]", ")", "*", "(", "1", "/", "(", "1", "+", "avg_distance", ")", ")", "# Reward less frequent visits and further nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "visit_penalty", "=", "visit_counts", "[", "node", "]", "*", "0.5", "# Add a penalty based on visit frequency", "score", "=", "direct_distance", "+", "distance_to_destination", "-", "novelty_scores", "[", "node", "]", "-", "visit_penalty", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "# Increment visit count for the selected next node", "if", "next_node", ":", "visit_counts", "[", "next_node", "]", "+=", "1", "return", "next_node"], "code_perf": 8.566318326349702}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance", "heuristic_weight", "=", "0.3", "# Weight for heuristic estimation", "exploration_factor_weight", "=", "0.2", "# Weight for exploration", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "exploration_factor", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "# Random value for exploration", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_estimate", "=", "total_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "heuristic_weight", "*", "heuristic_estimate", ")", "+", "(", "exploration_factor_weight", "*", "exploration_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.602975755903087}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance to the next node", "destination_weight", "=", "0.4", "# Weight for proximity to destination", "visited_weight", "=", "0.2", "# Weight for average distance to visited nodes", "visited_nodes", "=", "set", "(", "range", "(", "len", "(", "distance_matrix", ")", ")", ")", "-", "set", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "average_distance_to_visited", "=", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "visited_node", "]", "for", "visited_node", "in", "visited_nodes", ")", "/", "(", "len", "(", "visited_nodes", ")", "or", "1", ")", ")", "score", "=", "(", "direct_weight", "*", "direct_distance", ")", "+", "(", "destination_weight", "*", "distance_to_destination", ")", "-", "(", "visited_weight", "/", "(", "average_distance_to_visited", "+", "1e-5", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 34.15444931212993}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm employs a combination of the nearest neighbor heuristic and a penalty for visiting nodes ", "# with high average distances to remaining unvisited nodes, encouraging exploration of more proximal clusters.}", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "proximity_penalty", "=", "avg_distance_to_unvisited", "*", "0.5", "# Adjust the weight of the penalty", "score", "=", "distance_to_next", "+", "proximity_penalty", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.526271790227707}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_adjusted_cost", "=", "float", "(", "'inf'", ")", "# Calculate the weighted average distance to unvisited nodes", "weights", "=", "len", "(", "unvisited_nodes", ")", "**", "0.5", "weighted_average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "weights", "if", "weights", ">", "0", "else", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "immediate_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "return_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "adjusted_cost", "=", "immediate_cost", "+", "return_cost", "-", "weighted_average_distance", "*", "0.3", "if", "adjusted_cost", "<", "min_adjusted_cost", ":", "min_adjusted_cost", "=", "adjusted_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_remaining", "=", "total_distance_to_remaining", "/", "len", "(", "unvisited_nodes", ")", "unvisited_count_penalty", "=", "len", "(", "unvisited_nodes", ")", "/", "5.0", "# Penalty term based on remaining unvisited nodes", "clustering_score", "=", "sum", "(", "1", "for", "node", "in", "unvisited_nodes", "if", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "<", "2", "*", "average_distance_to_remaining", ")", "direct_influence_weight", "=", "0.4", "# Adjusted weight for direct distance influence", "strategic_importance_weight", "=", "0.4", "# Adjusted weight for future path importance", "curiosity_weight", "=", "0.2", "# Weight to encourage exploration of clustered nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "strategic_importance", "=", "strategic_importance_weight", "*", "(", "average_distance_to_remaining", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "curiosity_score", "=", "curiosity_weight", "*", "clustering_score", "score", "=", "(", "direct_influence_weight", "*", "direct_distance", ")", "+", "strategic_importance", "+", "unvisited_count_penalty", "+", "curiosity_score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.078385722187273}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_unvisited", "=", "total_distance_to_unvisited", "/", "len", "(", "unvisited_nodes", ")", "randomness_factor", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "# Introduce randomness", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "adjusted_score", "=", "direct_distance", "+", "average_distance_to_unvisited", "*", "(", "1", "+", "randomness_factor", "/", "2", ")", "if", "adjusted_score", "<", "min_score", ":", "min_score", "=", "adjusted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_cost", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "max_distance_to_unvisited", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_cost_penalty", "=", "max_distance_to_unvisited", "*", "0.2", "# Weighting factor for future cost", "randomness_adjustment", "=", "random", ".", "uniform", "(", "0.1", ",", "0.5", ")", "# Random factor to promote diverse paths", "score", "=", "direct_distance", "+", "future_cost_penalty", "+", "randomness_adjustment", "if", "score", ">", "max_cost", ":", "max_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 35.371936773901965}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for distance to the next node", "destination_weight", "=", "0.4", "# Weight for distance to the destination", "urgency_weight", "=", "0.2", "# Weight for urgency based on number of unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "urgency_score", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "1", "+", "direct_distance", ")", "# Calculate urgency score", "score", "=", "(", "distance_to_destination", "*", "destination_weight", ")", "+", "(", "urgency_score", "*", "urgency_weight", ")", "-", "(", "direct_distance", "*", "distance_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.66657943071569}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_other_nodes", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "score", "=", "direct_distance", "-", "(", "1", "/", "(", "1", "+", "total_distance_to_other_nodes", ")", ")", "# Inverse distance factor", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.233994687673571}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm employs a hybrid scoring mechanism that blends heuristic measures based on distance, a random exploration factor, and a time decay factor to progressively prioritize nodes based on both distance and diminishing returns from previous visits.}", "import", "random", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "visit_counts", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "# Track how many times nodes have been considered", "# Calculate total and average distance towards the destination from unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "visit_penalty", "=", "visit_counts", "[", "node", "]", "*", "(", "0.5", "/", "(", "visit_counts", "[", "node", "]", "+", "1", ")", ")", "# Stronger diminishing penalty", "# Random exploration factor to inject some randomness into the choice", "random_exploration", "=", "random", ".", "uniform", "(", "0.1", ",", "0.5", ")", "# Random factor between 0.1 and 0.5", "# Time decay factor increases preference for unvisited nodes over time", "time_decay_factor", "=", "max", "(", "0", ",", "1", "-", "(", "0.1", "*", "visit_counts", "[", "node", "]", ")", ")", "# Reduces the influence of visit count over time", "score", "=", "(", "direct_distance", "*", "time_decay_factor", ")", "+", "(", "avg_distance_to_destination", "-", "distance_to_destination", ")", "+", "visit_penalty", "+", "random_exploration", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "# Increment visit count for the selected next node", "if", "next_node", ":", "visit_counts", "[", "next_node", "]", "+=", "1", "return", "next_node"], "code_perf": 8.906071102676801}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "heuristic_weight", "=", "0.4", "# Weight for heuristic potential", "proximity_bonus_weight", "=", "0.2", "# Weight for proximity to starting and destination nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "total_distance_from_start", "=", "distance_matrix", "[", "current_node", "]", "[", "0", "]", "# Assuming starting node is indexed as 0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "proximity_bonus", "=", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "distance_matrix", "[", "node", "]", "[", "0", "]", ")", "/", "2", "score", "=", "(", "direct_distance_weight", "*", "-", "direct_distance", ")", "+", "(", "heuristic_weight", "*", "heuristic_distance", ")", "+", "(", "proximity_bonus_weight", "*", "proximity_bonus", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.696674800295234}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Parameters", "decay_factor", "=", "0.5", "# Adjust this parameter based on preference of distance vs destination", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate a heuristic score using distance decay", "score", "=", "distance_to_node", "+", "(", "distance_to_destination", "*", "decay_factor", ")", "# Incorporate an angle-based factor (simplified as current-to-node compared to current-to-destination)", "angle_factor", "=", "abs", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "-", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", ")", "score", "+=", "angle_factor", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 13.112808844314813}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "novelty_factor", "=", "1.2", "# Factor to penalize nodes that are too similar to previously visited nodes", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "# Novelty score based on the distance from the current node to this node", "novelty_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "prev_node", "]", "for", "prev_node", "in", "unvisited_nodes", "if", "prev_node", "!=", "node", ")", "*", "novelty_factor", "weighted_heuristic", "=", "(", "0.5", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "0.3", "*", "(", "connectivity_score", "-", "1", ")", "+", "0.2", "*", "novelty_score", ")", "score", "=", "direct_distance", "+", "weighted_heuristic", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 11.955514334665658}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "proximity_bonus_factor", "=", "0.3", "# Factor to reward nodes closer to the destination", "random_factor", "=", "random", ".", "uniform", "(", "0.8", ",", "1.2", ")", "# Random variability factor", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_bonus", "=", "proximity_bonus_factor", "*", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "average_distance", ")", "score", "=", "direct_distance", "+", "proximity_bonus", "*", "random_factor", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.274137613768513}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "historical_frequency", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "total_visits", "=", "sum", "(", "historical_frequency", ".", "values", "(", ")", ")", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "visit_penalty", "=", "(", "historical_frequency", "[", "node", "]", "/", "(", "total_visits", "+", "1", ")", ")", "if", "total_visits", ">", "0", "else", "0", "weighted_heuristic", "=", "(", "0.5", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "0.5", "*", "(", "connectivity_score", "-", "1", ")", "-", "visit_penalty", ")", "score", "=", "direct_distance", "+", "weighted_heuristic", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "historical_frequency", "[", "node", "]", "+=", "1", "# Update historical frequency", "return", "best_node"], "code_perf": 6.450370583313572}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to current node", "path_efficiency_weight", "=", "0.4", "# Weight for the efficiency of the path to the destination", "distance_penalty_weight", "=", "0.2", "# Weight based on distance from destination", "for", "node", "in", "unvisited_nodes", ":", "proximity_score", "=", "-", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Closer nodes get higher scores", "path_efficiency_score", "=", "-", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "distance_penalty", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Further nodes incur a penalty", "score", "=", "(", "proximity_weight", "*", "proximity_score", ")", "+", "(", "path_efficiency_weight", "*", "path_efficiency_score", ")", "-", "(", "distance_penalty_weight", "*", "distance_penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.803026259893244}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "node_scores", "=", "{", "}", "# Calculate a score for each unvisited node based on distance and distance variance", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distances_to_remain", "=", "[", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "]", "# Calculate variance of distances to remaining unvisited nodes", "if", "distances_to_remain", ":", "mean_distance", "=", "sum", "(", "distances_to_remain", ")", "/", "len", "(", "distances_to_remain", ")", "variance", "=", "sum", "(", "(", "x", "-", "mean_distance", ")", "**", "2", "for", "x", "in", "distances_to_remain", ")", "/", "len", "(", "distances_to_remain", ")", "else", ":", "variance", "=", "0", "# Create a composite score based on direct distance and distance variance", "node_scores", "[", "node", "]", "=", "direct_distance", "+", "(", "variance", "*", "0.1", ")", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.93325335380279}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate a combined score using a weighted approach", "if", "distance_to_destination", ">", "0", ":", "# Avoid division by zero", "score", "=", "(", "0.6", "*", "distance_to_node", ")", "+", "(", "0.4", "*", "distance_to_destination", ")", "# Select the node with the minimum score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.6490879527083395}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "# Calculate the direct distance to the current node", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Estimate the distance from this node to the final destination", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Triangular inequality cost: combining direct and onward distance", "cost_score", "=", "direct_distance", "+", "distance_to_destination", "# Selecting the node with the lowest cost score", "if", "cost_score", "<", "best_score", ":", "best_score", "=", "cost_score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Increased weight for direct distance", "connectivity_weight", "=", "0.2", "# Reduced weight for connectivity", "diversity_weight", "=", "0.3", "# Weight for encouraging less frequently visited nodes", "exploration_weight", "=", "0.1", "# Weight for unvisited nodes exploration", "total_path_length", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "total_connections", "=", "sum", "(", "1", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "!=", "float", "(", "'inf'", ")", ")", "global", "node_visit_counts", "node_visit_counts", "=", "{", "}", "def", "calculate_connectivity_score", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "def", "calculate_visit_frequency_score", "(", "node", ")", ":", "return", "1", "/", "(", "1", "+", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", ")", "for", "node", "in", "unvisited_nodes", ":", "node_visit_counts", "[", "node", "]", "=", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", "+", "1", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "calculate_connectivity_score", "(", "node", ")", "diversity_score", "=", "calculate_visit_frequency_score", "(", "node", ")", "exploration_score", "=", "total_connections", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Encourage exploration of less connected nodes", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "diversity_weight", "*", "diversity_score", "+", "exploration_weight", "*", "exploration_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.424671222018382}
{"code_tokens": ["import", "numpy", "as", "np", "def", "calculate_remaining_cost", "(", "node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "0", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "minimal_future_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_cost", "=", "calculate_remaining_cost", "(", "node", ",", "unvisited_nodes", "-", "{", "node", "}", ",", "distance_matrix", ")", "total_cost", "=", "immediate_distance", "+", "future_cost", "if", "total_cost", "<", "minimal_future_cost", ":", "minimal_future_cost", "=", "total_cost", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 21.51502557645197}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_cost_weight", "=", "0.5", "future_potential_weight", "=", "0.4", "novelty_weight", "=", "0.1", "# Weight for encouraging exploration of less connected nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Future potential based on average distance and proximity to destination", "future_potential", "=", "future_potential_weight", "*", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", ")", "# Novelty score: lower average distance to unvisited nodes means higher score", "novelty_score", "=", "novelty_weight", "*", "(", "1", "/", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "+", "1", ")", ")", "score", "=", "-", "direct_cost_weight", "*", "direct_distance", "+", "future_potential", "+", "novelty_score", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.399036614327061}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", "clustering_penalty", "=", "len", "(", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "# Penalizing based on the number of unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "+", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "/", "2", "+", "clustering_penalty", "*", "direct_distance", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.649911608354428}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "attractiveness_factor", "=", "1.5", "# Factor to increase attractiveness of closer nodes", "if", "unvisited_nodes", ":", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "attractiveness_weight", "=", "attractiveness_factor", "-", "(", "direct_distance", "/", "average_distance", ")", "# Weight based on proximity", "# Adding a random factor to encourage exploration", "random_exploration", "=", "random", ".", "uniform", "(", "0.8", ",", "1.2", ")", "# Cost is a combination of direct distance and attractiveness weighted by randomness", "total_cost", "=", "direct_distance", "*", "(", "attractiveness_weight", "*", "random_exploration", ")", "if", "total_cost", "<", "min_cost", ":", "min_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 36.035640153984204}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "total_weight", "=", "0", "node_weights", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate a weight based on inverse distance and adjustments", "weight", "=", "(", "1", "/", "(", "direct_distance", "+", "1", ")", ")", "+", "(", "1", "/", "(", "distance_to_destination", "+", "1", ")", ")", "node_weights", "[", "node", "]", "=", "weight", "total_weight", "+=", "weight", "# Select the next node based on weighted probability", "random_pick", "=", "random", ".", "uniform", "(", "0", ",", "total_weight", ")", "cumulative_weight", "=", "0", "for", "node", ",", "weight", "in", "node_weights", ".", "items", "(", ")", ":", "cumulative_weight", "+=", "weight", "if", "cumulative_weight", ">=", "random_pick", ":", "return", "node", "return", "None"], "code_perf": 24.951631902786886}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate average distance to unvisited nodes", "avg_distance", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "# Calculate the distance to the destination node", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Score nodes based on direct distance, average distance, and distance to the destination", "node_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "+", "(", "avg_distance", "*", "0.5", ")", "+", "(", "distance_to_destination", "*", "0.3", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", ")", "node_scores", "[", "node", "]", "=", "score", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "iteration_count", "=", "len", "(", "unvisited_nodes", ")", "# Total iterations will be equal to the number of unvisited nodes", "weight_direct_distance", "=", "0.5", "+", "(", "0.5", "/", "iteration_count", ")", "# Decreasing weight for direct distance", "weight_reciprocal_distance", "=", "0.3", "weight_clustering_effect", "=", "0.2", "close_nodes", "=", "[", "node", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<", "10", "]", "avg_clustering_effect", "=", "len", "(", "close_nodes", ")", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "if", "close_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "reciprocal_distance", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "+", "1e-6", ")", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "score", "=", "(", "weight_direct_distance", "*", "direct_distance", "+", "weight_reciprocal_distance", "*", "reciprocal_distance", "+", "weight_clustering_effect", "*", "avg_clustering_effect", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 12.481502735009164}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "attractiveness_factor", "=", "0.6", "# Factor for node attractiveness", "efficiency_factor", "=", "0.4", "# Factor for historical efficiency", "total_distance_from_current", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "attractiveness_score", "=", "1", "/", "(", "1", "+", "direct_distance", ")", "# Attractive nodes have shorter distances", "historical_efficiency", "=", "(", "1", "/", "(", "1", "+", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", ")", ")", "if", "unvisited_nodes", "else", "0", "# new scoring system", "score", "=", "(", "attractiveness_score", "*", "attractiveness_factor", ")", "+", "(", "historical_efficiency", "*", "efficiency_factor", ")", "-", "(", "direct_distance", "/", "(", "1", "+", "total_distance_from_current", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.0347029425252}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "score", "=", "(", "1", "/", "distance_to_next", ")", "+", "(", "1", "/", "(", "total_remaining_distance", "+", "1e-6", ")", ")", "# Encourage both proximity and considering remaining distances", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.013536654583164}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.3", "# Weight for connectivity to unvisited nodes", "long_term_efficiency_weight", "=", "0.2", "# Weight for future path efficiency", "risk_factor_weight", "=", "0.1", "# Weight for risk-reward consideration", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Long-term efficiency score based on distance to remaining nodes", "long_term_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Risk-reward score considering unvisited node density", "risk_score", "=", "(", "len", "(", "unvisited_nodes", ")", "-", "connectivity_score", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combined score with dynamic weights", "score", "=", "(", "-", "direct_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "long_term_efficiency_weight", "*", "long_term_score", "+", "risk_factor_weight", "*", "risk_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.501670528053933}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "reachability_weight", "=", "0.4", "# Weight for potential reachability", "cost_weight", "=", "0.2", "# Weight for exploration cost", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Reachability score based on the sum of distances from current to unvisited nodes", "reachability_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average connectivity", "# Cost of exploring this path based on the distance to the destination", "exploration_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "reachability_weight", "*", "reachability_score", "-", "cost_weight", "*", "exploration_cost", "/", "(", "total_distance", "or", "1", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.580041809690958}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "influence_radius", "=", "15", "# Radius within which to consider nodes for influence", "dynamic_cost_weight", "=", "0.5", "# Weight for dynamic cost adjustment", "influence_nodes", "=", "[", "node", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<=", "influence_radius", "]", "# Adjust the cost based on number of unvisited nodes", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "adjusted_cost_factor", "=", "1", "/", "(", "1", "+", "unvisited_count", ")", "if", "unvisited_count", "else", "1", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "influence_effect", "=", "sum", "(", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "influence_node", "]", ")", "for", "influence_node", "in", "influence_nodes", "if", "node", "!=", "influence_node", "and", "distance_matrix", "[", "node", "]", "[", "influence_node", "]", ">", "0", ")", "score", "=", "direct_distance", "+", "dynamic_cost_weight", "*", "influence_effect", "*", "adjusted_cost_factor", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.378005344230612}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "heuristic_weight", "=", "0.6", "# Weight for heuristic distance to unvisited nodes", "accessibility_weight", "=", "0.4", "# Weight for average distance to remaining nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_unvisited_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "unvisited_count", "# New scoring mechanism combining heuristic distance and accessibility", "score", "=", "-", "(", "direct_distance", ")", "*", "heuristic_weight", "+", "(", "average_unvisited_distance", "*", "accessibility_weight", ")", "-", "(", "total_distance_to_destination", "/", "(", "unvisited_count", "+", "1", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.35828255629592}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_increase", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "increase", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "if", "increase", "<", "min_increase", ":", "min_increase", "=", "increase", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "candidates", "=", "list", "(", "unvisited_nodes", ")", "scored_candidates", "=", "[", "]", "# Calculate total distance to remaining unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "candidates", ")", "for", "node", "in", "candidates", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_factor", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "*", "0.5", "# Bonus for direct connections", "accessibility_penalty", "=", "(", "len", "(", "unvisited_nodes", ")", "-", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", ")", "*", "0.2", "# Penalty for isolated nodes", "score", "=", "(", "direct_distance", "+", "accessibility_penalty", ")", "-", "connectivity_factor", "+", "(", "total_distance", "/", "len", "(", "candidates", ")", ")", "scored_candidates", ".", "append", "(", "(", "node", ",", "score", ")", ")", "scored_candidates", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "return", "scored_candidates", "[", "0", "]", "[", "0", "]"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "visit_counts", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "# Track how many times nodes have been considered", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "visit_penalty", "=", "visit_counts", "[", "node", "]", "*", "0.5", "# Simple penalty for previous visits", "novelty_score", "=", "1", "/", "(", "1", "+", "visit_counts", "[", "node", "]", ")", "# Encourage visiting less frequent nodes", "randomness_factor", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "# Introduce randomness in the selection", "# Combined score considering distance, penalties, and randomness", "score", "=", "(", "direct_distance", "+", "visit_penalty", "-", "novelty_score", ")", "*", "randomness_factor", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "# Increment visit count for the next node", "if", "next_node", ":", "visit_counts", "[", "next_node", "]", "+=", "1", "return", "next_node"], "code_perf": 11.975739885005165}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "decay_factor", "=", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Decay factor based on remaining unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "total_distance", "=", "distance_to_next", "+", "distance_to_destination", "# Calculate score using a combination of the distance and decay factor", "score", "=", "(", "1", "/", "total_distance", ")", "*", "decay_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_distance_from_node", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "connectivity_score", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "# New scoring equation incorporating centrality and adjusted weights", "centrality_weight", "=", "0.5", "dynamic_weight", "=", "connectivity_score", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "heuristic_score", "=", "centrality_weight", "*", "(", "avg_distance_from_node", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "(", "1", "-", "centrality_weight", ")", "*", "dynamic_weight", "score", "=", "direct_distance", "+", "heuristic_score", "-", "(", "connectivity_score", "/", "(", "1", "+", "connectivity_score", ")", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.925023624569427}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_penalty", "=", "len", "(", "unvisited_nodes", ")", "# Penalty for unvisited nodes", "proximity_bias", "=", "0.6", "# Weight for favoring closer nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_effect", "=", "proximity_bias", "*", "(", "1", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", ")", "score", "=", "direct_distance", "*", "(", "1", "+", "total_penalty", ")", "*", "(", "1", "-", "proximity_effect", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.126780114670813}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for immediate proximity to destination", "savings_weight", "=", "0.4", "# Weight for potential future savings", "connectivity_weight", "=", "0.2", "# Weight for connectivity of the unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_savings", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", "if", "next_node", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "connectivity_score", "=", "sum", "(", "1", "for", "next_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "<", "1e9", ")", "# Count direct connections to other nodes", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", ")", "+", "(", "future_savings", "*", "savings_weight", ")", "+", "(", "connectivity_score", "*", "connectivity_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.568234696278633}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "connectivity_weight", "=", "0.5", "# Weight for node connectivity", "# Track the number of neighbors within a specific range", "proximity_range", "=", "3", "# Nodes within this distance will be considered connected", "# Function to calculate connectivity score based on proximity to unvisited nodes", "def", "calculate_proximity_score", "(", "node", ")", ":", "score", "=", "0", "neighbor_count", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<=", "proximity_range", ":", "neighbor_count", "+=", "1", "score", "+=", "distance_matrix", "[", "node", "]", "[", "other", "]", "# Closer nodes contribute more", "return", "score", "/", "neighbor_count", "if", "neighbor_count", ">", "0", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "calculate_proximity_score", "(", "node", ")", "# Combined scoring mechanism with dynamic factors", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "proximity_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.424216980256856}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "diversity_factor", "=", "0.5", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "heuristic", "=", "(", "0.6", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "0.4", "*", "(", "connectivity_score", "-", "1", ")", ")", "randomness", "=", "random", ".", "uniform", "(", "0", ",", "diversity_factor", ")", "*", "(", "1", "/", "(", "connectivity_score", "+", "1", ")", ")", "score", "=", "direct_distance", "+", "heuristic", "+", "randomness", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.517445296175644}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_distance_weight", "=", "0.6", "cluster_distance_weight", "=", "0.4", "# Weight for evaluating closeness of unvisited nodes to each other", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate average distance to all unvisited nodes (local clustering)", "cluster_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Penalty for choosing nodes that are further from the average unvisited node distance", "penalty", "=", "max", "(", "0", ",", "cluster_distance", "-", "immediate_distance", ")", "score", "=", "-", "immediate_distance_weight", "*", "immediate_distance", "-", "cluster_distance_weight", "*", "penalty", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.275130803118198}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "connection_weights", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "connection_count", "=", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<=", "5", ")", "connection_weights", "[", "node", "]", "=", "connection_count", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connection_weight", "=", "connection_weights", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "direct_distance", "+", "0.5", "*", "(", "avg_distance_to_destination", "-", "distance_to_destination", ")", "-", "0.3", "*", "connection_weight", "# Introducing a random factor to encourage exploration", "score", "+=", "random", ".", "uniform", "(", "-", "0.1", ",", "0.1", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.432304108260968}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the average distance to all unvisited nodes", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Define a weight for the penalty on distant nodes", "distance_penalty_factor", "=", "1.5", "# Calculate scores for each unvisited node", "scores", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_penalty_factor", "*", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "-", "average_distance", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the unvisited node with the minimum score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "unvisited_nodes", "=", "list", "(", "unvisited_nodes", ")", "next_node", "=", "unvisited_nodes", "[", "0", "]", "minimum_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "cumulative_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_from_start", "=", "sum", "(", "distance_matrix", "[", "i", "]", "[", "node", "]", "for", "i", "in", "unvisited_nodes", ")", "+", "cumulative_distance", "if", "total_distance_from_start", "<", "minimum_score", ":", "minimum_score", "=", "total_distance_from_start", "next_node", "=", "node", "return", "next_node"], "code_perf": 21.51502557645197}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "visit_counts", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "# Track how many times nodes have been considered", "cluster_weights", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "# Count the direct connections within a certain radius", "connection_count", "=", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<=", "5", ")", "cluster_weights", "[", "node", "]", "=", "connection_count", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_weight", "=", "cluster_weights", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "visit_penalty", "=", "visit_counts", "[", "node", "]", "*", "0.5", "# Add a penalty based on visit frequency", "score", "=", "direct_distance", "+", "0.6", "*", "(", "avg_distance_to_destination", "-", "distance_to_destination", ")", "-", "0.2", "*", "cluster_weight", "+", "visit_penalty", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "# Increment visit count for the next node", "if", "next_node", ":", "visit_counts", "[", "next_node", "]", "+=", "1", "return", "next_node"], "code_perf": 6.4257563991146025}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "penalized_scores", "=", "{", "}", "visited_count", "=", "len", "(", "distance_matrix", ")", "-", "len", "(", "unvisited_nodes", ")", "-", "1", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "0.5", "**", "visited_count", "# Penalty decreases as more nodes are visited", "score", "=", "distance_to_node", "+", "(", "penalty", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "# Combine distance and penalty", "penalized_scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "penalized_scores", ",", "key", "=", "penalized_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.952821252587064}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "future_gain_weight", "=", "0.4", "# Weight for potential future savings", "history_weight", "=", "0.2", "# Weight for novelty based on traversal history", "# Function to calculate novelty score based on traversal history", "def", "calculate_novelty_score", "(", "node", ",", "visited_history", ")", ":", "return", "1", "if", "node", "not", "in", "visited_history", "else", "0", "visited_history", "=", "set", "(", ")", "# Add nodes to this set as they are visited", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_gain", "=", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "novelty_score", "=", "calculate_novelty_score", "(", "node", ",", "visited_history", ")", "# Combined scoring mechanism", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "-", "future_gain_weight", "*", "future_gain", "+", "history_weight", "*", "novelty_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.5", "# Weight for direct distance", "cost_to_destination_weight", "=", "0.4", "# Weight for overall cost to destination", "risk_factor_weight", "=", "0.1", "# Weight for risk adjustment", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_cost", "=", "total_distance_to_destination", "+", "direct_distance", "risk_adjustment", "=", "(", "1", "/", "(", "direct_distance", "+", "0.1", ")", ")", "# Risk is inversely proportional to direct distance", "score", "=", "(", "direct_distance", "*", "direct_distance_weight", ")", "-", "(", "total_cost", "*", "cost_to_destination_weight", ")", "+", "(", "risk_adjustment", "*", "risk_factor_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.997398531929457}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.6", "# Enhanced weight for proximity to destination", "clustering_penalty", "=", "0.4", "# Penalty for selecting clustered nodes", "recent_travel_weight", "=", "0.3", "# Weight for the distance to the last node", "# Use only the most recent travel distance for simplicity", "recent_travel_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "score", "=", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "cluster_penalty", "*", "clustering_penalty", "-", "recent_travel_distance", "*", "recent_travel_weight", "-", "direct_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 14.769932506972623}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "# Calculate the centroid of the remaining unvisited nodes", "if", "unvisited_nodes", ":", "centroid_x", "=", "sum", "(", "node", "%", "len", "(", "distance_matrix", ")", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "centroid_y", "=", "sum", "(", "node", "//", "len", "(", "distance_matrix", ")", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_centroid", "=", "(", "(", "node", "%", "len", "(", "distance_matrix", ")", "-", "centroid_x", ")", "**", "2", "+", "(", "node", "//", "len", "(", "distance_matrix", ")", "-", "centroid_y", ")", "**", "2", ")", "**", "0.5", "weight_factor", "=", "1", "/", "(", "1", "+", "distance_to_next", ")", "# Prevent division by zero and balance influence", "score", "=", "(", "weight_factor", "*", "(", "1", "/", "(", "1", "+", "distance_to_centroid", ")", ")", ")", "-", "distance_to_next", "# Balance heuristic and immediate distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.47433870610569}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "density_weight", "=", "0.5", "distance_weight", "=", "0.4", "proximity_weight", "=", "0.1", "total_density_effect", "=", "0", "neighborhood_size", "=", "0", "for", "node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", ":", "if", "node", "in", "unvisited_nodes", "and", "node", "!=", "current_node", ":", "dist", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "dist", "<=", "10", ":", "# Nearby distance threshold", "total_density_effect", "+=", "1", "neighborhood_size", "+=", "1", "density_effect", "=", "total_density_effect", "/", "(", "neighborhood_size", "or", "1", ")", "# Normalize", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "1", "/", "(", "direct_distance", "+", "1e-6", ")", "# Avoid division by zero", "score", "=", "(", "density_weight", "*", "density_effect", ")", "-", "(", "distance_weight", "*", "direct_distance", ")", "+", "(", "proximity_weight", "*", "proximity_score", ")", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "proximity_weight", "=", "0.4", "# Weight for proximity to destination", "risk_weight", "=", "0.2", "# Weight for risk of traveling through less connected nodes", "# Function to calculate the proximity score based on distance to the destination", "def", "calculate_proximity_score", "(", "node", ")", ":", "return", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Function to calculate risk based on the connectivity of the node", "def", "calculate_risk_score", "(", "node", ")", ":", "connected_count", "=", "sum", "(", "1", "for", "other", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "float", "(", "'inf'", ")", "and", "other", "!=", "node", ")", "return", "1", "/", "(", "connected_count", "+", "1", ")", "# Lower score for more connected nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "calculate_proximity_score", "(", "node", ")", "risk_score", "=", "calculate_risk_score", "(", "node", ")", "# Combined scoring mechanism", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "-", "proximity_weight", "*", "proximity_score", "+", "risk_weight", "*", "risk_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.6", "# Weight for distance to the next node", "savings_weight", "=", "0.4", "# Weight for average savings from unvisited nodes", "penalty_weight", "=", "0.2", "# Penalty for nodes far from current and destination", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_others", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_next", "]", "for", "next_next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "penalty", "=", "penalty_weight", "*", "(", "distance_matrix", "[", "node", "]", "[", "current_node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "score", "=", "(", "direct_distance", "*", "distance_weight", ")", "-", "(", "average_distance_to_others", "*", "savings_weight", ")", "+", "penalty", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.765405196134463}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm leverages a scoring system combining the direct distance to the destination, a penalty for visiting far nodes, ", "# and the average distance to other unvisited nodes, emphasizing the balance between short-term path efficiency and long-term total distance.}", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "# Calculate the average distance to all unvisited nodes", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "# Direct distance to destination", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Penalty term based on distance to this node", "penalty", "=", "distance", "*", "1.5", "# Score calculation incorporates distance to destination, penalty, and average distance to unvisited nodes", "weighted_score", "=", "distance_to_destination", "+", "penalty", "+", "(", "avg_distance_to_unvisited", "-", "distance", ")", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "weighted_average_distance", "=", "total_distance_to_unvisited", "/", "len", "(", "unvisited_nodes", ")", "proximity_weight", "=", "0.7", "# Weight applied to encourage nodes nearer to the destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "proximity_weight", "*", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "score", "=", "direct_distance", "+", "weighted_average_distance", "-", "proximity_score", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.438127015117454}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the sum of distances to all unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "# Calculate node connectivity factor", "connectivity_scores", "=", "{", "node", ":", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "neighbor", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<", "2", "*", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the next node based on distance and connectivity", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "/", "num_unvisited", ")", "-", "(", "connectivity_scores", "[", "node", "]", "*", "0.1", ")", ")", "return", "next_node"], "code_perf": 26.684216904381742}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "proximity_weight", "=", "0.7", "# Weight for the proximity factor", "destination_penalty", "=", "0.3", "# Weight for the penalty based on distance to destination", "randomness_factor", "=", "0.1", "# Factor to introduce randomness in selection", "if", "unvisited_nodes", ":", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Cost is weighted sum of proximity and penalty for distance to destination", "cost", "=", "(", "proximity_weight", "*", "direct_distance", ")", "+", "(", "destination_penalty", "*", "distance_to_destination", ")", "# Introduce randomness to encourage exploration", "if", "random", ".", "random", "(", ")", "<", "randomness_factor", ":", "cost", "*=", "random", ".", "uniform", "(", "1.1", ",", "1.5", ")", "if", "cost", "<", "min_cost", ":", "min_cost", "=", "cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.548683506582178}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.6", "# Weight for proximity to current node", "clustering_weight", "=", "0.3", "# Weight for clustering potential", "urgency_weight", "=", "0.1", "# Weight for urgency penalty", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "proximity_score", "=", "-", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "clustering_density", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "+", "1e-6", ")", "for", "other_node", "in", "unvisited_nodes", ")", "# Inverse distance for density", "urgency_score", "=", "max", "(", "0", ",", "total_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "score", "=", "(", "proximity_weight", "*", "proximity_score", ")", "+", "(", "clustering_weight", "*", "clustering_density", ")", "-", "(", "urgency_weight", "*", "urgency_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 27.575296474258295}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Calculate heuristic based on remaining distance to destination", "heuristic_map", "=", "{", "node", ":", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Calculate total cost as a combination of direct cost and heuristic", "for", "node", "in", "unvisited_nodes", ":", "direct_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_cost", "=", "direct_cost", "+", "heuristic_map", "[", "node", "]", "if", "total_cost", "<", "min_cost", ":", "min_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "distance_weight", "=", "0.4", "# Weight for direct distance", "novelty_weight", "=", "0.4", "# Weight for novelty of unvisited nodes", "urgency_weight", "=", "0.2", "# Weight for urgency based on distance to destination", "min_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "novelty_score", "=", "(", "min_distance", "-", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "# Novelty based on distance", "urgency_score", "=", "1", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "# Urgency based on distance to destination", "# Calculate combined score", "score", "=", "(", "distance_weight", "*", "direct_distance", ")", "-", "(", "novelty_weight", "*", "novelty_score", ")", "+", "(", "urgency_weight", "*", "urgency_score", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.769377970238766}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "total_distance_traveled", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "if", "node", "!=", "current_node", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate the score based on distance to node and distance to destination", "score", "=", "(", "distance_to_node", "+", "distance_to_destination", ")", "/", "(", "1", "+", "total_distance_traveled", ")", "# Select the node with the minimum score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "min_distance_to_unvisited", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "float", "(", "'inf'", ")", "score", "=", "distance_to_next", "+", "(", "min_distance_to_unvisited", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", ")", "# Penalty for distance + incentive for proximity", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Cumulative distance heuristic: sum of distances from node to remaining unvisited nodes", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "# Penalty for returning toward already visited node (if applicable)", "return_penalty", "=", "0.2", "*", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "current_node", "!=", "destination_node", "else", "0", "total_cost", "=", "direct_distance", "+", "(", "cumulative_distance", "/", "num_unvisited", ")", "+", "return_penalty", "if", "total_cost", "<", "min_cost", ":", "min_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.15121224795223}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "base_distance_weight", "=", "0.5", "# Base weight for direct distance", "remaining_nodes_weight", "=", "0.3", "# Weight for the number of unvisited nodes", "return_penalty_weight", "=", "0.2", "# Penalty for indirect longer paths", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_nodes_count", "=", "len", "(", "unvisited_nodes", ")", "-", "1", "# Exclude the current node", "total_direct_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "max_edge_distance", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "# Score calculation", "score", "=", "-", "base_distance_weight", "*", "direct_distance", "+", "remaining_nodes_weight", "*", "(", "total_direct_distance", "/", "(", "remaining_nodes_count", "or", "1", ")", ")", "-", "return_penalty_weight", "*", "max_edge_distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.752359854854024}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "distance_traveled", "=", "sum", "(", "distance_matrix", "[", "0", "]", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", ")", "# Assumed starting point is node 0", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance from current node", "remaining_distance_weight", "=", "0.4", "# Weight for remaining distance to destination", "synergy_weight", "=", "0.2", "# Weight for synergy with previously visited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate synergy based on previously visited connections", "synergy_score", "=", "sum", "(", "distance_matrix", "[", "visited", "]", "[", "node", "]", "for", "visited", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "visited", "not", "in", "unvisited_nodes", "and", "visited", "!=", "current_node", ")", "# Combined score incorporating multiple factors", "score", "=", "(", "direct_distance_weight", "*", "direct_distance", ")", "+", "(", "remaining_distance_weight", "*", "remaining_distance", ")", "-", "(", "synergy_weight", "*", "synergy_score", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 12.96725870038773}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_from_current", "=", "total_distance_to_unvisited", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Weighting the score to prioritize both immediate distance and long-term efficiency", "score", "=", "(", "direct_distance", "*", "0.6", ")", "+", "(", "average_distance_from_current", "*", "0.4", ")", "+", "distance_to_destination", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.53145345186072}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "urgency_factor", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "distance_to_node", "+", "1e-10", ")", "*", "(", "len", "(", "unvisited_nodes", ")", "**", "0.5", ")", "comfort_penalty", "=", "distance_to_node", "*", "(", "len", "(", "unvisited_nodes", ")", "/", "len", "(", "distance_matrix", ")", ")", "score", "=", "urgency_factor", "-", "comfort_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "connectivity_alpha", "=", "0.5", "exploration_factor", "=", "0.3", "# Calculate the average distance to destination among unvisited nodes", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "total_neighbors", "=", "sum", "(", "1", "for", "node", "in", "unvisited_nodes", "if", "node", "!=", "current_node", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Connectivity score based on the number of unvisited neighbors", "connectivity_score", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "# Probability-based heuristic combining direct distance and connectivity score", "weighted_distance", "=", "(", "0.7", "*", "direct_distance", ")", "+", "(", "0.3", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", ")", "score", "=", "weighted_distance", "-", "(", "connectivity_alpha", "*", "connectivity_score", ")", "# Introduce random exploration element", "if", "random", ".", "random", "(", ")", "<", "exploration_factor", ":", "score", "+=", "random", ".", "uniform", "(", "-", "1", ",", "1", ")", "# Small random adjustment for diversity", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 18.817888042398522}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "novelty_factor", "=", "0.5", "# Factor to encourage visiting less connected nodes", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.3", "# Weight for overall connectivity", "potential_edge_weight", "=", "0.2", "# Weight for potential new connections", "novelty_weight", "=", "0.1", "# Weight for exploring less-visited nodes", "total_connectivity_score", "=", "sum", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "**", "2", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate connectivity score relative to the entire unvisited set", "connectivity_score", "=", "total_connectivity_score", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Estimate potential edge score based on distance to other unvisited nodes", "potential_edge_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Incorporating novelty factor to promote under-explored nodes", "novelty_score", "=", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", ")", "*", "novelty_factor", "# Combined score", "score", "=", "-", "direct_distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "potential_edge_weight", "*", "potential_edge_score", "+", "novelty_weight", "*", "novelty_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.549798661124883}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Weighting factor based on the number of remaining unvisited nodes", "heuristic_weight", "=", "1", "+", "(", "len", "(", "unvisited_nodes", ")", "/", "len", "(", "distance_matrix", ")", ")", "score", "=", "distance_to_node", "*", "heuristic_weight", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "future_weight", "=", "0.5", "# Weight for potential future distances", "randomness_weight", "=", "0.1", "# Weight for random exploration", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "future_average_distance", "=", "future_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "randomness_score", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "*", "randomness_weight", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "future_weight", "*", "future_average_distance", ")", "+", "randomness_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.477881492725732}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "distribution_weight", "=", "0.6", "# Weight for unvisited nodes distribution", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_penalty", "=", "(", "len", "(", "unvisited_nodes", ")", "**", "2", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "1", "unvisited_distribution_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "*", "future_penalty", "unvisited_distribution_average", "=", "unvisited_distribution_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_distance", "*", "distance_weight", ")", "+", "(", "total_distance_to_destination", "*", "0.5", ")", "+", "(", "unvisited_distribution_average", "*", "distribution_weight", ")", "+", "(", "future_penalty", "*", "direct_distance", "*", "0.1", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 13.622625935169776}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate maximum distance to destination for scalability", "max_distance_to_destination", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "node_degree", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "# Novel scoring mechanism combining direct distance and node attractiveness", "distance_penalty", "=", "direct_distance", "/", "(", "1", "+", "(", "0.1", "*", "node_degree", ")", ")", "attractiveness_score", "=", "(", "1", "-", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "max_distance_to_destination", ")", ")", "*", "node_degree", "score", "=", "distance_penalty", "-", "attractiveness_score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 16.05704329571499}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "pheromone_matrix", "=", "np", ".", "ones", "(", "distance_matrix", ".", "shape", ")", "# Initialize pheromone levels", "pheromone_decay", "=", "0.1", "# Pheromone decay factor", "alpha", "=", "1.0", "# Influence of pheromone", "beta", "=", "1.0", "# Influence of distance", "tabu_list", "=", "[", "]", "tabu_tenure", "=", "2", "# Restrict the last two visited nodes", "# Collect unvisited nodes while maintaining tabu restrictions", "candidate_nodes", "=", "[", "node", "for", "node", "in", "unvisited_nodes", "if", "node", "not", "in", "tabu_list", "]", "if", "candidate_nodes", ":", "minimal_round_trip_distance", "=", "float", "(", "'inf'", ")", "best_next_node", "=", "None", "for", "node", "in", "candidate_nodes", ":", "# Compute round trip distance", "round_trip_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "pheromone", "=", "pheromone_matrix", "[", "current_node", "]", "[", "node", "]", "**", "alpha", "distance", "=", "(", "1", "/", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "**", "beta", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "!=", "0", "else", "0", "score", "=", "round_trip_distance", "*", "(", "1", "-", "pheromone", ")", "+", "random", ".", "uniform", "(", "0", ",", "0.1", ")", "if", "score", "<", "minimal_round_trip_distance", ":", "minimal_round_trip_distance", "=", "score", "best_next_node", "=", "node", "# Update the tabu list", "tabu_list", ".", "append", "(", "current_node", ")", "if", "len", "(", "tabu_list", ")", ">", "tabu_tenure", ":", "tabu_list", ".", "pop", "(", "0", ")", "# Remove the oldest entry in the tabu list", "# Update pheromone levels", "pheromone_matrix", "[", "current_node", "]", "[", "best_next_node", "]", "+=", "0.1", "return", "best_next_node", "return", "None"], "code_perf": 26.146578067007766}
{"code_tokens": ["# {The new algorithm incorporates a dynamic scoring formula that adjusts penalties for longer distances while rewarding nodes closer to both the current and destination nodes, introducing a decay factor to emphasize exploration of nearby nodes.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Define decay factor for exploration proximity", "decay_factor", "=", "0.5", "# Calculate scores based on distance, proximity to destination, and exploration incentive", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", ")", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "exploration_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "# Combined score with a decay factor for distance", "scores", "[", "node", "]", "=", "distance_score", "*", "(", "1", "-", "decay_factor", ")", "+", "exploration_score", "+", "(", "1", "-", "proximity_score", ")", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Initialize parameters for simulated annealing", "temperature", "=", "1.0", "cooling_rate", "=", "0.99", "max_iterations", "=", "100", "best_next_node", "=", "None", "best_distance", "=", "float", "(", "'inf'", ")", "for", "_", "in", "range", "(", "max_iterations", ")", ":", "# Randomly select a candidate next node from the unvisited nodes", "candidate_node", "=", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "distance_to_candidate", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate_node", "]", "# Evaluate current best", "if", "distance_to_candidate", "<", "best_distance", ":", "best_distance", "=", "distance_to_candidate", "best_next_node", "=", "candidate_node", "else", ":", "# Calculate acceptance probability for a worse solution", "acceptance_probability", "=", "np", ".", "exp", "(", "(", "best_distance", "-", "distance_to_candidate", ")", "/", "temperature", ")", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", "<", "acceptance_probability", ":", "best_distance", "=", "distance_to_candidate", "best_next_node", "=", "candidate_node", "# Cool down the temperature", "temperature", "*=", "cooling_rate", "return", "best_next_node"], "code_perf": 19.853481492599094}
{"code_tokens": ["import", "random", "import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "def", "calculate_total_distance", "(", "tour", ")", ":", "total_distance", "=", "0", "for", "i", "in", "range", "(", "len", "(", "tour", ")", "-", "1", ")", ":", "total_distance", "+=", "distance_matrix", "[", "tour", "[", "i", "]", "]", "[", "tour", "[", "i", "+", "1", "]", "]", "total_distance", "+=", "distance_matrix", "[", "tour", "[", "-", "1", "]", "]", "[", "tour", "[", "0", "]", "]", "# Return to start", "return", "total_distance", "current_tour", "=", "[", "current_node", "]", "+", "list", "(", "unvisited_nodes", ")", "current_distance", "=", "calculate_total_distance", "(", "current_tour", ")", "best_tour", "=", "current_tour", "[", ":", "]", "best_distance", "=", "current_distance", "temperature", "=", "1.0", "cooling_rate", "=", "0.95", "min_temperature", "=", "0.001", "iterations", "=", "100", "for", "_", "in", "range", "(", "iterations", ")", ":", "if", "temperature", "<", "min_temperature", ":", "break", "# Select a neighborhood and swap nodes", "new_tour", "=", "best_tour", "[", ":", "]", "if", "len", "(", "unvisited_nodes", ")", ">", "2", ":", "idx1", ",", "idx2", "=", "random", ".", "sample", "(", "range", "(", "1", ",", "len", "(", "new_tour", ")", ")", ",", "2", ")", "new_tour", "[", "idx1", "]", ",", "new_tour", "[", "idx2", "]", "=", "new_tour", "[", "idx2", "]", ",", "new_tour", "[", "idx1", "]", "new_distance", "=", "calculate_total_distance", "(", "new_tour", ")", "# Acceptance criteria", "if", "new_distance", "<", "current_distance", ":", "current_tour", "=", "new_tour", "current_distance", "=", "new_distance", "if", "new_distance", "<", "best_distance", ":", "best_tour", "=", "new_tour", "best_distance", "=", "new_distance", "else", ":", "acceptance_prob", "=", "math", ".", "exp", "(", "(", "current_distance", "-", "new_distance", ")", "/", "temperature", ")", "if", "random", ".", "random", "(", ")", "<", "acceptance_prob", ":", "current_tour", "=", "new_tour", "current_distance", "=", "new_distance", "# Adjust temperature based on stagnation", "if", "best_distance", "==", "current_distance", ":", "temperature", "*=", "cooling_rate", "# Cool down", "else", ":", "temperature", "=", "min", "(", "temperature", "/", "cooling_rate", ",", "1.0", ")", "# Reset if improved", "return", "best_tour", "[", "1", "]", "# Return the first unvisited node in the best tour"], "code_perf": 18.28059315502201}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Start with positive infinity for minimization", "# Calculate average distances for remaining nodes", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_destination", "=", "total_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", "# Store distances to evaluate second-best option", "second_best_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Check for the second-best distance", "if", "direct_distance", "<", "second_best_distance", ":", "second_best_distance", "=", "direct_distance", "ratio_score", "=", "direct_distance", "/", "(", "average_distance_to_destination", "+", "1e-10", ")", "# Avoid division by zero", "score", "=", "direct_distance", "+", "ratio_score", "*", "0.5", "# Weighted influence of direct distance ratio", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "# Include a factor from second best distance to encourage better selection", "if", "best_node", "is", "not", "None", ":", "return", "best_node", "if", "best_score", "<", "second_best_distance", "else", "unvisited_nodes", ".", "pop", "(", ")", "return", "None"], "code_perf": 26.04202206317254}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_weight", "=", "0.4", "# Weight for immediate travel cost", "decay_factor", "=", "0.1", "# Time-based decay factor", "cluster_distance_weight", "=", "0.4", "# Weight for grouping nearby nodes", "high_cost_penalty_weight", "=", "0.2", "# Penalty for high-cost nodes", "# Calculate average distance to unvisited nodes for clustering", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Clustering score for nearby nodes", "clustering_score", "=", "cluster_distance_weight", "*", "(", "avg_distance", "-", "direct_distance", ")", "# High-cost penalty if the distance is significantly above average", "high_cost_penalty", "=", "high_cost_penalty_weight", "*", "max", "(", "0", ",", "direct_distance", "-", "avg_distance", ")", "# Score calculation", "score", "=", "(", "-", "immediate_weight", "*", "direct_distance", ")", "+", "clustering_score", "-", "(", "decay_factor", "*", "direct_distance", ")", "-", "high_cost_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "proximity_threshold", "=", "1.2", "# Proximity factor to control distance influence", "close_nodes", "=", "[", "]", "weighted_distances", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance_to_node", "<", "proximity_threshold", "*", "np", ".", "mean", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "]", ")", ":", "close_nodes", ".", "append", "(", "node", ")", "if", "close_nodes", ":", "for", "node", "in", "close_nodes", ":", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "weighted_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_to_destination", "weighted_distances", "[", "node", "]", "=", "weighted_distance", "next_node", "=", "min", "(", "weighted_distances", ",", "key", "=", "weighted_distances", ".", "get", ")", "else", ":", "# Randomly select from unvisited nodes if no close nodes are found", "next_node", "=", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "return", "next_node"], "code_perf": 8.07900812163879}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "frequency_adjustment_factor", "=", "0.7", "# Weight for adjusting based on selection frequency", "centrality_weight", "=", "0.4", "# Weight reflecting the centrality of unvisited nodes", "distance_weight", "=", "0.3", "# Weight for direct distance impact", "if", "unvisited_nodes", ":", "# Calculate selection frequency and centrality for unvisited nodes", "selection_frequency", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "total_distance_from_current", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Explore metrics for scoring", "for", "node", "in", "unvisited_nodes", ":", "# Centrality score based on closeness to all other unvisited nodes", "centrality_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Calculate direct distance score to destination", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Frequency adjustment based on past selections (hypothetical for this example)", "# In a practical scenario, this would update based on previous node selections", "score", "=", "(", "centrality_weight", "*", "centrality_score", "-", "distance_weight", "*", "direct_distance", "-", "frequency_adjustment_factor", "*", "selection_frequency", "[", "node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.5135282626649635}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "temporal_urgency_factor", "=", "0.7", "# Weight for promoting nearby nodes", "proximity_weight", "=", "0.2", "# Weight for considering proximity to unvisited nodes", "synergy_weight", "=", "0.1", "# Weight for the synergy between neighboring unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", ")", "# Proximity score based on distances", "synergy_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "# Average distance to others", "score", "=", "(", "temporal_urgency_factor", "*", "-", "direct_distance", ")", "+", "(", "proximity_weight", "*", "proximity_score", ")", "-", "(", "synergy_weight", "*", "synergy_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 26.130556964313335}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate score: current distance + penalty based on distance to the destination", "score", "=", "distance_to_node", "+", "(", "distance_to_destination", "*", "0.5", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "inv_distance_weight", "=", "0.6", "# Weight for inverse distance", "future_distance_weight", "=", "0.4", "# Weight for estimated future distances", "connection_attractiveness_weight", "=", "0.3", "# Weight based on future connections", "for", "node", "in", "unvisited_nodes", ":", "inv_distance_score", "=", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1e-6", ")", "# Inverse distance", "future_distance_estimate", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average future distance", "connection_attractiveness", "=", "len", "(", "[", "next", "for", "next", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "next", "in", "unvisited_nodes", "and", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", "]", ")", "# Count of future connections", "score", "=", "inv_distance_weight", "*", "inv_distance_score", "-", "future_distance_weight", "*", "future_distance_estimate", "+", "connection_attractiveness_weight", "*", "connection_attractiveness", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.981504281235784}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.6", "# Weight for direct distance", "decay_factor", "=", "0.4", "# Weight for the adaptive exploration", "proximity_weight", "=", "0.2", "# Weight for distance to destination", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "overall_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score_decay", "=", "(", "total_distance_to_destination", "/", "(", "direct_distance", "+", "1e-7", ")", ")", "*", "decay_factor", "score", "=", "-", "(", "direct_distance", "+", "score_decay", ")", "+", "(", "overall_distance_to_destination", "*", "proximity_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 22.073959968482953}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.5", "# Weight for direct distance", "synergy_weight", "=", "0.3", "# Weight for potential synergy from clusters of unvisited nodes", "influence_weight", "=", "0.1", "# Weight for influence from already visited nodes", "underrepresentation_penalty_weight", "=", "0.1", "# Weight for underrepresented nodes", "# Function to calculate synergy score based on unvisited nodes", "def", "calculate_synergy_score", "(", "node", ")", ":", "synergy_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "synergy_score", "+=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "+", "1", ")", "# Inverse distance for synergy", "return", "synergy_score", "# Function to calculate influence score from visited nodes", "def", "calculate_influence_score", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "prev", "]", "for", "prev", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "prev", "not", "in", "unvisited_nodes", ")", "# Function to calculate underrepresentation penalty", "def", "calculate_underrepresentation_penalty", "(", "node", ")", ":", "return", "len", "(", "unvisited_nodes", ")", "/", "(", "1", "+", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other", "]", ">", "10", ")", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "synergy_score", "=", "calculate_synergy_score", "(", "node", ")", "influence_score", "=", "calculate_influence_score", "(", "node", ")", "underrepresentation_penalty", "=", "calculate_underrepresentation_penalty", "(", "node", ")", "# Combined scoring mechanism", "score", "=", "(", "-", "direct_distance_weight", "*", "direct_distance", "+", "synergy_weight", "*", "synergy_score", "-", "influence_weight", "*", "influence_score", "-", "underrepresentation_penalty_weight", "*", "underrepresentation_penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 13.841812290884132}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "penalty_factor", "=", "len", "(", "unvisited_nodes", ")", "*", "0.3", "# Adjust penalty for unvisited nodes", "proximity_weight", "=", "0.6", "# Increased weight for proximity to destination", "potential_gain_weight", "=", "0.4", "# New weight for potential future connections", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "potential_future_gain", "=", "potential_gain_weight", "*", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", ")", "# Average distance to remaining nodes", "score", "=", "-", "direct_distance", "-", "penalty_factor", "+", "proximity_score", "+", "potential_future_gain", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.387679142586634}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "clustering_weight", "=", "0.3", "cumulative_distance_weight", "=", "0.2", "connectivity_weight", "=", "0.1", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "prev_node", "]", "for", "prev_node", "in", "unvisited_nodes", "if", "prev_node", "!=", "current_node", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Predicting the distance to the nearest unvisited node as a factor", "nearest_unvisited_distance", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "# Score calculation including connectivity potential", "score", "=", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "(", "cluster_average_distance", "*", "clustering_weight", ")", "-", "(", "cumulative_distance", "*", "cumulative_distance_weight", ")", "+", "(", "nearest_unvisited_distance", "*", "connectivity_weight", ")", "-", "direct_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.274499322786202}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_penalty", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "connectivity_weight", "=", "0.4", "# Weight for overall connectivity to remaining nodes", "distance_penalty_weight", "=", "0.4", "# Weight for penalizing distance from the current node", "destination_influence_weight", "=", "0.2", "# Weight for influence towards the destination", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_connected_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "average_connected_distance", "=", "total_connected_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "1", ")", "score", "=", "(", "average_connected_distance", "*", "connectivity_weight", ")", "+", "(", "direct_distance", "*", "distance_penalty_weight", ")", "-", "(", "destination_influence_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", "<", "min_penalty", ":", "min_penalty", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.9545496074480475}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "time_factor", "=", "0.7", "# Weight for time considerations", "connectivity_weight", "=", "0.4", "# Weight for immediate connection desirability", "heuristic_forecasting_weight", "=", "0.3", "# Weight for future potential in distance", "urgency_weight", "=", "0.3", "# Weight for considering travel urgency", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "estimated_time_to_destination", "=", "direct_distance", "+", "total_distance_to_destination", "future_potential_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "# Average distance forecast", "# Calculate the score with the modified approach", "score", "=", "(", "connectivity_weight", "*", "-", "direct_distance", ")", "+", "(", "heuristic_forecasting_weight", "*", "future_potential_distance", ")", "-", "(", "time_factor", "*", "estimated_time_to_destination", ")", "+", "(", "urgency_weight", "*", "(", "1", "/", "(", "direct_distance", "+", "1", ")", ")", ")", "# Avoid division by zero", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.716621164248302}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.3", "# Weight for direct distance", "cluster_weight", "=", "0.2", "# Weight for cluster influence", "detour_penalty_weight", "=", "0.1", "# Weight for detour penalties", "centrality_weight", "=", "0.3", "# Weight for centrality estimation", "visit_penalty_weight", "=", "0.1", "# Weight for visited nodes penalty", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Dummy visit count simulating how many times nodes have been visited", "visit_counts", "=", "{", "node", ":", "1", "for", "node", "in", "unvisited_nodes", "}", "# Initialize visit counts", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "adjusted_detour", "=", "max", "(", "0", ",", "direct_distance", "-", "total_distance_to_destination", ")", "# Calculate centrality based on the number of unvisited neighbors", "unvisited_neighbors", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "float", "(", "'inf'", ")", ")", "centrality_score", "=", "unvisited_neighbors", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Penalty for having visited the node too frequently (high visit count means less favorable)", "visit_penalty", "=", "visit_counts", "[", "node", "]", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "cluster_weight", "*", "adjusted_detour", ")", "-", "(", "detour_penalty_weight", "*", "adjusted_detour", ")", "+", "(", "centrality_weight", "*", "centrality_score", ")", "-", "(", "visit_penalty_weight", "*", "visit_penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.5", "# Weight for direct travel distance", "connectivity_weight", "=", "0.3", "# Weight for connectivity to unvisited nodes", "overall_tour_length_weight", "=", "0.2", "# Weight for the impact on overall tour length", "total_distance_from_current", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "overall_tour_length", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_distance", "*", "direct_distance_weight", ")", "+", "(", "connectivity_penalty", "*", "connectivity_weight", ")", "+", "(", "overall_tour_length", "*", "overall_tour_length_weight", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "score", "=", "(", "0.5", "*", "distance_to_next", ")", "+", "(", "0.5", "*", "avg_distance_to_unvisited", ")", "# Balanced score for immediate distance and future prospects", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Adjusted weight for direct distance", "connectivity_weight", "=", "0.4", "# Weight for connectivity to unvisited nodes", "potential_weight", "=", "0.2", "# Weight for future potential based on remaining nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average connectivity", "# Potential score based on remaining distance to destination from unvisited nodes", "potential_score", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "dest", "]", "for", "dest", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Novelty factor: distance required to return from the next node to the destination", "return_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "potential_weight", "*", "potential_score", "-", "return_distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.68894866986051}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.5", "# Weight for direct distance from current node", "future_savings_weight", "=", "0.3", "# Weight for clustering future savings", "destination_attraction_weight", "=", "0.2", "# Weight for attraction towards destination", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_savings", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "average_future_savings", "=", "future_savings", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "1", ")", "score", "=", "-", "(", "direct_distance", "*", "direct_distance_weight", ")", "+", "(", "average_future_savings", "*", "future_savings_weight", ")", "+", "(", "destination_attraction_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.238069760238008}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "def", "visibility", "(", "node", ")", ":", "# Example visibility: inverse of distance to destination node", "return", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", "def", "dynamic_weight", "(", "node", ")", ":", "# Example dynamic weight: more weight to closer nodes", "return", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1", ")", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "vis", "=", "visibility", "(", "node", ")", "weight", "=", "dynamic_weight", "(", "node", ")", "# Combine visibility and dynamic weight", "score", "=", "distance", "*", "weight", "*", "vis", "# New score based on distance, weight and visibility", "scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.681151989816328}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance to improve priority on closer nodes", "future_weight", "=", "0.4", "# Weight for future path considerations", "decay_factor", "=", "0.1", "# Decay factor to penalize long-term future distances", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "*", "decay_factor", "remaining_nodes", "=", "len", "(", "unvisited_nodes", ")", "if", "remaining_nodes", ">", "0", ":", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "future_weight", "*", "future_cost", "/", "remaining_nodes", "else", ":", "score", "=", "-", "distance_weight", "*", "direct_distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.830231315105832}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "diversity_weight", "=", "0.6", "direct_distance_weight", "=", "1.2", "next_step_cost_weight", "=", "1.0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "next_step_cost", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "connectivity_score", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "diversity_score", "=", "len", "(", "unvisited_nodes", ")", "-", "connectivity_score", "adjusted_future_cost", "=", "(", "next_step_cost_weight", "*", "next_step_cost", ")", "+", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "0.5", ")", "score", "=", "(", "direct_distance_weight", "*", "direct_distance", ")", "+", "adjusted_future_cost", "-", "(", "diversity_weight", "*", "diversity_score", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.366678722697886}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "node_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Count the number of nearby nodes within a certain threshold (e.g., distance < threshold)", "threshold", "=", "10", "# Example threshold", "nearby_count", "=", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "threshold", ")", "# Calculate a modified score combining direct distance and the proximity influence", "influence_score", "=", "nearby_count", "*", "0.5", "# Influence of nearby nodes weighted by 0.5", "node_scores", "[", "node", "]", "=", "direct_distance", "-", "influence_score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "# Calculate distance to the next node and add it to estimated distance to destination", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Score is defined as the direct distance to the next node plus distance to the destination", "score", "=", "distance_to_next", "+", "distance_to_destination", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate the penalty based on the number of connections to remaining nodes", "multiplicity_penalty", "=", "sum", "(", "1", "for", "adj", "in", "unvisited_nodes", "if", "adj", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "adj", "]", "<", "float", "(", "'inf'", ")", ")", "# Score incorporates distance to the node, distance to the destination, and multiplicity penalty", "score", "=", "distance_to_node", "+", "distance_to_destination", "+", "multiplicity_penalty", "*", "0.1", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "max_distance_to_destination", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "(", "max_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "/", "(", "max_distance_to_destination", "+", "1", ")", "score", "=", "direct_distance", "+", "penalty", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.452242962070706}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "max_distance", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "destination_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "direct_distance", "-", "avg_distance_to_unvisited", ")", "+", "(", "destination_distance", "-", "max_distance", ")", "*", "0.5", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "distances_to_unvisited", "=", "np", ".", "array", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "average_distance", "=", "np", ".", "mean", "(", "distances_to_unvisited", ")", "variance_distance", "=", "np", ".", "var", "(", "distances_to_unvisited", ")", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "for", "candidate", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate", "]", "score", "=", "(", "immediate_distance", "*", "1.5", ")", "+", "(", "average_distance", "*", "0.5", ")", "+", "(", "variance_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "# Weighted scoring", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "candidate", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Create a score dictionary based on distance and penalties for visited nodes", "score_dict", "=", "{", "}", "decay_factor", "=", "0.05", "# Control influence of previously visited nodes", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Penalty based on distance from the current node to previously visited nodes", "penalty", "=", "sum", "(", "decay_factor", "*", "distance_matrix", "[", "current_node", "]", "[", "visited_node", "]", "for", "visited_node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "visited_node", "not", "in", "unvisited_nodes", ")", "score", "=", "distance", "+", "penalty", "score_dict", "[", "node", "]", "=", "score", "# Find the nodes with the minimum score", "min_score", "=", "min", "(", "score_dict", ".", "values", "(", ")", ")", "best_candidates", "=", "[", "node", "for", "node", ",", "score", "in", "score_dict", ".", "items", "(", ")", "if", "score", "==", "min_score", "]", "# Introduce random selection among the best candidates", "if", "best_candidates", ":", "return", "random", ".", "choice", "(", "best_candidates", ")", "return", "None"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Convert unvisited nodes to a numpy array for easier manipulation", "unvisited_nodes", "=", "np", ".", "array", "(", "list", "(", "unvisited_nodes", ")", ")", "# Calculate distances from the current node to all unvisited nodes", "distances", "=", "distance_matrix", "[", "current_node", ",", "unvisited_nodes", "]", "# Calculate distances from the unvisited nodes to the destination node", "to_destination_distances", "=", "distance_matrix", "[", "unvisited_nodes", ",", "destination_node", "]", "# A temperature parameter to adjust the influence of distance and destination proximity", "temperature", "=", "1.0", "# You can vary this value for more exploration or exploitation", "adjusted_weights", "=", "np", ".", "exp", "(", "-", "to_destination_distances", "/", "temperature", ")", "# Calculate the number of unvisited neighbors for each unvisited node", "unvisited_count", "=", "np", ".", "array", "(", "[", "np", ".", "sum", "(", "distance_matrix", "[", "node", ",", ":", "]", ">", "0", ")", "for", "node", "in", "unvisited_nodes", "]", ")", "# Compute a combined score: distance + weight for destination proximity + unvisited neighbors penalty", "scores", "=", "distances", "+", "adjusted_weights", "+", "(", "1", "/", "(", "unvisited_count", "+", "1", ")", ")", "# Select the node with the minimum score", "next_node", "=", "unvisited_nodes", "[", "np", ".", "argmin", "(", "scores", ")", "]", "return", "next_node"], "code_perf": 6.474456263583827}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "# Calculate average distance among unvisited nodes", "average_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "node", "in", "unvisited_nodes", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "**", "2", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "variance_penalty", "=", "sum", "(", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "-", "average_distance", ")", "**", "2", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "score", "=", "(", "average_distance", "-", "distance_to_next", ")", "-", "variance_penalty", "# Balance score with variance penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.314236173821003}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_unvisited", "=", "total_distance_to_unvisited", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "cluster_penalty", "=", "0.4", "*", "(", "avg_distance_to_unvisited", "-", "distance_to_destination", ")", "total_cost", "=", "direct_distance", "+", "cluster_penalty", "+", "0.2", "*", "(", "total_distance_to_unvisited", "/", "(", "1", "+", "distance_to_destination", ")", ")", "if", "total_cost", "<", "min_cost", ":", "min_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.704984026227792}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate the average distance to unvisited nodes", "distances", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "average_distance", "=", "sum", "(", "distances", ")", "/", "len", "(", "distances", ")", "# Calculate the diversity index for each unvisited node", "diversity_index", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "unique_connections", "=", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "average_distance", ")", "diversity_index", "[", "node", "]", "=", "unique_connections", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "average_distance", ")", "# Calculate the new heuristic score with diversity", "score", "=", "direct_distance", "+", "distance_penalty", "-", "diversity_index", "[", "node", "]", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 23.052745736883587}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "increase_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "heuristic_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# heuristic estimate to destination", "proximity", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "increase_cost", "+", "0.5", "*", "proximity", "+", "0.5", "*", "heuristic_cost", "# Combining costs with a proximity weight", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance", "future_distance_weight", "=", "0.4", "# Weight for estimated future distances", "unvisited_node_weight", "=", "0.1", "# Weight for favoring unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Future distance estimation based on average distance to remaining unvisited nodes", "future_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "future_average_distance", "=", "future_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "future_distance_weight", "*", "future_average_distance", ")", "score", "+=", "(", "unvisited_node_weight", "*", "(", "1", "if", "node", "in", "unvisited_nodes", "else", "0", ")", ")", "# Favor unvisited nodes", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.358012720183544}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "minimal_weighted_distance", "=", "float", "(", "'inf'", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "visit_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "return_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "weighted_distance", "=", "(", "0.5", "*", "direct_distance", ")", "+", "(", "0.5", "*", "(", "return_distance", "+", "average_distance", ")", ")", "/", "(", "visit_count", "+", "1", ")", "if", "weighted_distance", "<", "minimal_weighted_distance", ":", "minimal_weighted_distance", "=", "weighted_distance", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 7.081438908556759}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_penalty_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_factor", "=", "0.5", "# Weight for proximity to destination", "detour_penalty_factor", "=", "0.5", "# Weight for detour penalties", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "historical_cost", "=", "(", "total_distance_to_destination", "*", "0.3", ")", "+", "(", "direct_distance", "*", "0.7", ")", "# Weighted historical cost", "detour_penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "total_distance_to_destination", ")", "# Penalty for the detour", "score", "=", "(", "direct_distance", "+", "detour_penalty", "*", "detour_penalty_factor", ")", "-", "(", "proximity_factor", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", "<", "min_penalty_score", ":", "min_penalty_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.429940629173421}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "exploration_weight", "=", "0.5", "# Weight for exploration potential", "exploitation_weight", "=", "0.5", "# Weight for direct closeness to current node", "future_penalty_weight", "=", "0.2", "# Weight for penalizing distant nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_penalty", "=", "max", "(", "0", ",", "total_distance_to_destination", "-", "direct_distance", ")", "score", "=", "(", "exploration_weight", "*", "(", "1", "/", "(", "1", "+", "direct_distance", ")", ")", ")", "+", "(", "exploitation_weight", "*", "(", "-", "direct_distance", ")", ")", "-", "(", "future_penalty_weight", "*", "future_penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "average_distance", ")", "score", "=", "direct_distance", "+", "penalty", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "visit_frequency", "=", "{", "node", ":", "0", "for", "node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "}", "# Tracks how many times each node has been visited", "recency_factor", "=", "2", "# Weight for the impact of recently visited nodes on scoring", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for travel costs", "frequency_weight", "=", "0.2", "# Influence of node visit frequency", "centrality_weight", "=", "0.2", "# Rewards central nodes in the network", "recency_weight", "=", "0.1", "# Weight to penalize recently visited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "centrality_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", ")", "# Simple centrality measure", "recency_penalty", "=", "visit_frequency", "[", "node", "]", "*", "recency_factor", "if", "visit_frequency", "[", "node", "]", ">", "0", "else", "0", "# Higher frequency leads to penalty", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", ")", "-", "(", "frequency_weight", "*", "visit_frequency", "[", "node", "]", ")", "+", "(", "centrality_weight", "*", "centrality_score", ")", "-", "recency_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "visit_frequency", "[", "next_node", "]", "+=", "1", "# Update visit frequency for the selected next node", "return", "next_node"], "code_perf": 14.649814725275476}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "connectivity_beta", "=", "2.0", "max_distance_to_destination", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "squared_penalty", "=", "connectivity_beta", "*", "(", "connectivity_score", "**", "2", ")", "weighted_heuristic", "=", "(", "0.5", "*", "(", "max_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "0.5", "*", "(", "connectivity_score", "-", "1", ")", ")", "score", "=", "direct_distance", "+", "weighted_heuristic", "+", "squared_penalty", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.450370583313572}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "from", "collections", "import", "defaultdict", "def", "dynamic_cluster_threshold", "(", "clusters", ")", ":", "average_distance", "=", "sum", "(", "len", "(", "clusters", "[", "key", "]", ")", "for", "key", "in", "clusters", ")", "/", "(", "len", "(", "clusters", ")", "or", "1", ")", "return", "average_distance", "clusters", "=", "defaultdict", "(", "list", ")", "for", "i", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", ":", "if", "i", "in", "unvisited_nodes", ":", "for", "j", "in", "unvisited_nodes", ":", "if", "i", "!=", "j", "and", "distance_matrix", "[", "i", "]", "[", "j", "]", "<", "5", ":", "# Static threshold", "clusters", "[", "i", "]", ".", "append", "(", "j", ")", "cluster_threshold", "=", "dynamic_cluster_threshold", "(", "clusters", ")", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "cluster_size", "=", "len", "(", "clusters", "[", "node", "]", ")", "if", "node", "in", "clusters", "else", "0", "density_score", "=", "cluster_size", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "alignment_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "-", "0.4", "*", "direct_distance", "+", "0.4", "*", "density_score", "+", "0.2", "*", "alignment_score", ")", "/", "(", "1", "+", "cluster_threshold", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.450370583313572}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "direct_distance_weight", "=", "0.4", "# Weight for direct distance influence", "nearest_unvisited_weight", "=", "0.3", "# Weight for the nearest unvisited node influence", "future_projection_weight", "=", "0.3", "# Weight for estimating future path cost", "nearest_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "projected_total_distance", "=", "sum", "(", "min", "(", "distance_matrix", "[", "node", "]", "[", "dest", "]", "for", "dest", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "nearest_distance_to_unvisited", "=", "nearest_distance", "-", "distance_matrix", "[", "node", "]", "[", "current_node", "]", "projected_cost", "=", "projected_total_distance", "/", "len", "(", "unvisited_nodes", ")", "score", "=", "(", "direct_distance_weight", "*", "direct_distance", ")", "+", "(", "nearest_unvisited_weight", "*", "nearest_distance_to_unvisited", ")", "+", "(", "future_projection_weight", "*", "projected_cost", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_distance_weight", "=", "0.6", "# Weight for immediate distance to unvisited", "connectivity_weight", "=", "0.4", "# Weight for overall connectivity savings", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "next_next", "]", "for", "next_next", "in", "unvisited_nodes", "if", "node", "!=", "next_next", ")", "# Inverse distances for connectivity", "score", "=", "(", "immediate_distance", "*", "immediate_distance_weight", ")", "+", "(", "connectivity_score", "*", "connectivity_weight", ")", "-", "total_distance_to_destination", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 31.811315642519254}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate adjusted distances with a weight towards the destination", "adjusted_distances", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "(", "1", "+", "random", ".", "uniform", "(", "-", "0.1", ",", "0.1", ")", ")", ")", "+", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "0.5", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the unvisited node with the smallest adjusted distance", "next_node", "=", "min", "(", "adjusted_distances", ",", "key", "=", "adjusted_distances", ".", "get", ")", "return", "next_node"], "code_perf": 7.447096777377661}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm introduces a selection criterion based on both distance and a penalty for clustering of unvisited nodes, encouraging a more spread-out route.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ",", "1", ")", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "*", "(", "penalty", "-", "distance_to_next", ")", "# Focus on minimizing both immediate and clustering distances", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.357686789692623}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "max_heuristic_score", "=", "float", "(", "'-inf'", ")", "# Normalize distances", "max_distance", "=", "np", ".", "max", "(", "distance_matrix", "[", "current_node", "]", ")", "normalized_distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "/", "max_distance", "for", "node", "in", "unvisited_nodes", "}", "# Calculate a density score based on the remaining unvisited nodes", "density_scores", "=", "{", "node", ":", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "0.25", "*", "max_distance", "]", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "normalized_distances", "[", "node", "]", "density_score", "=", "density_scores", "[", "node", "]", "+", "1e-9", "# Avoid division by zero", "heuristic_score", "=", "distance_to_node", "/", "density_score", "# Lower distance with higher density is better", "if", "heuristic_score", ">", "max_heuristic_score", ":", "max_heuristic_score", "=", "heuristic_score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 33.25036357399763}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.6", "# Weight for proximity to destination", "penalty_weight", "=", "0.2", "# Weight for penalty based on distance to destination", "cumulative_distance_weight", "=", "0.2", "# Weight for cumulative distance traveled", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "prev_node", "]", "for", "prev_node", "in", "unvisited_nodes", "if", "prev_node", "!=", "current_node", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "adjusted_cumulative_distance", "=", "cumulative_distance", "**", "2", "# Exponential penalty for longer paths", "score", "=", "(", "proximity_weight", "*", "distance_to_destination", "+", "penalty_weight", "*", "(", "1", "/", "(", "direct_distance", "+", "1", ")", ")", "-", "# Inverse penalty for direct distance", "(", "adjusted_cumulative_distance", "*", "cumulative_distance_weight", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.330149039686686}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "unvisited_density_weight", "=", "0.4", "# Weight for density of unvisited nodes", "destination_attractiveness_weight", "=", "0.2", "# Weight for attractiveness to destination", "total_distance", "=", "0", "for", "node", "in", "unvisited_nodes", ":", "total_distance", "+=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance", "=", "total_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "unvisited_density", "=", "len", "(", "unvisited_nodes", ")", "# Number of unvisited nodes", "score", "=", "(", "unvisited_density", "*", "unvisited_density_weight", ")", "+", "(", "distance_to_destination", "*", "destination_attractiveness_weight", ")", "-", "(", "direct_distance", "*", "direct_distance_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.450370583313572}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.6", "# Increased weight for proximity to destination", "cost_benefit_weight", "=", "0.4", "# Weight for cost-benefit of unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_cost_benefit", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "*", "(", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", ")", "+", "(", "total_cost_benefit", "*", "cost_benefit_weight", ")", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.378332893374544}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Compute the total distance to all unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Define a centrality factor based on the degree of connections for each unvisited node", "node_centralities", "=", "{", "node", ":", "sum", "(", "1", "for", "i", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "distance_matrix", "[", "node", "]", "[", "i", "]", ">", "0", ")", "for", "node", "in", "unvisited_nodes", "}", "# Calculate scores based on distance and centrality", "scores", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "/", "total_distance", ")", "+", "(", "1", "/", "(", "node_centralities", "[", "node", "]", "+", "1", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the unvisited node with the minimum score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "average_distance_to_unvisited", ")", "score", "=", "direct_distance", "+", "penalty", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "import", "numpy", "as", "np", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "novelty_weight", "=", "0.4", "# Weight for novelty of unvisited nodes", "dynamic_penalty_weight", "=", "0.2", "# Weight for dynamic penalty based on unvisited count", "# Function to calculate novelty score based on the diversity of unvisited nodes", "def", "calculate_novelty", "(", "node", ")", ":", "return", "len", "(", "[", "other", "for", "other", "in", "unvisited_nodes", "if", "node", "!=", "other", "]", ")", "# Function to calculate a dynamic penalty that decreases with fewer unvisited nodes", "def", "calculate_dynamic_penalty", "(", "total_unvisited", ")", ":", "return", "len", "(", "unvisited_nodes", ")", "/", "total_unvisited", "if", "total_unvisited", ">", "0", "else", "1", "total_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "novelty", "=", "calculate_novelty", "(", "node", ")", "dynamic_penalty", "=", "calculate_dynamic_penalty", "(", "total_unvisited", ")", "# Combined scoring mechanism with novelty score and dynamic penalty", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "novelty_weight", "*", "novelty", "-", "dynamic_penalty_weight", "*", "dynamic_penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "novelty_factor", "=", "0.5", "# Encourages exploration of less frequently visited nodes", "distance_bias_factor", "=", "0.5", "# Balances direct and projected distances", "if", "unvisited_nodes", ":", "total_distances", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distances", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "visit_count", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "# Track visit frequencies", "# Sample visit counts for demonstration", "previous_visits", "=", "{", "node", ":", "1", "for", "node", "in", "unvisited_nodes", "}", "# Assume each node was visited once for novelty", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "projected_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Novelty score based on how often a node has been visited (lower is better)", "novelty_score", "=", "1", "/", "(", "previous_visits", "[", "node", "]", "+", "1", ")", "if", "previous_visits", "[", "node", "]", ">", "0", "else", "1", "# Combined score with distance bias", "score", "=", "(", "novelty_factor", "*", "novelty_score", ")", "-", "(", "distance_bias_factor", "*", "(", "direct_distance", "+", "projected_distance", ")", ")", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "score", "=", "direct_distance", "+", "max", "(", "0", ",", "direct_distance", "-", "avg_distance", ")", "+", "connectivity_penalty", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.40058984709721}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "diversity_weight", "=", "0.7", "direct_distance_weight", "=", "1.5", "next_step_cost_weight", "=", "0.8", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "next_step_cost", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "connectivity_score", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "diversity_score", "=", "len", "(", "unvisited_nodes", ")", "-", "connectivity_score", "score", "=", "(", "direct_distance_weight", "*", "direct_distance", ")", "+", "(", "next_step_cost_weight", "*", "next_step_cost", ")", "-", "(", "diversity_weight", "*", "diversity_score", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.427236334420483}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "novelty_penalty_weight", "=", "0.5", "# Weight to discourage revisiting nodes", "proximity_weight", "=", "0.5", "# Weight for proximity to current node", "decay_factor", "=", "0.95", "# Factor to diminish the influence of scores over time", "if", "unvisited_nodes", ":", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "1", "/", "(", "1", "+", "direct_distance", ")", "# Higher score for closer nodes", "novelty_penalty", "=", "1.0", "if", "node", "not", "in", "unvisited_nodes", "else", "novelty_penalty_weight", "# Combined score considering proximity and novelty", "score", "=", "proximity_weight", "*", "proximity_score", "*", "decay_factor", "-", "novelty_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for distance penalty", "connectivity_weight", "=", "0.5", "# Weight for connectedness", "proximity_bonus", "=", "0.2", "# Bonus for proximity to the destination node", "# Function to calculate connectivity score based on unvisited nodes", "def", "calculate_connectivity_score", "(", "node", ")", ":", "connectivity_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "connectivity_score", "+=", "1", "/", "distance_matrix", "[", "node", "]", "[", "other", "]", "# Closer nodes have higher scores", "return", "connectivity_score", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "calculate_connectivity_score", "(", "node", ")", "proximity_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined scoring mechanism with distance penalty and connectivity", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "proximity_bonus", "*", "(", "1", "/", "proximity_to_destination", "if", "proximity_to_destination", ">", "0", "else", "0", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 29.12991281029882}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# The design idea is to prioritize nodes that minimize the distance to the destination and have a balanced distance to other unvisited nodes, using a weighted scoring approach.", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "scores", "=", "{", "}", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "avg_distance_to_unvisited", "=", "total_distance", "/", "num_unvisited", "if", "num_unvisited", ">", "0", "else", "0", "# Scoring formula: minimize distance to destination and average distance penalties", "scores", "[", "node", "]", "=", "(", "distance_to_destination", "*", "1.5", ")", "+", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "-", "avg_distance_to_unvisited", ")", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 8.46985744010961}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Introduce a decay factor inversely proportional to the distance to the destination", "decay_factor", "=", "1", "/", "(", "1", "+", "distance_to_destination", ")", "# Combine distance with decay factor for a weighted score", "score", "=", "distance_to_node", "*", "(", "1", "+", "decay_factor", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.83165993596245}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "max_distance_weight", "=", "0.35", "# Weight for maximum distance consideration", "visit_frequency_weight", "=", "0.25", "# Weight for visit frequency", "neighborhood_weight", "=", "0.20", "# Weight considering neighboring nodes impact", "distance_caution_weight", "=", "0.15", "# Weight to lessen impact of long distances", "future_distance_weight", "=", "0.05", "# Weight for future distance minimization", "def", "calculate_visit_frequency", "(", "node", ")", ":", "return", "1", "if", "node", "in", "unvisited_nodes", "else", "0", "def", "calculate_future_distance", "(", "node", ")", ":", "return", "max", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "def", "calculate_neighborhood_influence", "(", "node", ")", ":", "neighborhood_count", "=", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "10", ")", "return", "neighborhood_count", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "max_distance", "=", "calculate_future_distance", "(", "node", ")", "visit_frequency", "=", "calculate_visit_frequency", "(", "node", ")", "neighborhood_influence", "=", "calculate_neighborhood_influence", "(", "node", ")", "# Dynamic scoring equation", "score", "=", "(", "-", "max_distance_weight", "*", "max_distance", "+", "visit_frequency_weight", "*", "visit_frequency", "+", "neighborhood_weight", "*", "neighborhood_influence", "-", "distance_caution_weight", "*", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "**", "2", ")", "+", "future_distance_weight", "*", "(", "1", "/", "(", "1", "+", "calculate_future_distance", "(", "node", ")", ")", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 11.809592765076408}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "proximity_penalty", "=", "1", "/", "num_unvisited", "# Penalizes based on the number of remaining nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "density_score", "=", "proximity_penalty", "*", "remaining_distance", "score", "=", "direct_distance", "+", "density_score", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.101442436613793}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity to destination", "cumulative_distance_weight", "=", "0.3", "# Weight for cumulative distance to unvisited nodes", "novelty_weight", "=", "0.2", "# Weight for novelty of connections", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "# Total distance to unvisited nodes", "novelty_score", "=", "1", "/", "(", "len", "(", "[", "next", "for", "next", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", "and", "next", "in", "unvisited_nodes", "]", ")", "+", "1", ")", "# Inverse of connections to other unvisited nodes", "score", "=", "-", "proximity_weight", "*", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "-", "cumulative_distance_weight", "*", "cumulative_distance", "+", "novelty_weight", "*", "novelty_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 31.59415154206033}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.3", "# Weight for connectivity to unvisited nodes", "risk_weight", "=", "0.3", "# Weight for path risk based on longest unvisited connections", "# Calculate the average distance to unvisited nodes", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Risk score based on maximum distance to the unvisited nodes", "longest_distance", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "risk_score", "=", "1", "/", "(", "1", "+", "longest_distance", ")", "# Less penalty for shorter longest distances", "# Calculate the combined score", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "risk_weight", "*", "risk_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.501556964812924}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_unvisited", "=", "total_distance_to_unvisited", "/", "len", "(", "unvisited_nodes", ")", "candidates", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_score", "=", "(", "distance_to_destination", "+", "average_distance_to_unvisited", "-", "distance_to_node", ")", "/", "2", "# Balance scores", "weighted_score", "=", "(", "distance_to_node", "*", "0.4", ")", "+", "(", "heuristic_score", "*", "0.6", ")", "# Adjust weighting", "candidates", ".", "append", "(", "(", "node", ",", "weighted_score", ")", ")", "next_node", "=", "min", "(", "candidates", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "heuristic_score", "=", "distance_to_node", "+", "distance_to_destination", "if", "heuristic_score", "<", "best_score", ":", "best_score", "=", "heuristic_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "inverse_distance_weight", "=", "0.5", "# Weight for inverse distance", "accessibility_weight", "=", "0.3", "# Weight for accessibility based on path features", "circuit_penalty_weight", "=", "0.1", "# Weight for penalizing circuitous routes", "relative_distance_weight", "=", "0.1", "# Weight for relative distances to unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "relative_distance_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "accessibility_score", "=", "1", "/", "(", "1", "+", "direct_distance", ")", "# Inverse distance for accessibility", "adjusted_circuit_penalty", "=", "max", "(", "0", ",", "total_distance_to_destination", "-", "direct_distance", ")", "score", "=", "(", "inverse_distance_weight", "*", "-", "direct_distance", ")", "+", "(", "accessibility_weight", "*", "accessibility_score", ")", "+", "(", "circuit_penalty_weight", "*", "adjusted_circuit_penalty", ")", "+", "(", "relative_distance_weight", "*", "relative_distance_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.831676888619787}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "connectivity_scores", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "connectivity_scores", "[", "node", "]", "=", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<=", "5", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "connectivity_scores", "[", "node", "]", "# Modified score that incorporates average distance and connectivity", "score", "=", "direct_distance", "+", "0.5", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "0.3", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "connectivity_score", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.450370583313572}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "distance_exploration_penalty", "=", "0.4", "# Penalty applied to distant nodes", "proximity_weight", "=", "0.5", "# Weight for nodes closer to the current location", "destination_weight", "=", "0.3", "# Weight focusing on distance to the final destination", "adaptability_factor", "=", "0.2", "# Factor that adjusts scores based on unvisited node density", "if", "unvisited_nodes", ":", "total_distance_weight", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate scores based on proximity and adaptability", "proximity_score", "=", "(", "1", "/", "(", "direct_distance", "+", "1e-6", ")", ")", "*", "proximity_weight", "# Avoid division by zero", "destination_score", "=", "(", "1", "/", "(", "distance_to_destination", "+", "1e-6", ")", ")", "*", "destination_weight", "# Introduce an adaptability score based on the remaining unvisited nodes", "adaptability_score", "=", "(", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-6", ")", ")", "*", "adaptability_factor", "# Combine the scores and apply distance exploration penalty", "score", "=", "proximity_score", "+", "destination_score", "-", "distance_exploration_penalty", "*", "direct_distance", "+", "adaptability_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.215178200321608}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "current_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "next_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "total_distance", "=", "current_to_next", "+", "next_to_destination", "# Apply a simple penalty for longer total paths", "if", "total_distance", "<", "min_distance", "+", "0.1", "*", "abs", "(", "current_to_next", "-", "next_to_destination", ")", ":", "min_distance", "=", "total_distance", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.121372199251647}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "cluster_weight", "=", "0.4", "# Weight for selecting from clustered groups", "distance_weight", "=", "0.4", "# Base weight for direct distance", "alignment_weight", "=", "0.2", "# Weight for alignment towards the destination", "# Cluster unvisited nodes based on proximity", "clusters", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_current", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_key", "=", "round", "(", "distance_to_current", ")", "# Simple clustering based on distance", "if", "cluster_key", "not", "in", "clusters", ":", "clusters", "[", "cluster_key", "]", "=", "[", "]", "clusters", "[", "cluster_key", "]", ".", "append", "(", "node", ")", "# Calculate scores for nodes in each cluster", "for", "cluster", "in", "clusters", ".", "values", "(", ")", ":", "cluster_score", "=", "0", "for", "node", "in", "cluster", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "alignment_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate cluster score", "cluster_score", "+=", "(", "-", "distance_weight", "*", "direct_distance", "+", "alignment_weight", "*", "alignment_score", ")", "# Adjust scores based on cluster distance", "cluster_average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "cluster", ")", "/", "(", "len", "(", "cluster", ")", "or", "1", ")", "adjusted_cluster_score", "=", "cluster_score", "-", "(", "cluster_weight", "*", "cluster_average_distance", ")", "# Update max score and next node if this cluster's score is better", "if", "adjusted_cluster_score", ">", "max_score", ":", "max_score", "=", "adjusted_cluster_score", "next_node", "=", "cluster", "[", "0", "]", "# Select the first node in the highest scoring cluster", "return", "next_node"], "code_perf": 16.90386717500874}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "import", "numpy", "as", "np", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Adjusted weight for direct distance", "future_cost_weight", "=", "0.4", "# Adjusted weight for potential future cost", "penalty_weight", "=", "0.2", "# Weight for discouraging over-frequent visits", "# Initialize visit counts for nodes if not present", "global", "node_visit_counts", "node_visit_counts", "=", "{", "}", "# Function to calculate potential future cost based on unvisited nodes", "def", "calculate_future_cost", "(", "node", ")", ":", "return", "np", ".", "mean", "(", "[", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "]", ")", "if", "unvisited_nodes", "else", "0", "# Function to assess penalty for frequent visits, incorporating decay", "def", "calculate_visit_penalty", "(", "node", ")", ":", "visit_count", "=", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", "return", "np", ".", "exp", "(", "visit_count", ")", "if", "visit_count", ">", "0", "else", "1", "# Exponential decay", "for", "node", "in", "unvisited_nodes", ":", "# Update visit counts at each call", "node_visit_counts", "[", "node", "]", "=", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", "+", "1", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_cost", "=", "calculate_future_cost", "(", "node", ")", "penalty", "=", "calculate_visit_penalty", "(", "node", ")", "# Combined scoring mechanism with new penalty for frequent visits", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "future_cost_weight", "*", "future_cost", "-", "penalty_weight", "*", "penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.41724333977419}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_distance", "=", "0", "# Estimate remaining distance by averaging distances to other unvisited nodes", "for", "unvisited", "in", "unvisited_nodes", ":", "if", "unvisited", "!=", "node", ":", "remaining_distance", "+=", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "average_remaining_distance", "=", "remaining_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Calculate the heuristic score as a combination of direct distance and future travel potential", "score", "=", "distance_to_node", "+", "average_remaining_distance", "# Select the node with the minimum score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.4323878079629}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Convert the distance matrix to a numpy array for easier manipulation", "distance_matrix", "=", "np", ".", "array", "(", "distance_matrix", ")", "# Group unvisited nodes into clusters based on a distance threshold", "clusters", "=", "[", "]", "threshold", "=", "5", "# Distance threshold to form clusters", "unvisited_nodes", "=", "list", "(", "unvisited_nodes", ")", "while", "unvisited_nodes", ":", "current_cluster", "=", "[", "unvisited_nodes", ".", "pop", "(", "0", ")", "]", "for", "node", "in", "unvisited_nodes", "[", ":", "]", ":", "if", "distance_matrix", "[", "current_cluster", "[", "0", "]", "]", "[", "node", "]", "<", "threshold", ":", "current_cluster", ".", "append", "(", "node", ")", "unvisited_nodes", ".", "remove", "(", "node", ")", "clusters", ".", "append", "(", "current_cluster", ")", "# Calculate centroid for each cluster", "centroids", "=", "[", "]", "for", "cluster", "in", "clusters", ":", "cluster_coords", "=", "distance_matrix", "[", "cluster", "]", "[", ":", ",", "cluster", "]", "centroid", "=", "cluster_coords", ".", "mean", "(", "axis", "=", "0", ")", ".", "argmin", "(", ")", "centroids", ".", "append", "(", "cluster", "[", "centroid", "]", ")", "# Find the closest centroid to the current node", "nearest_centroid", "=", "min", "(", "centroids", ",", "key", "=", "lambda", "c", ":", "distance_matrix", "[", "current_node", "]", "[", "c", "]", ")", "return", "nearest_centroid"], "code_perf": 31.616956377461854}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "# Calculate minimum distance to ensure a baseline for biasing towards closer nodes", "min_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Normalize distance score based on the minimum distance for a better range", "normalized_score", "=", "(", "min_distance", "/", "(", "1", "+", "distance_score", ")", ")", "**", "2", "# Encourage even closer nodes", "randomness_factor", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "# Introduce randomness", "scores", "[", "node", "]", "=", "normalized_score", "+", "(", "randomness_factor", "/", "10", ")", "# Combine both scores", "# Select the node with the highest score", "next_node", "=", "max", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 22.651959926807066}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate the centroid of unvisited nodes", "centroid_x", "=", "sum", "(", "node", "%", "len", "(", "distance_matrix", ")", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "centroid_y", "=", "sum", "(", "node", "//", "len", "(", "distance_matrix", ")", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate distance of the node from the centroid", "distance_from_centroid", "=", "(", "(", "centroid_x", "-", "(", "node", "%", "len", "(", "distance_matrix", ")", ")", ")", "**", "2", "+", "(", "centroid_y", "-", "(", "node", "//", "len", "(", "distance_matrix", ")", ")", ")", "**", "2", ")", "**", "0.5", "# Introducing a risk factor based on distance from centroid (higher is riskier)", "risk_factor", "=", "distance_from_centroid", "*", "0.2", "# Score calculation based on direct distance and risk factor", "score", "=", "direct_distance", "+", "risk_factor", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 18.001736244489223}
{"code_tokens": ["import", "random", "import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ",", "temperature", "=", "1.0", ",", "cooling_rate", "=", "0.99", ")", ":", "next_node", "=", "None", "best_cost", "=", "float", "(", "'inf'", ")", "# Explore the unvisited nodes based on current temperature", "for", "node", "in", "unvisited_nodes", ":", "cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Decide whether to accept this node based on cost and temperature", "if", "cost", "<", "best_cost", "or", "random", ".", "uniform", "(", "0", ",", "1", ")", "<", "math", ".", "exp", "(", "(", "best_cost", "-", "cost", ")", "/", "temperature", ")", ":", "best_cost", "=", "cost", "next_node", "=", "node", "# Cool down the temperature", "temperature", "*=", "cooling_rate", "return", "next_node"], "code_perf": 23.428504399401334}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the degree of each node in the unvisited set", "node_degree", "=", "{", "node", ":", "sum", "(", "1", "for", "i", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "distance_matrix", "[", "node", "]", "[", "i", "]", ">", "0", ")", "for", "node", "in", "unvisited_nodes", "}", "# Calculate scores for each unvisited node with a penalty for distance and degree", "scores", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "(", "1", "+", "1", "/", "(", "node_degree", "[", "node", "]", "+", "1", ")", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the unvisited node with the minimum adjusted score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to current node", "cluster_weight", "=", "0.4", "# Weight for attractiveness of neighboring nodes", "future_cluster_weight", "=", "0.2", "# Weight for predicted future cluster benefits", "for", "node", "in", "unvisited_nodes", ":", "proximity_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "neighboring_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "for", "neighbor", "in", "unvisited_nodes", "if", "neighbor", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "future_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "cluster_factor", "=", "(", "len", "(", "unvisited_nodes", ")", "-", "len", "(", "set", "(", "distance_matrix", "[", "node", "]", ")", ")", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Focus on nodes with varied connectivity", "# Calculate combined score", "score", "=", "-", "proximity_weight", "*", "proximity_score", "+", "cluster_weight", "*", "neighboring_score", "+", "future_cluster_weight", "*", "future_score", "*", "cluster_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.448723553929311}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "future_distance_weight", "=", "0.3", "# Weight for distance to destination", "proximity_weight", "=", "0.1", "# Weight for the proximity of clusters", "diversity_weight", "=", "0.1", "# Weight for diversity of unvisited nodes", "total_nodes", "=", "len", "(", "distance_matrix", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Proximity score: average distance to other unvisited nodes", "proximity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Diversity score based on the distance to the farthest unvisited node", "diversity_score", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Calculate combined score", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "future_distance_weight", "*", "future_distance", "-", "proximity_weight", "*", "proximity_score", "-", "diversity_weight", "*", "diversity_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.782424581066498}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "historical_weight", "=", "0.3", "# Weight for historical traversal patterns", "randomness_weight", "=", "0.2", "# Encourage exploration with randomness", "total_traveled_distance", "=", "sum", "(", "distance_matrix", "[", "i", "]", "[", "j", "]", "for", "i", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "for", "j", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "i", "!=", "j", ")", "# Total distance traversed historically", "average_distance", "=", "total_traveled_distance", "/", "(", "len", "(", "distance_matrix", ")", "-", "1", "or", "1", ")", "# Average distance", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", ")", "+", "(", "historical_weight", "*", "(", "average_distance", "-", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", ")", ")", "+", "(", "randomness_weight", "*", "random", ".", "random", "(", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.035422266266618}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Start with positive infinity for minimization", "# Calculate the penalty based on the number of unvisited nodes", "penalty", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "distance_matrix", ")", "-", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "# Calculate direct distance to the current node", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate average distance to the destination", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "neighbor", "]", "[", "destination_node", "]", "for", "neighbor", "in", "unvisited_nodes", ")", "average_distance_to_destination", "=", "total_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", "# Calculate score with a penalty for unvisited nodes", "score", "=", "direct_distance", "+", "(", "average_distance_to_destination", "*", "penalty", ")", "*", "0.5", "# Selecting the node that minimizes this score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "future_cost_weight", "=", "0.4", "# Weight for future travel cost prediction", "proximity_weight", "=", "0.2", "# Weight for proximity to the destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "proximity_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "proximity_weight", "score", "=", "direct_distance", "+", "(", "future_cost", "*", "future_cost_weight", ")", "+", "proximity_score", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.609324023960005}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate average distance to unvisited nodes", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Find the next node based on a scoring mechanism", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "(", "avg_distance", "-", "distance", ")", "if", "(", "avg_distance", "-", "distance", ")", ">", "0", "else", "0", "score", "=", "distance", "-", "penalty", "*", "0.3", "# You may adjust 0.3 as a tuning parameter", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ",", "temperature", "=", "1.0", ")", ":", "def", "total_distance_if_visited", "(", "next_node", ")", ":", "return", "(", "distance_matrix", "[", "current_node", "]", "[", "next_node", "]", "+", "sum", "(", "distance_matrix", "[", "next_node", "]", "[", "nn", "]", "for", "nn", "in", "unvisited_nodes", "if", "nn", "!=", "next_node", ")", ")", "best_node", "=", "None", "best_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "candidate_distance", "=", "total_distance_if_visited", "(", "node", ")", "if", "candidate_distance", "<", "best_distance", ":", "best_distance", "=", "candidate_distance", "best_node", "=", "node", "else", ":", "# Probability to accept worse solution based on temperature", "probability", "=", "math", ".", "exp", "(", "(", "best_distance", "-", "candidate_distance", ")", "/", "temperature", ")", "if", "random", ".", "random", "(", ")", "<", "probability", ":", "best_distance", "=", "candidate_distance", "best_node", "=", "node", "return", "best_node"], "code_perf": 24.50774333246479}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate the average distance to unvisited nodes", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Calculate the clustering score based on average distance to neighbors", "clustering_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "neighbor_distances", "=", "[", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "for", "neighbor", "in", "unvisited_nodes", "if", "neighbor", "!=", "node", "]", "clustering_scores", "[", "node", "]", "=", "sum", "(", "neighbor_distances", ")", "/", "len", "(", "neighbor_distances", ")", "if", "neighbor_distances", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "average_distance", ")", "# Calculate the new heuristic score with clustering", "clustering_score", "=", "clustering_scores", "[", "node", "]", "score", "=", "direct_distance", "+", "distance_penalty", "-", "(", "0.5", "*", "clustering_score", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.429251561921311}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "unvisited_nodes", "=", "list", "(", "unvisited_nodes", ")", "min_penalty", "=", "float", "(", "'inf'", ")", "optimal_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "penalty", "=", "distance_to_node", "+", "0.5", "*", "distance_to_destination", "# Introducing a penalty based on distance to destination", "if", "penalty", "<", "min_penalty", ":", "min_penalty", "=", "penalty", "optimal_node", "=", "node", "return", "optimal_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["# {This algorithm introduces a decay factor for distances based on the order of visiting nodes, enhancing the exploration while favoring less traveled nodes.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "decay_factor", "=", "0.9", "# Factor to decrease the weight of previous distances", "distances", "=", "[", "(", "node", ",", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "for", "node", "in", "unvisited_nodes", "]", "# Apply decay based on the order of distances", "distances", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "# Sort by distance", "weighted_distances", "=", "[", "(", "node", ",", "distance", "*", "(", "decay_factor", "**", "i", ")", ")", "for", "i", ",", "(", "node", ",", "distance", ")", "in", "enumerate", "(", "distances", ")", "]", "# Find the next node with the minimum weighted distance", "next_node", "=", "min", "(", "weighted_distances", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 28.187131555817025}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate mean distances among unvisited nodes for clustering influence", "mean_distances", "=", "sum", "(", "distance_matrix", "[", "node1", "]", "[", "node2", "]", "for", "node1", "in", "unvisited_nodes", "for", "node2", "in", "unvisited_nodes", "if", "node1", "!=", "node2", ")", "cluster_effect", "=", "mean_distances", "/", "(", "len", "(", "unvisited_nodes", ")", "**", "2", "-", "len", "(", "unvisited_nodes", ")", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Adjusted score considering clustering effect and direct distance", "score", "=", "direct_distance", "+", "(", "cluster_effect", "/", "(", "1", "+", "distance_to_destination", ")", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.762411444975307}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "clusters", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "cluster_key", "=", "tuple", "(", "sorted", "(", "[", "current_node", ",", "node", "]", ")", ")", "if", "cluster_key", "not", "in", "clusters", ":", "clusters", "[", "cluster_key", "]", "=", "[", "]", "clusters", "[", "cluster_key", "]", ".", "append", "(", "node", ")", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "cluster", "in", "clusters", ".", "values", "(", ")", ":", "for", "node", "in", "cluster", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "cluster_score", "=", "(", "direct_distance", "+", "remaining_distance", ")", "/", "2", "if", "cluster_score", "<", "best_score", ":", "best_score", "=", "cluster_score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Adjusted weight for distance prioritization", "penalty_weight", "=", "0.4", "# Weight for densely connected unvisited nodes", "exploration_weight", "=", "0.2", "# Weight for exploration diversity", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "1", "/", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "+", "1", ")", "# Proximity score inversely related to average distance", "exploration_score", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "# Random score for exploration diversity", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "penalty_weight", "*", "proximity_score", "+", "exploration_weight", "*", "exploration_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.278704771425105}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance to next node", "return_weight", "=", "0.3", "# Weight for average return distance to starting node", "cluster_weight", "=", "0.3", "# Weight for intra-cluster distances among unvisited nodes", "total_distance_return", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_return_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "intra_cluster_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "(", "direct_weight", "*", "direct_distance", ")", "+", "(", "return_weight", "*", "total_distance_return", ")", "-", "(", "cluster_weight", "*", "intra_cluster_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.974931194699994}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for distance reduction", "connectivity_weight", "=", "0.4", "# Weight for potential future connectivity", "dead_end_penalty", "=", "0.3", "# Penalty for selecting dead-end paths", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "potential_connectivity", "=", "sum", "(", "1", "for", "next", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", "and", "next", "in", "unvisited_nodes", ")", "# Future connectivity", "dead_end_score", "=", "sum", "(", "1", "for", "next", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "==", "float", "(", "'inf'", ")", "and", "next", "not", "in", "unvisited_nodes", ")", "# Dead-end paths count", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "potential_connectivity", "-", "dead_end_penalty", "*", "dead_end_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "inverse_distances", "=", "{", "}", "total_inverse_distance", "=", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "inverse_distance", "=", "1", "/", "(", "direct_distance", "+", "1e-6", ")", "# Small constant to avoid division by zero", "inverse_distances", "[", "node", "]", "=", "inverse_distance", "total_inverse_distance", "+=", "inverse_distance", "# Calculate selection probabilities", "probabilities", "=", "{", "node", ":", "(", "inv_dist", "/", "total_inverse_distance", ")", "for", "node", ",", "inv_dist", "in", "inverse_distances", ".", "items", "(", ")", "}", "# Randomly select the next node based on calculated probabilities", "rand_value", "=", "random", ".", "random", "(", ")", "cumulative_probability", "=", "0.0", "for", "node", ",", "prob", "in", "probabilities", ".", "items", "(", ")", ":", "cumulative_probability", "+=", "prob", "if", "rand_value", "<", "cumulative_probability", ":", "return", "node", "return", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "# Fallback in case all else fails"], "code_perf": 19.191441023039047}
{"code_tokens": ["# {The new algorithm introduces a multi-factorial scoring system that considers the direct distance to unvisited nodes, the closeness centrality of nodes, and a potential future distance penalty based on the remaining nodes to be visited.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate a score for each unvisited node", "scores", "=", "{", "}", "# Average distance to remaining unvisited nodes for future potential penalty", "total_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_future_penalty", "=", "total_distance_to_remaining", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "closeness_centrality", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "future_penalty_score", "=", "avg_future_penalty", "scores", "[", "node", "]", "=", "distance_score", "+", "(", "1", "-", "closeness_centrality", ")", "+", "future_penalty_score", "# Lower score is better", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 28.81442622590815}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "future_weight", "=", "0.4", "# Weight for potential future paths", "penalty_weight", "=", "0.2", "# Weight for penalty on distant nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "max", "(", "0", ",", "total_distance_to_destination", "-", "direct_distance", ")", "*", "penalty_weight", "future_contribution", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "score", "=", "-", "(", "direct_distance", "+", "penalty", ")", "+", "(", "future_contribution", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "*", "future_weight", ")", "+", "(", "total_distance_to_destination", "*", "direct_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.42541367811898}
{"code_tokens": ["import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_combined_score", "=", "float", "(", "'-inf'", ")", "# Calculate cohesion score based on the average distance to other unvisited nodes", "cohesion_factor", "=", "len", "(", "unvisited_nodes", ")", "-", "1", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Cohesion score: average distance to all other unvisited nodes ", "cohesion_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "/", "cohesion_factor", "if", "cohesion_factor", ">", "0", "else", "0", "# Combined score: balance between cohesion and distance", "combined_score", "=", "cohesion_score", "-", "(", "distance_to_next", "*", "0.7", "+", "distance_to_destination", "*", "0.3", ")", "if", "combined_score", ">", "max_combined_score", ":", "max_combined_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.774473006000306}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate the total remaining distance from this node to the destination", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "# Incorporate a heuristic penalty proportional to the total remaining distance", "penalty", "=", "total_remaining_distance", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "# Combine both distances to create a new score", "score", "=", "distance_to_node", "+", "penalty", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 17.187223124636084}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for distance to destination", "connectivity_weight", "=", "0.4", "# Weight for connectivity to unvisited nodes", "decay_weight", "=", "0.2", "# Weight for distance decay effect", "total_connections", "=", "len", "(", "unvisited_nodes", ")", "-", "1", "# Total connections excluding current node", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "prev_node", "]", "for", "prev_node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "direct_distance", ")", "score", "=", "(", "distance_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "connectivity_weight", "*", "connectivity_score", "/", "(", "total_connections", "or", "1", ")", "-", "(", "decay_weight", "*", "direct_distance", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 31.085724918453284}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "distances_to_unvisited", "=", "np", ".", "array", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "average_distance", "=", "np", ".", "mean", "(", "distances_to_unvisited", ")", "penalty", "=", "np", ".", "max", "(", "distances_to_unvisited", ")", "/", "2", "# Penalty for selecting distant nodes", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "for", "candidate", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate", "]", "score", "=", "(", "immediate_distance", "*", "2", ")", "+", "(", "average_distance", "*", "0.3", ")", "+", "penalty", "# New weighted scoring with penalty", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "candidate", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance minimization", "cluster_density_weight", "=", "0.5", "# Weight for penalty based on unvisited node density", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_density_penalty", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "!=", "0", "else", "float", "(", "'inf'", ")", ")", "for", "other_node", "in", "unvisited_nodes", ")", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", ")", "*", "distance_weight", "-", "(", "cluster_density_penalty", "*", "cluster_density_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 12.664672517973896}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_from_next_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "penalty", "=", "distance_to_next", "*", "0.5", "# Penalty for longer distances to the next node", "score", "=", "(", "total_distance_from_next_to_unvisited", "/", "len", "(", "unvisited_nodes", ")", ")", "-", "penalty", "# Reward for minimizing distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.98930167680099}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_penalty_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty_factor", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "score", "=", "distance_to_next", "+", "penalty_factor", "# Combine distance and penalty", "if", "score", "<", "min_penalty_score", ":", "min_penalty_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "exploration_weight", "=", "0.3", "# Adjust this value for more or less randomness", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate connectivity score", "connectivity_score", "=", "len", "(", "[", "nn", "for", "nn", "in", "unvisited_nodes", "if", "nn", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "nn", "]", "<", "np", ".", "inf", "]", ")", "# Combine distance and connectivity score with a random exploration component", "random_factor", "=", "random", ".", "uniform", "(", "-", "exploration_weight", ",", "exploration_weight", ")", "scores", "[", "node", "]", "=", "distance_to_node", "-", "connectivity_score", "*", "0.1", "+", "random_factor", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 10.61787113555443}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "exploration_weight", "=", "0.4", "# Weight for exploration of clustered nodes", "immediate_weight", "=", "0.4", "# Weight for immediate travel cost", "clustering_weight", "=", "0.3", "# Weight for clustering by proximity", "cluster_influence", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "cluster_influence", "[", "node", "]", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "clustering_score", "=", "clustering_weight", "*", "(", "1", "/", "(", "1", "+", "cluster_influence", "[", "node", "]", ")", ")", "# Inverse influence of cluster distance", "score", "=", "(", "-", "immediate_weight", "*", "direct_distance", ")", "+", "clustering_score", "+", "exploration_weight", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.266774821974048}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Define a dynamic penalty that decreases with the number of visited nodes", "penalty_factor", "=", "0.3", "# Penalty modifier", "num_visited_nodes", "=", "len", "(", "distance_matrix", ")", "-", "len", "(", "unvisited_nodes", ")", "dynamic_penalty", "=", "penalty_factor", "/", "(", "num_visited_nodes", "+", "1", ")", "# Inverse relationship", "best_next_node", "=", "None", "best_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate total cost with a dynamic penalty", "total_cost", "=", "direct_distance", "+", "dynamic_penalty", "*", "direct_distance", "if", "total_cost", "<", "best_cost", ":", "best_cost", "=", "total_cost", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# Design idea: This algorithm incorporates a multi-faceted scoring mechanism using heuristic adjustments based on travel efficiency, potential cluster size of remaining unvisited nodes, and the influence of returning to the destination more quickly.", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "# Constants for weighting", "alpha", "=", "0.4", "# Weight for distance score", "beta", "=", "0.4", "# Weight for cluster potential score", "gamma", "=", "0.2", "# Weight for distance penalty", "# Calculate total distances to the remaining nodes", "total_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Cluster potential score: based on proximity of unvisited nodes", "cluster_score", "=", "sum", "(", "max", "(", "0", ",", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "-", "distance_to_next", ")", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "# Combined score incorporating cluster potential and distance penalty", "combined_score", "=", "(", "cluster_score", "*", "beta", "/", "total_distance_remaining", "-", "distance_to_destination", "*", "gamma", "-", "distance_to_next", "*", "alpha", ")", "if", "combined_score", ">", "best_score", ":", "best_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.525134263828551}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_effective_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "effective_distance", "=", "distance_to_next", "+", "(", "2", "*", "distance_to_destination", ")", "# Penalizing distant nodes", "if", "effective_distance", "<", "min_effective_distance", ":", "min_effective_distance", "=", "effective_distance", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.80356546673329}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "random", ".", "uniform", "(", "0.3", ",", "0.5", ")", "# Randomized weight for distance", "connectivity_weight", "=", "random", ".", "uniform", "(", "0.3", ",", "0.5", ")", "# Randomized weight for connectivity", "exploration_weight", "=", "0.2", "# Fixed weight for exploration based on potential", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average connectivity", "potential_score", "=", "len", "(", "[", "next", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", "]", ")", "# Count of connections to unvisited nodes", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "exploration_weight", "*", "potential_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.480481380477937}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to destination", "clustering_weight", "=", "0.3", "# Weight for clustering savings", "visibility_weight", "=", "0.2", "# Weight for visibility of unvisited nodes", "randomness_weight", "=", "0.1", "# Weight for introducing randomness", "visibility_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1", ")", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Introduce a randomness factor to break ties", "random_factor", "=", "random", ".", "random", "(", ")", "*", "randomness_weight", "score", "=", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "cluster_average_distance", "*", "clustering_weight", "+", "(", "visibility_score", "*", "visibility_weight", ")", "-", "direct_distance", "+", "random_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.571002401773285}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "unvisited_connection_weight", "=", "0.4", "# Weight for connections to unvisited nodes", "exploration_weight", "=", "0.2", "# Weight for exploration", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "direct_distance", ")", "average_connection_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_distance_weight", "*", "-", "direct_distance", ")", "+", "(", "unvisited_connection_weight", "*", "connectivity", ")", "-", "(", "exploration_weight", "*", "average_connection_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 34.759858765674835}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "min_adjusted_score", "=", "float", "(", "'inf'", ")", "average_distance_to_unvisited", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "traffic_adjustment", "=", "(", "average_distance_to_unvisited", "/", "distance_to_node", ")", "if", "distance_to_node", ">", "0", "else", "1", "adjusted_score", "=", "distance_to_node", "*", "traffic_adjustment", "if", "adjusted_score", "<", "min_adjusted_score", ":", "min_adjusted_score", "=", "adjusted_score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 25.716448610595013}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.6", "# Weight for direct distance", "return_trip_weight", "=", "0.4", "# Weight for return distance", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "return_trip_penalty", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined cost calculation with a threshold for next node selection", "cost", "=", "(", "direct_distance_weight", "*", "direct_distance", "+", "return_trip_weight", "*", "return_trip_penalty", ")", "if", "cost", "<", "min_cost", ":", "min_cost", "=", "cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.6490879527083395}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate average direct distance to destination node", "avg_distance_to_destination", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "# Node scores based on direct distance and average distance to destination", "node_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Score considers both direct distance and average distance to the final destination", "score", "=", "direct_distance", "+", "avg_distance_to_destination", "node_scores", "[", "node", "]", "=", "score", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "decay_factor", "=", "0.8", "# Factor to reduce influence of distant nodes", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "cluster_strength_weight", "=", "0.5", "# Weight for driving towards unvisited clusters", "revisit_penalty_weight", "=", "0.2", "# Penalty for revisiting nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "+", "1", ")", "for", "next", "in", "unvisited_nodes", ")", "# Closer nodes score higher", "# Applying a decay factor to emphasize closer nodes", "effective_distance", "=", "direct_distance", "*", "(", "1", "-", "decay_factor", ")", "revisit_penalty", "=", "-", "1", "if", "node", "in", "unvisited_nodes", "else", "0", "# Combined score incorporating logical penalties and rewards", "score", "=", "-", "direct_distance_weight", "*", "effective_distance", "+", "cluster_strength_weight", "*", "cluster_score", "+", "revisit_penalty_weight", "*", "revisit_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.392584365680047}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to destination", "historical_weight", "=", "0.4", "# Weight for historical travel efficiency", "clustering_weight", "=", "0.2", "# Weight for clustering of unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "historical_cost", "=", "(", "total_distance", "+", "direct_distance", ")", "/", "2", "# Historical cost as a simple average", "# Determine clustering score based on proximity to other unvisited nodes", "clustering_score", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "2", ")", "score", "=", "-", "(", "direct_distance", "+", "historical_cost", ")", "+", "(", "clustering_weight", "*", "clustering_score", ")", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.654310386808678}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "dynamic_cluster_factor", "=", "0.1", "# Influence of neighboring unvisited nodes", "proximity_threshold", "=", "3", "# Distance threshold for nearby nodes", "# Calculate the cumulative closeness to destination for unvisited nodes", "total_closeness", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "0.001", ")", "for", "node", "in", "unvisited_nodes", ")", "avg_closeness_to_destination", "=", "total_closeness", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "nearby_count", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<=", "proximity_threshold", "and", "n", "!=", "node", ")", "# New scoring mechanism considering direct distance, closeness to destination, and neighboring clusters", "score", "=", "direct_distance", "-", "dynamic_cluster_factor", "*", "nearby_count", "+", "2", "*", "(", "avg_closeness_to_destination", "-", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "0.001", ")", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 11.764977972731186}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm incorporates a weighted score for each unvisited node based on both proximity and the collective potential distances to remaining nodes, seeking to balance immediate path efficiency with future exploration.}", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "avg_remaining_distance", "=", "total_remaining_distance", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "potential_distances", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "score", "=", "distance_to_next", "+", "(", "avg_remaining_distance", "+", "potential_distances", "/", "max", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ",", "1", ")", ")", "# Balance immediate distance with future potential", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.4323878079629}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "synergy_weight", "=", "0.4", "# Weight for synergy with destination", "immediate_weight", "=", "0.4", "# Weight for immediate travel cost", "risk_penalty_weight", "=", "0.2", "# Risk penalty for distant nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculating the synergy score between the next node and the destination", "synergy_score", "=", "synergy_weight", "*", "(", "1", "/", "(", "1", "+", "distance_to_destination", ")", ")", "# Higher score for closer nodes", "risk_penalty", "=", "risk_penalty_weight", "*", "max", "(", "0", ",", "direct_distance", "-", "distance_to_destination", ")", "# Penalty for distant nodes", "score", "=", "(", "-", "immediate_weight", "*", "direct_distance", ")", "+", "synergy_score", "-", "risk_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.274349161946587}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "total_inverse_distance", "=", "0", "probabilities", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", ">", "0", ":", "inverse_distance", "=", "1", "/", "distance", "probabilities", "[", "node", "]", "=", "inverse_distance", "total_inverse_distance", "+=", "inverse_distance", "# Normalize probabilities", "for", "node", "in", "probabilities", ":", "probabilities", "[", "node", "]", "/=", "total_inverse_distance", "# Select the next node based on probabilities", "rand", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "cumulative_probability", "=", "0.0", "for", "node", ",", "prob", "in", "probabilities", ".", "items", "(", ")", ":", "cumulative_probability", "+=", "prob", "if", "rand", "<", "cumulative_probability", ":", "return", "node", "# Fallback in case of rounding error", "return", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")"], "code_perf": 19.12133588383137}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "direct_distance_weight", "=", "0.6", "# Weight for direct distance", "decay_factor", "=", "0.2", "# Decay factor for penalizing previously evaluated nodes", "heuristic_weight", "=", "0.3", "# Weight for heuristic estimation of remaining distances", "unvisited_count_weight", "=", "0.1", "# Weight for the number of unvisited nodes", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Heuristic: average of distances to unvisited nodes", "heuristic_estimate", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "unvisited_count", "or", "1", ")", "# Score calculation with decay for previously evaluated nodes", "score", "=", "(", "-", "direct_distance_weight", "*", "direct_distance", "+", "heuristic_weight", "*", "heuristic_estimate", "-", "unvisited_count_weight", "*", "unvisited_count", ")", "*", "(", "1", "-", "decay_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.4597365709491275}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "# Calculate the average distance to unvisited nodes", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "remaining_unvisited_count", "if", "remaining_unvisited_count", ">", "0", "else", "1", ")", "# Introducing a factor that weighs distance and count of unvisited nodes", "score", "=", "(", "avg_distance_to_unvisited", "/", "(", "distance_to_next", "+", "1e-5", ")", ")", "+", "(", "remaining_unvisited_count", "/", "(", "distance_to_next", "+", "1e-5", ")", ")", "# Avoid division by zero", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.909566175496844}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_score", "=", "0", "for", "node", "in", "unvisited_nodes", ":", "total_score", "+=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_score", "=", "total_score", "/", "len", "(", "unvisited_nodes", ")", "direct_influence_weight", "=", "0.5", "penalty_weight", "=", "0.5", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "penalty_weight", "*", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "average_score", ")", "score", "=", "(", "direct_influence_weight", "*", "direct_distance", ")", "+", "penalty", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_cost_weight", "=", "0.6", "connectivity_weight", "=", "0.3", "destination_proximity_weight", "=", "0.1", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Connectivity score: counts direct connections to remaining unvisited nodes", "connectivity_score", "=", "connectivity_weight", "*", "sum", "(", "1", "for", "next_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "<", "float", "(", "'inf'", ")", ")", "# Proximity to destination: inversely related to distance to destination", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "destination_proximity", "=", "destination_proximity_weight", "*", "(", "1", "/", "(", "distance_to_destination", "+", "1", ")", ")", "# Avoid division by zero", "score", "=", "-", "direct_cost_weight", "*", "direct_distance", "+", "connectivity_score", "+", "destination_proximity", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.073198286273344}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "penalty_weight", "=", "0.4", "# Weight for unvisited nodes", "exploration_weight", "=", "0.2", "# Weight for promoting wider exploration", "# Calculate the average distance to unvisited nodes for penalty and exploration", "avg_unvisited_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate penalty score based on how far the node is from the average unvisited distance", "penalty_score", "=", "avg_unvisited_distance", "-", "direct_distance", "# Exploration score promoting nodes that are further away", "exploration_score", "=", "(", "1", "/", "(", "direct_distance", "+", "1", ")", ")", "*", "exploration_weight", "# Combined scoring", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "penalty_weight", "*", "penalty_score", "+", "exploration_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity to destination", "cost_efficiency_weight", "=", "0.3", "# Weight for historical costs", "exploration_weight", "=", "0.2", "# Weight for exploration randomness", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_cost_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "historical_cost", "=", "(", "total_distance_to_destination", "+", "direct_distance", ")", "/", "2", "# Historical cost as a simple average", "# Introduce a penalty based on distance to the destination", "penalty", "=", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "**", "2", ")", "*", "exploration_weight", "# New score calculation", "score", "=", "-", "(", "direct_distance", "+", "historical_cost", "+", "penalty", ")", "+", "(", "average_cost_to_destination", "*", "cost_efficiency_weight", ")", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "# Introduce randomness for exploration", "score", "+=", "random", ".", "uniform", "(", "-", "0.1", ",", "0.1", ")", "# Small random factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.027747865322429}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_importance", "=", "0.6", "# Weight for distance to unvisited nodes", "urgency_weight", "=", "0.4", "# Weight for urgency based on proximity to destination", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "decay_factor", "=", "1", "/", "(", "unvisited_count", "+", "1", ")", "# Decay factor for distance as unvisited nodes decrease", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "distance_to_destination", "*", "urgency_weight", ")", "*", "decay_factor", "-", "(", "direct_distance", "*", "distance_importance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.829646110328234}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to destination", "uniqueness_weight", "=", "0.4", "# Weight for node uniqueness", "risk_weight", "=", "0.2", "# Weight for distance risk assessment", "average_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "uniqueness_score", "=", "1", "/", "(", "1", "+", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", ")", "risk_factor", "=", "direct_distance", "*", "(", "1", "if", "direct_distance", ">", "average_distance_to_destination", "else", "0.5", ")", "score", "=", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "uniqueness_weight", "*", "uniqueness_score", "-", "risk_weight", "*", "risk_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.564293453535052}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "weighted_nodes", "=", "[", "]", "# Calculate scores for each unvisited node based on distance and heuristic", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Score based on the combination of distance and heuristic cost", "score", "=", "distance_to_node", "+", "heuristic_cost", "weighted_nodes", ".", "append", "(", "(", "node", ",", "score", ")", ")", "# Normalize scores to create selection probabilities", "total_score", "=", "sum", "(", "1", "/", "score", "for", "_", ",", "score", "in", "weighted_nodes", ")", "# Inverse to favor lower scores", "normalized_weights", "=", "[", "(", "node", ",", "(", "1", "/", "score", ")", "/", "total_score", ")", "for", "node", ",", "score", "in", "weighted_nodes", "]", "# Randomly choose a node based on weighted probabilities", "next_node", "=", "random", ".", "choices", "(", "[", "node", "for", "node", ",", "_", "in", "normalized_weights", "]", ",", "weights", "=", "[", "weight", "for", "_", ",", "weight", "in", "normalized_weights", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 23.26388635887545}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Create a score dictionary with weighted factors", "score_dict", "=", "{", "}", "visit_counts", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "# Initialize visit counts for unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "visit_penalty", "=", "visit_counts", "[", "node", "]", "*", "0.5", "# Apply a penalty based on the number of times a node was visited", "score", "=", "distance", "+", "visit_penalty", "# Total score considers distance and visit penalty", "score_dict", "[", "node", "]", "=", "score", "# Evaluate best nodes based on the score", "min_score", "=", "min", "(", "score_dict", ".", "values", "(", ")", ")", "best_candidates", "=", "[", "node", "for", "node", ",", "score", "in", "score_dict", ".", "items", "(", ")", "if", "score", "==", "min_score", "]", "# Introduce randomness among candidates", "if", "best_candidates", ":", "selected_node", "=", "random", ".", "choice", "(", "best_candidates", ")", "visit_counts", "[", "selected_node", "]", "+=", "1", "# Increment visit count for the selected node", "return", "selected_node", "return", "None"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "def", "estimate_cost", "(", "node", ",", "unvisited_nodes", ")", ":", "total_distance", "=", "0", "count", "=", "len", "(", "unvisited_nodes", ")", "if", "count", "==", "0", ":", "return", "0", "for", "unvisited_node", "in", "unvisited_nodes", ":", "total_distance", "+=", "distance_matrix", "[", "node", "]", "[", "unvisited_node", "]", "average_distance", "=", "total_distance", "/", "count", "heuristic_factor", "=", "1.5", "# New weighting factor", "# Incorporating a penalty for nodes based on their distance to current node", "penalty", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "0.5", "# Returning a combination of average and penalty", "return", "average_distance", "*", "heuristic_factor", "+", "penalty", "min_total_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "total_cost", "=", "estimate_cost", "(", "node", ",", "unvisited_nodes", ")", "if", "total_cost", "<", "min_total_cost", ":", "min_total_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 11.597528455617105}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "centrality_weight", "=", "0.3", "# Weight for node centrality based on connections", "future_efficiency_weight", "=", "0.2", "# Weight for future potential connectivity", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Centrality score based on the number of connections to other unvisited nodes", "centrality_score", "=", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", ">", "0", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Future efficiency score based on potential distance to all remaining unvisited nodes", "future_connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "centrality_weight", "*", "centrality_score", "-", "future_efficiency_weight", "*", "future_connectivity_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.417349887645768}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate direct distances from the current node to unvisited nodes", "direct_distances", "=", "np", ".", "array", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "# Calculate the average distance from the current node to unvisited nodes", "average_distance", "=", "np", ".", "mean", "(", "direct_distances", ")", "# Calculate the variance of the distances to the unvisited nodes", "variance_distance", "=", "np", ".", "var", "(", "direct_distances", ")", "# Score nodes based on direct distance and variance influence", "node_scores", "=", "{", "}", "for", "i", ",", "node", "in", "enumerate", "(", "unvisited_nodes", ")", ":", "direct_distance", "=", "direct_distances", "[", "i", "]", "# Combined score: direct distance - penalty based on variance from average", "score", "=", "direct_distance", "-", "(", "variance_distance", "/", "(", "1", "+", "direct_distance", ")", ")", "node_scores", "[", "node", "]", "=", "score", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "connectivity_weight", "=", "0.3", "# Weight for node connectivity", "closeness_weight", "=", "0.4", "# Weight for closeness to destination", "penalty_weight", "=", "0.3", "# Weight for revisiting nodes", "# Function to calculate connectivity score based on unvisited neighbors", "def", "calculate_connectivity_score", "(", "node", ")", ":", "return", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<", "float", "(", "'inf'", ")", ")", "# Function to calculate penalty for revisiting previously visited nodes", "def", "calculate_penalty", "(", "node", ")", ":", "return", "sum", "(", "1", "for", "visited", "in", "unvisited_nodes", "if", "visited", "in", "unvisited_nodes", ")", "# Simplified as an example", "for", "node", "in", "unvisited_nodes", ":", "connectivity_score", "=", "calculate_connectivity_score", "(", "node", ")", "closeness_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "penalty_score", "=", "calculate_penalty", "(", "node", ")", "# Combined scoring mechanism", "score", "=", "(", "connectivity_weight", "*", "connectivity_score", "+", "closeness_weight", "*", "(", "-", "closeness_to_destination", ")", "-", "penalty_weight", "*", "penalty_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 18.704820740310073}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "closest_node", "=", "None", "best_estimated_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "total_estimated_cost", "=", "distance_to_next", "+", "distance_to_destination", "if", "total_estimated_cost", "<", "best_estimated_cost", ":", "best_estimated_cost", "=", "total_estimated_cost", "closest_node", "=", "node", "return", "closest_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "proximity_weight", "=", "0.3", "# Weight for proximity to destination", "time_cost_weight", "=", "0.3", "# Weight for time/cost adjustments based on remaining nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Closer nodes to destination have higher scores", "# Time-cost score based on the sum of distances to remaining nodes (penalizes longer routes)", "time_cost_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Decay factor to prioritize nodes as more nodes are visited", "decay_factor", "=", "(", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "2", ")", ")", "# Slight decay to represent urgency", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "proximity_weight", "*", "(", "1", "/", "proximity_score", ")", "*", "decay_factor", "-", "time_cost_weight", "*", "time_cost_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.184618341420684}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_bid", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.6", "# Weight for proximity influence", "efficiency_weight", "=", "0.4", "# Weight for journey efficiency", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "proximity_score", "=", "1", "/", "(", "1", "+", "direct_distance", ")", "efficiency_penalty", "=", "total_distance_to_destination", "/", "(", "direct_distance", "+", "1", ")", "# Avoid division by zero", "bid", "=", "(", "proximity_score", "*", "proximity_weight", ")", "-", "(", "efficiency_penalty", "*", "efficiency_weight", ")", "+", "average_distance", "if", "bid", ">", "max_bid", ":", "max_bid", "=", "bid", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.981967604900688}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Weight factors", "distance_weight", "=", "0.5", "nearest_neighbor_weight", "=", "0.3", "neighborhood_radius", "=", "5", "# Defined distance threshold for neighborhood influence", "backtracking_penalty", "=", "0.2", "close_nodes_count", "=", "sum", "(", "1", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<=", "neighborhood_radius", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "nearest_neighbor_distance", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "neighborhood_score", "=", "close_nodes_count", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "# Normalize neighborhood effect", "backtrack_score", "=", "backtracking_penalty", "if", "node", "!=", "destination_node", "else", "0", "# Weighted scoring combining factors", "score", "=", "(", "distance_weight", "*", "direct_distance", "+", "nearest_neighbor_weight", "*", "nearest_neighbor_distance", "-", "0.3", "*", "neighborhood_score", "+", "backtrack_score", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.536371406809618}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "remaining_distance_weight", "=", "0.6", "# Weight for the total distance to the destination", "unvisited_penalty_weight", "=", "0.4", "# Weight for the penalty of having unvisited nodes", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty_for_unvisited", "=", "len", "(", "unvisited_nodes", ")", "*", "unvisited_penalty_weight", "score", "=", "(", "total_remaining_distance", "*", "remaining_distance_weight", ")", "+", "penalty_for_unvisited", "-", "direct_distance", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 36.1397423465301}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight focused on direct distance", "connectivity_weight", "=", "0.4", "# Weight for connectivity to unvisited nodes", "heuristic_weight", "=", "0.2", "# Weight for overall spatial positioning of unvisited nodes", "total_distance_from_node", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Calculate a density factor based on the number of unvisited nodes", "density_factor", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "distance_matrix", ")", "-", "1", ")", "if", "len", "(", "distance_matrix", ")", ">", "1", "else", "1", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "heuristic_score", "=", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Modify weights dynamically based on current node distances", "adjusted_distance_weight", "=", "distance_weight", "/", "(", "1", "+", "direct_distance", ")", "adjusted_connectivity_weight", "=", "connectivity_weight", "*", "density_factor", "adjusted_heuristic_weight", "=", "heuristic_weight", "*", "(", "1", "if", "direct_distance", "<", "10", "else", "0.5", ")", "# Reward short distances", "score", "=", "-", "adjusted_distance_weight", "*", "direct_distance", "+", "adjusted_connectivity_weight", "*", "connectivity_score", "+", "adjusted_heuristic_weight", "*", "heuristic_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.581007536218779}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Create clusters using a simple distance-based strategy", "clusters", "=", "{", "}", "cluster_size", "=", "3", "# Adjust cluster size based on problem constraints", "for", "node", "in", "unvisited_nodes", ":", "cluster_key", "=", "tuple", "(", "sorted", "(", "distance_matrix", "[", "current_node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", ")", "if", "cluster_key", "not", "in", "clusters", ":", "clusters", "[", "cluster_key", "]", "=", "[", "]", "clusters", "[", "cluster_key", "]", ".", "append", "(", "node", ")", "# Find centroids and score based on distance to the destination", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "cluster", "in", "clusters", ".", "values", "(", ")", ":", "if", "len", "(", "cluster", ")", ">", "0", ":", "centroid", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "cluster", ")", "/", "len", "(", "cluster", ")", "for", "node", "in", "cluster", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Score based on distance to centroid and distance to destination", "score", "=", "distance_to_node", "+", "distance_to_destination", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm prioritizes unvisited nodes based on a combination of distance, heuristic cost to destination, and a bonus for visited proximity to underline future connectivity.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_cost_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Add a small distance penalty for each visit to discourage immediate circling for next closest nodes", "visit_penalty", "=", "1", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", "-", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "n", "]", "[", "node", "]", "<", "float", "(", "'inf'", ")", "]", ")", ")", "score", "=", "heuristic_cost_to_destination", "-", "distance_to_next", "-", "visit_penalty", "# Balanced score with visit penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.078385722187273}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for distance", "time_weight", "=", "0.4", "# Weight for historical travel time", "cluster_weight", "=", "0.2", "# Weight for cluster of unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "historical_time", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "neighbor", "]", "for", "neighbor", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average travel time", "cluster_score", "=", "len", "(", "[", "neighbor", "for", "neighbor", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<", "float", "(", "'inf'", ")", "]", ")", "# Number of connections to unvisited nodes", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "time_weight", "*", "historical_time", "+", "cluster_weight", "*", "cluster_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_factor", "=", "0.6", "# Weight for direct distance", "cumulative_factor", "=", "0.3", "# Weight for cumulative distance of unvisited nodes", "random_factor", "=", "0.1", "# Weight for random exploration", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "total_cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cumulative_distance", "=", "total_cumulative_distance", "-", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "-", "(", "distance_factor", "*", "direct_distance", ")", "+", "(", "cumulative_factor", "*", "cumulative_distance", ")", "+", "(", "random_factor", "*", "random", ".", "uniform", "(", "0", ",", "1", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.323420304300073}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_factor", "=", "0.4", "# Factor for immediate distance consideration", "cumulative_cost_factor", "=", "0.3", "# Factor for cumulative travel cost", "future_cluster_factor", "=", "0.2", "# Factor for potential future connections", "destination_proximity_factor", "=", "0.1", "# Factor for proximity to destination", "cumulative_cost", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_cluster_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Calculate proximity to destination", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score considering all factors, including cumulative cost", "score", "=", "-", "distance_factor", "*", "direct_distance", "+", "cumulative_cost_factor", "*", "cumulative_cost", "-", "future_cluster_factor", "*", "future_cluster_score", "-", "destination_proximity_factor", "*", "distance_to_destination", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.891060222117737}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {The algorithm employs a scoring mechanism focusing on both the distance to the next node and the overall connectivity of remaining nodes, integrating a decay factor for farther nodes to encourage visiting nearby clusters first.}", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Constants for weighting", "alpha", "=", "0.5", "# Weight for distance score", "beta", "=", "0.3", "# Weight for connectivity score", "gamma", "=", "0.2", "# Decay factor for distance influence", "# Calculate total distances to the remaining nodes", "total_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Connectivity score: based on the sum of distances from this node to all other unvisited nodes", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "# Combined score incorporating connectivity and distance with decay factor", "combined_score", "=", "(", "distance_to_next", "*", "alpha", "+", "connectivity_score", "*", "beta", ")", "/", "(", "1", "+", "gamma", "*", "distance_to_next", ")", "if", "combined_score", "<", "best_score", ":", "best_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 30.779938205325543}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "visited_nodes", "=", "set", "(", "range", "(", "len", "(", "distance_matrix", ")", ")", ")", "-", "unvisited_nodes", "if", "unvisited_nodes", ":", "avg_distance_to_visited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "visited_node", "]", "for", "node", "in", "unvisited_nodes", "for", "visited_node", "in", "visited_nodes", ")", "/", "len", "(", "visited_nodes", ")", "if", "visited_nodes", "else", "1", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Scoring factor balancing direct distance and proximity to visited nodes", "scoring_factor", "=", "(", "0.6", "*", "direct_distance", ")", "+", "(", "0.4", "*", "distance_to_destination", ")", "+", "(", "0.5", "*", "avg_distance_to_visited", ")", "if", "scoring_factor", "<", "min_cost", ":", "min_cost", "=", "scoring_factor", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.6490879527083395}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "urgency_factor", "=", "2.0", "# Weight for urgency influence", "penalty_factor", "=", "0.5", "# Weight for remaining unvisited nodes influence", "remaining_nodes_count", "=", "len", "(", "unvisited_nodes", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "remaining_nodes_count", "if", "remaining_nodes_count", ">", "0", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "urgency_effect", "=", "urgency_factor", "*", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "avg_distance_to_destination", ")", "penalty_effect", "=", "penalty_factor", "*", "(", "remaining_nodes_count", "/", "(", "1", "+", "remaining_nodes_count", ")", ")", "score", "=", "direct_distance", "+", "urgency_effect", "+", "penalty_effect", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.80356546673329}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "diversity_weight", "=", "0.3", "# Weight for diversity based on uniqueness of unvisited nodes", "destination_weight", "=", "0.2", "# Weight for proximity to destination node", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Distance to the next node", "diversity_score", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "1", "+", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", ")", ")", "# Diversity based on remaining nodes", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Distance to the destination node", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "diversity_weight", "*", "diversity_score", "-", "destination_weight", "*", "distance_to_destination", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.331995111188165}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "potential_nodes", "=", "[", "]", "distances", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "neighbor_count", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "0.5", "*", "direct_distance", ")", "randomness_factor", "=", "random", ".", "uniform", "(", "0.5", ",", "1.5", ")", "score", "=", "(", "direct_distance", "/", "(", "neighbor_count", "+", "1", ")", ")", "*", "randomness_factor", "# Incorporate neighbor count and randomness", "potential_nodes", ".", "append", "(", "(", "node", ",", "score", ")", ")", "next_node", "=", "min", "(", "potential_nodes", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 15.471148597810263}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "max_savings", "=", "float", "(", "'-inf'", ")", "# Calculate the total remaining distance from the destination to all unvisited nodes", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "destination_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Savings are calculated as the reduction in future distance from the total remaining distance", "savings", "=", "total_remaining_distance", "-", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "direct_distance", ")", "if", "savings", ">", "max_savings", ":", "max_savings", "=", "savings", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "unvisited_nodes", "=", "list", "(", "unvisited_nodes", ")", "def", "heuristic_score", "(", "node", ")", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_nodes_count", "=", "len", "(", "unvisited_nodes", ")", "-", "1", "# Exclude the current node", "return", "distance_to_node", "*", "(", "1", "+", "remaining_nodes_count", "/", "len", "(", "distance_matrix", ")", ")", "optimal_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "heuristic_score", ")", "return", "optimal_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "influence_weight", "=", "2.0", "future_impact_weight", "=", "0.5", "total_distance_for_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "future_impact", "=", "(", "total_distance_for_unvisited", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "0.1", ")", "score", "=", "direct_distance", "+", "(", "influence_weight", "*", "(", "connectivity_score", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "0.1", ")", ")", ")", "-", "(", "future_impact_weight", "*", "future_impact", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.014600797071769}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance from current node", "future_connectivity_weight", "=", "0.4", "# Weight for maximizing connectivity to unvisited nodes", "penalty_factor_weight", "=", "0.2", "# Weight for penalizing outlier distances", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_connectivity", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", ">", "0", ")", "penalty_factor", "=", "max", "(", "0", ",", "direct_distance", "-", "(", "total_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", ")", ")", "score", "=", "-", "(", "direct_distance", "*", "direct_distance_weight", ")", "+", "(", "future_connectivity", "*", "future_connectivity_weight", ")", "-", "(", "penalty_factor", "*", "penalty_factor_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.315490431967753}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.4", "# Weight for connectivity to unvisited nodes", "average_distance_weight", "=", "0.2", "# Weight for average distance to unvisited nodes", "# Function to calculate average distance to unvisited nodes", "def", "calculate_average_distance", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Function to calculate connectivity score based on unvisited nodes", "def", "calculate_connectivity_score", "(", "node", ")", ":", "return", "len", "(", "[", "other", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "]", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance", "=", "calculate_average_distance", "(", "node", ")", "connectivity_score", "=", "calculate_connectivity_score", "(", "node", ")", "# Combined scoring mechanism factoring in penalties for less desirable paths", "score", "=", "(", "-", "direct_distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "-", "average_distance_weight", "*", "average_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.526271790227707}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "attraction_factor", "=", "1.3", "# Factor to enhance attraction towards the destination", "backtrack_penalty", "=", "0.5", "# Penalty for moving away from unvisited nodes", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "neighborhood_density_weight", "=", "0.4", "# Weight for proximity density of unvisited nodes", "future_path_penalty_weight", "=", "0.1", "# Penalty for potential future path lengths", "diversity_weight", "=", "0.1", "# Weight for the number of unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "neighborhood_density_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Attraction score towards the destination", "attraction_score", "=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1e-10", ")", "# Adding small value to avoid division by zero", "# Calculating future path penalty", "future_path_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "*", "backtrack_penalty", "# Combined score", "score", "=", "-", "direct_distance_weight", "*", "direct_distance", "+", "neighborhood_density_weight", "*", "neighborhood_density_score", "+", "attraction_factor", "*", "attraction_score", "-", "future_path_penalty", "diversity_score", "=", "len", "(", "unvisited_nodes", ")", "score", "+=", "diversity_weight", "*", "diversity_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 19.05145128773816}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Initialize parameters for simulated annealing", "initial_temperature", "=", "1000", "cooling_rate", "=", "0.995", "current_temperature", "=", "initial_temperature", "best_next_node", "=", "None", "best_cost", "=", "float", "(", "'inf'", ")", "# Iterate through unvisited nodes and evaluate options", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate the cost of visiting the next node", "future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", "if", "next_node", "!=", "node", ")", "total_cost", "=", "immediate_distance", "+", "future_cost", "# Accept the next node based on probability", "if", "total_cost", "<", "best_cost", ":", "best_cost", "=", "total_cost", "best_next_node", "=", "node", "else", ":", "# Probability of accepting a worse solution is based on temperature", "probability", "=", "np", ".", "exp", "(", "(", "best_cost", "-", "total_cost", ")", "/", "current_temperature", ")", "if", "random", ".", "random", "(", ")", "<", "probability", ":", "best_cost", "=", "total_cost", "best_next_node", "=", "node", "# Cool down the temperature", "current_temperature", "*=", "cooling_rate", "return", "best_next_node"], "code_perf": 25.986263137981517}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "detour_penalty", "=", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "**", "2", "score", "=", "direct_distance", "+", "0.7", "*", "detour_penalty", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.286124908792871}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate scores based on distance and connectivity", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "1e6", "]", ")", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined scoring mechanism", "score", "=", "distance_to_node", "+", "(", "1", "/", "(", "connectivity_score", "+", "1e-6", ")", ")", "*", "0.3", "+", "distance_to_destination", "*", "0.2", "scores", "[", "node", "]", "=", "score", "# Select the unvisited node with the minimum score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.220769184424113}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# This algorithm incorporates a hybrid approach that balances both minimum distance and maximum proximity to previously visited nodes,", "# along with a penalty for visiting nodes that lead to long traversal times to unvisited nodes.", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_to_previous", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "prev", "]", "for", "prev", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "prev", "<", "current_node", ")", "penalty", "=", "len", "(", "unvisited_nodes", ")", "*", "(", "minimum_distance", ":=", "min", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", ")", "if", "unvisited_nodes", "else", "0", "score", "=", "distance_to_next", "+", "proximity_to_previous", "+", "penalty", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 19.918178980837062}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "proximity_weight", "=", "0.5", "# Weighting factor for proximity influence", "clustering_factor", "=", "0.5", "# Weight for average distance impact", "cluster_proximity_scores", "=", "{", "}", "# Calculate proximity scores for all unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "proximity_score", "=", "(", "direct_distance", "+", "clustering_factor", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", ")", "*", "(", "1", "+", "proximity_weight", ")", "cluster_proximity_scores", "[", "node", "]", "=", "proximity_score", "# Select the node with the minimum proximity score", "for", "node", ",", "score", "in", "cluster_proximity_scores", ".", "items", "(", ")", ":", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.925023624569427}
{"code_tokens": ["from", "collections", "import", "deque", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Breadth-First Search setup", "queue", "=", "deque", "(", "[", "current_node", "]", ")", "depth_limit", "=", "3", "# Limit the depth of search", "visited", "=", "{", "current_node", "}", "while", "queue", ":", "current", "=", "queue", ".", "popleft", "(", ")", "for", "node", "in", "unvisited_nodes", ":", "if", "node", "not", "in", "visited", ":", "direct_distance", "=", "distance_matrix", "[", "current", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "direct_distance", "+", "distance_to_destination", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "visited", ".", "add", "(", "node", ")", "queue", ".", "append", "(", "node", ")", "# Explore further", "if", "len", "(", "visited", ")", ">=", "depth_limit", "+", "1", ":", "# Stop searching once max depth reached", "break", "return", "best_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "avg_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "current_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "current_distance", "+", "0.3", "*", "avg_distance_remaining", "+", "0.7", "*", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "current_distance", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.068193817164259}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "base_weight", "=", "0.5", "# Base weight for distance", "density_weight", "=", "0.3", "# Weight for the density of connections", "proximity_weight", "=", "0.2", "# Weight for proximity to destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Density score based on the number of connections to unvisited nodes", "density_score", "=", "len", "(", "[", "next", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", "]", ")", "# Proximity score based on distance to destination", "proximity_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Dynamic weight adjustment based on current node's distance to visited nodes ", "current_route_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "visited", "]", "for", "visited", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "dynamic_weight", "=", "base_weight", "/", "(", "1", "+", "current_route_distance", ")", "# Final score combining the different metrics", "score", "=", "-", "dynamic_weight", "*", "direct_distance", "+", "density_weight", "*", "density_score", "-", "proximity_weight", "*", "proximity_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.619222847702005}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "\"\"\"\n    This algorithm evaluates the next node based on a combination of direct distance, \n    the average distance to the remaining unvisited nodes, and a penalty for the total distance \n    to the destination to optimize both immediate and future path efficiency.\n    \"\"\"", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "# Calculate average distance to unvisited nodes", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Penalty for the total distance to the destination as an additional factor", "penalty_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combine metrics to compute a weighted score considering direct distance, average distance, and penalty", "weighted_score", "=", "distance", "+", "average_distance_to_unvisited", "+", "penalty_to_destination", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["import", "random", "import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "iterations", "=", "100", "best_node", "=", "None", "best_distance", "=", "float", "(", "'inf'", ")", "for", "_", "in", "range", "(", "iterations", ")", ":", "candidate_node", "=", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "total_distance", "=", "0", "# Calculate the distance from current to candidate", "total_distance", "+=", "distance_matrix", "[", "current_node", "]", "[", "candidate_node", "]", "# Include distances to other unvisited nodes", "remaining_nodes", "=", "unvisited_nodes", "-", "{", "candidate_node", "}", "for", "next_node", "in", "remaining_nodes", ":", "total_distance", "+=", "distance_matrix", "[", "candidate_node", "]", "[", "next_node", "]", "# Calculate cooling factor for accepting worse solutions", "cooling_factor", "=", "math", ".", "exp", "(", "-", "_", "/", "iterations", ")", "# Gradually decrease acceptance of worse solutions", "acceptance_threshold", "=", "best_distance", "*", "cooling_factor", "# Update best node if this candidate is better or meets acceptance threshold", "if", "total_distance", "<", "best_distance", "or", "(", "total_distance", ">", "best_distance", "and", "random", ".", "random", "(", ")", "<", "acceptance_threshold", ")", ":", "best_distance", "=", "total_distance", "best_node", "=", "candidate_node", "return", "best_node"], "code_perf": 25.855070920921968}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "sample_size", "=", "min", "(", "5", ",", "len", "(", "unvisited_nodes", ")", ")", "# Sample up to 5 unvisited nodes", "sampled_nodes", "=", "random", ".", "sample", "(", "unvisited_nodes", ",", "sample_size", ")", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "sampled_nodes", ":", "cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "cost", "<", "best_score", ":", "best_score", "=", "cost", "best_node", "=", "node", "return", "best_node"], "code_perf": 15.526103385516924}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to destination", "attractiveness_weight", "=", "0.4", "# Weight for local attractiveness", "penalty_weight", "=", "0.2", "# Weight for penalty of returning to close nodes", "# Calculate score for each unvisited node", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "surrounding_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "surrounding_average_distance", "=", "surrounding_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "# Introducing a penalty for nodes that are closer to the current node", "penalty", "=", "penalty_weight", "*", "(", "1", "/", "(", "direct_distance", "+", "0.001", ")", ")", "# Avoiding division by zero", "score", "=", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "attractiveness_weight", "*", "(", "surrounding_average_distance", "-", "direct_distance", ")", "-", "penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.77521588239425}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "decay_factor", "=", "0.9", "# Factor to decrease the weight of previous distances", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "connectivity_penalty", "=", "1", "if", "len", "(", "[", "node", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<", "10", "]", ")", "<", "1", "else", "0", "# Penalize if no nearby nodes", "distances", "=", "[", "(", "node", ",", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "for", "node", "in", "unvisited_nodes", "]", "# Apply decay based on the order of distances", "distances", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "# Sort by distance", "weighted_distances", "=", "[", "(", "node", ",", "distance", "*", "(", "decay_factor", "**", "i", ")", "+", "(", "total_distance_to_unvisited", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", ")", "+", "connectivity_penalty", ")", "for", "i", ",", "(", "node", ",", "distance", ")", "in", "enumerate", "(", "distances", ")", "]", "# Find the next node with the minimum weighted distance", "next_node", "=", "min", "(", "weighted_distances", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 28.187131555817025}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "from", "collections", "import", "defaultdict", "import", "numpy", "as", "np", "# Define a threshold distance to form clusters", "threshold_distance", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "# Create clusters of unvisited nodes", "clusters", "=", "defaultdict", "(", "list", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "<", "threshold_distance", ":", "clusters", "[", "current_node", "]", ".", "append", "(", "node", ")", "else", ":", "clusters", "[", "tuple", "(", "min", "(", "[", "(", "current_node", ",", "node", ")", ",", "(", "node", ",", "current_node", ")", "]", ",", "key", "=", "lambda", "x", ":", "distance_matrix", "[", "x", "[", "0", "]", "]", "[", "x", "[", "1", "]", "]", ")", ")", "]", ".", "append", "(", "node", ")", "# Find the nearest cluster", "nearest_cluster", "=", "min", "(", "clusters", ".", "keys", "(", ")", ",", "key", "=", "lambda", "cluster", ":", "np", ".", "mean", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "clusters", "[", "cluster", "]", "]", ")", ")", "# Select the closest node from the nearest cluster", "next_node", "=", "min", "(", "clusters", "[", "nearest_cluster", "]", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "min_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "variance_distance", "=", "sum", "(", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "-", "avg_distance", ")", "**", "2", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "neighbor", "!=", "node", ")", "distance_penalty", "=", "(", "direct_distance", "-", "min_distance", ")", "/", "(", "variance_distance", "+", "1e-7", ")", "# Avoid division by zero", "exploration_bonus", "=", "(", "1.0", "/", "(", "connectivity_score", "+", "1", ")", ")", "# Encourage less explored nodes", "score", "=", "direct_distance", "+", "distance_penalty", "-", "exploration_bonus", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "average_remaining_distance", "=", "total_remaining_distance", "/", "num_unvisited", "proximity_weight", "=", "0.7", "# Higher weight for favoring closer nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "proximity_weight", "*", "(", "average_remaining_distance", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "score", "=", "direct_distance", "+", "proximity_score", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.438127015117454}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.7", "# Weight for distance to unvisited node", "average_penalty_weight", "=", "0.3", "# Weight for average distance to unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_others", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "penalty", "=", "max", "(", "0", ",", "average_distance_to_others", "-", "direct_distance", ")", "# Penalty for greater distance", "score", "=", "direct_distance", "*", "distance_weight", "+", "penalty", "*", "average_penalty_weight", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.728431843286133}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate a score based on distance to the next node and a penalty for distance to destination", "score", "=", "direct_distance", "+", "0.5", "*", "distance_to_destination", "# Penalty factor can be adjusted", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "potential_nodes", "=", "[", "]", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "risk_adjustment", "=", "avg_distance", "-", "direct_distance", "score", "=", "direct_distance", "+", "max", "(", "0", ",", "risk_adjustment", ")", "potential_nodes", ".", "append", "(", "(", "node", ",", "score", ")", ")", "next_node", "=", "min", "(", "potential_nodes", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 16.41724603229302}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "adjusted_avg_distance", "=", "sum", "(", "(", "distance_matrix", "[", "node", "]", "[", "current_node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "/", "2", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "+", "adjusted_avg_distance", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.114130038370566}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate the isolation penalty for nodes that are less connected", "isolation_penalty", "=", "len", "(", "[", "nn", "for", "nn", "in", "unvisited_nodes", "if", "nn", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "nn", "]", "==", "np", ".", "inf", "]", ")", "# Attraction factor based on the number of remaining unvisited nodes", "attraction_factor", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Combine distance, isolation penalty, and attraction factor into the cost function", "scores", "[", "node", "]", "=", "distance_to_node", "+", "isolation_penalty", "*", "0.5", "-", "attraction_factor", "*", "0.2", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "urgency_weight", "=", "0.7", "# Weight emphasizing closeness to destination", "efficiency_weight", "=", "0.3", "# Weight for node efficiency based on density of unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Urgency score based on direct distance to the destination", "urgency_score", "=", "total_distance_to_destination", "-", "direct_distance", "# Efficiency score based on the number of unvisited nodes within a certain range", "local_density", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "10", ")", "# Assuming a threshold of 10", "efficiency_score", "=", "local_density", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "urgency_weight", "*", "urgency_score", ")", "+", "(", "efficiency_weight", "*", "efficiency_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "exploration_weight", "=", "0.5", "# Weight to explore nodes that lead to clusters", "direct_distance_weight", "=", "0.4", "# Weight for direct distance to next node", "penalty_weight", "=", "0.1", "# Weight for penalty based on distance covered", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "inter_node_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "exploration_factor", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "1", "+", "inter_node_distance", ")", "# New scoring mechanism", "score", "=", "(", "direct_distance_weight", "*", "(", "(", "direct_distance", "+", "total_distance_to_destination", ")", "/", "2", ")", ")", "+", "(", "exploration_weight", "*", "exploration_factor", ")", "-", "(", "penalty_weight", "*", "direct_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 34.51387836492811}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for immediate distance", "connectivity_weight", "=", "0.4", "# Weight for connectivity to unvisited nodes", "penalty_weight", "=", "0.2", "# Weight for penalizing longer selections", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average connectivity", "adaptability_factor", "=", "(", "1", "/", "(", "1", "+", "average_distance", ")", ")", "# Dynamic factor based on total distances", "score", "=", "adaptability_factor", "*", "(", "connectivity_weight", "*", "connectivity_score", "-", "distance_weight", "*", "direct_distance", "-", "penalty_weight", "*", "max", "(", "0", ",", "direct_distance", "-", "average_distance", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.417067917844795}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Weight factor that considers the distance to the destination", "weight_factor", "=", "1", "/", "(", "1", "+", "distance_to_destination", ")", "# Score calculation includes direct distance and a weighted distance to the destination", "score", "=", "direct_distance", "*", "(", "1", "-", "weight_factor", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.3618825942924815}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the direct distance from current node to destination node", "direct_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Calculate a centrality attractiveness score for unvisited nodes", "attractiveness_scores", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "attractiveness_scores", "[", "node", "]", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "]", ")", "# Time decay factor, based on the number of unvisited nodes", "time_decay_factor", "=", "np", ".", "log", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Logarithmic to limit the impact", "# Compute scores for unvisited nodes using a combined score with dynamic weights", "node_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "attractiveness", "=", "attractiveness_scores", "[", "node", "]", "*", "time_decay_factor", "# Total score: prioritizing direct distance and attractiveness", "score", "=", "(", "direct_distance", "*", "0.5", ")", "+", "(", "attractiveness", "*", "0.5", ")", "node_scores", "[", "node", "]", "=", "score", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 11.43564070330578}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "num_unvisited", "dynamic_weight", "=", "1", "/", "num_unvisited", "# Inverse of unvisited count to prioritize fewer nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "(", "dynamic_weight", "*", "direct_distance", ")", "+", "(", "1", "-", "dynamic_weight", ")", "*", "average_distance_to_unvisited", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "exploration_factor", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Average cost to unvisited nodes", "immediate_cost_weight", "=", "0.6", "# Weight for immediate travel cost", "future_reward_weight", "=", "0.4", "# Future potential rewards weight", "for", "node", "in", "unvisited_nodes", ":", "current_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "# Average distance to remaining nodes", "exploration_penalty", "=", "(", "current_distance", "-", "exploration_factor", ")", "**", "2", "if", "current_distance", ">", "exploration_factor", "else", "0", "# Penalty for higher than average immediate cost", "score", "=", "(", "-", "immediate_cost_weight", "*", "current_distance", ")", "+", "(", "future_reward_weight", "*", "future_distance", ")", "-", "exploration_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.368214238744789}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm ranks unvisited nodes by combining immediate distance with additional penalties for distant nodes, incorporating a sharp penalty for nodes further away from the destination, promoting a more directed exploration.}", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "for", "candidate", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate", "]", "distance_to_destination", "=", "distance_matrix", "[", "candidate", "]", "[", "destination_node", "]", "# Penalty for distance from the destination", "penalty_factor", "=", "2", "*", "distance_to_destination", "# Total score considering immediate distance and penalty for distance to destination", "score", "=", "immediate_distance", "+", "penalty_factor", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "candidate", "return", "best_next_node"], "code_perf": 8.80356546673329}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "neighbor_weight", "=", "0.4", "# Weight for neighboring nodes influence", "exploration_weight", "=", "0.2", "# Weight for unexplored density", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate neighbor influence score based on direct connections to unvisited nodes", "neighbor_score", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<", "float", "(", "'inf'", ")", "and", "neighbor", "in", "unvisited_nodes", ")", "# Exploration factor based on the density of nearby unvisited nodes", "exploration_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "5", ")", "# Short distance threshold for density", "# Calculate combined score", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "neighbor_weight", "*", "neighbor_score", "-", "exploration_weight", "*", "exploration_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "unvisited_nodes", "=", "list", "(", "unvisited_nodes", ")", "def", "reward", "(", "node", ")", ":", "# Reward for being closer to the destination", "return", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", "def", "penalty", "(", "node", ")", ":", "# Penalty for the distance from the current node", "return", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "score", "=", "reward", "(", "node", ")", "-", "penalty", "(", "node", ")", "# Combine reward and penalty", "scores", "[", "node", "]", "=", "score", "next_node", "=", "max", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.373133925713997}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the distances to all unvisited nodes", "distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Determine the minimum distance to any unvisited node", "min_distance", "=", "min", "(", "distances", ".", "values", "(", ")", ")", "# Calculate the total cost to the destination from the current node through each unvisited node", "total_costs", "=", "{", "node", ":", "distances", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Calculate the weighted score combining the nearest distance and the total cost", "weighted_scores", "=", "{", "node", ":", "(", "distances", "[", "node", "]", "/", "min_distance", ")", "+", "(", "total_costs", "[", "node", "]", "/", "sum", "(", "total_costs", ".", "values", "(", ")", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the next node that minimizes the weighted score", "next_node", "=", "min", "(", "weighted_scores", ",", "key", "=", "weighted_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.997950344625392}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "# Calculate the total estimated cost (actual distance + heuristic estimate to destination)", "actual_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "total_cost", "=", "actual_cost", "+", "heuristic_cost", "if", "total_cost", "<", "min_cost", ":", "min_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "opportunity_weight", "=", "0.3", "# Weight for opportunities based on unvisited nodes", "penalty_weight", "=", "0.2", "# Weight for penalty on lengthy detours", "# Function to calculate opportunity score based on clustering of unvisited nodes", "def", "calculate_opportunity_score", "(", "node", ")", ":", "opportunity_score", "=", "0", "reachable_nodes", "=", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "2", "*", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "return", "reachable_nodes", "# Function to calculate penalty for longer paths", "def", "calculate_penalty", "(", "node", ")", ":", "return", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "(", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "opportunity_score", "=", "calculate_opportunity_score", "(", "node", ")", "penalty", "=", "calculate_penalty", "(", "node", ")", "# Combined scoring mechanism", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "opportunity_weight", "*", "opportunity_score", "-", "penalty_weight", "*", "penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 26.617181522632087}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "# Dynamic weight adjustment based on the number of unvisited nodes", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "if", "num_unvisited", ">", "0", ":", "distance_weight", "=", "0.5", "/", "num_unvisited", "# Decreases weight with more unvisited nodes", "connectivity_weight", "=", "0.3", "*", "(", "num_unvisited", "**", "0.5", ")", "# Increases weight with more unvisited nodes", "diversity_weight", "=", "0.2", "# Fixed weight for diversity", "# Function to calculate connectivity score based on unvisited nodes", "def", "calculate_connectivity_score", "(", "node", ")", ":", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "return", "connectivity_score", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Function to assess visit frequency for score", "def", "calculate_visit_frequency_score", "(", "node", ")", ":", "return", "1", "/", "(", "1", "+", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", ")", "# Initialize visit counts for nodes if not present", "global", "node_visit_counts", "node_visit_counts", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "# Update visit counts at each call", "node_visit_counts", "[", "node", "]", "=", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", "+", "1", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "calculate_connectivity_score", "(", "node", ")", "diversity_score", "=", "calculate_visit_frequency_score", "(", "node", ")", "# Combined scoring mechanism with dynamic weight contributions", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "diversity_weight", "*", "diversity_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 13.299085352720414}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "+", "0.6", "*", "(", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "10", ")", ")", "# Adjusts weight based on remaining nodes", "exploration_weight", "=", "0.5", "# Encourages exploration of less connected nodes", "clustering_weight", "=", "0.1", "# Minimal influence from clustering", "# Calculate local connectivity score for unvisited nodes", "def", "calculate_connectivity_score", "(", "node", ")", ":", "return", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "5", ")", "# Example threshold", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "calculate_connectivity_score", "(", "node", ")", "# Combined scoring mechanism", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "exploration_weight", "*", "connectivity_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "future_cost_weight", "=", "0.4", "# Weight for estimated future cost", "centroid_weight", "=", "0.2", "# Weight based on centroid proximity", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Calculate the centroid of unvisited nodes", "centroid_x", ",", "centroid_y", "=", "0", ",", "0", "for", "node", "in", "unvisited_nodes", ":", "centroid_x", "+=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "centroid_y", "+=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "centroid_x", "/=", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "centroid_y", "/=", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "estimated_future_cost", "=", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "total_distance_to_destination", ")", "/", "2", "centroid_distance", "=", "(", "(", "centroid_x", "-", "direct_distance", ")", "**", "2", "+", "(", "centroid_y", "-", "estimated_future_cost", ")", "**", "2", ")", "**", "0.5", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "future_cost_weight", "*", "estimated_future_cost", ")", "+", "(", "centroid_weight", "*", "-", "centroid_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.850691757946828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm introduces a hybrid scoring system that combines distance minimization with a penalty for visiting ", "# nodes that are too close to the current node to avoid local clustering and prioritize global path optimization.}", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "proximity_penalty", "=", "1", "/", "(", "distance_to_next", "+", "1", ")", "# Penalizes very short distances to encourage broader spread", "score", "=", "distance_to_next", "+", "distance_to_destination", "+", "proximity_penalty", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.515061030411713}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "proximity_attractiveness_factor", "=", "0.4", "# Weight for proximity attractiveness", "max_distance_threshold", "=", "20", "# Distance threshold for proximity influence", "attractive_nodes", "=", "[", "node", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<=", "max_distance_threshold", "]", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", "# Avoid division by zero", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "attractiveness_effect", "=", "(", "len", "(", "attractive_nodes", ")", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", ")", "if", "attractive_nodes", "else", "0", "penalty_for_distance", "=", "1", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "# Penalty for being farther from destination", "score", "=", "direct_distance", "*", "(", "1", "-", "proximity_attractiveness_factor", "*", "attractiveness_effect", ")", "-", "(", "penalty_for_distance", "*", "100", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 16.85859442912065}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for distance to destination", "synergy_weight", "=", "0.5", "# Weight for synergy with other unvisited nodes", "total_synergy", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "node", "in", "unvisited_nodes", "for", "other_node", "in", "unvisited_nodes", "if", "node", "!=", "other_node", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Synergy score based on how closely this node connects to the rest of the unvisited nodes", "local_synergy", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "score", "=", "(", "local_synergy", "*", "synergy_weight", ")", "-", "(", "direct_distance", "*", "distance_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.81442622590815}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "node_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate the average distance to other unvisited nodes", "if", "len", "(", "unvisited_nodes", ")", ">", "1", ":", "avg_distance_to_others", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "else", ":", "avg_distance_to_others", "=", "0", "# Calculate a score combining direct distance and the average distance to others, encouraging nodes that are strategically positioned", "node_scores", "[", "node", "]", "=", "direct_distance", "*", "0.5", "+", "avg_distance_to_others", "*", "0.5", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 8.4323878079629}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Convert unvisited nodes to a numpy array for easier manipulation", "unvisited_nodes", "=", "np", ".", "array", "(", "list", "(", "unvisited_nodes", ")", ")", "# Calculate distances from the current node to all unvisited nodes", "distances", "=", "distance_matrix", "[", "current_node", ",", "unvisited_nodes", "]", "# Create clusters based on a distance threshold (define clusters as close nodes)", "clusters", "=", "{", "}", "threshold", "=", "np", ".", "mean", "(", "distances", ")", "# Use mean distance as a simple threshold", "for", "node", ",", "distance", "in", "zip", "(", "unvisited_nodes", ",", "distances", ")", ":", "if", "distance", "<=", "threshold", ":", "cluster_key", "=", "tuple", "(", "sorted", "(", "(", "current_node", ",", "node", ")", ")", ")", "# Use node pairs as keys for clusters", "if", "cluster_key", "not", "in", "clusters", ":", "clusters", "[", "cluster_key", "]", "=", "[", "]", "clusters", "[", "cluster_key", "]", ".", "append", "(", "node", ")", "# Find the cluster closest to the destination node", "best_cluster", "=", "None", "min_distance_to_destination", "=", "float", "(", "'inf'", ")", "for", "cluster", "in", "clusters", ".", "values", "(", ")", ":", "cluster_centroid", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "cluster", "]", ")", "if", "cluster_centroid", "<", "min_distance_to_destination", ":", "min_distance_to_destination", "=", "cluster_centroid", "best_cluster", "=", "cluster", "# Choose the next node as the one closest in the best cluster", "if", "best_cluster", "is", "not", "None", ":", "distances_to_best_cluster", "=", "distance_matrix", "[", "current_node", ",", "best_cluster", "]", "next_node", "=", "best_cluster", "[", "np", ".", "argmin", "(", "distances_to_best_cluster", ")", "]", "return", "next_node", "return", "None"], "code_perf": 13.177837928865518}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "diversity_factor", "=", "0.5", "# Factor to encourage exploration of less connected nodes", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "clustering_weight", "=", "0.4", "# Weight for clustering score", "loop_closure_weight", "=", "0.2", "# Weight for forming shorter loops", "cluster_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "cluster_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", ")", "cluster_scores", "[", "node", "]", "=", "cluster_score", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "clustering_score", "=", "cluster_scores", "[", "node", "]", "# Estimate potential loop closure score considering closeness to the destination", "loop_closure_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "clustering_weight", "*", "clustering_score", "+", "loop_closure_weight", "*", "loop_closure_score", "# Introduce randomness to diversify exploration", "if", "random", ".", "random", "(", ")", "<", "diversity_factor", ":", "score", "*=", "(", "1", "+", "random", ".", "uniform", "(", "-", "0.1", ",", "0.1", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 13.855043021386454}
{"code_tokens": ["# {This algorithm incorporates a diversity factor that encourages exploration of unvisited nodes by assigning higher scores to those that have not been recently visited, while also considering both proximity and a penalty for clustering around previously visited nodes.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "visit_history", "=", "[", "]", "# Keep track of recent visits", "recent_visit_limit", "=", "3", "# Limit for recent visits to encourage exploration", "# Create a list of recently visited nodes (if applicable)", "if", "len", "(", "visit_history", ")", ">=", "recent_visit_limit", ":", "visit_history", ".", "pop", "(", "0", ")", "visit_history", ".", "append", "(", "current_node", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_weight", "=", "1", "/", "(", "distance_to_node", "+", "1e-6", ")", "# Diversity factor based on recent visits; penalize nodes that are similar to recent ones", "diversity_penalty", "=", "sum", "(", "1", "for", "recent", "in", "visit_history", "if", "recent", "in", "unvisited_nodes", "and", "distance_matrix", "[", "current_node", "]", "[", "recent", "]", "<", "1.5", "*", "distance_to_node", ")", "# Scoring using distance weight, penalization for clustering around recent nodes", "score", "=", "distance_weight", "-", "(", "diversity_penalty", "*", "0.5", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Calculate average distance to destination and connectivity score", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "connectivity_scores", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "# Calculate the number of unvisited neighbors within a certain distance", "connectivity_scores", "[", "node", "]", "=", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<=", "5", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "connectivity_scores", "[", "node", "]", "# Calculate clustering coefficient (proportion of direct connections)", "clustering_coefficient", "=", "connectivity_score", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Score computed with the novel mechanism", "score", "=", "(", "direct_distance", "+", "0.5", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "-", "0.3", "*", "clustering_coefficient", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.450370583313572}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity to destination", "connectivity_weight", "=", "0.5", "# Weight for connectivity among unvisited nodes", "variance_penalty_factor", "=", "1.3", "# Penalty based on variance in distances of unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "distances_to_unvisited", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "variance", "=", "sum", "(", "(", "d", "-", "(", "sum", "(", "distances_to_unvisited", ")", "/", "len", "(", "distances_to_unvisited", ")", ")", ")", "**", "2", "for", "d", "in", "distances_to_unvisited", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "variance_penalty", "=", "variance_penalty_factor", "*", "variance", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "(", "(", "direct_distance", "+", "variance_penalty", ")", "+", "total_distance_to_destination", ")", "+", "(", "connectivity_weight", "*", "connectivity_score", ")", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.292595875030693}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_value", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for distance", "cluster_weight", "=", "0.25", "# Weight for cluster potential savings", "trend_decay_weight", "=", "0.15", "# Weight for trend influence decay", "competition_weight", "=", "0.1", "# Weight for maximizing competitive selection", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Dummy trend data simulating which nodes have been visited more frequently (for demonstration)", "visit_trend", "=", "{", "node", ":", "(", "1", "/", "(", "i", "+", "1", ")", ")", "for", "i", ",", "node", "in", "enumerate", "(", "unvisited_nodes", ")", "}", "# Simulated decay factor", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "adjusted_distance", "=", "total_distance_to_destination", "/", "(", "1", "+", "direct_distance", ")", "# Penalty for longer distances", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Influence of the trend factor with decay", "trend_factor", "=", "visit_trend", "[", "node", "]", "score", "=", "(", "distance_weight", "*", "-", "direct_distance", ")", "+", "(", "cluster_weight", "*", "cluster_average_distance", ")", "-", "(", "trend_decay_weight", "*", "trend_factor", ")", "+", "(", "competition_weight", "*", "(", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", ")", "if", "score", ">", "max_value", ":", "max_value", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.199879410127663}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate average distance to unvisited nodes", "avg_distance", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "# Calculate the heuristic factor based on the remaining unvisited nodes", "urgency_factor", "=", "(", "1", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", ")", "**", "2", "# Diminishing returns as unvisited nodes decrease", "# Compute scores for unvisited nodes using a combined score with dynamic weights", "node_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Incorporate an urgency factor to prioritize closer nodes based on remaining unvisited count", "score", "=", "(", "direct_distance", "*", "0.4", ")", "+", "(", "avg_distance", "*", "0.4", ")", "+", "(", "distance_to_destination", "*", "0.2", "*", "urgency_factor", ")", "node_scores", "[", "node", "]", "=", "score", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.956084659400997}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance", "cluster_weight", "=", "0.2", "# Weight for cluster potential savings", "detour_penalty_weight", "=", "0.1", "# Weight for detour penalties", "adaptability_weight", "=", "0.2", "# Weight for adaptively changing strategy", "# Calculate distance to the nearest unvisited node", "nearest_unvisited_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Calculate an adaptability factor based on distance to the nearest unvisited node", "adaptability_factor", "=", "(", "nearest_unvisited_distance", "/", "(", "direct_distance", "or", "1", ")", ")", "# Score calculation integrating the adaptability factor", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "cluster_weight", "*", "cluster_average_distance", ")", "-", "(", "detour_penalty_weight", "*", "max", "(", "0", ",", "direct_distance", "-", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", ")", ")", "+", "(", "adaptability_weight", "*", "adaptability_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.808028390678503}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_distance_weight", "=", "0.7", "# Weight for immediate distance to next node", "risk_penalty_weight", "=", "0.3", "# Weight for the penalty based on future unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_penalty", "=", "sum", "(", "max", "(", "0", ",", "distance_matrix", "[", "node", "]", "[", "next_next_node", "]", "-", "distance_matrix", "[", "current_node", "]", "[", "next_next_node", "]", ")", "for", "next_next_node", "in", "unvisited_nodes", "if", "next_next_node", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "cost_score", "=", "(", "immediate_distance", "+", "total_distance_to_destination", ")", "*", "immediate_distance_weight", "+", "(", "future_penalty", "*", "risk_penalty_weight", ")", "if", "cost_score", "<", "min_cost", ":", "min_cost", "=", "cost_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.158106231207373}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for distance", "diversity_weight", "=", "0.4", "# Weight for diversity of unvisited connections", "locality_weight", "=", "0.1", "# Weight for proximity to current node", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "diversity_score", "=", "len", "(", "[", "next", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", "]", ")", "# Count of direct connections to unvisited nodes", "locality_score", "=", "-", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Penalty for distance from current node (more negative is better)", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "diversity_weight", "*", "diversity_score", "+", "locality_weight", "*", "locality_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "remaining_distance_sum", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "# Penalty based on total remaining distance to unvisited nodes", "penalty", "=", "remaining_distance_sum", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Combined score emphasizing proximity and total remaining travel cost", "score", "=", "distance_to_next", "+", "distance_to_destination", "+", "penalty", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "random_factor", "=", "random", ".", "uniform", "(", "0.1", ",", "1.0", ")", "min_distance_to_unvisited", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "max_distance_to_destination", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "(", "max_distance_to_destination", "-", "distance_to_next", ")", "+", "(", "0.1", "*", "random_factor", "*", "min_distance_to_unvisited", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "detour_weight", "=", "0.5", "# Weight to consider detours", "future_connection_weight", "=", "0.5", "# Weight for future potential connections", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "detour_score", "=", "detour_weight", "*", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", ")", "# Total distance to unvisited from current node", "future_connection_score", "=", "future_connection_weight", "*", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "# Average distance to remaining nodes", "score", "=", "-", "direct_distance", "+", "detour_score", "+", "future_connection_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.60560879363008}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "average_remaining_distance", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "total_distance", "=", "np", ".", "sum", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "candidate", "]", "for", "candidate", "in", "unvisited_nodes", "]", ")", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "for", "candidate", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate", "]", "penalty", "=", "(", "average_remaining_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "*", "(", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "# Dynamic penalty", "score", "=", "immediate_distance", "+", "penalty", "+", "(", "total_distance", "/", "len", "(", "unvisited_nodes", ")", ")", "# Incorporating average distance of candidates", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "candidate", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the minimum distance and a desirability factor", "min_score", "=", "float", "(", "'inf'", ")", "next_nodes", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Desirability factor based on potential closeness to other unvisited nodes", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "# New scoring mechanism", "score", "=", "distance", "-", "(", "connectivity_score", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_nodes", "=", "[", "node", "]", "elif", "score", "==", "min_score", ":", "next_nodes", ".", "append", "(", "node", ")", "# Randomly select among the nodes with the best score", "if", "next_nodes", ":", "return", "random", ".", "choice", "(", "next_nodes", ")", "return", "None"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "# Calculate the average distance to the destination for the unvisited nodes", "avg_cluster_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "avg_visited_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Attractive score considering visited proximity and distance penalty", "score", "=", "direct_distance", "+", "0.7", "*", "avg_cluster_distance", "-", "0.3", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "0.5", "*", "avg_visited_distance", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.583058552198324}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_penalty", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "min_distance_to_unvisited", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "float", "(", "'inf'", ")", "score", "=", "(", "1.5", "*", "(", "avg_distance_to_destination", "-", "direct_distance", ")", "+", "0.5", "*", "(", "proximity_penalty", "-", "direct_distance", ")", "+", "0.2", "*", "min_distance_to_unvisited", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_current", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "1", "/", "distance_to_current", ")", "+", "(", "1", "/", "distance_to_destination", ")", "# Higher score for shorter distances", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.572785716456387}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "proximity_weight", "=", "0.5", "# Weight for proximity to unvisited nodes", "unvisited_penalty_weight", "=", "0.1", "# Weight for unvisited node distance", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "total_proximity", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_proximity", "=", "total_proximity", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "unvisited_penalty", "=", "max", "(", "0", ",", "total_proximity", "-", "direct_distance", ")", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "proximity_weight", "*", "-", "average_proximity", ")", "-", "(", "unvisited_penalty_weight", "*", "unvisited_penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "base_distance_weight", "=", "0.5", "# Base weight for direct distance", "remaining_nodes_weight", "=", "0.4", "# Weight accounting for the number of unvisited nodes", "return_penalty_weight", "=", "0.1", "# Penalty for returning to already visited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_nodes_count", "=", "len", "(", "unvisited_nodes", ")", "-", "1", "# Exclude the current node", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "remaining_nodes_count", "or", "1", ")", "# Score calculation", "score", "=", "-", "base_distance_weight", "*", "direct_distance", "+", "remaining_nodes_weight", "*", "average_distance_to_unvisited", "-", "return_penalty_weight", "*", "(", "direct_distance", "/", "(", "remaining_nodes_count", "+", "1", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.37812508066521}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "angle_weight", "=", "0.5", "# Weight for direction towards destination", "active_path_weight", "=", "0.3", "# Weight for active path consideration", "proximity_weight", "=", "0.2", "# Weight for proximity to unvisited nodes", "total_active_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "prev_node", "]", "for", "prev_node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "angle_to_destination", "=", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "direct_distance", ")", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", "active_path_contribution", "=", "total_active_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Calculating the weighted score", "score", "=", "(", "angle_weight", "*", "angle_to_destination", "+", "active_path_weight", "*", "active_path_contribution", "-", "proximity_weight", "*", "direct_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.478129314968031}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "cluster_penalty_weight", "=", "0.5", "# Weight for cumulative clustering penalty", "decay_factor", "=", "0.2", "# Decay factor for distant unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Apply decay factor to penalize distant nodes", "decay_penalty", "=", "decay_factor", "*", "(", "direct_distance", "/", "(", "total_distance_to_destination", "+", "1", ")", ")", "score", "=", "(", "direct_distance", "*", "distance_weight", ")", "-", "(", "cluster_average_distance", "*", "cluster_penalty_weight", ")", "-", "decay_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 36.832071009237}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "minimal_future_cost", "=", "float", "(", "'inf'", ")", "# Calculate remaining cost to visit unvisited nodes from the current node", "remaining_cost", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", "if", "next_node", "!=", "node", ")", "# Score combines immediate distance and future cost", "score", "=", "immediate_distance", "+", "future_cost", "+", "(", "remaining_cost", "-", "future_cost", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "score", "<", "minimal_future_cost", ":", "minimal_future_cost", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 20.720253103831816}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "candidates", "=", "[", "]", "min_increase", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "increase", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "if", "increase", "<", "min_increase", ":", "min_increase", "=", "increase", "candidates", "=", "[", "node", "]", "elif", "increase", "==", "min_increase", ":", "candidates", ".", "append", "(", "node", ")", "if", "candidates", ":", "return", "random", ".", "choice", "(", "candidates", ")", "return", "None"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "def", "heuristic", "(", "node", ")", ":", "return", "min", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Increased importance on direct distance", "potential_weight", "=", "0.5", "# Increased focus on minimizing future distance", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "potential_score", "=", "heuristic", "(", "node", ")", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "potential_weight", "*", "potential_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["# {This algorithm enhances the score calculation by incorporating a heuristic that prioritizes nodes that minimize the total distance to the starting point, while also considering connectivity and a penalty for longer distances to encourage exploring closer nodes first.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_start", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "connectivity_score", "=", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "10", "]", ")", "# Connectivity within a threshold", "score", "=", "distance_to_next", "+", "(", "total_distance_to_start", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", ")", "-", "connectivity_score", "# Lower score is better", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.442090034224456}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Degree of connectivity: number of edges left to unvisited nodes", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "# Reward for proximity to destination", "proximity_score", "=", "1", "/", "(", "distance_to_destination", "+", "1", ")", "# Dynamic penalty for longer paths", "penalty_factor", "=", "1", "/", "(", "1", "+", "distance_to_next", ")", "# Combined score with risk-reward mechanism", "score", "=", "(", "proximity_score", "*", "connectivity_score", ")", "-", "(", "penalty_factor", "*", "distance_to_next", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 13.181442467294477}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "weights", "=", "[", "]", "total_weight", "=", "0", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "weight", "=", "(", "1", "/", "distance_to_node", ")", "*", "(", "1", "/", "(", "distance_to_destination", "+", "1", ")", ")", "if", "distance_to_node", ">", "0", "else", "float", "(", "'inf'", ")", "weights", ".", "append", "(", "(", "node", ",", "weight", ")", ")", "total_weight", "+=", "weight", "if", "total_weight", "==", "0", ":", "return", "None", "random_weight", "=", "random", ".", "uniform", "(", "0", ",", "total_weight", ")", "cumulative_weight", "=", "0", "for", "node", ",", "weight", "in", "weights", ":", "cumulative_weight", "+=", "weight", "if", "cumulative_weight", ">=", "random_weight", ":", "return", "node", "return", "None"], "code_perf": 19.193909561855627}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "cluster_weight", "=", "0.4", "# Weight for proximity to clusters of unvisited nodes", "future_savings_weight", "=", "0.2", "# Weight for potential future savings", "risk_factor_weight", "=", "0.1", "# Weight for longer paths' risk assessment", "# Function to calculate cluster score based on unvisited nodes", "def", "calculate_cluster_score", "(", "node", ")", ":", "cluster_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "cluster_score", "+=", "distance_matrix", "[", "node", "]", "[", "other", "]", "return", "cluster_score", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Function to calculate risk score for longer paths", "def", "calculate_risk_score", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_score", "=", "calculate_cluster_score", "(", "node", ")", "risk_score", "=", "calculate_risk_score", "(", "node", ")", "# Combined scoring mechanism with risk factor", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "cluster_weight", "*", "cluster_score", "+", "future_savings_weight", "*", "(", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "-", "risk_factor_weight", "*", "risk_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.349561845612291}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "risk_penalty_factor", "=", "0.7", "# Factor to penalize longer routes based on risk", "if", "unvisited_nodes", ":", "average_distance_weight", "=", "0.3", "# Weight for average distance to unvisited nodes", "surrounding_favorability_weight", "=", "0.5", "# Weight for favorability of surrounding nodes", "destination_proximity_weight", "=", "0.2", "# Weight for proximity to the destination", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate favorability based on distances to surrounding nodes", "surrounding_favorability_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "# Estimate score for proximity to destination", "destination_proximity_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score with risk penalty for longer routes", "score", "=", "-", "average_distance_weight", "*", "average_distance", "+", "surrounding_favorability_weight", "*", "surrounding_favorability_score", "-", "risk_penalty_factor", "*", "direct_distance", "+", "destination_proximity_weight", "*", "destination_proximity_score", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.257454004991739}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "connectivity_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "# Higher score for well-connected nodes", "exploration_factor", "=", "1", "/", "(", "1", "+", "distance_to_destination", ")", "# Encourages exploration of farther nodes", "# Combine scores with a weighted approach", "scores", "[", "node", "]", "=", "(", "distance_to_node", "*", "exploration_factor", ")", "/", "(", "1", "+", "connectivity_score", ")", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 8.347794353578557}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "centrality_scores", "=", "{", "node", ":", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "centrality_weight", "=", "centrality_scores", "[", "node", "]", "score", "=", "direct_distance", "/", "(", "1", "+", "centrality_weight", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.347110257241141}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance from current node", "future_cost_weight", "=", "0.4", "# Weight for future cost estimation", "destination_proximity_weight", "=", "0.2", "# Weight for proximity to destination", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "average_future_cost", "=", "future_cost", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "1", ")", "proximity_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "direct_distance", "*", "direct_distance_weight", ")", "+", "(", "average_future_cost", "*", "future_cost_weight", ")", "+", "(", "proximity_to_destination", "*", "destination_proximity_weight", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.908927496428035}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.5", "# Weight for direct distance", "cluster_proximity_weight", "=", "0.3", "# Weight for proximity to unvisited cluster", "historical_efficiency_weight", "=", "0.2", "# Weight for historical travel efficiency", "def", "calculate_cluster_proximity", "(", "node", ")", ":", "cluster_proximity", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "return", "-", "cluster_proximity", "# Closer nodes should have a better score", "def", "calculate_historical_efficiency", "(", "node", ")", ":", "efficiency_score", "=", "sum", "(", "distance_matrix", "[", "prev", "]", "[", "node", "]", "for", "prev", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "prev", "!=", "node", "and", "prev", "not", "in", "unvisited_nodes", ")", "return", "efficiency_score", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "0", "else", "1", "# Prevent division by zero", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_proximity", "=", "calculate_cluster_proximity", "(", "node", ")", "historical_efficiency", "=", "calculate_historical_efficiency", "(", "node", ")", "# Combined scoring mechanism", "score", "=", "(", "-", "direct_distance_weight", "*", "direct_distance", "+", "cluster_proximity_weight", "*", "cluster_proximity", "+", "historical_efficiency_weight", "*", "historical_efficiency", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.733620136976825}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "visit_history_factor", "=", "0.3", "# Factor to encourage visiting less frequently visited nodes", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.3", "# Weight for direct distance", "potential_pathway_weight", "=", "0.4", "# Weight for promising future paths", "destination_alignment_weight", "=", "0.2", "# Weight for alignment towards destination", "visit_history_weight", "=", "0.1", "# Weight for encouraging less visited nodes", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate potential future pathways based on unvisited connections", "potential_pathway_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "unvisited_count", "or", "1", ")", "# Estimate score for alignment towards the final destination", "destination_alignment_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Score based on visit history (inverse of node visit frequency)", "visit_history_score", "=", "1", "/", "(", "1", "+", "node", ")", "# Assuming node index reflects visit frequency", "# Combined score incorporating visit history", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "potential_pathway_weight", "*", "potential_pathway_score", "+", "destination_alignment_weight", "*", "destination_alignment_score", "+", "visit_history_weight", "*", "visit_history_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.209846177750683}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "diversity_weight", "=", "0.3", "# Weight for diversity consideration", "proximity_weight", "=", "0.7", "# Weight for proximity influence", "proximity_threshold", "=", "10", "# Distance threshold for proximity influence", "# Calculate total diversity score based on distances to unvisited nodes", "total_diversity", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_diversity", "=", "total_diversity", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_effect", "=", "sum", "(", "1", "for", "unvisited", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "<=", "proximity_threshold", ")", "normalized_proximity_effect", "=", "proximity_effect", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Normalize the influence", "# New score incorporates both proximity and diversity", "score", "=", "(", "proximity_weight", "*", "direct_distance", ")", "+", "(", "diversity_weight", "*", "(", "avg_diversity", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", ")", "+", "(", "0.5", "*", "normalized_proximity_effect", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.498918432044007}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "connectivity_weight", "=", "0.5", "# Weight for connectivity to unvisited nodes", "proximity_weight", "=", "0.3", "# Weight for proximity to destination", "randomness_factor", "=", "0.2", "# Weight for random exploration", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "randomness", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "*", "randomness_factor", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", ")", "+", "(", "connectivity_score", "*", "connectivity_weight", ")", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "randomness", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.135633924927833}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity to destination", "clustering_penalty_weight", "=", "0.5", "# Weight for penalizing proximity to other unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "clustering_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "1", ")", "score", "=", "(", "direct_distance", "+", "clustering_penalty", "*", "clustering_penalty_weight", ")", "-", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.939361797252845}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "from", "collections", "import", "defaultdict", "import", "math", "def", "calculate_centrality", "(", "unvisited", ",", "distance_matrix", ")", ":", "centrality_scores", "=", "{", "}", "for", "node", "in", "unvisited", ":", "centrality_scores", "[", "node", "]", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "for", "neighbor", "in", "unvisited", "if", "neighbor", "!=", "node", ")", "return", "centrality_scores", "def", "calculate_weighted_score", "(", "node", ",", "current_node", ",", "destination_node", ",", "centrality_scores", ",", "distance_matrix", ")", ":", "distance_to_current", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "centrality_score", "=", "centrality_scores", "[", "node", "]", "decay_factor", "=", "math", ".", "exp", "(", "-", "distance_to_current", "/", "10", ")", "# Decay effect for larger distances", "score", "=", "(", "0.4", "*", "(", "1", "/", "(", "distance_to_current", "+", "1", ")", ")", "+", "0.4", "*", "(", "1", "/", "(", "distance_to_destination", "+", "1", ")", ")", "+", "0.2", "*", "(", "1", "/", "(", "centrality_score", "+", "1", ")", ")", ")", "*", "decay_factor", "return", "score", "centrality_scores", "=", "calculate_centrality", "(", "unvisited_nodes", ",", "distance_matrix", ")", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "score", "=", "calculate_weighted_score", "(", "node", ",", "current_node", ",", "destination_node", ",", "centrality_scores", ",", "distance_matrix", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.679335441708403}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "connection_weight", "=", "0.6", "# Weight for connection factor", "distance_weight", "=", "0.4", "# Weight for distance factor", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connection_count", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "future_potential_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "# Average distance forecast", "# Calculate strategic score based on distance, connections, and future potential", "score", "=", "(", "connection_weight", "*", "connection_count", ")", "-", "(", "distance_weight", "*", "direct_distance", ")", "+", "(", "0.2", "*", "future_potential_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.424671222018382}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.3", "# Weight for direct distance", "cluster_weight", "=", "0.3", "# Weight for proximity to clusters of unvisited nodes", "future_savings_weight", "=", "0.3", "# Weight for potential future savings", "backtrack_penalty_weight", "=", "0.1", "# Weight for backtracking penalty", "# Function to calculate cluster score based on unvisited nodes", "def", "calculate_cluster_score", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Function to calculate backtracking penalty for longer paths", "def", "calculate_backtrack_penalty", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "current", "]", "for", "current", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_score", "=", "calculate_cluster_score", "(", "node", ")", "backtrack_penalty", "=", "calculate_backtrack_penalty", "(", "node", ")", "# Combined scoring mechanism with adjusted weights", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "cluster_weight", "*", "cluster_score", "+", "future_savings_weight", "*", "(", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "-", "backtrack_penalty_weight", "*", "backtrack_penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.381376842846391}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "cluster_weight", "=", "0.5", "# Weight for favoring clusters of unvisited nodes", "penalty_factor", "=", "len", "(", "unvisited_nodes", ")", "*", "0.2", "# Penalty for remaining unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_score", "=", "-", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "# Average distance to unvisited nodes", "score", "=", "(", "direct_distance", "+", "average_distance", ")", "+", "penalty_factor", "+", "cluster_score", "*", "cluster_weight", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.424671222018382}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "urgency_weight", "=", "0.6", "# Weight for urgency based on proximity", "distance_weight", "=", "0.4", "# Weight for distance to the destination", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "urgency_factor", "=", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "**", "0.5", ")", "# Higher urgency with fewer unvisited nodes", "decay_factor", "=", "0.1", "*", "(", "1", "/", "(", "1", "+", "direct_distance", ")", ")", "# Decay that reduces the score based on distance", "score", "=", "(", "urgency_weight", "*", "urgency_factor", ")", "-", "(", "distance_weight", "*", "direct_distance", ")", "+", "decay_factor", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.742116258779937}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "connectivity_scores", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "for", "node", "in", "unvisited_nodes", "}", "avg_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_dest", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "connectivity_penalty", "=", "connectivity_scores", "[", "node", "]", "/", "len", "(", "unvisited_nodes", ")", "# New scoring function with additional bonuses and penalties", "score", "=", "direct_distance", "+", "0.5", "*", "(", "avg_distance_remaining", "-", "distance_to_dest", ")", "+", "0.3", "*", "connectivity_penalty", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.692252424350467}
{"code_tokens": ["# {This algorithm aims to integrate a combination of nearest neighbor heuristic and edge weight minimization by calculating the total cost for each potential next move, factoring in both direct distance and the cumulative cost of reaching subsequent unvisited nodes.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_cost_to_end", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Compute overall cost as a combination of direct distance and future costs", "overall_cost", "=", "distance_to_next", "+", "total_cost_to_end", "if", "overall_cost", "<", "min_cost", ":", "min_cost", "=", "overall_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 21.813812563750965}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "score", "=", "direct_distance", "+", "0.5", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "0.3", "*", "cluster_penalty", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.692252424350467}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "unvisited_nodes", "=", "list", "(", "unvisited_nodes", ")", "distances_to_unvisited", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "# Calculate average distances to form clusters", "average_distance", "=", "np", ".", "mean", "(", "distances_to_unvisited", ")", "clusters", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "<=", "average_distance", ":", "clusters", ".", "setdefault", "(", "'near'", ",", "[", "]", ")", ".", "append", "(", "node", ")", "else", ":", "clusters", ".", "setdefault", "(", "'far'", ",", "[", "]", ")", ".", "append", "(", "node", ")", "# Select the centroid of the nearest cluster or fallback to the nearest node if no nearby cluster", "if", "'near'", "in", "clusters", "and", "clusters", "[", "'near'", "]", ":", "next_node", "=", "min", "(", "clusters", "[", "'near'", "]", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "else", ":", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "visit_counts", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "# Track how many times nodes have been considered", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "visit_penalty", "=", "visit_counts", "[", "node", "]", "*", "(", "0.3", "/", "(", "visit_counts", "[", "node", "]", "+", "1", ")", ")", "# Diminishing penalty", "# Dynamic exploration factor encouraging visits to further nodes", "exploration_factor", "=", "(", "1", "/", "(", "1", "+", "direct_distance", ")", ")", "*", "2", "# Favor distant nodes", "score", "=", "direct_distance", "+", "(", "avg_distance_to_destination", "-", "distance_to_destination", ")", "+", "visit_penalty", "-", "exploration_factor", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "# Increment visit count for the next node", "if", "next_node", ":", "visit_counts", "[", "next_node", "]", "+=", "1", "return", "next_node"], "code_perf": 6.419367750456381}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "decay_factor", "=", "0.9", "# Factor to diminish the influence of distance over time", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.3", "# Weight for connectivity to unvisited nodes", "loop_closure_weight", "=", "0.2", "# Weight for forming shorter loops", "future_path_weight", "=", "0.1", "# Weight for potential future path lengths", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Estimate potential loop closure score with distance to the destination", "loop_closure_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combined score considering the decay of distance impact, potential future paths, and loop closure", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "loop_closure_weight", "*", "loop_closure_score", "*", "decay_factor", "+", "future_path_weight", "*", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.36795913227916}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Introduce a novelty factor to diversify the exploration", "novelty_factor", "=", "random", ".", "uniform", "(", "1.0", ",", "5.0", ")", "# Calculate scores for each unvisited node", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combine distances with the novelty factor and a penalty for less connected nodes", "scores", "[", "node", "]", "=", "(", "distance_to_node", "+", "distance_to_destination", ")", "/", "novelty_factor", "+", "(", "1", "/", "len", "(", "unvisited_nodes", ")", ")", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "total_distance_from_current_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Cost-effectiveness ratio", "cost_effectiveness_ratio", "=", "distance_to_next", "/", "(", "total_distance_to_unvisited", "+", "1e-6", ")", "# epsilon to avoid division by zero", "# New score incorporating cost-effectiveness and penalties", "score", "=", "cost_effectiveness_ratio", "+", "(", "0.5", "*", "total_distance_from_current_to_destination", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.571349423372209}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "proximity_score", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "connectivity_penalty", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "proximity_score", "[", "node", "]", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "other", "in", "unvisited_nodes", ":", "if", "node", "!=", "other", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<=", "5", ":", "connectivity_penalty", "[", "node", "]", "+=", "1", "# Count closely connected unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "proximity_score", "[", "node", "]", "penalty", "=", "0.2", "*", "connectivity_penalty", "[", "node", "]", "score", "=", "direct_distance", "+", "penalty", "-", "0.5", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate the average distance to unvisited nodes", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Calculate density for unvisited nodes based on proximity to other unvisited nodes", "density_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "density_scores", "[", "node", "]", "=", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "average_distance", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "average_distance", ")", "# Introduce a traversal penalty based on the number of connections", "traversal_penalty", "=", "max", "(", "0", ",", "len", "(", "unvisited_nodes", ")", "-", "density_scores", "[", "node", "]", ")", "# Calculate the new heuristic score", "heuristic_score", "=", "direct_distance", "+", "distance_penalty", "+", "traversal_penalty", "-", "density_scores", "[", "node", "]", "if", "heuristic_score", "<", "best_score", ":", "best_score", "=", "heuristic_score", "best_node", "=", "node", "return", "best_node"], "code_perf": 23.780952717432456}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_penalty_weight", "=", "0.5", "# Weight for distance traveled", "connectivity_reward_weight", "=", "0.3", "# Weight for connecting to other nodes", "urgency_weight", "=", "0.2", "# Weight for closeness to destination", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "10", ")", "# Reward for close connections", "urgency_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "-", "(", "direct_distance", "*", "distance_penalty_weight", ")", "+", "(", "connectivity_score", "*", "connectivity_reward_weight", ")", "-", "(", "urgency_score", "*", "urgency_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.331995111188165}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_remaining", "=", "total_distance_to_remaining", "/", "len", "(", "unvisited_nodes", ")", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "direct_influence_weight", "=", "0.5", "detour_penalty_weight", "=", "0.3", "opportunity_score_weight", "=", "0.2", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "detour_penalty", "=", "detour_penalty_weight", "*", "max", "(", "0", ",", "direct_distance", "-", "average_distance_to_remaining", ")", "opportunity_score", "=", "opportunity_score_weight", "*", "(", "unvisited_count", "-", "1", ")", "score", "=", "(", "direct_influence_weight", "*", "direct_distance", ")", "+", "detour_penalty", "-", "opportunity_score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "distance_decay_factor", "=", "0.2", "# Factor to reduce score based on distance", "connectivity_reward_factor", "=", "0.5", "# Reward for visiting highly connected nodes", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.4", "# Weight for connectivity of the node", "alignment_weight", "=", "0.2", "# Weight for alignment towards destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate connectivity score based on unvisited connections", "connectivity_score", "=", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", ")", "# Estimate score for alignment towards the final destination", "destination_alignment_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate total score with decay for distance and reward for connectivity", "score", "=", "(", "connectivity_reward_factor", "*", "connectivity_score", "-", "distance_weight", "*", "(", "direct_distance", "**", "(", "1", "+", "distance_decay_factor", ")", ")", "+", "alignment_weight", "*", "destination_alignment_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.458400930166233}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "historical_penalty_weight", "=", "0.6", "# Weight for the historical penalty of visited nodes", "proximity_weight", "=", "0.2", "# Weight for proximity to destination", "random_factor_weight", "=", "0.2", "# Weight for introducing randomness", "total_visited_penalty", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "node", "not", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "historical_penalty", "=", "historical_penalty_weight", "*", "(", "total_visited_penalty", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "# Introducing randomness in score calculation", "random_score", "=", "random_factor_weight", "*", "(", "random", ".", "uniform", "(", "0", ",", "1", ")", "-", "0.5", ")", "# Random component [-0.1, 0.1]", "score", "=", "direct_distance", "+", "proximity_score", "+", "historical_penalty", "+", "random_score", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.231221121435075}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance", "isolation_penalty_weight", "=", "0.3", "# Weight for isolation penalties", "time_estimate_weight", "=", "0.2", "# Weight for estimated time to visit nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "estimated_time_to_visit", "=", "direct_distance", "/", "(", "1", "+", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", ")", "# Average time considering remaining nodes", "isolation_penalty", "=", "max", "(", "0", ",", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "-", "direct_distance", ")", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "time_estimate_weight", "*", "estimated_time_to_visit", ")", "-", "(", "isolation_penalty_weight", "*", "isolation_penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 25.360966477178273}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "utility_weight", "=", "0.4", "# Weight for node utility based on distances", "penalty_weight", "=", "0.2", "# Weight for penalties on overlapping routes", "# Function to calculate node utility based on its distance to other nodes", "def", "calculate_node_utility", "(", "node", ")", ":", "utility_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "utility_score", "+=", "1", "/", "distance_matrix", "[", "node", "]", "[", "other", "]", "# Higher score for closer nodes", "return", "utility_score", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "node_utility", "=", "calculate_node_utility", "(", "node", ")", "overlap_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Combined scoring mechanism", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "utility_weight", "*", "node_utility", "-", "penalty_weight", "*", "overlap_penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 29.05890004702976}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "attractiveness_weight", "=", "0.6", "# Weight for attractiveness based on connectivity", "proximity_weight", "=", "0.4", "# Weight for proximity considerations", "direct_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "# Higher score for well-connected nodes", "decay_factor", "=", "1", "/", "(", "1", "+", "direct_distance", ")", "score", "=", "(", "decay_factor", "*", "proximity_weight", "*", "(", "1", "/", "direct_distance_to_destination", ")", ")", "+", "(", "connectivity_score", "*", "attractiveness_weight", ")", "-", "direct_distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 27.12607951736817}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "travel_cost_weight", "=", "0.5", "# Weight for overall travel cost", "probability_weight", "=", "0.2", "# Weight for the probability of choosing an unvisited node", "efficiency_weight", "=", "0.3", "# Weight for path efficiency based on visited nodes", "# Calculate the total distance to all unvisited nodes", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Calculate the efficiency score based on already visited nodes", "visited_nodes", "=", "set", "(", "range", "(", "len", "(", "distance_matrix", ")", ")", ")", "-", "set", "(", "unvisited_nodes", ")", "efficiency_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "current_node", "]", "for", "node", "in", "visited_nodes", ")", "/", "(", "len", "(", "visited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "travel_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Probability factor based on the ratio of unvisited nodes", "probability_score", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "visited_nodes", ")", "+", "len", "(", "unvisited_nodes", ")", ")", "# Combined score incorporating travel cost and efficiency score", "score", "=", "(", "-", "travel_cost_weight", "*", "travel_cost", "+", "efficiency_weight", "*", "efficiency_score", "+", "probability_weight", "*", "probability_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "cluster_weight", "=", "0.6", "# Weight for proximity clustering", "distance_penalty_weight", "=", "0.4", "# Weight for direct distance penalty", "heuristic_adjustment_factor", "=", "1.5", "# Factor for enhancing promising clusters", "if", "unvisited_nodes", ":", "cluster_size", "=", "3", "# Size of the clusters to consider", "# Create clusters of unvisited nodes based on proximity", "clusters", "=", "[", "]", "while", "unvisited_nodes", ":", "cluster", "=", "[", "unvisited_nodes", ".", "pop", "(", ")", "]", "for", "node", "in", "list", "(", "unvisited_nodes", ")", ":", "if", "len", "(", "cluster", ")", "<", "cluster_size", "and", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<", "distance_matrix", "[", "current_node", "]", "[", "cluster", "[", "0", "]", "]", "*", "1.5", ":", "cluster", ".", "append", "(", "node", ")", "unvisited_nodes", ".", "remove", "(", "node", ")", "clusters", ".", "append", "(", "cluster", ")", "for", "cluster", "in", "clusters", ":", "cluster_score", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "cluster", ")", "/", "(", "len", "(", "cluster", ")", "or", "1", ")", "avg_distance", "=", "cluster_score", "/", "len", "(", "cluster", ")", "if", "cluster", "else", "float", "(", "'inf'", ")", "# Calculate a penalty for larger distances from the cluster's central point to future destinations", "distance_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "cluster", ")", "/", "(", "len", "(", "cluster", ")", "or", "1", ")", "# Combined score with heuristic amplification for promising cluster nodes", "score", "=", "-", "distance_penalty_weight", "*", "distance_penalty", "+", "cluster_weight", "*", "(", "-", "avg_distance", ")", "# Amplifying score for clusters that provide diverse options", "score", "*=", "(", "1", "+", "heuristic_adjustment_factor", "*", "len", "(", "cluster", ")", "/", "(", "cluster_size", "or", "1", ")", ")", "for", "node", "in", "cluster", ":", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 17.358362344743753}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "min_score", "=", "float", "(", "'inf'", ")", "best_next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "diversity_score", "=", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "]", ")", "# Calculate score with distance and diversity", "score", "=", "direct_distance", "-", "diversity_score", "*", "0.5", "# We subtract to favor diverse connections", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 14.522397991092513}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "weighted_choices", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Create a score by combining direct distance and distance to destination", "score", "=", "direct_distance", "+", "distance_to_destination", "weighted_choices", ".", "append", "(", "(", "node", ",", "score", ")", ")", "# Normalize scores to create a random choice weight", "total_score", "=", "sum", "(", "score", "for", "_", ",", "score", "in", "weighted_choices", ")", "if", "total_score", "==", "0", ":", "return", "random", ".", "choice", "(", "unvisited_nodes", ")", "probabilities", "=", "[", "(", "score", "/", "total_score", ")", "for", "_", ",", "score", "in", "weighted_choices", "]", "# Choose the next node based on the computed probabilities", "next_node", "=", "random", ".", "choices", "(", "[", "node", "for", "node", ",", "_", "in", "weighted_choices", "]", ",", "weights", "=", "probabilities", ")", "[", "0", "]", "return", "next_node"], "code_perf": 27.634981257926576}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "# Penalty for longer distances", "penalty", "=", "distance_to_next", "**", "2", "# Connectivity score considering the number of direct neighbors", "connectivity_score", "=", "len", "(", "[", "other_node", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "float", "(", "'inf'", ")", "]", ")", "# Combined score with connectivity reward and distance penalty", "score", "=", "penalty", "-", "(", "0.7", "*", "connectivity_score", ")", "+", "distance_to_destination", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "cluster_weight", "=", "0.3", "# Weight for cluster potential savings", "accessibility_weight", "=", "0.2", "# Weight for accessibility to other nodes", "detour_penalty_weight", "=", "0.1", "# Weight for detour penalties", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "adjusted_detour", "=", "max", "(", "0", ",", "direct_distance", "-", "total_distance_to_destination", ")", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "future_accessibility", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "+", "1e-6", ")", "for", "other_node", "in", "unvisited_nodes", ")", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "cluster_weight", "*", "cluster_average_distance", ")", "+", "(", "accessibility_weight", "*", "future_accessibility", ")", "-", "(", "detour_penalty_weight", "*", "adjusted_detour", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 27.30381076159579}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "average_remaining_distance", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "for", "candidate", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate", "]", "score", "=", "immediate_distance", "+", "(", "average_remaining_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "# Dynamic penalty", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "candidate", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {The algorithm introduces a penalty for longer distances and rewards for nodes closer to the destination, adjusted by the number of connections to unvisited nodes and a novelty score based on the minimum distance of unvisited nodes.}", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "scores", "=", "{", "}", "min_distance_to_unvisited", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connections_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "destination_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Novelty score based on the proximity to the closest unvisited node", "novelty_score", "=", "min_distance_to_unvisited", "# Calculate overall score", "scores", "[", "node", "]", "=", "(", "distance_score", "*", "1.5", ")", "-", "(", "connections_score", "*", "0.5", ")", "+", "(", "destination_score", "-", "novelty_score", ")", "# Lower score is better", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 7.6490879527083395}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "backtrack_penalty", "=", "0", "if", "current_node", "in", "unvisited_nodes", "else", "10", "# Penalty for backtracking", "proximity_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# New scoring equation", "score", "=", "immediate_distance", "+", "backtrack_penalty", "-", "(", "1", "/", "(", "proximity_to_destination", "+", "1e-6", ")", ")", "# Avoid division by zero", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 10.309089909443966}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "cluster_weight", "=", "0.4", "# Weight for cluster potential savings", "destination_weight", "=", "0.2", "# Weight based on distance to the destination", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Utilizing logarithmic transformation for cluster scoring", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "logarithmic_cluster_score", "=", "(", "cluster_average_distance", "+", "1", ")", "# Prevent log(0) issues", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "cluster_weight", "*", "logarithmic_cluster_score", ")", "+", "(", "destination_weight", "*", "(", "direct_distance", "+", "total_distance_to_destination", ")", "/", "2", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.5135282626649635}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "(", "total_distance", "/", "len", "(", "unvisited_nodes", ")", ")", "if", "unvisited_nodes", "else", "0", "score", "=", "(", "1", "/", "(", "1", "+", "direct_distance", ")", ")", "-", "(", "0.3", "*", "penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "travel_cost_weight", "=", "0.6", "# Weight for immediate travel cost", "local_density_weight", "=", "0.3", "# Weight for density of visited nodes around candidate", "exploration_factor_weight", "=", "0.1", "# Weight to incentivize less explored nodes", "visited_count", "=", "len", "(", "distance_matrix", ")", "-", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate local density as the number of already visited nodes within a certain radius", "local_density", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "5", ")", "# Radius of 5", "# Exploration factor encourages visiting nodes that are less dense (fewer nearby visited nodes)", "exploration_factor", "=", "exploration_factor_weight", "*", "(", "1", "/", "(", "local_density", "+", "1", ")", ")", "# Final score computation", "score", "=", "(", "-", "travel_cost_weight", "*", "direct_distance", ")", "+", "(", "local_density_weight", "*", "local_density", ")", "+", "exploration_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate scores based on weighted distance and connectivity", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "weighted_score", "=", "direct_distance", "-", "(", "connectivity", "*", "0.2", ")", "# Penalize based on connectivity", "scores", "[", "node", "]", "=", "weighted_score", "# Select the unvisited node with the minimum score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "future_distance_weight", "=", "0.4", "# Weight for future distance prediction", "efficiency_weight", "=", "0.2", "# Weight for efficiency in travel path", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_future_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "efficiency_score", "=", "(", "total_future_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "score", "=", "-", "(", "direct_distance", "+", "(", "total_distance_to_destination", "-", "direct_distance", ")", "*", "efficiency_weight", ")", "+", "(", "total_future_distance", "*", "future_distance_weight", ")", "+", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "distance_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.582486853580322}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "exploration_factor", "=", "0.2", "# Factor for encouraging exploration", "distance_weight", "=", "0.6", "# Weight for direct distance impact", "destination_heuristic_weight", "=", "0.4", "# Weight for heuristic distance to destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate scores based on direct distance, heuristic proximity, and exploration", "score", "=", "(", "destination_heuristic_weight", "*", "heuristic_distance_to_destination", ")", "-", "(", "distance_weight", "*", "direct_distance", ")", "+", "(", "exploration_factor", "*", "random", ".", "uniform", "(", "0", ",", "1", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.34597259794667}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "score", "=", "direct_distance", "/", "(", "1", "+", "connectivity_score", ")", "# Score based on distance and connectivity", "scores", ".", "append", "(", "(", "node", ",", "score", ")", ")", "# Selecting a node either based on the lowest score or randomly from scored options", "min_node", ",", "min_score", "=", "min", "(", "scores", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "# Randomly select between the best node and other options to introduce diversity", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "return", "min_node", "else", ":", "return", "random", ".", "choice", "(", "[", "n", "[", "0", "]", "for", "n", "in", "scores", "]", ")"], "code_perf": 16.255620687400437}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost_benefit_ratio", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "clustering_weight", "=", "0.4", "# Weight for clustering benefits", "immediate_cost_weight", "=", "0.6", "# Weight for immediate travel costs", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "clustering_effect", "=", "clustering_weight", "*", "(", "average_distance", "-", "direct_distance", ")", "# Benefit from being closer to cluster", "cost_benefit_ratio", "=", "(", "immediate_cost_weight", "*", "direct_distance", ")", "/", "(", "1", "+", "clustering_effect", ")", "if", "cost_benefit_ratio", "<", "min_cost_benefit_ratio", ":", "min_cost_benefit_ratio", "=", "cost_benefit_ratio", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "attractiveness_weight", "=", "0.4", "# Weight for attractiveness to destination", "novelty_weight", "=", "0.2", "# Weight for novelty based on unvisited diversity", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate novelty score based on the uniqueness of the unvisited nodes", "novelty_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "score", "=", "(", "novelty_score", "*", "novelty_weight", ")", "-", "(", "direct_distance", "*", "direct_weight", ")", "+", "(", "distance_to_destination", "*", "attractiveness_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 27.535607121345915}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for distance", "proximity_bonus", "=", "0.4", "# Bonus for closeness to destination", "connection_penalty", "=", "0.1", "# Penalty for fewer connections", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Closer to destination is better", "connection_score", "=", "sum", "(", "1", "for", "next", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", "and", "next", "in", "unvisited_nodes", ")", "# Count valid connections", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "proximity_bonus", "*", "proximity_score", "-", "connection_penalty", "*", "connection_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.81837595974678}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.5", "destination_estimate_weight", "=", "0.3", "density_bonus_weight", "=", "0.2", "node_density_factor", "=", "1.5", "# Factor to enhance clustering influence", "# Estimate total direct distance to destination ", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Calculate the density of unvisited nodes to inform clustering bonus", "density_score", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "density_influence", "=", "node_density_factor", "*", "density_score", "[", "node", "]", "score", "=", "(", "direct_distance_weight", "*", "(", "-", "direct_distance", ")", ")", "+", "(", "destination_estimate_weight", "*", "(", "-", "total_distance_to_destination", ")", ")", "+", "(", "density_bonus_weight", "*", "density_influence", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.856851353459207}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate scores based on multiple criteria", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Connectivity score: sum of distances to other unvisited nodes from this node", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "# Weighted score: prioritize lower direct distance and higher connectivity", "score", "=", "(", "direct_distance", "*", "0.6", ")", "+", "(", "connectivity_score", "*", "0.4", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 18.44780932065487}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "proximity_weight", "=", "0.3", "connectivity_weight", "=", "0.1", "length_penalty_weight", "=", "0.1", "def", "calculate_proximity_score", "(", "node", ")", ":", "return", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "def", "calculate_connectivity_score", "(", "node", ")", ":", "return", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "15", ")", "# Example threshold", "def", "calculate_length_penalty", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "calculate_proximity_score", "(", "node", ")", "connectivity_score", "=", "calculate_connectivity_score", "(", "node", ")", "length_penalty", "=", "calculate_length_penalty", "(", "node", ")", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "proximity_weight", "*", "proximity_score", "+", "connectivity_weight", "*", "connectivity_score", "-", "length_penalty_weight", "*", "length_penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.602975755903087}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_remaining", "=", "total_distance_remaining", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "normalized_distance", "=", "(", "direct_distance", "-", "avg_distance_remaining", ")", "**", "2", "connectivity_penalty", "=", "1", "/", "(", "connectivity_score", "+", "1", ")", "score", "=", "direct_distance", "+", "normalized_distance", "+", "(", "0.5", "*", "connectivity_penalty", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.612564649168014}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "weight_factor", "=", "1", "/", "max", "(", "1", ",", "len", "(", "unvisited_nodes", ")", ")", "# Dynamic weight based on remaining unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "total_distance_from_unvisited_to_destination", "=", "sum", "(", "distance_matrix", "[", "n", "]", "[", "destination_node", "]", "for", "n", "in", "unvisited_nodes", ")", "score", "=", "(", "average_distance_to_unvisited", "*", "weight_factor", ")", "-", "distance_to_next", "+", "(", "0.5", "*", "total_distance_from_unvisited_to_destination", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.8531660816014}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "decay_factor", "=", "0.8", "# Factor to reduce the influence of distant nodes", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.3", "# Weight for connectivity to unvisited nodes", "effective_distance_weight", "=", "0.2", "# Weight for accounting effective distance considering decay", "future_connectivity_weight", "=", "0.1", "# Weight for future connectivity potential", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Calculate effective distance to the destination with decay", "effective_distance", "=", "decay_factor", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score considering effective distance and future connectivity", "score", "=", "-", "direct_distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "-", "effective_distance_weight", "*", "effective_distance", "+", "future_connectivity_weight", "*", "connectivity_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.680270389165788}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "centrality_weight", "=", "0.4", "# Weight for centrality of the unvisited nodes", "proximity_weight", "=", "0.2", "# Weight for proximity to the destination", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty_factor", "=", "(", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "1", "centrality_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "node", "!=", "other_node", ")", "*", "penalty_factor", "score", "=", "-", "(", "direct_distance", "*", "distance_weight", ")", "+", "(", "centrality_score", "*", "centrality_weight", ")", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.922517903753654}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_penalty_weight", "=", "0.4", "# Weight for distance penalty", "geometric_mean_weight", "=", "0.6", "# Weight for geometric mean distance to unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "travel_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate penalty for the distance travelled", "distance_penalty", "=", "travel_distance", "+", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "node", "in", "unvisited_nodes", "else", "0", ")", "# Calculate geometric mean distance to all other unvisited nodes", "geometric_mean", "=", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "**", "(", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", ")", "score", "=", "(", "distance_penalty_weight", "*", "distance_penalty", ")", "+", "(", "geometric_mean_weight", "*", "geometric_mean", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.438676333499263}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "weighted_distance_scores", "=", "[", "]", "# Calculate the weighted distance with a randomness factor", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "euclidean_distance_to_destination", "=", "np", ".", "linalg", ".", "norm", "(", "np", ".", "array", "(", "destination_node", ")", "-", "np", ".", "array", "(", "node", ")", ")", "randomness_factor", "=", "np", ".", "random", ".", "uniform", "(", "0.5", ",", "1.5", ")", "# Encouraging random exploration", "penalty", "=", "np", ".", "exp", "(", "-", "0.1", "*", "euclidean_distance_to_destination", ")", "# Decay based on distance from destination", "weighted_distance", "=", "distance", "*", "penalty", "*", "randomness_factor", "weighted_distance_scores", ".", "append", "(", "(", "node", ",", "weighted_distance", ")", ")", "# Select the node with the minimal weighted distance", "best_next_node", "=", "min", "(", "weighted_distance_scores", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "best_next_node"], "code_perf": 13.218495794618708}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.6", "# Weight for proximity to destination", "efficiency_weight", "=", "0.4", "# Weight for efficiency based on remaining nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "num_remaining_nodes", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "mean_distance_to_others", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "num_remaining_nodes", "or", "1", ")", "penalty_for_remaining_nodes", "=", "efficiency_weight", "*", "(", "num_remaining_nodes", "**", "2", ")", "# Penalty for more remaining nodes", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", ")", "+", "(", "mean_distance_to_others", ")", "-", "penalty_for_remaining_nodes", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.797430242783712}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Connectivity score based on how many unvisited nodes are neighbors of the current node", "connectivity_score", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "float", "(", "'inf'", ")", ")", "# Adjusted score that weighs connectivity against distance", "score", "=", "(", "connectivity_score", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "-", "(", "distance_to_next", "+", "0.3", "*", "distance_to_destination", ")", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.244455041163539}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "urgency_weight", "=", "0.6", "# Weight for proximity to destination", "penalty_weight", "=", "0.4", "# Weight for number of unvisited nodes", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "urgency_score", "=", "1", "/", "(", "distance_to_destination", "+", "1", ")", "# Aiming to minimize distance to destination", "penalty_score", "=", "num_unvisited", "/", "(", "direct_distance", "+", "1", ")", "# Penalizing longer direct distances", "score", "=", "(", "urgency_weight", "*", "urgency_score", ")", "-", "(", "penalty_weight", "*", "penalty_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 36.16603029981276}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "min_distance_to_unvisited", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "distance_penalty", "=", "(", "min_distance_to_unvisited", "-", "distance_to_next", ")", "if", "min_distance_to_unvisited", ">", "distance_to_next", "else", "0", "# Modified score that emphasizes distance to the next node with a penalty for cluster proximity", "score", "=", "(", "1", "/", "distance_to_next", ")", "+", "(", "distance_penalty", "*", "0.25", ")", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "# Calculate the average distance to the unvisited nodes", "avg_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Decay factor based on how many nodes are left", "decay_factor", "=", "1", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "score", "=", "distance_to_node", "+", "avg_distance_remaining", "*", "decay_factor", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "n", "]", "[", "destination_node", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "connectivity_score", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "# Introducing a dynamic weight that considers the distance to destination", "dynamic_weight", "=", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "/", "(", "avg_distance_to_destination", "+", "1", ")", "# Calculate the score based on new factors", "score", "=", "direct_distance", "+", "(", "0.5", "*", "dynamic_weight", ")", "+", "(", "0.5", "*", "connectivity_score", ")", "-", "(", "2.0", "*", "(", "1", "/", "(", "connectivity_score", "+", "1", ")", ")", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.533740974235213}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "node", "!=", "other", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<=", "5", ")", "cumulative_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "dest", "]", "for", "dest", "in", "unvisited_nodes", "if", "node", "!=", "dest", ")", "# Calculate desirability score", "score", "=", "direct_distance", "+", "0.4", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "-", "0.6", "*", "connectivity_score", "+", "(", "0.5", "*", "cumulative_penalty", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 16.242892515980433}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "# Calculate the diversity score based on the degree of unvisited nodes", "diversity_scores", "=", "{", "node", ":", "len", "(", "unvisited_nodes", ")", "-", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "0", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "diversity_penalty", "=", "diversity_scores", "[", "node", "]", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "# New scoring equation that considers both distance and diversity", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "+", "(", "1", "/", "(", "distance_to_destination", "+", "1", ")", ")", "-", "diversity_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.6608569721620725}
{"code_tokens": ["# {The new algorithm incorporates a weighted heuristic that not only accounts for distance and connectivity but also incorporates penalties based on the distance to the destination node, prioritizing nodes that lead more directly towards the destination.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate scores for each unvisited node based on distance, connectivity, and penalty towards destination", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "destination_penalty", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "0.5", "# Weight towards the destination", "scores", "[", "node", "]", "=", "distance_score", "+", "connectivity_score", "+", "destination_penalty", "# Lower score is better", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.6", "# Weight for direct distance", "influence_weight", "=", "0.3", "# Weight for node influence based on unvisited neighbors", "cluster_size_weight", "=", "0.1", "# Weight for potential cluster size based on unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "node_influence", "=", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "neighbor", "in", "unvisited_nodes", ")", "# Count unvisited neighbors", "cluster_size", "=", "len", "(", "unvisited_nodes", ")", "# Size of the unvisited cluster", "score", "=", "(", "distance_weight", "*", "-", "direct_distance", ")", "+", "(", "influence_weight", "*", "node_influence", ")", "+", "(", "cluster_size_weight", "*", "cluster_size", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "# Calculate immediate distances and remaining distances to destination", "immediate_distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "remaining_distances", "=", "{", "node", ":", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Average distance to unvisited nodes", "avg_distance", "=", "sum", "(", "immediate_distances", ".", "values", "(", ")", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "immediate_distances", "[", "node", "]", "# Penalty for being far from the average distance", "average_penalty", "=", "(", "distance", "-", "avg_distance", ")", "/", "(", "1", "+", "avg_distance", ")", "# Heuristic that encourages visiting less frequently visited nodes by applying a logarithmic factor", "visit_count_penalty", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "1", "+", "remaining_distances", "[", "node", "]", ")", "# Combine metrics to compute a weighted score", "weighted_score", "=", "distance", "+", "average_penalty", "+", "visit_count_penalty", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.758561327656416}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "min_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "max_distance", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "distance_range", "=", "max_distance", "-", "min_distance", "if", "max_distance", "-", "min_distance", ">", "0", "else", "1", "# Avoid division by zero", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "normalized_distance", "=", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "-", "min_distance", ")", "/", "distance_range", "proximity_adjustment", "=", "0.4", "*", "(", "normalized_distance", "-", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "distance_range", ")", ")", "score", "=", "direct_distance", "+", "proximity_adjustment", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.499752166360569}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "weights", "=", "[", "]", "penalty_factor", "=", "0.2", "# Adjust this value to modify the influence of unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Dynamic penalty based on the number of unvisited nodes", "penalty", "=", "penalty_factor", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "*", "distance_to_destination", "# Total score combines direct distance and penalty", "score", "=", "direct_distance", "+", "penalty", "weights", ".", "append", "(", "(", "node", ",", "score", ")", ")", "# Normalize scores for randomness", "total_score", "=", "sum", "(", "score", "for", "node", ",", "score", "in", "weights", ")", "probabilities", "=", "[", "score", "/", "total_score", "for", "node", ",", "score", "in", "weights", "]", "# Select next node based on weighted probabilities", "next_node", "=", "random", ".", "choices", "(", "[", "node", "for", "node", ",", "score", "in", "weights", "]", ",", "probabilities", ")", "[", "0", "]", "return", "next_node"], "code_perf": 25.866182314487645}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "distance_weight", "=", "0.4", "# Weight for direct distance", "savings_weight", "=", "0.5", "# Weight for savings based on distance", "similarity_weight", "=", "0.1", "# Weight for geographical similarity", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Savings estimation: potential decrease in distance to final destination if visiting this node", "savings_estimate", "=", "direct_distance", "-", "distance_to_destination", "# Similarity heuristic: represent a measure that indicates how close node is to a centroid of unvisited nodes (simplified)", "similarity_estimate", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Score calculation", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "savings_weight", "*", "savings_estimate", "-", "similarity_weight", "*", "similarity_estimate", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 25.796466281277283}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity to destination", "cost_efficiency_weight", "=", "0.3", "# Weight for historical costs", "detour_penalty_weight", "=", "0.2", "# Weighting for distance penalty", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_cost_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "historical_cost", "=", "(", "total_distance_to_destination", "+", "direct_distance", ")", "/", "2", "# Historical cost as a simple average", "detour_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "-", "direct_distance", "# Penalty for potential detours", "score", "=", "-", "(", "direct_distance", "+", "historical_cost", "+", "(", "detour_penalty", "*", "detour_penalty_weight", ")", ")", "+", "(", "average_cost_to_destination", "*", "cost_efficiency_weight", ")", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.98697105179507}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "unvisited_nodes", "=", "list", "(", "unvisited_nodes", ")", "def", "heuristic", "(", "node", ")", ":", "# Example heuristic: inverse of distance to destination node", "return", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "distance", "*", "heuristic", "(", "node", ")", "# Combine distance and heuristic", "scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.699237951584123}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "historical_cost_weight", "=", "0.4", "# Weight for historical cost", "risk_assessment_weight", "=", "0.3", "# Weight for risk factor based on distance from average", "future_cost_weight", "=", "0.3", "# Weight for potential future costs", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "historical_cost", "=", "historical_cost_weight", "*", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "risk_assessment", "=", "risk_assessment_weight", "*", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "-", "average_distance", ")", "**", "2", "future_cost", "=", "future_cost_weight", "*", "(", "min", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", ")", "score", "=", "-", "direct_distance", "+", "historical_cost", "+", "risk_assessment", "+", "future_cost", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate distances to all unvisited nodes", "distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Find minimum distance", "min_distance", "=", "min", "(", "distances", ".", "values", "(", ")", ")", "# Calculate weights based on the distances and a hypothetical distance to destination", "weights", "=", "{", "node", ":", "(", "min_distance", "/", "dist", ")", "*", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "for", "node", ",", "dist", "in", "distances", ".", "items", "(", ")", "if", "dist", ">", "0", "}", "total_weight", "=", "sum", "(", "weights", ".", "values", "(", ")", ")", "if", "total_weight", "==", "0", ":", "return", "None", "# Normalize weights and select the next node based on randomized weighted choice", "random_value", "=", "random", ".", "uniform", "(", "0", ",", "total_weight", ")", "cumulative_weight", "=", "0", "for", "node", ",", "weight", "in", "weights", ".", "items", "(", ")", ":", "cumulative_weight", "+=", "weight", "if", "cumulative_weight", ">=", "random_value", ":", "return", "node", "return", "None"], "code_perf": 18.132410591377464}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distances", "cluster_density_weight", "=", "0.4", "# Weight for cluster density", "penalty_weight", "=", "0.2", "# Weight for penalizing long distances", "# Calculate cluster density for unvisited nodes", "def", "calculate_cluster_density_score", "(", "node", ")", ":", "density_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "density_score", "+=", "1", "/", "distance_matrix", "[", "node", "]", "[", "other", "]", "# Inverse distance for density influence", "return", "density_score", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_density_score", "=", "calculate_cluster_density_score", "(", "node", ")", "# Penalization for longer direct distances", "distance_penalty", "=", "direct_distance", "*", "penalty_weight", "if", "direct_distance", ">", "1", "else", "0", "# Combined scoring mechanism", "score", "=", "cluster_density_weight", "*", "cluster_density_score", "-", "direct_distance_weight", "*", "direct_distance", "-", "distance_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.602873564889443}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "clustering_threshold", "=", "2", "# Adjust this value to change clustering sensitivity", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate the density of unvisited neighbors", "density_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "clustering_threshold", ")", "exploration_factor", "=", "1", "/", "(", "1", "+", "distance_to_destination", ")", "# Encourages exploring nodes close to the destination", "penalty_factor", "=", "distance_to_node", "**", "2", "/", "(", "1", "+", "distance_to_destination", ")", "# Penalizes long distances to nodes", "scores", "[", "node", "]", "=", "(", "distance_to_node", "+", "penalty_factor", ")", "*", "exploration_factor", "/", "(", "1", "+", "density_score", ")", "# Adjust score by density", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.699237951584123}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_cost", "=", "-", "float", "(", "'inf'", ")", "next_node", "=", "None", "max_distance_to_unvisited", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "impact_factor", "=", "(", "max_distance_to_unvisited", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "0", "else", "1", ")", "total_cost", "=", "direct_distance", "+", "impact_factor", "if", "total_cost", ">", "max_cost", ":", "max_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 36.14221759450641}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for the direct distance to the next node", "cluster_penalty_weight", "=", "0.5", "# Weight for the penalty of unvisited nodes clustering", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", ")", "+", "(", "cluster_penalty", "*", "cluster_penalty_weight", ")", "-", "(", "direct_distance", "*", "direct_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.613327356938475}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.4", "# Weight for connectivity to unvisited nodes", "projected_cost_weight", "=", "0.2", "# Weight for predicted future cost", "# Function to calculate connectivity score based on unvisited nodes", "def", "calculate_connectivity_score", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "calculate_connectivity_score", "(", "node", ")", "projected_cost", "=", "sum", "(", "distance_matrix", "[", "other", "]", "[", "destination_node", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combined scoring mechanism considering both costs and connections", "score", "=", "(", "-", "direct_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "-", "projected_cost_weight", "*", "projected_cost", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.41724333977419}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "node_scores", "=", "{", "}", "# Calculate a score for each unvisited node based on distance and connectivity", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "# Combine direct distance and connectivity to score the node", "node_scores", "[", "node", "]", "=", "direct_distance", "+", "(", "1", "/", "(", "connectivity_score", "+", "1e-5", ")", ")", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.094090409720513}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_proximity", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "avg_distance", "penalty", "=", "0.5", "*", "max", "(", "0", ",", "avg_proximity", ")", "# Penalize nodes that are farther than average", "score", "=", "direct_distance", "+", "penalty", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.311097512367091}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "distance_to_node", "+", "0.5", "*", "distance_to_destination", "# Heuristic combining distance and a small penalty", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "centrality_factor", "=", "0.3", "# Factor to emphasize central nodes", "distance_bias_factor", "=", "0.4", "# Factor to prefer closer nodes", "efficiency_weight", "=", "0.3", "# Weight for route efficiency", "if", "unvisited_nodes", ":", "total_remain", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate centrality based on the average distance to other unvisited nodes", "centrality_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "total_remain", "or", "1", ")", "# Calculate route efficiency considering the next connections", "efficiency_score", "=", "(", "1", "/", "direct_distance", ")", "if", "direct_distance", ">", "0", "else", "0", "# Inverse distance", "# Combined score taking into account different factors", "score", "=", "(", "centrality_factor", "*", "centrality_score", ")", "-", "(", "distance_bias_factor", "*", "direct_distance", ")", "+", "(", "efficiency_weight", "*", "efficiency_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.84012628833546}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for distance", "proximity_weight", "=", "0.4", "# Weight for proximity to destination", "past_visit_weight", "=", "0.2", "# Weight for past visits", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1e-6", ")", "# Inverse distance to destination, avoiding divide by zero", "past_visit_score", "=", "sum", "(", "1", "for", "next", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "next", "==", "current_node", "and", "distance_matrix", "[", "current_node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", ")", "# Visits from current", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "proximity_weight", "*", "proximity_score", "-", "past_visit_weight", "*", "past_visit_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.309089909443966}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.7", "# Weight for direct distance", "proximity_weight", "=", "0.3", "# Weight for proximity to destination", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "historical_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "*", "0.1", "proximity_score", "=", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "direct_distance", ")", "*", "proximity_weight", "if", "direct_distance", "<", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "else", "0", "score", "=", "direct_distance", "+", "total_distance_to_destination", "+", "historical_cost", "-", "proximity_score", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.86397075202909}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_cost_weight", "=", "0.5", "# Weight for direct travel cost", "average_distance_weight", "=", "0.5", "# Weight for average distance to unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_distance", "*", "direct_cost_weight", ")", "+", "(", "average_distance_to_unvisited", "*", "average_distance_weight", ")", "-", "total_distance_to_destination", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Focus on distance with reduced influence", "connectivity_weight", "=", "0.4", "# Emphasis on connecting to unvisited nodes", "clustering_weight", "=", "0.2", "# Focus on clustering of unvisited nodes", "total_count", "=", "len", "(", "unvisited_nodes", ")", "total_distance_from_node", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_unvisited", "=", "total_distance_from_node", "/", "(", "total_count", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "total_count", "or", "1", ")", "# Average connectivity", "clustering_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "+", "1e-6", ")", "for", "next", "in", "unvisited_nodes", ")", "# Inverse distance to cluster", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "clustering_weight", "*", "clustering_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 27.45547316060534}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Define a penalty based on the distance of the last visited node", "penalty_factor", "=", "0.5", "# Penalty modifier", "last_visited_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "best_next_node", "=", "None", "best_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate total cost with penalty for longer paths", "total_cost", "=", "direct_distance", "+", "penalty_factor", "*", "last_visited_distance", "if", "total_cost", "<", "best_cost", ":", "best_cost", "=", "total_cost", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "variance_distance", "=", "sum", "(", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "-", "avg_distance_to_unvisited", ")", "**", "2", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "score", "=", "(", "avg_distance_to_unvisited", "-", "distance_to_next", ")", "+", "(", "1", "/", "(", "1", "+", "distance_to_destination", ")", ")", "-", "variance_distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.796497934241451}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.5", "# Weight for direct distance", "frequency_weight", "=", "0.3", "# Weight for visit frequency", "recent_visit_factor", "=", "0.2", "# Weight for penalizing recent visits", "# Function to calculate visit frequency score with time decay factor", "def", "calculate_visit_frequency_score", "(", "node", ")", ":", "age", "=", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", "# Number of visits", "decay_factor", "=", "max", "(", "1", "-", "(", "age", "/", "10", ")", ",", "0", ")", "# Decay factor for visit age", "return", "decay_factor", "/", "(", "1", "+", "age", ")", "# Initialize visit counts for nodes if not present", "global", "node_visit_counts", "node_visit_counts", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "# Update visit counts", "node_visit_counts", "[", "node", "]", "=", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", "+", "1", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "frequency_score", "=", "calculate_visit_frequency_score", "(", "node", ")", "# Combined scoring mechanism with new dynamic factors", "score", "=", "(", "-", "direct_distance_weight", "*", "direct_distance", "+", "frequency_weight", "*", "frequency_score", "+", "recent_visit_factor", "*", "(", "-", "1", "if", "node_visit_counts", "[", "node", "]", "<", "3", "else", "0", ")", "# Penalty for frequently visited nodes", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Define historical costs for each node (initialized to zero)", "historical_costs", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "total_connections", "=", "{", "node", ":", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<=", "5", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "# Calculate direct distance from current node", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Proximity score based on direct distance", "proximity_score", "=", "1", "/", "(", "1", "+", "direct_distance", ")", "# Average distance to destination", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Historical cost factor", "travel_history_factor", "=", "historical_costs", "[", "node", "]", "/", "(", "1", "+", "sum", "(", "historical_costs", ".", "values", "(", ")", ")", ")", "# Penalty for future connections (degree of connectivity)", "connectivity_penalty", "=", "1", "-", "(", "total_connections", "[", "node", "]", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", ")", "# Combined score calculation", "score", "=", "(", "0.4", "*", "proximity_score", ")", "+", "(", "0.3", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", ")", "-", "(", "0.2", "*", "travel_history_factor", ")", "+", "(", "0.1", "*", "connectivity_penalty", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "# Update historical costs for the selected next node", "if", "next_node", "is", "not", "None", ":", "historical_costs", "[", "next_node", "]", "+=", "distance_matrix", "[", "current_node", "]", "[", "next_node", "]", "return", "next_node"], "code_perf": 29.520477215146123}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "max_remaining_distance", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate remaining distance factor that prioritizes nodes minimizing max remaining distance", "remaining_distance_score", "=", "max", "(", "distance_to_destination", ",", "average_distance", ")", "# Weight score to balance direct distance with remaining distance consideration", "score", "=", "direct_distance", "+", "0.5", "*", "remaining_distance_score", "if", "score", "<", "max_remaining_distance", "or", "next_node", "is", "None", ":", "max_remaining_distance", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.311097512367091}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "nearest_neighbor_weight", "=", "0.6", "# Weight for immediate distance to next node", "remaining_savings_weight", "=", "0.4", "# Weight for the savings based on future unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "nearest_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_average_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_next_node", "]", "for", "next_next_node", "in", "unvisited_nodes", "if", "next_next_node", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "cost_score", "=", "(", "nearest_distance", "+", "total_distance_to_destination", ")", "*", "nearest_neighbor_weight", "-", "(", "future_average_distance", "*", "remaining_savings_weight", ")", "if", "cost_score", "<", "min_cost", ":", "min_cost", "=", "cost_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.368214238744789}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "temporal_factor", "=", "1.2", "proximity_weight", "=", "0.5", "diversity_weight", "=", "0.5", "avg_proximity", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connection_strength", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<", "float", "(", "'inf'", ")", "and", "neighbor", "!=", "node", ")", "diversity_score", "=", "1", "/", "(", "connection_strength", "+", "1", ")", "# Encourages nodes with fewer connections", "temporal_cost", "=", "temporal_factor", "*", "direct_distance", "# New score combining proximity, diversity, and temporal cost", "score", "=", "(", "proximity_weight", "*", "(", "avg_proximity", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "diversity_weight", "*", "diversity_score", "+", "temporal_cost", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.472910961236272}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "randomness_factor", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "score", "=", "direct_distance", "+", "max", "(", "0", ",", "direct_distance", "-", "average_distance", ")", "+", "connectivity_score", "*", "0.5", "-", "randomness_factor", "*", "0.5", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 10.576858179619594}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.4", "# Weight for connectivity among unvisited nodes", "temporal_penalty", "=", "0.2", "# Weight for temporal aspects of route selection", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Temporal penalty based on distance to destination", "temporal_score", "=", "1", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "# Encourages proximity to destination", "# Combined score calculation", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "temporal_penalty", "*", "temporal_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.501277252744786}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "time_penalty_factor", "=", "0.6", "# Factor to penalize longer times", "comfort_factor", "=", "0.3", "# Weight for comfort based on travel time variance", "if", "unvisited_nodes", ":", "freshness_weight", "=", "0.2", "# Weight for freshness of nodes", "total_time", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "historical_time_variance", "=", "sum", "(", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "-", "(", "total_time", "/", "len", "(", "unvisited_nodes", ")", ")", ")", "**", "2", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_time", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate freshness score based on time since last visit (the lesser value, the fresher)", "freshness_score", "=", "1", "/", "(", "1", "+", "direct_time", ")", "# Combined score with penalties and comfort factor", "score", "=", "freshness_weight", "*", "freshness_score", "-", "time_penalty_factor", "*", "direct_time", "+", "comfort_factor", "*", "(", "1", "/", "(", "1", "+", "historical_time_variance", ")", ")", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Adjusted weight for direct distance", "clustering_weight", "=", "0.4", "# Weight emphasizing proximity of unvisited nodes", "average_distance_weight", "=", "0.2", "# Weight for average distances to destination", "total_distance_from_node", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "total_clustering_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "node", "in", "unvisited_nodes", "for", "next_node", "in", "unvisited_nodes", "if", "node", "!=", "next_node", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "clustering_score", "=", "(", "total_clustering_score", "-", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "next", "==", "node", ")", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "# Exclude self distance", "average_distance_score", "=", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average distance to destination", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "clustering_weight", "*", "clustering_score", "+", "average_distance_weight", "*", "average_distance_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "randomness_factor", "=", "0.3", "# Factor to introduce randomness in selection", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.5", "# Weight for direct distance", "overall_tour_weight", "=", "0.4", "# Weight for estimated overall tour efficiency", "randomness_weight", "=", "0.1", "# Weight for randomness", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate an estimated overall tour length considering unvisited nodes", "estimated_tour_length", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score including the randomness factor", "score", "=", "-", "direct_distance_weight", "*", "direct_distance", "+", "overall_tour_weight", "*", "estimated_tour_length", "+", "randomness_weight", "*", "random", ".", "uniform", "(", "0", ",", "1", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 11.578018724879225}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "next_node", "=", "None", "min_total_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "estimated_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "total_cost", "=", "direct_distance", "+", "estimated_distance_to_destination", "if", "total_cost", "<", "min_total_cost", ":", "min_total_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "strategic_weight", "=", "0.5", "# Weight for strategic positioning of the node", "average_cost_weight", "=", "0.5", "# Weight for average distance to unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "score", "=", "-", "direct_distance", "+", "(", "strategic_weight", "*", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "average_cost", ")", ")", "*", "average_cost_weight", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.912779303450332}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for immediate distance", "connectivity_weight", "=", "0.5", "# Weight for connectivity to unvisited nodes", "# Calculate future penalty score based on the distances of unvisited nodes", "future_penalty", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", ">", "0", ")", "# Calculate combined score based on distance and connectivity", "score", "=", "(", "connectivity_weight", "*", "connectivity_score", ")", "-", "(", "distance_weight", "*", "direct_distance", ")", "+", "(", "1", "/", "(", "1", "+", "future_penalty", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.81442622590815}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Increased weight for direct distance", "connectivity_weight", "=", "0.3", "# Adjusted weight for connectivity to unvisited nodes", "destination_weight", "=", "0.2", "# Weight for the penalty based on distance to destination node", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average connectivity", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Distance to the destination node for penalty", "score", "=", "distance_weight", "*", "direct_distance", "-", "connectivity_weight", "*", "connectivity_score", "+", "destination_weight", "*", "distance_to_destination", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.858678585962564}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Start with positive infinity for minimization", "urgency_weight", "=", "0.5", "# Weight for urgency consideration", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_destination", "=", "total_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "# Direct distance to the current node", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Urgency factor: closer nodes are prioritized", "urgency_factor", "=", "1", "/", "(", "1", "+", "direct_distance", ")", "# Closer nodes have higher urgency", "# Weighted score combining distance to the current node, the average distance, and the urgency factor", "score", "=", "direct_distance", "+", "(", "1", "-", "urgency_weight", ")", "*", "average_distance_to_destination", "-", "urgency_weight", "*", "urgency_factor", "# Selecting the node that minimizes this score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["# {This algorithm incorporates a scoring system that not only considers the inverse distance to the next node but also adds a heuristic penalty for visiting far nodes from the main route while encouraging exploration by taking a weighted average of the distances to previously visited nodes for better route optimization.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "# Calculate the total distance of the route created so far", "total_distance_traveled", "=", "sum", "(", "distance_matrix", "[", "previous_node", "]", "[", "current_node", "]", "for", "previous_node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "previous_node", "!=", "current_node", "and", "previous_node", "not", "in", "unvisited_nodes", ")", "# Calculate the average distance to the visited nodes for a penalty", "if", "total_distance_traveled", ">", "0", ":", "average_penalty", "=", "total_distance_traveled", "/", "(", "len", "(", "distance_matrix", ")", "-", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "else", ":", "average_penalty", "=", "0", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Dynamic weight inversely related to distance; promote shorter paths", "distance_weight", "=", "1", "/", "(", "distance_to_node", "+", "1e-6", ")", "# Heuristic penalty for visiting nodes too far from the desired route to the destination", "heuristic_penalty", "=", "distance_to_node", "-", "average_penalty", "# Score is computed with a hybrid approach of distance weight and the penalty", "score", "=", "distance_weight", "-", "heuristic_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_weight", "=", "0.5", "# Weight for immediate travel distance", "completion_weight", "=", "0.4", "# Weight for estimated completion cost", "unvisited_penalty_weight", "=", "0.1", "# Weight for number of unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "completion_costs", "=", "[", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "predicted_completion_cost", "=", "sum", "(", "completion_costs", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "unvisited_nodes_count", "=", "len", "(", "unvisited_nodes", ")", "-", "1", "# Exclude current node", "score", "=", "(", "direct_distance", "*", "immediate_weight", ")", "+", "(", "predicted_completion_cost", "*", "completion_weight", ")", "+", "(", "unvisited_nodes_count", "*", "unvisited_penalty_weight", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Define a risk factor that increases with distance traveled", "risk_factor_base", "=", "0.6", "# Base risk modifier", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "risk_factor", "=", "risk_factor_base", "*", "(", "total_distance", "/", "len", "(", "unvisited_nodes", ")", ")", "best_next_node", "=", "None", "best_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate total cost with risk factor for exploration", "total_cost", "=", "direct_distance", "+", "risk_factor", "*", "(", "direct_distance", "**", "2", ")", "# Introduce randomness to select less obvious paths as well", "if", "random", ".", "random", "(", ")", "<", "0.1", ":", "# 10% chance to explore randomly", "return", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "if", "total_cost", "<", "best_cost", ":", "best_cost", "=", "total_cost", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 23.164762190285217}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "potential_nodes", "=", "[", "]", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "average_distance", ")", "*", "0.5", "# Penalize nodes beyond average distance", "remaining_nodes_factor", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "1", "+", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "# Encourage visiting less-frequented nodes", "score", "=", "direct_distance", "+", "penalty", "-", "remaining_nodes_factor", "potential_nodes", ".", "append", "(", "(", "node", ",", "score", ")", ")", "# Select the node with the least score (distance + penalty - remaining nodes factor)", "next_node", "=", "min", "(", "potential_nodes", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.5", "# Weight for direct distance influence", "novelty_weight", "=", "0.4", "# Weight for unvisited node novelty", "distance_to_destination_weight", "=", "0.3", "# Weight for proximity to destination", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "novelty_score", "=", "1", "/", "(", "unvisited_count", ")", "if", "unvisited_count", ">", "0", "else", "0", "score", "=", "(", "direct_distance_weight", "*", "(", "1", "/", "(", "direct_distance", "+", "1e-6", ")", ")", "+", "# Avoid division by zero", "novelty_weight", "*", "novelty_score", "+", "distance_to_destination_weight", "*", "distance_to_destination", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.804517594120038}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "next_node", "=", "None", "min_combined_cost", "=", "float", "(", "'inf'", ")", "# Calculate total distance to all unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "average_connectivity", "=", "connectivity_score", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Combine direct distance with average connectivity", "combined_cost", "=", "direct_distance", "+", "average_connectivity", "if", "combined_cost", "<", "min_combined_cost", ":", "min_combined_cost", "=", "combined_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.4323878079629}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "clusters", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_key", "=", "round", "(", "distance", ")", "# Clustering based on distance range", "if", "cluster_key", "not", "in", "clusters", ":", "clusters", "[", "cluster_key", "]", "=", "[", "]", "clusters", "[", "cluster_key", "]", ".", "append", "(", "node", ")", "for", "cluster", "in", "clusters", ".", "values", "(", ")", ":", "if", "cluster", ":", "# If there are nodes in the cluster", "avg_distance_to_cluster", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "cluster", ")", "/", "len", "(", "cluster", ")", "closest_node", "=", "min", "(", "cluster", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "cost", "=", "distance_matrix", "[", "current_node", "]", "[", "closest_node", "]", "+", "0.5", "*", "(", "avg_distance_to_cluster", "-", "distance_matrix", "[", "closest_node", "]", "[", "destination_node", "]", ")", "if", "cost", "<", "min_cost", ":", "min_cost", "=", "cost", "next_node", "=", "closest_node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "trend_analysis_factor", "=", "1.3", "# Factor to enhance the selections based on past path trends", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.6", "# Weight for direct distance", "influence_penalty_weight", "=", "0.2", "# Weight for penalty based on visited nodes", "future_path_improvement_weight", "=", "0.2", "# Weight for potential future path lengths", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Penalty for how connected the node is to previously visited nodes", "influence_penalty", "=", "sum", "(", "distance_matrix", "[", "previous", "]", "[", "node", "]", "for", "previous", "in", "unvisited_nodes", "if", "previous", "!=", "node", ")", "# Estimate future path potential based on unvisited nodes\u2019 distances to the destination", "future_path_improvement", "=", "destination_node", "-", "direct_distance", "# Simplified heuristic", "# Combined score", "score", "=", "(", "direct_distance_weight", "*", "direct_distance", "+", "influence_penalty_weight", "*", "influence_penalty", "-", "future_path_improvement_weight", "*", "future_path_improvement", ")", "# Trend analysis mechanism: amplify scores based on the trend of previous node visits", "trend_score", "=", "trend_analysis_factor", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "influence_penalty", ")", "score", "-=", "trend_score", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 26.47334126045206}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "savings_weight", "=", "0.5", "# Weight for cluster savings", "distance_weight", "=", "0.5", "# Weight for direct distance cost", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty_factor", "=", "0.2", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "# Penalty for potential route length", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "(", "direct_distance", "+", "penalty_factor", ")", "+", "(", "savings_weight", "*", "cluster_average_distance", ")", "+", "(", "distance_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.292595875030693}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculating node centrality as the inverse of the average distance to all other unvisited nodes", "centrality_score", "=", "1", "/", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "+", "1", ")", "# Introducing a risk-reward mechanism", "risk_factor", "=", "(", "distance_to_next", "+", "distance_to_destination", ")", "/", "2", "# Combining scores with a new equation", "score", "=", "centrality_score", "*", "(", "1", "/", "(", "risk_factor", "+", "1", ")", ")", "*", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.032864771548851}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "exploration_factor", "=", "0.2", "# Factor to encourage exploration of less-visited nodes", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "connectivity_weight", "=", "0.3", "# Weight for connectivity to unvisited nodes", "cluster_weight", "=", "0.2", "# Weight for clustering effect", "# Calculate historical visitation frequency for unvisited nodes", "visited_count", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "visited_count", "[", "node", "]", "=", "random", ".", "randint", "(", "0", ",", "10", ")", "# Simulating historical visits", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Calculate cluster score based on proximity to other unvisited nodes", "cluster_score", "=", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "5", ")", "# Example threshold", "# Combined score using weights and exploration factor", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "cluster_weight", "*", "cluster_score", "# Modulating the score based on historical visitation frequency", "visitation_penalty", "=", "visited_count", "[", "node", "]", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "score", "-=", "visitation_penalty", "# Adding randomness for exploration", "score", "+=", "random", ".", "uniform", "(", "0", ",", "exploration_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 12.803477735037845}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for favoring closer nodes", "heuristic_weight", "=", "0.6", "# Weight for considering overall tour impact", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "score", "=", "(", "proximity_weight", "*", "direct_distance", ")", "+", "(", "heuristic_weight", "*", "heuristic_score", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.274546296838132}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "visited_nodes", "=", "set", "(", "range", "(", "len", "(", "distance_matrix", ")", ")", ")", "-", "unvisited_nodes", "# Assuming 0 to n-1 are all nodes", "if", "unvisited_nodes", ":", "avg_distance_to_visited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "visited_node", "]", "for", "node", "in", "unvisited_nodes", "for", "visited_node", "in", "visited_nodes", ")", "/", "len", "(", "visited_nodes", ")", "if", "visited_nodes", "else", "1", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_proximity_to_visited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "visited_node", "]", "for", "visited_node", "in", "visited_nodes", ")", "/", "len", "(", "visited_nodes", ")", "if", "visited_nodes", "else", "direct_distance", "scoring_factor", "=", "0.5", "*", "(", "direct_distance", "+", "avg_proximity_to_visited", ")", "+", "0.5", "*", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "scoring_factor", "<", "min_cost", ":", "min_cost", "=", "scoring_factor", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.52241475703087}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "max_attractiveness_score", "=", "float", "(", "'-inf'", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "tour_length", "=", "total_distance", "+", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "normalized_distance", "=", "distance_to_node", "/", "(", "tour_length", "+", "1e-9", ")", "# prevent division by zero", "inverse_remaining_nodes", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "+", "1e-9", ")", "# avoid division by zero", "attractiveness_score", "=", "(", "1", "-", "normalized_distance", ")", "*", "inverse_remaining_nodes", "if", "attractiveness_score", ">", "max_attractiveness_score", ":", "max_attractiveness_score", "=", "attractiveness_score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_nodes", "=", "len", "(", "distance_matrix", ")", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Connectivity attractiveness: number of connections to unvisited nodes", "connectivity_attractiveness", "=", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<", "15", ")", "# Arbitrary threshold for connectivity", "# Introduce a penalty for nodes that are far from highly visited clusters", "proximity_penalty", "=", "(", "1", "/", "(", "1", "+", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", ")", "if", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "<", "avg_distance_to_destination", "else", "0", "# Combine scores into a new scoring mechanism", "score", "=", "(", "direct_distance", "*", "0.4", "+", "(", "1", "/", "direct_distance", ")", "*", "0.3", "+", "# Favor shorter direct distances", "connectivity_attractiveness", "*", "0.2", "+", "proximity_penalty", "*", "0.1", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 33.518987819656324}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "potential_nodes", "=", "[", "]", "total_distances", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distances", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", "remaining_distance", "=", "sum", "(", "min", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "direct_distance", "/", "(", "average_distance", "+", "1e-9", ")", "# Avoid division by zero", "weight_factor", "=", "remaining_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Influence of remaining distances", "# Score combines proximity and a factor based on remaining distances to enable better selection", "score", "=", "direct_distance", "*", "proximity_score", "+", "weight_factor", "*", "(", "1", "-", "(", "direct_distance", "/", "(", "total_distances", "+", "1e-9", ")", ")", ")", "potential_nodes", ".", "append", "(", "(", "node", ",", "score", ")", ")", "next_node", "=", "min", "(", "potential_nodes", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_bonus", "=", "1.5", "# Initial proximity bonus", "decay_factor", "=", "0.9", "# Decay factor for considering remaining nodes", "# Average distance to unvisited nodes", "avg_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_adjusted_score", "=", "direct_distance", "*", "(", "1", "-", "proximity_bonus", "*", "(", "1", "/", "(", "1", "+", "avg_distance_to_remaining", ")", ")", ")", "+", "decay_factor", "*", "direct_distance", "if", "proximity_adjusted_score", "<", "min_cost", ":", "min_cost", "=", "proximity_adjusted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "decay_factor", "=", "0.1", "# Factor to reduce influence of distant nodes based on count of unvisited nodes", "# Calculate the maximum distance to any unvisited node", "max_distance", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate heuristic score", "weight", "=", "(", "max_distance", "-", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "*", "decay_factor", "score", "=", "direct_distance", "-", "weight", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "closest_node", "=", "None", "shortest_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "weighted_distance", "=", "distance_to_node", "+", "(", "0.5", "*", "distance_to_destination", ")", "# Weighting future distance", "if", "weighted_distance", "<", "shortest_distance", ":", "shortest_distance", "=", "weighted_distance", "closest_node", "=", "node", "return", "closest_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "from", "collections", "import", "defaultdict", "import", "numpy", "as", "np", "# {The algorithm clusters unvisited nodes based on a dynamically adjusted threshold and uses a weighted scoring mechanism to prioritize nodes closer to the destination.}", "# Define a dynamic threshold distance based on the minimum distance to the destination node", "threshold_distance", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "*", "0.8", "+", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "*", "0.2", "# Create clusters of unvisited nodes", "clusters", "=", "defaultdict", "(", "list", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "<", "threshold_distance", ":", "clusters", "[", "current_node", "]", ".", "append", "(", "node", ")", "else", ":", "clusters", "[", "tuple", "(", "min", "(", "[", "(", "current_node", ",", "node", ")", ",", "(", "node", ",", "current_node", ")", "]", ",", "key", "=", "lambda", "x", ":", "distance_matrix", "[", "x", "[", "0", "]", "]", "[", "x", "[", "1", "]", "]", ")", ")", "]", ".", "append", "(", "node", ")", "# Find the nearest cluster", "nearest_cluster", "=", "min", "(", "clusters", ".", "keys", "(", ")", ",", "key", "=", "lambda", "cluster", ":", "np", ".", "mean", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "clusters", "[", "cluster", "]", "]", ")", ")", "# Use a weighted scoring system to prioritize nodes not only by distance but also by closeness to the destination", "node_scores", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "0.5", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "clusters", "[", "nearest_cluster", "]", "}", "# Select the node with the minimum score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.4547222121864705}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_remaining_distance", "=", "remaining_distance", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_penalty", "=", "(", "avg_remaining_distance", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "*", "0.3", "score", "=", "direct_distance", "+", "future_penalty", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.583058552198324}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "direct_distance_weight", "=", "0.5", "# Weight for direct distance", "heuristic_weight", "=", "0.4", "# Weight for heuristic estimation of remaining distances", "unvisited_count_weight", "=", "0.1", "# Weight for the number of unvisited nodes", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Heuristic: sum of distances from the current node to unvisited nodes", "heuristic_estimate", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "unvisited_count", "or", "1", ")", "# Score calculation", "score", "=", "-", "direct_distance_weight", "*", "direct_distance", "+", "heuristic_weight", "*", "heuristic_estimate", "-", "unvisited_count_weight", "*", "unvisited_count", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.358012720183544}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "exploration_factor", "=", "0.5", "# Encourages diversity in selecting unvisited nodes", "distance_weight", "=", "0.4", "# Weight for direct distance", "heuristic_weight", "=", "0.4", "# Weight for potential exploration", "alignment_weight", "=", "0.2", "# Weight for alignment towards the destination", "if", "unvisited_nodes", ":", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance", "=", "total_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate heuristic value based on unvisited connections", "heuristic_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Score for alignment towards the final destination", "alignment_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Exploration diversity score based on distance from other unvisited nodes", "exploration_score", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "1", "+", "min", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", ")", "# Combined score with exploration factor", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "heuristic_weight", "*", "heuristic_score", "+", "alignment_weight", "*", "alignment_score", "+", "exploration_factor", "*", "exploration_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.696674800295234}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.4", "# Weight for connectivity to unvisited nodes", "potential_weight", "=", "0.2", "# Weight for future potential directly considering remaining nodes", "# Calculate scores for each unvisited node", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average connectivity", "# Heuristic score based on proximity to the destination", "heuristic_score", "=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", "# Inverse of distance to destination", "# Adjust potential score with respect to the density of unvisited nodes", "density_factor", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "2", ")", "# Smoothed density adjustment", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "potential_weight", "*", "heuristic_score", "*", "density_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.488131043936196}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate a score for each unvisited node based on distance, connectivity, and average distance to unvisited nodes", "scores", "=", "{", "}", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "avg_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "scores", "[", "node", "]", "=", "distance_score", "+", "connectivity_score", "-", "avg_score", "# Lower score is better", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.41724333977419}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "average_distance_weight", "=", "0.4", "# Weight for average distance to unvisited nodes", "clustering_weight", "=", "0.2", "# Weight for clustering effect based on proximity", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Calculate clustering score based on proximity to other unvisited nodes", "clustering_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "+", "1", ")", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", ">", "0", ")", "# Calculate combined score", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "average_distance_weight", "*", "average_distance", "+", "clustering_weight", "*", "clustering_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.427193847785936}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.35", "# Weight for direct distance", "cluster_weight", "=", "0.35", "# Weight for proximity to clusters of unvisited nodes", "future_savings_weight", "=", "0.15", "# Weight for potential future savings", "risk_factor_weight", "=", "0.1", "# Weight for longer paths' risk assessment", "novelty_penalty_weight", "=", "0.05", "# Penalty for revisiting nodes too quickly", "adaptive_learning_weight", "=", "0.1", "# For adjusting scores based on efficiency ", "def", "calculate_cluster_score", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "def", "calculate_risk_score", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "def", "calculate_novelty_penalty", "(", "node", ")", ":", "# Penalty for nodes visited recently (this would be a function tracking recent visits in a full implementation)", "return", "0.1", "if", "node", "in", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_score", "=", "calculate_cluster_score", "(", "node", ")", "risk_score", "=", "calculate_risk_score", "(", "node", ")", "novelty_penalty", "=", "calculate_novelty_penalty", "(", "node", ")", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "cluster_weight", "*", "cluster_score", "+", "future_savings_weight", "*", "(", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "-", "risk_factor_weight", "*", "risk_score", "-", "novelty_penalty_weight", "*", "novelty_penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.383730517762584}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance from current node", "connectivity_weight", "=", "0.4", "# Weight for connectivity to other unvisited nodes", "destination_proximity_weight", "=", "0.2", "# Weight for proximity to destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_ratio", "=", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<", "float", "(", "'inf'", ")", ")", "/", "len", "(", "unvisited_nodes", ")", "destination_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "-", "(", "direct_distance", "*", "direct_distance_weight", ")", "+", "(", "connectivity_ratio", "*", "connectivity_weight", ")", "-", "(", "destination_proximity_weight", "*", "destination_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "connectivity_score", "=", "len", "(", "[", "node", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<", "10", "]", ")", "# penalty for being disconnected", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "exploration_factor", "=", "(", "total_distance_to_unvisited", "-", "distance", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "# Balance exploration", "connectivity_penalty", "=", "1", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ">=", "10", "else", "0", "# Penalize nodes too far", "weighted_score", "=", "distance", "+", "exploration_factor", "+", "connectivity_penalty", "# Combine metrics", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity to destination", "cost_efficiency_weight", "=", "0.5", "# Weighing the efficiency based on historical costs", "max_proximity_radius", "=", "3", "# Maximum distance within which proximity is favored", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_cost_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "historical_cost", "=", "(", "total_distance_to_destination", "+", "direct_distance", ")", "/", "2", "# Historical cost as a simple average", "# Calculate proximity penalty", "proximity_penalty", "=", "0", "if", "direct_distance", ">", "max_proximity_radius", ":", "proximity_penalty", "=", "(", "direct_distance", "-", "max_proximity_radius", ")", "*", "0.2", "# Penalty for exceeding proximity radius", "score", "=", "-", "(", "direct_distance", "+", "historical_cost", "+", "proximity_penalty", ")", "+", "(", "average_cost_to_destination", "*", "cost_efficiency_weight", ")", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.316061138376561}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Introduce a factor that increases the score based on proximity to the destination", "proximity_score", "=", "1", "/", "(", "distance_to_destination", "+", "1", ")", "# Closer nodes to the destination earn higher scores", "# Use a penalty for longer distances to the next node", "distance_penalty", "=", "-", "1", "*", "distance_to_next", "# Calculate the total score combining proximity and penalty", "score", "=", "proximity_score", "+", "distance_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.373133925713997}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Adjusted weight for direct distance", "connectivity_weight", "=", "0.4", "# Increased weight for connectivity to unvisited nodes", "density_weight", "=", "0.2", "# Weight for local node density", "total_density", "=", "{", "node", ":", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "node", "!=", "other", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "10", ")", "for", "node", "in", "unvisited_nodes", "}", "# Example threshold of 10 for local connectivity", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average connectivity", "density_score", "=", "total_density", "[", "node", "]", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Density based on nearby unvisited nodes", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "density_weight", "*", "density_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.41724333977419}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "# Introducing a penalty for selecting distant nodes", "penalty", "=", "(", "distance_to_next", "/", "avg_distance_to_unvisited", ")", "if", "avg_distance_to_unvisited", ">", "0", "else", "1", "score", "=", "(", "avg_distance_to_unvisited", "-", "distance_to_next", ")", "-", "penalty", "# Adjust score based on penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.3335850070689865}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Start with positive infinity for minimization", "# Calculate the average remaining distance to any unvisited node", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "# Calculate the direct distance to the current node", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Introduce a future cost based on weighted penalty for all remaining unvisited nodes", "future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "for", "unvisited", "in", "unvisited_nodes", ")", "*", "(", "1", "/", "len", "(", "unvisited_nodes", ")", ")", "# Score based on direct distance and future cost", "score", "=", "direct_distance", "+", "future_cost", "+", "avg_distance_to_unvisited", "# Selecting the node that minimizes this score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm employs a scoring function that incorporates both an exponential decay factor for distance to the destination and a linear heuristic for remaining nodes, aiming to prioritize closer nodes while still considering overall path efficiency.}", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "# Exponential decay factor for distance to the destination", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "exp_decay_score", "=", "2", "**", "(", "-", "distance_to_destination", "/", "10", ")", "# Exponential decay factor", "# Calculate a linear penalty for far nodes based on maximum distance to any unvisited node", "max_distance_to_unvisited", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Linear penalty term based on distance to this node", "linear_penalty", "=", "(", "max_distance_to_unvisited", "-", "distance", ")", "*", "2", "# Score calculation combines exponential factor, linear penalty, and direct distance", "weighted_score", "=", "distance", "+", "linear_penalty", "+", "exp_decay_score", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 36.1397423465301}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "visit_history", "=", "{", "node", ":", "1", "for", "node", "in", "unvisited_nodes", "}", "# Initialize visit history for unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Weighted distance heuristic", "heuristic_score", "=", "(", "distance_to_node", "+", "distance_to_destination", ")", "/", "visit_history", "[", "node", "]", "# Desirability score: penalizes nodes frequently visited", "visit_history", "[", "node", "]", "+=", "1", "# Increment the visit history for the node", "scores", "[", "node", "]", "=", "heuristic_score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the minimum direct distance to unvisited nodes", "min_distance_to_unvisited", "=", "min", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "# Calculate a connection potential based on the average distance to all unvisited nodes", "connection_potential", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "node", "]", "[", "dest", "]", "for", "node", "in", "unvisited_nodes", "for", "dest", "in", "unvisited_nodes", "if", "node", "!=", "dest", "]", ")", "# Node scores based on inverse of distance and connection potential", "node_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Score favors closer nodes and penalizes lower connection potential", "score", "=", "(", "1", "/", "direct_distance", ")", "+", "connection_potential", "node_scores", "[", "node", "]", "=", "score", "# Select the node with the highest score", "next_node", "=", "max", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "penalty_weight", "=", "0.3", "# Weight to factor in the penalty for unvisited nodes", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty_score", "=", "penalty_weight", "*", "num_unvisited", "# Penalty score based on the number of unvisited nodes", "score", "=", "direct_distance", "+", "penalty_score", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm incorporates a multi-factorial score that emphasizes distance, a penalty for unvisited nodes' average distance from the current node, and a penalty for the total distance left to the destination.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ",", "1", ")", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Weighting factors", "weight_distance", "=", "0.4", "weight_avg_distance", "=", "0.4", "weight_destination", "=", "0.2", "# Composite score calculation", "score", "=", "(", "weight_distance", "/", "(", "distance_to_next", "+", "1", ")", ")", "+", "(", "weight_avg_distance", "/", "(", "average_distance_unvisited", "+", "1", ")", ")", "-", "(", "weight_destination", "*", "distance_to_destination", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.025342615542376}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Start with positive infinity for minimization", "# Calculate the maximum remaining distance to any unvisited node", "max_distance_to_unvisited", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "# Calculate the direct distance to the current node", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Introduce a non-linear decay factor based on the count of unvisited nodes", "decay_factor", "=", "(", "1", "-", "(", "len", "(", "unvisited_nodes", ")", "/", "len", "(", "distance_matrix", ")", ")", ")", "**", "2", "# Score based on direct distance and the maximum penalty adjusted by decay factor", "score", "=", "direct_distance", "+", "(", "max_distance_to_unvisited", "*", "decay_factor", ")", "# Selecting the node that minimizes this score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "radius", "=", "3", "# Specified radius for cluster density calculation", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Adjusted weight for direct distance", "density_weight", "=", "0.4", "# Weight for cluster density of unvisited nodes", "heuristic_weight", "=", "0.2", "# Weight for overall heuristic consideration", "# Calculate density for unvisited nodes within a given radius", "def", "calculate_density_score", "(", "node", ")", ":", "density_score", "=", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other", "]", "<=", "radius", ")", "return", "density_score", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "density_score", "=", "calculate_density_score", "(", "node", ")", "heuristic_score", "=", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combined scoring mechanism with density influence", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "density_weight", "*", "density_score", "+", "heuristic_weight", "*", "heuristic_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "total_path_cost", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "if", "node", "!=", "current_node", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "connectivity_score", "=", "len", "(", "unvisited_nodes", ")", "-", "1", "# Consider all other unvisited nodes as potential connections", "# Combined score using a historical cost factor", "historical_cost_factor", "=", "total_path_cost", "/", "len", "(", "unvisited_nodes", ")", "score", "=", "(", "distance_to_next", "+", "distance_to_destination", "+", "historical_cost_factor", ")", "/", "(", "connectivity_score", "+", "1", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_destination", "=", "total_distance_to_unvisited", "/", "len", "(", "unvisited_nodes", ")", "# Introduced a diminishing factor for unvisited nodes based on their distances", "diminishing_factor", "=", "0.5", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_closeness", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "diminishing_factor", "score", "=", "direct_distance", "+", "average_distance_to_destination", "-", "distance_closeness", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.450370583313572}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "historical_cost_weight", "=", "0.4", "# Adjusted historical cost weight", "proximity_weight", "=", "0.4", "# Adjusted weight for proximity to destination", "future_saving_weight", "=", "0.1", "# Reduced future distance savings weight", "exploration_weight", "=", "0.1", "# Introduced weight for exploration", "# Calculate the total distance for unvisited nodes", "total_unvisited_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_unvisited_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "historically_traveled_cost", "=", "historical_cost_weight", "*", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "future_distance_saving", "=", "future_saving_weight", "*", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", ")", "# Introduce randomness modified by average distance", "exploration_score", "=", "exploration_weight", "*", "random", ".", "uniform", "(", "0", ",", "average_distance", ")", "score", "=", "-", "direct_distance", "+", "proximity_score", "-", "historically_traveled_cost", "+", "future_distance_saving", "+", "exploration_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.543492330418714}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance efficiency", "centroid_influence_weight", "=", "0.4", "# Weight for centroids of unvisited nodes", "destination_proximity_weight", "=", "0.2", "# Weight based on proximity to destination", "# Calculate centroid of unvisited nodes", "centroid_x", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "centroid_y", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_centroid", "=", "(", "(", "centroid_x", "-", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "**", "2", "+", "(", "centroid_y", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "**", "2", ")", "**", "0.5", "# Calculate score using weights", "score", "=", "(", "direct_distance_weight", "*", "-", "direct_distance", ")", "+", "(", "centroid_influence_weight", "*", "distance_to_centroid", ")", "+", "(", "destination_proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.598712671037907}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "candidates", "=", "list", "(", "unvisited_nodes", ")", "scored_candidates", "=", "[", "]", "decay_factor", "=", "0.9", "for", "node", "in", "candidates", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "attractiveness_score", "=", "1", "/", "(", "distance_to_destination", "+", "1", ")", "# Avoid division by zero", "# Score combines direct distance, attractiveness, and includes a decay factor", "score", "=", "(", "direct_distance", "*", "decay_factor", ")", "-", "(", "attractiveness_score", "*", "(", "1", "-", "decay_factor", ")", ")", "scored_candidates", ".", "append", "(", "(", "node", ",", "score", ")", ")", "scored_candidates", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "return", "scored_candidates", "[", "0", "]", "[", "0", "]"], "code_perf": 7.041560635263355}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate a penalty factor based on the distance to the destination node", "penalty_factor", "=", "0.5", "# Adjust this factor to modify the influence of the destination", "destination_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Sort unvisited nodes with an added penalty favoring those closer to the destination", "sorted_nodes", "=", "sorted", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "penalty_factor", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "# Select the nearest node with the modified criteria", "next_node", "=", "sorted_nodes", "[", "0", "]", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_weight", "=", "0.6", "# Weight for immediate travel distance", "penalty_weight", "=", "0.3", "# Weight for penalty of route length", "bonus_weight", "=", "0.1", "# Weight for average distance to remaining unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "total_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "average_distance_to_others", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_distance", "*", "immediate_weight", ")", "+", "(", "penalty", "*", "penalty_weight", ")", "-", "(", "average_distance_to_others", "*", "bonus_weight", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.312971023186554}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "total_distance_from_node_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "0.5", "*", "distance_to_next", ")", "+", "(", "0.3", "*", "average_distance_to_unvisited", ")", "+", "(", "0.2", "*", "total_distance_from_node_to_destination", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.098243400991786}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "minimal_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "<", "minimal_distance", ":", "minimal_distance", "=", "distance", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for distance to the closest unvisited node", "future_cost_weight", "=", "0.4", "# Weight for potential future distances", "risk_factor_weight", "=", "0.2", "# Weight for the longest distance to remaining unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "longest_distance_to_unvisited", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "score", "=", "(", "distance_to_destination", "*", "proximity_weight", ")", "-", "(", "direct_distance", "*", "future_cost_weight", ")", "-", "(", "longest_distance_to_unvisited", "*", "risk_factor_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.79726029621378}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "cluster_weight", "=", "0.2", "edge_connection_weight", "=", "0.2", "penalty_weight", "=", "0.1", "def", "calculate_cluster_score", "(", "node", ")", ":", "neighbors", "=", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "15", ")", "# Example threshold", "return", "neighbors", "/", "len", "(", "unvisited_nodes", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "0", "else", "0", "def", "calculate_edge_connection_score", "(", "node", ")", ":", "return", "len", "(", "[", "1", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "5", "]", ")", "# Example threshold for edge connection", "def", "calculate_dynamic_penalty_score", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_score", "=", "calculate_cluster_score", "(", "node", ")", "edge_connection_score", "=", "calculate_edge_connection_score", "(", "node", ")", "penalty_score", "=", "calculate_dynamic_penalty_score", "(", "node", ")", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "cluster_weight", "*", "cluster_score", "+", "edge_connection_weight", "*", "edge_connection_score", "-", "penalty_weight", "*", "penalty_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.6", "# Weight for direct distance", "isolation_penalty_weight", "=", "0.4", "# Penalty for isolation of nodes", "connection_reward_weight", "=", "0.2", "# Reward for potential future connections", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Isolation score based on average distance to all remaining unvisited nodes", "isolation_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "for", "unvisited", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Reward for potential future connections based on the node's proximity to other unvisited nodes", "connection_reward", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "+", "1", ")", "for", "unvisited", "in", "unvisited_nodes", ")", "score", "=", "direct_distance_weight", "*", "direct_distance", "+", "isolation_penalty_weight", "*", "isolation_score", "-", "connection_reward_weight", "*", "connection_reward", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 11.43986677044921}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "visited_nodes", "=", "[", "n", "for", "n", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "n", "not", "in", "unvisited_nodes", "]", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate a score that balances the distance to the current node and the average distance to visited nodes", "average_distance_to_visited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "v", "]", "for", "v", "in", "visited_nodes", ")", "/", "(", "len", "(", "visited_nodes", ")", "+", "1", ")", "if", "visited_nodes", "else", "1", "# Score based on distance to node and distance to destination, adjusted by distance to visited nodes", "score", "=", "(", "distance_to_node", "+", "average_distance_to_visited", ")", "/", "(", "distance_to_destination", "+", "1", ")", "# Avoid division by zero", "# Select the node with the minimum score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.025211235266251}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "distance_penalty_factor", "=", "0.4", "# Weight for penalty on further nodes", "closeness_factor", "=", "0.7", "# Weight for closeness to destination", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_penalty", "=", "distance_penalty_factor", "*", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "avg_distance_to_destination", ")", "score", "=", "direct_distance", "+", "distance_penalty", "+", "(", "closeness_factor", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.583058552198324}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "historical_cost_weight", "=", "0.4", "# Weight for historical cost to visited nodes", "proximity_weight", "=", "0.4", "# Weight for proximity to destination", "connectivity_penalty_weight", "=", "0.2", "# Weight for connectivity of unvisited nodes", "total_historical_cost", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "node", "!=", "current_node", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "historically_traveled_cost", "=", "historical_cost_weight", "*", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", "if", "next_node", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "connectivity_penalty", "=", "connectivity_penalty_weight", "*", "(", "1", "/", "(", "connectivity_score", "+", "1e-5", ")", ")", "# Adding small value to avoid division by zero", "score", "=", "-", "direct_distance", "+", "proximity_score", "-", "historically_traveled_cost", "-", "connectivity_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.562860571011801}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate the total direct distance to the destination", "total_direct_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "# Direct distance from current node to the candidate node", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Penalty based on the distance to the destination node for that candidate", "penalty", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Score combines direct distance and the penalty", "score", "=", "direct_distance", "+", "penalty", "*", "(", "total_direct_distance", "/", "len", "(", "unvisited_nodes", ")", ")", "# Normalize with unvisited node size", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.622833646084267}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "connectivity_weight", "=", "0.3", "# Weight for connectivity to unvisited nodes", "potential_weight", "=", "0.2", "# Weight for potential based on connections to other unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average connectivity", "potential_score", "=", "len", "(", "[", "next", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", "]", ")", "# Count of connections to unvisited nodes", "# Introduce destination distance penalty", "destination_penalty", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "0.3", "# Weight for distance to destination", "score", "=", "distance_weight", "*", "direct_distance", "-", "connectivity_weight", "*", "connectivity_score", "-", "potential_weight", "*", "potential_score", "+", "destination_penalty", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.077746358978151}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "time_weight", "=", "0.3", "# Weight for the time penalty from last visit", "future_savings_weight", "=", "0.2", "# Weight for potential future savings", "penalty_weight", "=", "0.1", "# Weight for penalties based on prior visits ", "# Function to calculate elapsed time since last visit to each unvisited node", "def", "calculate_time_penalty", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "other", "]", "[", "node", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Function to calculate future savings based on unvisited nodes", "def", "calculate_future_savings", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "time_penalty", "=", "calculate_time_penalty", "(", "node", ")", "future_savings", "=", "calculate_future_savings", "(", "node", ")", "# Combined scoring mechanism with penalty and time factors", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "future_savings_weight", "*", "future_savings", "-", "time_weight", "*", "time_penalty", "-", "penalty_weight", "*", "(", "sum", "(", "distance_matrix", "[", "prev", "]", "[", "node", "]", "for", "prev", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.417349887645768}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "candidates", "=", "list", "(", "unvisited_nodes", ")", "scored_candidates", "=", "[", "]", "for", "node", "in", "candidates", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_bonus", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "*", "0.2", "proximity_scaling_factor", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "*", "0.1", "# Factor based on closest unvisited node", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "-", "1", "remaining_unvisited_penalty", "=", "(", "unvisited_count", "*", "0.3", ")", "+", "(", "0.5", "*", "unvisited_count", ")", "# Scale penalty based on remaining nodes", "score", "=", "direct_distance", "-", "connectivity_bonus", "+", "proximity_scaling_factor", "+", "remaining_unvisited_penalty", "scored_candidates", ".", "append", "(", "(", "node", ",", "score", ")", ")", "scored_candidates", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "return", "scored_candidates", "[", "0", "]", "[", "0", "]"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Average distance to unvisited nodes", "avg_distance_to_current", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Variance of distances to unvisited nodes", "distances_to_unvisited", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "distance_variance", "=", "sum", "(", "(", "d", "-", "avg_distance_to_current", ")", "**", "2", "for", "d", "in", "distances_to_unvisited", ")", "/", "len", "(", "distances_to_unvisited", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate direct score with a variance adjustment", "score", "=", "direct_distance", "*", "0.4", "+", "(", "avg_distance_to_current", "-", "direct_distance", ")", "*", "0.4", "-", "(", "0.2", "*", "distance_variance", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 27.896217671056057}
{"code_tokens": ["import", "random", "import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "candidate_nodes", "=", "[", "]", "# Calculate distance decay and find candidate nodes", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "<=", "2", "*", "math", ".", "sqrt", "(", "len", "(", "distance_matrix", ")", ")", ":", "# Distance threshold", "candidate_nodes", ".", "append", "(", "node", ")", "# Calculate weights based on an exponential decay function from minimum distance", "min_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "candidate_nodes", ")", "if", "candidate_nodes", "else", "float", "(", "'inf'", ")", "weights", "=", "[", "(", "math", ".", "exp", "(", "-", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "-", "min_distance", ")", "**", "2", ")", ")", "for", "node", "in", "candidate_nodes", "]", "# Normalize weights", "total_weight", "=", "sum", "(", "weights", ")", "if", "total_weight", ">", "0", ":", "weighted_probs", "=", "[", "weight", "/", "total_weight", "for", "weight", "in", "weights", "]", "else", ":", "weighted_probs", "=", "[", "1", "/", "len", "(", "candidate_nodes", ")", "]", "*", "len", "(", "candidate_nodes", ")", "# Randomly select next node based on weighted probabilities", "next_node", "=", "random", ".", "choices", "(", "candidate_nodes", ",", "weights", "=", "weighted_probs", ",", "k", "=", "1", ")", "[", "0", "]", "if", "candidate_nodes", "else", "None", "return", "next_node"], "code_perf": 24.15784128979194}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "import", "numpy", "as", "np", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "node_visit_counts", "=", "{", "}", "# Dynamic threshold for scoring", "quality_threshold", "=", "0.7", "# Function to calculate heuristic based score", "def", "heuristic_score", "(", "node", ")", ":", "return", "1", "/", "(", "1", "+", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", ")", "# Initialize visit counts for nodes", "for", "node", "in", "unvisited_nodes", ":", "node_visit_counts", "[", "node", "]", "=", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", "+", "1", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "visit_quality", "=", "heuristic_score", "(", "node", ")", "# Combine scores with a dynamic weighting mechanism", "score", "=", "(", "(", "1", "/", "(", "1", "+", "direct_distance", ")", ")", "*", "(", "1", "-", "quality_threshold", "*", "visit_quality", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "connection_counts", "=", "{", "node", ":", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "float", "(", "'inf'", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "1", "/", "(", "direct_distance", "+", "1e-6", ")", "# Avoid division by zero", "connection_weight", "=", "connection_counts", "[", "node", "]", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "score", "=", "direct_distance", "-", "proximity_score", "+", "connection_weight", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_cost", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "exploration_factor", "=", "min", "(", "1.0", ",", "1.0", "/", "(", "num_unvisited", "+", "1", ")", ")", "# Adaptive exploration", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "min_distance_to_destination", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "destination", "]", "for", "destination", "in", "unvisited_nodes", ")", "distance_penalty", "=", "(", "min_distance_to_destination", "-", "direct_distance", ")", "*", "0.4", "# Penalty based on minimum distance", "exploration_bonus", "=", "exploration_factor", "*", "random", ".", "uniform", "(", "0.05", ",", "0.2", ")", "# Exploration component", "score", "=", "direct_distance", "+", "distance_penalty", "-", "exploration_bonus", "if", "score", ">", "max_cost", ":", "max_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 36.13344991618321}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "cluster_savings_weight", "=", "0.4", "# Weight for cluster potential savings", "flexibility_weight", "=", "0.2", "# Weight for route flexibility", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "flexibility_score", "=", "1", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "score", "=", "(", "flexibility_weight", "*", "flexibility_score", ")", "-", "(", "direct_distance_weight", "*", "direct_distance", ")", "+", "(", "cluster_savings_weight", "*", "cluster_average_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.41724333977419}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "centrality_beta", "=", "1.2", "historical_traversal_data", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "# Calculate average distance to destination", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate centrality score based on neighbors in unvisited nodes", "centrality_score", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "# Desirability score inversely related to historical traversal", "desirability_score", "=", "historical_traversal_data", "[", "node", "]", "# Adjusted heuristic combining distances and scores", "weighted_heuristic", "=", "(", "0.6", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "0.4", "*", "(", "centrality_score", "-", "desirability_score", ")", ")", "penalty", "=", "centrality_beta", "*", "(", "1", "/", "(", "centrality_score", "+", "1", ")", ")", "score", "=", "direct_distance", "+", "weighted_heuristic", "+", "penalty", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "# Update historical traversal data for the selected node", "if", "best_node", "is", "not", "None", ":", "historical_traversal_data", "[", "best_node", "]", "+=", "1", "return", "best_node"], "code_perf": 6.4257563991146025}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "max_distance_from_visited", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "dispersion_score", "=", "(", "max_distance_from_visited", "-", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "**", "2", "score", "=", "direct_distance", "+", "0.5", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "0.3", "*", "dispersion_score", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.703953322287745}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "average_penalty_weight", "=", "0.3", "# Weight for penalizing distance to the destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "+", "average_penalty_weight", "*", "(", "average_distance", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.583058552198324}
{"code_tokens": ["import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_combined_score", "=", "float", "(", "'-inf'", ")", "# Calculate the average distance to unvisited nodes for variance score", "distances", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "avg_distance", "=", "sum", "(", "distances", ")", "/", "len", "(", "distances", ")", "if", "distances", "else", "0", "variance_score", "=", "sum", "(", "(", "d", "-", "avg_distance", ")", "**", "2", "for", "d", "in", "distances", ")", "/", "len", "(", "distances", ")", "if", "distances", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Novelty score: incentivizes visiting nodes that are closer than average", "novelty_score", "=", "avg_distance", "-", "distance_to_next", "# Combined score considers the distance, destination proximity, and novelty", "combined_score", "=", "novelty_score", "*", "0.5", "-", "(", "distance_to_next", "*", "0.4", "+", "distance_to_destination", "*", "0.1", ")", "-", "variance_score", "*", "0.05", "if", "combined_score", ">", "max_combined_score", ":", "max_combined_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.130635425960672}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "novelty_weight", "=", "0.3", "# Weight for novelty score of unvisited nodes", "future_distance_weight", "=", "0.2", "# Weight for future potential distances", "penalty_weight", "=", "0.1", "# Weight for penalty on connected nodes", "# Function to calculate novelty score based on the uniqueness of unvisited nodes", "def", "calculate_novelty_score", "(", "node", ")", ":", "return", "len", "(", "unvisited_nodes", ")", "-", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "other", "in", "unvisited_nodes", ")", "# Function to compute average distance to destination from unvisited nodes", "def", "calculate_future_distance", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Function to calculate the penalty score for heavily connected nodes", "def", "calculate_penalty_score", "(", "node", ")", ":", "return", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "1.0", ")", "# Penalizing heavily connected nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "novelty_score", "=", "calculate_novelty_score", "(", "node", ")", "future_distance", "=", "calculate_future_distance", "(", "node", ")", "penalty_score", "=", "calculate_penalty_score", "(", "node", ")", "# Combined scoring mechanism", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "novelty_weight", "*", "novelty_score", "+", "future_distance_weight", "*", "future_distance", "-", "penalty_weight", "*", "penalty_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.802497617322052}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "temporal_weight", "=", "0.5", "penalty_weight", "=", "1.5", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_from_node_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "heuristic_score", "=", "temporal_weight", "*", "(", "distance_to_destination", "-", "direct_distance", ")", "+", "(", "1", "-", "temporal_weight", ")", "*", "distance_from_node_to_destination", "penalty_score", "=", "penalty_weight", "*", "(", "distance_from_node_to_destination", "/", "(", "1", "+", "direct_distance", ")", ")", "score", "=", "direct_distance", "+", "heuristic_score", "+", "penalty_score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 16.272534375816694}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity to destination", "efficiency_weight", "=", "0.5", "# Weight for tour efficiency reduction", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_distances", "=", "[", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "]", "avg_distance_to_others", "=", "sum", "(", "remaining_distances", ")", "/", "(", "len", "(", "remaining_distances", ")", "or", "1", ")", "min_distance_to_others", "=", "min", "(", "remaining_distances", ",", "default", "=", "0", ")", "# Scoring based on proximity to destination and efficiency in reducing tour length", "score", "=", "(", "direct_distance", "*", "efficiency_weight", ")", "+", "(", "avg_distance_to_others", "*", "(", "1", "-", "efficiency_weight", ")", ")", "-", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.327311312990075}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "penalties", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "local_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Introduce a penalty factor based on the local distance, promoting a more balanced selection", "penalty_factor", "=", "0.1", "*", "local_distance", "# Example dynamic penalty", "total_cost", "=", "local_distance", "+", "distance_to_destination", "+", "penalty_factor", "penalties", "[", "node", "]", "=", "total_cost", "next_node", "=", "min", "(", "penalties", ",", "key", "=", "penalties", ".", "get", ")", "return", "next_node"], "code_perf": 7.924932750374845}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "urgency_weight", "=", "0.5", "# Weight for the urgency to visit nearby nodes", "detour_penalty_weight", "=", "0.5", "# Weight for penalty based on detour distance", "# Calculate immediate distance to destination", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "detour_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "average_detour", "=", "detour_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "# Score calculation", "score", "=", "(", "urgency_weight", "*", "(", "1", "/", "(", "direct_distance", "+", "1e-5", ")", ")", ")", "-", "(", "detour_penalty_weight", "*", "average_detour", ")", "+", "(", "(", "1", "-", "urgency_weight", ")", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.855877821316608}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "cluster_weight", "=", "0.4", "# Weight for clustering", "penalty_weight", "=", "0.2", "# Weight for penalty based on unvisited nodes", "# Function to calculate clustering score based on unvisited nodes distance", "def", "calculate_clustering_score", "(", "node", ")", ":", "cluster_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "cluster_score", "+=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "+", "1e-6", ")", "# Adding a small constant to avoid division by zero", "return", "cluster_score", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "clustering_score", "=", "calculate_clustering_score", "(", "node", ")", "penalty", "=", "(", "len", "(", "unvisited_nodes", ")", "**", "2", ")", "if", "unvisited_nodes", "else", "0", "# Combined scoring mechanism with penalties for longer paths and unvisited nodes", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "cluster_weight", "*", "clustering_score", "-", "penalty_weight", "*", "penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.811288564013772}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "import", "numpy", "as", "np", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "exploration_weight", "=", "0.4", "# Weight for exploratory behavior", "visit_history_weight", "=", "0.2", "# Weight for discouraging frequent visits", "# Function to calculate total distance to remaining unvisited nodes", "def", "calculate_total_distance", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "# Function to assess penalties based on visit counts", "def", "calculate_visit_penalty", "(", "node", ")", ":", "return", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", "*", "0.5", "# Linearly grow penalty", "# Initialize visit counts for nodes if not present", "global", "node_visit_counts", "node_visit_counts", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "# Update visit counts at each call", "node_visit_counts", "[", "node", "]", "=", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", "+", "1", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance", "=", "calculate_total_distance", "(", "node", ")", "penalty", "=", "calculate_visit_penalty", "(", "node", ")", "# Combined scoring mechanism with dynamic multi-faceted score", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "exploration_weight", "*", "(", "1", "/", "(", "total_distance", "+", "1", ")", ")", "-", "# Encourage exploration based on total distance", "visit_history_weight", "*", "penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.233994687673571}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "proximity_factor", "=", "1.0", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Factor decreases with more unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty_score", "=", "(", "1", "-", "proximity_factor", ")", "*", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "(", "1", "+", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", ")", "score", "=", "direct_distance", "+", "penalty_score", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.262315371288764}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "(", "num_unvisited", "-", "1", ")", "*", "0.5", "# Penalty for remaining unvisited nodes", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "bonus", "=", "(", "1", "/", "(", "distance_to_destination", "+", "1", ")", ")", "*", "2", "# Bonus for being closer to destination", "total_cost", "=", "direct_distance", "+", "penalty", "-", "bonus", "if", "total_cost", "<", "min_cost", ":", "min_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.835708007961632}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "cluster_weight", "=", "0.3", "# Weight for proximity to clusters", "penalty_weight", "=", "0.3", "# Weight for penalty based on distance from destination", "# Calculate clusters for unvisited nodes", "def", "calculate_cluster_score", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_score", "=", "calculate_cluster_score", "(", "node", ")", "penalty_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Penalty for distance from destination", "# Combined scoring mechanism", "score", "=", "(", "distance_weight", "*", "direct_distance", ")", "+", "(", "cluster_weight", "*", "cluster_score", ")", "+", "(", "penalty_weight", "*", "penalty_score", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.730257529566728}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate scores for each unvisited node; include penalty and boosting factor", "scores", "=", "{", "}", "penalty_factor", "=", "1.5", "# Penalty for longer paths", "boosting_factor", "=", "2.0", "# Boost for nodes closer to destination", "for", "node", "in", "unvisited_nodes", ":", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "penalty_factor", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "boost_score", "=", "distance_to_destination", "*", "boosting_factor", "scores", "[", "node", "]", "=", "distance_score", "+", "connectivity_score", "-", "boost_score", "# Lower score is better", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 7.579441656661819}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "total_distance", "=", "0", "next_node", "=", "None", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "average_distance", "=", "(", "direct_distance", "+", "total_distance_to_remaining", "/", "(", "num_unvisited", "-", "1", ")", ")", "if", "num_unvisited", ">", "1", "else", "direct_distance", "if", "next_node", "is", "None", "or", "average_distance", "<", "min_average_distance", ":", "min_average_distance", "=", "average_distance", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.4323878079629}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "estimated_tour_length", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "novelty_factor", "=", "1", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "# Encourage visiting lesser-visited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "selection_probability", "=", "novelty_factor", "*", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "score", "=", "direct_distance", "+", "estimated_tour_length", "-", "selection_probability", "# Introducing randomness in selection to avoid deterministic choices", "randomized_score", "=", "score", "+", "random", ".", "uniform", "(", "0", ",", "0.1", ")", "if", "randomized_score", "<", "min_cost", ":", "min_cost", "=", "randomized_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.531067228446595}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "cumulative_weight", "=", "0.4", "# Weight for cumulative penalties", "opportunistic_weight", "=", "0.2", "# Weight for proximity to other unvisited nodes", "# Calculate cumulative distance penalties for unvisited nodes", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "opportunistic_score", "=", "min", "(", "proximity_to_destination", ",", "direct_distance", ")", "# Minimize distance to reduce travel cost", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "cumulative_weight", "*", "cumulative_distance", ")", "+", "(", "opportunistic_weight", "*", "opportunistic_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.846864377505378}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "connectivity_factor", "=", "0.5", "# Weight for the connectivity efficiency metric", "penalty_base", "=", "0.2", "# Base penalty for being unvisited", "distance_weight", "=", "0.5", "# Weight for the direct distance", "heuristic_weight", "=", "0.3", "# Weight for heuristic-based estimates", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "heuristic_score", "=", "heuristic_weight", "*", "(", "1", "/", "(", "1", "+", "connectivity_score", ")", ")", "# Inverse connectivity gives more weight to better-connected nodes", "penalty_score", "=", "penalty_base", "*", "len", "(", "unvisited_nodes", ")", "# Penalty increases with more unvisited nodes", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", ")", "+", "heuristic_score", "-", "penalty_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.237872234320987}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "penalty_factor", "=", "0.3", "# Factor to penalize longer paths", "historical_performance", "=", "{", "node", ":", "1", "for", "node", "in", "unvisited_nodes", "}", "# Simulated historical effectiveness", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "potential_pathway_weight", "=", "0.3", "# Weight for promising future paths", "historical_weight", "=", "0.2", "# Weight for historical performance", "alignment_weight", "=", "0.2", "# Weight for alignment towards destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate potential future pathways based on unvisited connections", "potential_pathway_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Estimate score for alignment towards the final destination", "destination_alignment_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Historical performance score", "historical_score", "=", "historical_performance", "[", "node", "]", "# Combined score with penalty for longer paths", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "potential_pathway_weight", "*", "potential_pathway_score", "-", "penalty_factor", "*", "direct_distance", "+", "alignment_weight", "*", "destination_alignment_score", "+", "historical_weight", "*", "historical_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.340998665647812}
{"code_tokens": ["import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "highest_score", "=", "float", "(", "'-inf'", ")", "# Define weights", "weight_distance", "=", "0.7", "# Weight for minimum distance", "weight_clustering", "=", "0.3", "# Weight for clustering score", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Clustering score: consider the sum of distances to all other unvisited nodes", "clustering_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "# Minimum distance to any unvisited node", "min_distance_to_unvisited", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Combined score: balance between minimum distance and clustering score", "combined_score", "=", "(", "min_distance_to_unvisited", "*", "weight_distance", ")", "-", "(", "clustering_score", "*", "weight_clustering", ")", "if", "combined_score", ">", "highest_score", ":", "highest_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 27.946708182593476}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "proximity_weight", "=", "0.3", "# Weight for proximity to unvisited nodes", "potential_savings_weight", "=", "0.2", "# Weight for potential future savings", "adaptive_penalty_weight", "=", "0.1", "# Adaptive penalty for longer paths", "# Function to calculate proximity score based on unvisited nodes", "def", "calculate_proximity_score", "(", "node", ")", ":", "proximity_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "+", "1e-6", ")", "for", "other", "in", "unvisited_nodes", ")", "# Avoid division by zero", "return", "proximity_score", "# Function to calculate potential savings based on remaining nodes", "def", "calculate_potential_savings", "(", "node", ")", ":", "return", "sum", "(", "min", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", ",", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", ")", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Function to calculate adaptive penalty", "def", "calculate_adaptive_penalty", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "calculate_proximity_score", "(", "node", ")", "potential_savings", "=", "calculate_potential_savings", "(", "node", ")", "adaptive_penalty", "=", "calculate_adaptive_penalty", "(", "node", ")", "# Combined scoring mechanism", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "proximity_weight", "*", "proximity_score", "+", "potential_savings_weight", "*", "potential_savings", "-", "adaptive_penalty_weight", "*", "adaptive_penalty", ")", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.142631871941695}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "potential_profit_weight", "=", "0.5", "# Weight for future potential visits", "detour_penalty_weight", "=", "0.1", "# Weight for detour penalties", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "adjusted_detour", "=", "max", "(", "0", ",", "direct_distance", "-", "total_distance_to_destination", ")", "# Calculate potential future savings based on remaining unvisited nodes", "potential_future_profit", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "potential_profit_weight", "*", "potential_future_profit", ")", "-", "(", "detour_penalty_weight", "*", "adjusted_detour", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.470175704903754}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "avg_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "penalty_factor", "=", "0.2", "*", "(", "len", "(", "distance_matrix", ")", "-", "len", "(", "unvisited_nodes", ")", ")", "# Penalize for visited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "+", "0.5", "*", "(", "avg_distance_remaining", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "penalty_factor", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.450370583313572}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "# Calculate the direct distance to the node", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Evaluate the penalty based on the distances to remaining unvisited nodes", "distance_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "# Estimate the distance to return to the destination node", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Construct the score with a balance of proximity and penalty", "adjusted_score", "=", "(", "distance_to_node", "+", "distance_penalty", "*", "0.5", ")", "+", "distance_to_destination", "if", "adjusted_score", "<", "lowest_score", ":", "lowest_score", "=", "adjusted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 17.000453216879542}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "unvisited_penalty", "=", "num_unvisited", "/", "(", "num_unvisited", "+", "1", ")", "# Normalize penalty based on unvisited count", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "direct_distance", "+", "unvisited_penalty", "*", "distance_to_destination", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.958619780000175}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.6", "# Weight for immediate proximity", "cluster_weight", "=", "0.4", "# Weight for cluster potential", "base_score", "=", "1.0", "# Base score to enhance discrimination", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "exploration_penalty", "=", "0.15", "*", "(", "len", "(", "unvisited_nodes", ")", "**", "0.5", ")", "# Penalty scaling with unvisited nodes", "# Effectiveness of visiting this node towards reaching an unvisited cluster", "effective_cluster_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "relative_cluster_distance", "=", "effective_cluster_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# New scoring mechanism using proximity and potential savings", "score", "=", "base_score", "-", "(", "proximity_weight", "*", "direct_distance", ")", "+", "(", "cluster_weight", "*", "relative_cluster_distance", ")", "-", "exploration_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.35828255629592}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_distance_visited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "# Direct distance to the current node", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Penalty for being too far from the already visited nodes", "penalty", "=", "sum", "(", "distance_matrix", "[", "visited", "]", "[", "node", "]", "for", "visited", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Score based on direct distance and penalty", "score", "=", "direct_distance", "+", "penalty", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate a score for each unvisited node based on distance and penalty", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "scores", "[", "node", "]", "=", "distance_to_node", "+", "(", "distance_to_destination", "*", "1.5", ")", "# Penalty for distance to destination", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 8.46985744010961}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "accessibility_weight", "=", "0.5", "# Weight for accessibility to unvisited nodes", "distance_weight", "=", "0.5", "# Weight for proximity to the destination node", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_unvisited_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", ")", "+", "(", "average_unvisited_distance", "*", "accessibility_weight", ")", "+", "(", "distance_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.292595875030693}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "visit_frequency", "=", "{", "node", ":", "0", "for", "node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "}", "# Tracks how many times each node has been visited", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for immediate travel cost", "novelty_weight", "=", "0.4", "# Weight for node novelty effect", "frequency_weight", "=", "0.1", "# Weight to penalize based on visit frequency", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Novelty factor: rarer visits result in a boost", "novelty_factor", "=", "1", "/", "(", "visit_frequency", "[", "node", "]", "+", "1", ")", "# Increasingly positive impact for under-visited nodes", "# Penalty for the frequency of visits with decay", "frequency_penalty", "=", "visit_frequency", "[", "node", "]", "**", "2", "*", "frequency_weight", "# Quadratic penalty for more significant impact", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", ")", "+", "(", "novelty_weight", "*", "novelty_factor", ")", "-", "frequency_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "visit_frequency", "[", "next_node", "]", "+=", "1", "# Update visit frequency for the selected next node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "randomness_factor", "=", "0.2", "# Factor to introduce randomness in scoring", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "circularity_weight", "=", "0.3", "# Weight for maintaining circular paths", "exploration_weight", "=", "0.2", "# Weight for encouraging exploration", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "circularity_score", "=", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "/", "(", "2", "*", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "# Combined score considering distance, circularity, and randomness", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "circularity_weight", "*", "circularity_score", "+", "exploration_weight", "*", "random", ".", "random", "(", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.295616704717297}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for immediate travel cost", "efficiency_weight", "=", "0.4", "# Weight for future travel efficiency", "remaining_weight", "=", "0.2", "# Weight for number of remaining unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_count", "=", "len", "(", "unvisited_nodes", ")", "# Count of unvisited nodes", "future_efficiency", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "remaining_count", "or", "1", ")", "# Average distance to remaining nodes", "score", "=", "(", "proximity_weight", "*", "immediate_distance", ")", "+", "(", "efficiency_weight", "*", "future_efficiency", ")", "+", "(", "remaining_weight", "*", "remaining_count", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate the distance to the destination from the current node", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Initialize scores for each unvisited node", "scores", "=", "{", "}", "min_distance", "=", "float", "(", "'inf'", ")", "# Compute the minimum distance to any unvisited node for normalization", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance_to_node", "<", "min_distance", ":", "min_distance", "=", "distance_to_node", "# Calculate scores for each unvisited node", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", "exploration_bonus", "=", "(", "1", "/", "(", "distance_to_node", "+", "1", ")", ")", "*", "random", ".", "uniform", "(", "0.5", ",", "1.5", ")", "# Reward for exploring less traveled nodes", "penalty_factor", "=", "(", "distance_to_node", "/", "min_distance", ")", "*", "0.5", "# Penalty for longer distances", "scores", "[", "node", "]", "=", "(", "proximity_score", "-", "penalty_factor", "+", "exploration_bonus", ")", "# Select the node with the maximum score", "next_node", "=", "max", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.861937657755568}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm utilizes an adaptive scoring system that incorporates a dynamic weight for proximity and an estimated future travel cost based on the average distance to remaining unvisited nodes.}", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "# Calculate remaining distances to destination", "remaining_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Adaptive weight based on current distance to the next node and future potential distances", "adaptive_weight", "=", "distance", "/", "(", "remaining_distance_to_destination", "+", "1e-5", ")", "# Estimate future cost: average distance to remaining unvisited nodes", "future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "adj", "]", "for", "adj", "in", "unvisited_nodes", "if", "adj", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "# Combine metrics: proximity adjusted by adaptive weight and estimated future cost", "score", "=", "adaptive_weight", "+", "future_cost", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.798415596970887}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "temperature", "=", "1.0", "# Initial temperature", "cooling_rate", "=", "0.95", "# Cooling rate", "max_iterations", "=", "100", "# Number of iterations", "best_next_node", "=", "None", "lowest_cost", "=", "float", "(", "'inf'", ")", "for", "_", "in", "range", "(", "max_iterations", ")", ":", "# Randomly select a candidate from the unvisited nodes", "candidate_node", "=", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate_node", "]", "return_distance", "=", "distance_matrix", "[", "candidate_node", "]", "[", "destination_node", "]", "cost", "=", "direct_distance", "+", "return_distance", "# Acceptance criteria based on the simulated annealing logic", "if", "cost", "<", "lowest_cost", ":", "lowest_cost", "=", "cost", "best_next_node", "=", "candidate_node", "else", ":", "# Probability of acceptance of worse solutions", "if", "random", ".", "random", "(", ")", "<", "np", ".", "exp", "(", "-", "(", "cost", "-", "lowest_cost", ")", "/", "temperature", ")", ":", "best_next_node", "=", "candidate_node", "# Cool down the temperature", "temperature", "*=", "cooling_rate", "return", "best_next_node"], "code_perf": 8.683496037674235}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_distance_covered", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "temperature", "=", "max", "(", "1", ",", "10", "-", "total_distance_covered", "/", "10", ")", "# Dynamic temperature factor", "exploration_factor", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "normalized_inverse_distance", "=", "1", "/", "(", "direct_distance", "+", "1e-9", ")", "# Prevent division by zero", "# Calculate scores incorporating temperature and exploration", "weighted_score", "=", "(", "0.5", "*", "normalized_inverse_distance", "+", "0.3", "*", "exploration_factor", "+", "0.2", "*", "(", "1", "/", "(", "max", "(", "1", ",", "len", "(", "unvisited_nodes", ")", ")", ")", ")", ")", "# Favor nodes in larger unvisited sets", "score", "=", "direct_distance", "/", "temperature", "+", "weighted_score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 36.1397423465301}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "node_scores", "=", "{", "}", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_destination", "=", "total_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", "proximity_weight", "=", "0.5", "# Weight for current proximity", "future_weight", "=", "0.5", "# Weight for future distance to destination", "penalty_factor", "=", "0.2", "# Penalty factor to encourage unvisited nodes exploration", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_distance_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "average_distance_to_destination", "# Calculate score combining the direct distance and future considerations", "score", "=", "(", "proximity_weight", "*", "direct_distance", ")", "+", "(", "future_weight", "*", "future_distance_cost", ")", "+", "penalty_factor", "node_scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# Define a distance threshold to prioritize closer nodes", "distance_threshold", "=", "10", "# Adjust this threshold as needed", "# Filter unvisited nodes within the distance threshold", "close_nodes", "=", "[", "node", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<=", "distance_threshold", "]", "# If no close nodes are found, use all unvisited nodes", "nodes_to_consider", "=", "close_nodes", "if", "close_nodes", "else", "unvisited_nodes", "# Randomly sample a subset from the filtered nodes", "sample_size", "=", "min", "(", "3", ",", "len", "(", "nodes_to_consider", ")", ")", "# Sample size of 3 or less if fewer nodes available", "sampled_nodes", "=", "random", ".", "sample", "(", "nodes_to_consider", ",", "sample_size", ")", "# Select the closest node from the sampled nodes", "next_node", "=", "min", "(", "sampled_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "return", "next_node"], "code_perf": 17.222788173900682}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "proximity_weight", "=", "0.3", "# Weight for proximity to destination", "hop_penalty_weight", "=", "0.2", "# Weight for number of hops (connections to other unvisited nodes)", "# Function to calculate distance from the current node to the destination", "def", "calculate_proximity_score", "(", "node", ")", ":", "return", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Function to calculate hop penalty (number of connections to unvisited nodes)", "def", "calculate_hop_penalty", "(", "node", ")", ":", "return", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "other", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", ">", "0", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "calculate_proximity_score", "(", "node", ")", "hop_penalty", "=", "calculate_hop_penalty", "(", "node", ")", "# Combined scoring mechanism with multiple objectives", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "-", "proximity_weight", "*", "proximity_score", "+", "hop_penalty_weight", "*", "hop_penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.602975755903087}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "unvisited_nodes", "=", "list", "(", "unvisited_nodes", ")", "def", "weighted_average_distance", "(", "nodes", ")", ":", "total_distance", "=", "0", "for", "node", "in", "nodes", ":", "total_distance", "+=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "return", "total_distance", "/", "len", "(", "nodes", ")", "avg_distance", "=", "weighted_average_distance", "(", "unvisited_nodes", ")", "optimal_node", "=", "None", "min_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance_to_node", "<", "min_distance", ":", "min_distance", "=", "distance_to_node", "optimal_node", "=", "node", "return", "optimal_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Start with positive infinity for minimization", "# Calculate the total distance and square of distances to the destination", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "squared_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "**", "2", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_destination", "=", "total_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", "penalty_factor", "=", "squared_distance_to_destination", "/", "(", "len", "(", "unvisited_nodes", ")", "**", "2", ")", "for", "node", "in", "unvisited_nodes", ":", "# Calculate the direct distance to the current node", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Score based on a combination of direct distance and the adjusted average distance to the destination", "score", "=", "direct_distance", "+", "average_distance_to_destination", "+", "penalty_factor", "# Selecting the node that minimizes this score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate total distances and average distance to unvisited nodes", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_nodes_count", "=", "len", "(", "unvisited_nodes", ")", "# Heuristic weighting factors", "immediate_weight", "=", "1", "/", "(", "1", "+", "direct_distance", ")", "penalty_weight", "=", "remaining_nodes_count", "/", "(", "1", "+", "direct_distance", ")", "average_weight", "=", "1", "/", "(", "1", "+", "average_distance_to_unvisited", ")", "# Combined score taking into account immediate distance, penalty for remaining nodes and average distance", "score", "=", "immediate_weight", "+", "penalty_weight", "+", "average_weight", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 36.1397423465301}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity to destination", "unvisited_penalty_weight", "=", "0.5", "# Weight for penalizing unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "unvisited_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "score", "=", "(", "direct_distance", "*", "(", "1", "-", "proximity_weight", ")", "+", "distance_to_destination", "*", "proximity_weight", "+", "unvisited_penalty", "*", "unvisited_penalty_weight", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.392093580764584}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate average distance to unvisited nodes", "avg_distance", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "# Dynamic penalty based on the number of unvisited nodes", "dynamic_penalty", "=", "(", "len", "(", "unvisited_nodes", ")", "**", "1.5", ")", "*", "0.1", "# Calculate scores for unvisited nodes", "node_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "(", "direct_distance", "*", "0.4", ")", "+", "(", "avg_distance", "*", "0.4", ")", "+", "(", "dynamic_penalty", "*", "0.2", ")", "node_scores", "[", "node", "]", "=", "score", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to destination", "clustering_weight", "=", "0.4", "# Weight for clustering effectiveness", "exploration_weight", "=", "0.2", "# Weight for random exploration", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty_factor", "=", "(", "len", "(", "unvisited_nodes", ")", "**", "2", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "1", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "*", "penalty_factor", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "random_exploration", "=", "random", ".", "uniform", "(", "-", "1", ",", "1", ")", "*", "exploration_weight", "*", "direct_distance", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", ")", "+", "(", "cluster_average_distance", "*", "clustering_weight", ")", "-", "(", "penalty_factor", "*", "direct_distance", ")", "*", "0.3", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "random_exploration", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.4522681396699335}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "proximity_factor", "=", "0.6", "# Importance of reaching closer nodes", "cluster_weight", "=", "0.3", "# Weight for clustering potential", "penalty_factor", "=", "0.1", "# Adaptive penalty factor for longer paths", "if", "unvisited_nodes", ":", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate neighbor connectivity (sum of distances to other unvisited nodes)", "neighbor_connectivity", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "# Encourage proximity to the destination", "proximity_score", "=", "-", "direct_distance", "*", "proximity_factor", "# Score for clustering, favoring nodes that connect to many other unvisited nodes", "clustering_score", "=", "neighbor_connectivity", "*", "cluster_weight", "# Adaptive penalty based on distance from the destination", "adaptive_penalty", "=", "penalty_factor", "*", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "direct_distance", ")", "# Combined score", "score", "=", "proximity_score", "+", "clustering_score", "-", "adaptive_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.83114385616714}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.5", "connectivity_weight", "=", "0.3", "penalty_weight", "=", "0.2", "def", "calculate_connectivity_score", "(", "node", ")", ":", "return", "sum", "(", "1.0", "/", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "+", "1e-6", ")", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "def", "recent_visited_penalty", "(", "node", ",", "recent_nodes", ")", ":", "return", "1.0", "if", "node", "in", "recent_nodes", "else", "0.0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "calculate_connectivity_score", "(", "node", ")", "penalty_score", "=", "recent_visited_penalty", "(", "node", ",", "unvisited_nodes", ")", "score", "=", "(", "direct_distance_weight", "*", "(", "-", "direct_distance", ")", "+", "connectivity_weight", "*", "connectivity_score", "-", "penalty_weight", "*", "penalty_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.079813254485867}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "probabilities", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "proximity_factor", "=", "1", "/", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ">", "0", "else", "float", "(", "'inf'", ")", "probabilities", "[", "node", "]", "=", "proximity_factor", "/", "total_distance", "# Introduce a random factor to explore less probable nodes", "weighted_candidates", "=", "[", "(", "node", ",", "prob", "*", "random", ".", "uniform", "(", "0.5", ",", "1.5", ")", ")", "for", "node", ",", "prob", "in", "probabilities", ".", "items", "(", ")", "]", "next_node", "=", "max", "(", "weighted_candidates", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 7.874900663766554}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "unvisited_nodes", "=", "list", "(", "unvisited_nodes", ")", "def", "heuristic", "(", "node", ")", ":", "# Example heuristic: distance to destination node adjusted by average distance to other unvisited nodes", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "return", "1", "/", "(", "avg_distance", "+", "1", ")", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "distance", "*", "heuristic", "(", "node", ")", "# Combine distance and modified heuristic", "scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.797780584122648}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.5", "# Weight for direct distance to destination", "exploration_weight", "=", "0.5", "# Weight for exploring unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Scoring based on direct distance to destination and reciprocal of distance to unvisited nodes", "score", "=", "-", "direct_distance_weight", "*", "distance_to_destination", "+", "exploration_weight", "*", "(", "1", "/", "(", "direct_distance", "+", "1e-6", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.127998356161583}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_remaining", "=", "total_distance_to_remaining", "/", "len", "(", "unvisited_nodes", ")", "direct_influence_weight", "=", "0.6", "# Adjusted weight for direct distance influence", "strategic_importance_weight", "=", "0.4", "# Adjusted weight for future path importance", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "strategic_importance", "=", "strategic_importance_weight", "*", "(", "average_distance_to_remaining", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "score", "=", "(", "direct_influence_weight", "*", "direct_distance", ")", "+", "strategic_importance", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.4400946290894465}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_cost", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "# Direct distance to the current node", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Contribution from all unvisited nodes in relation to this node", "contributive_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Score based on direct distance and contributive distance", "score", "=", "direct_distance", "+", "contributive_distance", "# Adjusting score based on the ratio of the previous costs", "adjustment_ratio", "=", "total_cost", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "adjusted_score", "=", "score", "-", "adjustment_ratio", "if", "adjusted_score", "<", "best_score", ":", "best_score", "=", "adjusted_score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "penalty_factor", "=", "1.5", "# Factor to apply to longer distance penalties", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "density_weight", "=", "0.4", "# Weight for density of nearby unvisited nodes", "detour_penalty_weight", "=", "0.2", "# Weight for detour penalties", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate density score based on closeness to unvisited nodes", "nearby_density_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "node", "!=", "next", ")", "# Estimate penalty for detours (long distances)", "detour_penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", ")", "# Combined score with a penalty for longer detours", "score", "=", "-", "direct_distance_weight", "*", "direct_distance", "+", "density_weight", "*", "nearby_density_score", "-", "detour_penalty_weight", "*", "(", "penalty_factor", "*", "detour_penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 27.995176296993485}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate total distance to all unvisited nodes from the current node", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Define a decay factor that reduces the influence of farther nodes", "decay_factor", "=", "0.5", "# Adjust this value for stronger or weaker decay", "# Calculate scores for each unvisited node combining its direct distance and a decayed total distance", "node_scores", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "decay_factor", "*", "(", "total_distance", "/", "len", "(", "unvisited_nodes", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the node with the minimum score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "clusters", "=", "{", "}", "# Group unvisited nodes into clusters based on distance", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "not", "in", "clusters", ":", "clusters", "[", "distance", "]", "=", "[", "]", "clusters", "[", "distance", "]", ".", "append", "(", "node", ")", "# Sort cluster distances", "sorted_distances", "=", "sorted", "(", "clusters", ".", "keys", "(", ")", ")", "# Identify scores for the nearest cluster", "scores", "=", "{", "}", "for", "distance", "in", "sorted_distances", ":", "if", "distance", "in", "clusters", ":", "nearest_cluster_nodes", "=", "clusters", "[", "distance", "]", "max_distance", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "nearest_cluster_nodes", ")", "for", "node", "in", "nearest_cluster_nodes", ":", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_score", "=", "1", "/", "(", "1", "+", "distance_score", ")", "# Encourage shorter distances", "decay_factor", "=", "math", ".", "exp", "(", "-", "distance_score", "/", "max_distance", ")", "# Decay based on distance", "scores", "[", "node", "]", "=", "heuristic_score", "*", "decay_factor", "# Select the node with the highest score", "next_node", "=", "max", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "clusters", "=", "{", "}", "cluster_radius", "=", "10", "# Distance within which to consider nodes for clustering", "# Clustering unvisited nodes based on proximity", "for", "node", "in", "unvisited_nodes", ":", "distance_to_current", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance_to_current", "<=", "cluster_radius", ":", "closest_cluster", "=", "None", "min_distance", "=", "float", "(", "'inf'", ")", "for", "cluster_center", "in", "clusters", ":", "cluster_distance", "=", "distance_matrix", "[", "node", "]", "[", "cluster_center", "]", "if", "cluster_distance", "<", "min_distance", "and", "cluster_distance", "<", "cluster_radius", ":", "min_distance", "=", "cluster_distance", "closest_cluster", "=", "cluster_center", "if", "closest_cluster", "is", "not", "None", ":", "clusters", "[", "closest_cluster", "]", ".", "append", "(", "node", ")", "else", ":", "clusters", "[", "node", "]", "=", "[", "node", "]", "# Create new cluster with the node itself", "else", ":", "if", "node", "not", "in", "clusters", ":", "clusters", "[", "node", "]", "=", "[", "node", "]", "# Single node cluster", "# Selecting the best next node from the cluster with the closest center", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "cluster_center", ",", "cluster_nodes", "in", "clusters", ".", "items", "(", ")", ":", "cluster_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "cluster_center", "]", "for", "node", "in", "cluster_nodes", ":", "score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "(", "0.5", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "-", "(", "0.3", "*", "cluster_distance", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "score_dict", "=", "{", "}", "total_visits", "=", "len", "(", "distance_matrix", ")", "-", "len", "(", "unvisited_nodes", ")", "# Number of nodes visited so far", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "frequency_penalty", "=", "(", "total_visits", "/", "(", "len", "(", "distance_matrix", ")", "-", "1", ")", ")", "*", "average_distance_to_unvisited", "# Penalty increases with more visits", "score", "=", "distance", "+", "frequency_penalty", "# Total score considers distance and frequency penalty", "score_dict", "[", "node", "]", "=", "score", "# Find the nodes with the minimum score", "min_score", "=", "min", "(", "score_dict", ".", "values", "(", ")", ")", "best_candidates", "=", "[", "node", "for", "node", ",", "score", "in", "score_dict", ".", "items", "(", ")", "if", "score", "==", "min_score", "]", "# Introduce random selection among the best candidates with an exploration factor", "if", "best_candidates", ":", "exploration_factor", "=", "0.4", "# 40% chance of selecting randomly from the best candidates", "if", "random", ".", "random", "(", ")", "<", "exploration_factor", ":", "return", "random", ".", "choice", "(", "best_candidates", ")", "else", ":", "return", "best_candidates", "[", "0", "]", "# Select the best candidate", "return", "None"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# More emphasis on direct distance", "cluster_weight", "=", "0.3", "# Weight for proximity to clusters of unvisited nodes", "heuristic_weight", "=", "0.2", "# Weight for overall spatial positioning of unvisited nodes", "# Calculate clusters for unvisited nodes", "def", "calculate_cluster_score", "(", "node", ")", ":", "cluster_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "cluster_score", "+=", "distance_matrix", "[", "node", "]", "[", "other", "]", "return", "cluster_score", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_score", "=", "calculate_cluster_score", "(", "node", ")", "heuristic_score", "=", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combined scoring mechanism", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "cluster_weight", "*", "cluster_score", "+", "heuristic_weight", "*", "heuristic_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.337920465110309}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "connectivity_weight", "=", "0.3", "# Weight for connectivity of unvisited nodes", "return_penalty_weight", "=", "0.2", "# Weight for distance to return to the destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Connectivity score based on the average distance to unvisited nodes", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Return distance penalty based on how far the next node would be from the destination", "return_penalty", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "-", "return_penalty_weight", "*", "return_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.858678585962564}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_penalty_weight", "=", "0.5", "# Weight for inversely proportional distance", "clustering_weight", "=", "0.3", "# Weight for clustering of unvisited nodes", "balance_weight", "=", "0.2", "# Weight for balance in the route selection", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Clustering score based on proximity to other unvisited nodes", "clustering_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Balance score that considers the distance to unvisited nodes", "balance_score", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "distance_penalty_weight", "*", "(", "1", "/", "(", "direct_distance", "+", "1e-5", ")", ")", "+", "clustering_weight", "*", "clustering_score", "-", "balance_weight", "*", "balance_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 35.895104802466804}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for distance consideration", "penalty_weight", "=", "0.3", "# Weight for penalty on distance", "clustering_weight", "=", "0.2", "# Weight for clustering effectiveness", "total_distance_from_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty_factor", "=", "(", "len", "(", "unvisited_nodes", ")", "*", "0.5", ")", "/", "(", "max", "(", "1", ",", "len", "(", "unvisited_nodes", ")", "-", "1", ")", ")", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_distance", "*", "distance_weight", ")", "+", "(", "total_distance_from_destination", "*", "penalty_weight", ")", "+", "(", "cluster_average_distance", "*", "clustering_weight", ")", "-", "(", "penalty_factor", "*", "direct_distance", "*", "0.1", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.437092814271808}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "clusters", "=", "{", "}", "num_clusters", "=", "3", "# Number of clusters to form", "cluster_size", "=", "max", "(", "1", ",", "len", "(", "unvisited_nodes", ")", "//", "num_clusters", ")", "# Sort unvisited nodes based on their distance to the current node", "sorted_nodes", "=", "sorted", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "# Create clusters", "for", "i", "in", "range", "(", "0", ",", "len", "(", "sorted_nodes", ")", ",", "cluster_size", ")", ":", "cluster", "=", "sorted_nodes", "[", "i", ":", "i", "+", "cluster_size", "]", "cluster_center", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "cluster", "]", ")", "clusters", "[", "tuple", "(", "cluster", ")", "]", "=", "cluster_center", "# Find the cluster with the smallest average distance to the current node", "closest_cluster", "=", "min", "(", "clusters", ",", "key", "=", "clusters", ".", "get", ")", "# Select the closest node from the chosen cluster", "next_node", "=", "min", "(", "closest_cluster", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "connectivity_weight", "=", "0.6", "# Weight for connectivity to unvisited nodes", "proximity_weight", "=", "0.4", "# Weight for proximity to destination", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", ")", "+", "(", "connectivity_penalty", "*", "connectivity_weight", ")", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.242484209153323}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "cluster_weight", "=", "0.4", "# Weight for cluster potential savings", "decay_weight", "=", "0.2", "# Weight based on the influence of remaining unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate normalized distance to destination", "normalized_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Decay function: penalizing based on distances to other unvisited nodes", "decay_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "cluster_weight", "*", "-", "normalized_distance_to_destination", ")", "+", "(", "decay_weight", "*", "decay_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.670474755770406}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Calculate connectivity scores based on unvisited neighbors", "connectivity_scores", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "connectivity_count", "=", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<=", "5", ")", "connectivity_scores", "[", "node", "]", "=", "connectivity_count", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "connectivity_scores", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Introduce clustering factor", "clustering_factor", "=", "1", "/", "(", "1", "+", "sum", "(", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "for", "neighbor", "in", "unvisited_nodes", ")", ")", "score", "=", "(", "0.5", "*", "direct_distance", ")", "+", "(", "0.3", "*", "(", "avg_distance_to_destination", "-", "distance_to_destination", ")", ")", "-", "(", "0.2", "*", "connectivity_score", ")", "+", "(", "0.3", "*", "clustering_factor", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.385764347474058}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distances", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "average_distance", "=", "sum", "(", "distances", ")", "/", "len", "(", "unvisited_nodes", ")", "farthest_distance", "=", "max", "(", "distances", ")", "destination_risk", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Adding a risk factor linked to the distance from the destination", "risk_factor", "=", "destination_risk", "*", "(", "direct_distance", "/", "(", "farthest_distance", "+", "1", ")", ")", "# Calculating total cost by factoring in direct distance, weighted average distance, and risk", "total_cost", "=", "direct_distance", "+", "(", "average_distance", "*", "0.4", ")", "+", "(", "risk_factor", "*", "0.6", ")", "if", "total_cost", "<", "min_cost", ":", "min_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance", "proximity_weight", "=", "0.3", "# Weight for proximity to other unvisited nodes", "detour_penalty_weight", "=", "0.2", "# Weight for detour penalties", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "adjusted_detour", "=", "max", "(", "0", ",", "direct_distance", "-", "total_distance_to_destination", ")", "# Calculate proximity score based on the number of remaining unvisited nodes within a certain distance", "proximity_score", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "10", ")", "# Example threshold", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "proximity_weight", "*", "proximity_score", ")", "-", "(", "detour_penalty_weight", "*", "adjusted_detour", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Create a dictionary to hold the minimum cost to reach each unvisited node", "cost_map", "=", "{", "node", ":", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", "}", "# Update costs to reach each unvisited node from the current node", "for", "node", "in", "unvisited_nodes", ":", "cost_map", "[", "node", "]", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Find the unvisited node with the minimum cost", "for", "node", "in", "unvisited_nodes", ":", "if", "cost_map", "[", "node", "]", "<", "min_cost", ":", "min_cost", "=", "cost_map", "[", "node", "]", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.6", "# Weight for the direct distance to candidate node", "avg_distance_weight", "=", "0.3", "# Weight for the average distance to remaining nodes", "synergy_factor_weight", "=", "0.1", "# Synergy factor for the overall tour impact", "total_tour_length", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Total length to unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_nodes_count", "=", "len", "(", "unvisited_nodes", ")", "-", "1", "# Exclude the current node", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "remaining_nodes_count", "or", "1", ")", "# Synergy factor based on direct distance and average distance", "synergy_factor", "=", "(", "direct_distance", "/", "total_tour_length", ")", "*", "(", "average_distance_to_unvisited", "/", "(", "remaining_nodes_count", "+", "1", ")", ")", "# Score calculation", "score", "=", "-", "direct_distance_weight", "*", "direct_distance", "+", "avg_distance_weight", "*", "average_distance_to_unvisited", "-", "synergy_factor_weight", "*", "synergy_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.424671222018382}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "distance_weight", "=", "0.5", "# Weight for direct distance", "connectivity_weight", "=", "0.3", "# Weight for future route accessibility based on node connections", "revisitation_weight", "=", "0.2", "# Weight for the penalty based on how long nodes remain unvisited", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "+", "1", ")", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", ")", "# Inverse distance to next unvisited nodes", "revisitation_penalty", "=", "(", "len", "(", "unvisited_nodes", ")", "-", "list", "(", "unvisited_nodes", ")", ".", "index", "(", "node", ")", ")", "# Penalize based on unvisited order", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "-", "revisitation_weight", "*", "revisitation_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 21.7025734451784}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "cluster_factor", "=", "0.4", "# Weight for potential connectivity", "average_distance_weight", "=", "0.2", "# Weight for average distance to other unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_bonus", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "(", "direct_distance", "*", "distance_weight", ")", "+", "(", "connectivity_bonus", "*", "cluster_factor", ")", "-", "(", "average_distance_to_unvisited", "*", "average_distance_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.41724333977419}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "cluster_weight", "=", "0.3", "# Weight for potential cluster savings", "connectivity_weight", "=", "0.3", "# Weight for node connectivity", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Calculate average distance to all unvisited nodes for dynamic penalty", "dynamic_penalty", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate cluster savings based on unvisited nodes", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Calculate connectivity score", "connectivity_score", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "(", "len", "(", "unvisited_nodes", ")", "/", "2", ")", ")", "# Combining scores", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "cluster_weight", "*", "cluster_average_distance", ")", "+", "(", "connectivity_weight", "*", "connectivity_score", ")", "-", "(", "dynamic_penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.37815587401459}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "decay_factor", "=", "0.5", "# Factor to decrease influence of unvisited nodes with increasing distance", "if", "unvisited_nodes", ":", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "decay_weight", "=", "decay_factor", "**", "(", "direct_distance", "/", "average_distance", ")", "# Dynamic decay based on average", "# Cost is a combination of direct distance weighted by decay", "total_cost", "=", "direct_distance", "*", "decay_weight", "if", "total_cost", "<", "min_cost", ":", "min_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957783713468279}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_distance_to_visited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "current_node", "]", "for", "node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "node", "not", "in", "unvisited_nodes", ")", "min_distance_to_visited", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "node", "not", "in", "unvisited_nodes", ")", "direct_influence_weight", "=", "0.6", "exploration_weight", "=", "0.4", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "exploration_score", "=", "(", "total_distance_to_visited", "/", "len", "(", "unvisited_nodes", ")", ")", "+", "min_distance_to_visited", "score", "=", "(", "direct_influence_weight", "*", "direct_distance", ")", "+", "(", "exploration_weight", "*", "exploration_score", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance", "cluster_weight", "=", "0.3", "# Weight for potential cluster savings", "dynamic_penalty_weight", "=", "0.2", "# Weight for dynamic penalties", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "dynamic_penalty", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "cluster_weight", "*", "cluster_average_distance", ")", "-", "(", "dynamic_penalty_weight", "*", "dynamic_penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.349781351250228}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Incorporate a distance decay factor to emphasize closer nodes", "decay_factor", "=", "0.5", "# Adjust this factor to change sensitivity", "score", "=", "distance_to_node", "+", "(", "decay_factor", "*", "distance_to_destination", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "historical_cost_weight", "=", "0.5", "# Weight for historical cost to visited nodes", "proximity_weight", "=", "0.3", "# Weight for proximity to destination", "future_saving_weight", "=", "0.2", "# Weight for future distance savings", "total_historical_cost", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "node", "!=", "current_node", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "historically_traveled_cost", "=", "historical_cost_weight", "*", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "future_distance_saving", "=", "future_saving_weight", "*", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", ")", "score", "=", "-", "direct_distance", "+", "proximity_score", "-", "historically_traveled_cost", "+", "future_distance_saving", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.386522422319061}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the minimum distances to all unvisited nodes", "min_distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Calculate the maximum of the minimum distances", "max_min_distance", "=", "max", "(", "min_distances", ".", "values", "(", ")", ")", "# Select the next node that maximizes the minimum distance with a connectivity factor", "next_node", "=", "max", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "(", "min_distances", "[", "node", "]", "-", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "*", "0.05", ")", ")", "return", "next_node"], "code_perf": 36.1397423465301}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Define a distance threshold for clustering", "distance_threshold", "=", "1.5", "# Adjust based on the problem scale", "# Create clusters based on proximity", "clusters", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "added_to_cluster", "=", "False", "for", "cluster", "in", "clusters", ":", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<", "distance_threshold", ":", "cluster", ".", "append", "(", "node", ")", "added_to_cluster", "=", "True", "break", "if", "not", "added_to_cluster", ":", "clusters", ".", "append", "(", "[", "node", "]", ")", "# Select the nearest cluster", "if", "not", "clusters", ":", "return", "None", "nearest_cluster", "=", "min", "(", "clusters", ",", "key", "=", "lambda", "cluster", ":", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "cluster", ")", ")", "# Select the node from the nearest cluster with the least distance", "next_node", "=", "min", "(", "nearest_cluster", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "adaptability_factor", "=", "1.5", "# Factor to prioritize nodes based on historical efficiency", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "historical_path_weight", "=", "0.4", "# Weight for historical distance of visited nodes", "cluster_proximity_weight", "=", "0.2", "# Weight for cluster proximity of unvisited nodes", "historical_distance", "=", "sum", "(", "distance_matrix", "[", "i", "]", "[", "j", "]", "for", "i", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "for", "j", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "i", "in", "unvisited_nodes", "and", "j", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_proximity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combined score incorporating adaptability towards efficient nodes", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "historical_path_weight", "*", "(", "1", "/", "(", "1", "+", "historical_distance", ")", ")", "+", "cluster_proximity_weight", "*", "cluster_proximity_score", "# Adjusting score based on adaptability factor", "score", "*=", "(", "1", "+", "adaptability_factor", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.4597365709491275}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "minimal_weighted_score", "=", "float", "(", "'inf'", ")", "remaining_nodes", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "distance_to_node", "+", "(", "distance_to_destination", "/", "remaining_nodes", ")", "if", "score", "<", "minimal_weighted_score", ":", "minimal_weighted_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 7.101442436613793}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Function to calculate cumulative distance from current node to visited nodes", "def", "calculate_cumulative_distance", "(", "node", ")", ":", "cumulative_distance", "=", "0", "for", "visited_node", "in", "unvisited_nodes", ":", "cumulative_distance", "+=", "distance_matrix", "[", "current_node", "]", "[", "visited_node", "]", "return", "cumulative_distance", "# Explore each unvisited node", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cumulative_distance", "=", "calculate_cumulative_distance", "(", "node", ")", "# Heuristic for remaining distances", "heuristic_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "# Score: combine direct distance, cumulative distance, and heuristic remaining distance", "score", "=", "direct_distance", "+", "cumulative_distance", "+", "heuristic_remaining_distance", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 21.51502557645197}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "heuristic_weight", "=", "0.5", "# Weight for heuristic distance to destination", "direct_cost_weight", "=", "0.3", "# Weight for direct cost of travel to the next node", "cumulative_penalty_weight", "=", "0.2", "# Penalty for longer cumulative distances", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "prev_node", "]", "for", "prev_node", "in", "unvisited_nodes", "if", "prev_node", "!=", "current_node", ")", "unvisited_average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "(", "heuristic_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "(", "direct_distance", "*", "direct_cost_weight", ")", "-", "(", "cumulative_distance", "*", "cumulative_penalty_weight", ")", "+", "(", "unvisited_average_distance", "*", "0.1", ")", ")", "# Minor influence of unvisited nodes", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.9281661256353635}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "average_distance", ")", "connectivity_score", "=", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "direct_distance", ")", "heuristic_score", "=", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "score", "=", "direct_distance", "+", "distance_penalty", "-", "(", "0.5", "*", "heuristic_score", ")", "+", "(", "0.3", "*", "connectivity_score", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.534404999983709}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "scores", "=", "{", "}", "total_score", "=", "0", "# Calculate scores based on distance to the current node and a random factor", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "random_factor", "=", "random", ".", "uniform", "(", "0.5", ",", "1.5", ")", "# Introduce a randomness in scoring", "score", "=", "distance", "*", "random_factor", "scores", "[", "node", "]", "=", "score", "total_score", "+=", "score", "# Select the next node based on weighted random choice", "selection_threshold", "=", "random", ".", "uniform", "(", "0", ",", "total_score", ")", "cumulative_score", "=", "0", "for", "node", ",", "score", "in", "scores", ".", "items", "(", ")", ":", "cumulative_score", "+=", "score", "if", "cumulative_score", ">=", "selection_threshold", ":", "return", "node", "return", "None", "# Just in case, though it shouldn't reach here"], "code_perf": 29.652332826481064}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Attractive force towards the destination node", "attractive_force", "=", "1", "/", "(", "distance_to_destination", "+", "1", ")", "# Repulsive force from already visited nodes", "repulsive_force", "=", "sum", "(", "max", "(", "0", ",", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "+", "1", ")", ")", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "# Combine attractive and repulsive forces", "score", "=", "attractive_force", "-", "repulsive_force", "# Penalizing longer distances to encourage shorter paths", "score", "*=", "(", "1", "/", "(", "1", "+", "distance_to_next", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 35.179095634794876}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Generate initial candidates based on unvisited nodes", "candidates", "=", "list", "(", "unvisited_nodes", ")", "# Evaluate candidates based on a scoring system", "scored_candidates", "=", "[", "]", "for", "node", "in", "candidates", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_unvisited_penalty", "=", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "*", "0.5", "# Penalty for remaining unvisited nodes", "score", "=", "direct_distance", "+", "remaining_unvisited_penalty", "scored_candidates", ".", "append", "(", "(", "node", ",", "score", ")", ")", "# Sort candidates by score, picking the one with the lowest score", "scored_candidates", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "# Select the best candidate", "return", "scored_candidates", "[", "0", "]", "[", "0", "]"], "code_perf": 6.957936002221982}
{"code_tokens": ["# {This algorithm integrates a penalty mechanism for distant nodes, evaluates the proximity and connectivity of unvisited nodes, and applies a dynamic adjustment factor based on the overall map structure to enhance decision-making efficiency.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "# Calculate distances to all unvisited nodes and penalties for those farther from the destination", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "penalty_distance", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Adjust score based on proximity and the penalty for distance from the destination", "proximity_score", "=", "distance_to_node", "/", "(", "total_distance", "+", "1e-5", ")", "penalty_score", "=", "penalty_distance", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1e-5", ")", "# Connectivity factor: average distance from the candidate node to remaining unvisited nodes", "connectivity_effect", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "adj", "]", "for", "adj", "in", "unvisited_nodes", "if", "adj", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "# Compute overall score", "score", "=", "proximity_score", "+", "penalty_score", "+", "connectivity_effect", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 16.234211488764046}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_factor", "=", "0.4", "# Weight for direct distance", "penalty_factor", "=", "0.3", "# Penalty for long distance to previously visited nodes", "cumulative_distance_weight", "=", "0.3", "# Weight for minimizing cumulative distance to visited nodes", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "prev", "]", "[", "current_node", "]", "for", "prev", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "prev", "!=", "current_node", "and", "prev", "not", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty_score", "=", "sum", "(", "distance_matrix", "[", "prev", "]", "[", "node", "]", "for", "prev", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "prev", "not", "in", "unvisited_nodes", ")", "# Penalty for unvisited to visited", "cumulative_score", "=", "cumulative_distance", "+", "direct_distance", "# Total distance considering previous paths", "score", "=", "(", "distance_factor", "*", "direct_distance", ")", "+", "(", "penalty_factor", "*", "penalty_score", ")", "+", "(", "cumulative_distance_weight", "*", "cumulative_score", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.286190654642777}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.7", "# Increased weight for direct distance to next node", "future_distance_weight", "=", "0.3", "# Weight for estimated future route efficiency", "estimated_penalty_factor", "=", "1.5", "# Penalty factor for potentially long routes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "estimated_future_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "penalty_score", "=", "estimated_penalty_factor", "*", "direct_distance", "route_potential", "=", "-", "penalty_score", "+", "(", "future_distance_weight", "*", "estimated_future_distance", ")", "score", "=", "(", "direct_distance_weight", "*", "(", "1", "/", "(", "direct_distance", "+", "1e-6", ")", ")", ")", "+", "route_potential", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.898260805280106}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Calculate the average distance to the destination", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Calculate distance variance from current node to unvisited nodes", "distance_variance", "=", "sum", "(", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "-", "avg_distance_to_destination", ")", "**", "2", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "direct_distance", "+", "0.5", "*", "(", "avg_distance_to_destination", "-", "distance_to_destination", ")", "+", "0.1", "*", "distance_variance", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.450370583313572}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "len", "(", "unvisited_nodes", ")", "*", "0.1", "# Penalty based on unvisited nodes", "urgency", "=", "(", "1", "/", "(", "distance", "+", "1e-5", ")", ")", "# Urgency based on distance (avoids div by zero)", "weighted_score", "=", "distance", "+", "penalty", "-", "urgency", "# Combine metrics", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance to next node", "connection_weight", "=", "0.6", "# Weight for connectivity of unvisited nodes", "# Distance to destination", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "direct_weight", "*", "direct_distance", "+", "connection_weight", "*", "connectivity_score", "-", "distance_to_destination", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.631844723016577}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate the distance to the destination from the current node", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Introduce a randomness factor for exploration", "randomness_factor", "=", "0.5", "random_factor", "=", "random", ".", "uniform", "(", "0", ",", "randomness_factor", ")", "# Calculate scores for each unvisited node", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "+", "1", ")", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "scores", "[", "node", "]", "=", "(", "distance_to_node", "*", "(", "1", "+", "random_factor", ")", ")", "+", "(", "1", "/", "(", "connectivity_score", "+", "1", ")", ")", "+", "distance_to_destination", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.964688949799511}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "adaptive_penalty_threshold", "=", "5", "# Threshold for excessive route length", "dominance_factor", "=", "2", "# Weight for nodes with multiple connections", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Apply adaptive penalty if direct distance exceeds the threshold", "adaptive_penalty", "=", "(", "direct_distance", "-", "adaptive_penalty_threshold", ")", "if", "direct_distance", ">", "adaptive_penalty_threshold", "else", "0", "# Count connections to other unvisited nodes for dominance scoring", "dominance_score", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "total_distance_to_destination", ")", "# Calculate the score based on direct distance, penalty, and dominance", "score", "=", "-", "(", "direct_distance", "+", "adaptive_penalty", ")", "+", "(", "dominance_factor", "*", "dominance_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 22.95475896599961}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.40", "# Weight for direct distance", "future_efficiency_weight", "=", "0.30", "# Weight for potential impact on route efficiency", "novelty_factor_weight", "=", "0.15", "# Weight to discourage repetition", "adaptability_weight", "=", "0.15", "# Weight for adjusting based on history", "stability_weight", "=", "0.10", "# To ensure stability between choices", "def", "calculate_future_efficiency", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "def", "calculate_novelty_factor", "(", "node", ")", ":", "# Negative impact based on frequency of recent visits (this is a placeholder)", "return", "0.1", "if", "node", "in", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_efficiency", "=", "calculate_future_efficiency", "(", "node", ")", "novelty_factor", "=", "calculate_novelty_factor", "(", "node", ")", "# Novel scoring equation integrating adaptability", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "future_efficiency_weight", "*", "future_efficiency", "+", "novelty_factor_weight", "*", "novelty_factor", "-", "adaptability_weight", "*", "(", "0.1", "if", "node", "in", "unvisited_nodes", "else", "0", ")", "+", "stability_weight", "*", "(", "0.1", "if", "node", "==", "max", "(", "unvisited_nodes", ",", "key", "=", "lambda", "x", ":", "distance_matrix", "[", "current_node", "]", "[", "x", "]", ")", "else", "0", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.366176922829402}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "(", "num_unvisited", "-", "1", ")", "**", "2", "*", "0.3", "# Squared penalty for remaining unvisited nodes", "total_cost", "=", "direct_distance", "+", "penalty", "if", "total_cost", "<", "min_cost", ":", "min_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Total nodes and decay factor based on the number of unvisited nodes", "total_nodes", "=", "len", "(", "unvisited_nodes", ")", "decay_factor", "=", "1", "/", "(", "1", "+", "total_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Sigmoid decay function to encourage paths with remaining unvisited nodes", "decay_penalty", "=", "1", "/", "(", "1", "+", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "decay_factor", ")", ")", "# Combining direct distance with decay and exploration", "exploration_factor", "=", "1.0", "+", "(", "1", "/", "(", "1", "+", "direct_distance", ")", ")", "score", "=", "direct_distance", "*", "decay_penalty", "+", "exploration_factor", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.82811948553738}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate the average distance to unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "# Calculate diversity scores based on distance from current node", "diversity_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "diversity_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "+", "1e-6", ")", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "diversity_scores", "[", "node", "]", "=", "diversity_score", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "average_distance", ")", "# Calculate the new heuristic score with diversity", "heuristic_score", "=", "diversity_scores", "[", "node", "]", "score", "=", "direct_distance", "+", "distance_penalty", "-", "heuristic_score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 28.351623969242468}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance to unvisited nodes", "destination_penalty_weight", "=", "0.3", "# Weight for penalty based on distance from destination", "length_bonus_weight", "=", "0.3", "# Weight for visiting nodes that reduce overall tour length", "total_length_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "potential_reduction", "=", "total_length_to_destination", "-", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "score", "=", "(", "direct_distance", "*", "direct_weight", ")", "+", "(", "distance_to_destination", "*", "destination_penalty_weight", ")", "+", "(", "potential_reduction", "*", "length_bonus_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 34.206823788198506}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "avg_future_distance", "=", "sum", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "local_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_distance_penalty", "=", "avg_future_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Average distance to future nodes", "score", "=", "(", "local_distance", "*", "0.7", "+", "future_distance_penalty", "*", "0.3", ")", "*", "random", ".", "uniform", "(", "0.95", ",", "1.05", ")", "# Weighted score with randomness", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.0626260041728335}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "cost_weight", "=", "0.4", "# Weight for immediate travel cost", "connectivity_penalty", "=", "0.3", "# Weight to discourage visiting highly connected nodes", "strategic_bonus", "=", "0.3", "# Weight for nodes closer to the destination or with favorable positioning", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<", "float", "(", "'inf'", ")", ")", "strategic_positioning", "=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", "# Bonus for closer nodes", "score", "=", "-", "(", "cost_weight", "*", "direct_distance", "+", "connectivity_penalty", "*", "connectivity_score", ")", "+", "(", "strategic_bonus", "*", "strategic_positioning", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.26978137220935}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to destination", "connectivity_weight", "=", "0.4", "# Weight for connectivity savings", "detour_penalty_weight", "=", "0.2", "# Weight for detour penalty", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "prev_node", "]", "for", "prev_node", "in", "unvisited_nodes", "if", "prev_node", "!=", "current_node", ")", "total_unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connection_count", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "float", "(", "'inf'", ")", ")", "score", "=", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "(", "connection_count", "/", "(", "total_unvisited_count", "or", "1", ")", ")", "*", "connectivity_weight", "-", "(", "cumulative_distance", "*", "detour_penalty_weight", ")", "-", "direct_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.466511785330852}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_combined_score", "=", "float", "(", "'-inf'", ")", "# Dynamic weight adjustment based on current tour length (example scale: 1 to 10)", "current_tour_length", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "weight_scale", "=", "min", "(", "1", "+", "current_tour_length", "/", "10", ",", "2", ")", "# Constants for weighting with dynamic adjustment", "alpha", "=", "0.5", "*", "weight_scale", "# Weight for distance score", "beta", "=", "0.3", "*", "weight_scale", "# Weight for cohesion score", "gamma", "=", "0.2", "*", "weight_scale", "# Weight for distance penalty", "# Total number of unvisited nodes", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Cohesion score: standard deviation of distances to remaining unvisited nodes", "distances_to_others", "=", "[", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "]", "cohesion_score", "=", "(", "sum", "(", "distances_to_others", ")", "/", "(", "num_unvisited", "-", "1", ")", ")", "if", "num_unvisited", ">", "1", "else", "0", "# Penalty score: additional distance incurred to go to destination after current", "distance_penalty", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score incorporating a modified penalty approach through a logarithmic scale", "combined_score", "=", "(", "cohesion_score", "*", "beta", "-", "distance_penalty", "*", "gamma", "-", "distance_to_next", "*", "alpha", ")", "*", "(", "1", "+", "1", "/", "(", "1", "+", "distance_to_next", ")", ")", "if", "combined_score", ">", "max_combined_score", ":", "max_combined_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.823645446582952}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "+", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "/", "2", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.450370583313572}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_distance_weight", "=", "0.6", "# Weight for the direct distance to the next node", "cumulative_distance_weight", "=", "0.3", "# Weight for the cumulative distance to all unvisited nodes", "target_distance_weight", "=", "0.1", "# Weight for the distance penalty based on the target node", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "score", "=", "(", "immediate_distance_weight", "*", "-", "immediate_distance", ")", "+", "(", "cumulative_distance_weight", "*", "-", "cumulative_distance", ")", "# Introduce a penalty for nodes that exceed a certain threshold distance from the target", "distance_ratio", "=", "immediate_distance", "/", "(", "total_distance_to_destination", "or", "1", ")", "if", "distance_ratio", ">", "1", ":", "score", "-=", "(", "distance_ratio", "-", "1", ")", "*", "target_distance_weight", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 15.40937654030174}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "# Calculate the average distance from unvisited nodes to destination", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "n", "]", "[", "destination_node", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate a score with a new approach to balance the distance to current, destination, and average", "score", "=", "(", "1", "/", "(", "1", "+", "distance_to_next", ")", ")", "+", "(", "0.2", "*", "(", "avg_distance_to_destination", "-", "distance_to_destination", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.2725766365688616}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "decay_factor", "=", "0.1", "# Decay factor to prioritize closer nodes", "penalty_factor", "=", "len", "(", "unvisited_nodes", ")", "*", "0.5", "# Penalty for remaining unvisited nodes", "distance_to_destination_weight", "=", "0.5", "# Weight for distance to the destination", "average_future_distance_weight", "=", "0.5", "# Weight for future travel needs", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "average_future_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "# Calculate new score using decay on distance to the destination and future travel distance", "score", "=", "-", "direct_distance", "-", "penalty_factor", "+", "(", "distance_to_destination_weight", "*", "distance_to_destination", ")", "+", "(", "average_future_distance_weight", "*", "average_future_distance", ")", "# Apply decay to the score based on proximity to the destination", "score", "*=", "(", "1", "/", "(", "1", "+", "decay_factor", "*", "distance_to_destination", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.088857588161881}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Increased weight for direct distance", "future_cost_weight", "=", "0.3", "# Weight for potential cost to future nodes", "cluster_weight", "=", "0.2", "# Weight for clustering density", "# Calculate centroid of the unvisited nodes for clustering", "centroid_x", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "centroid_y", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate future cost based on average distance to remaining unvisited nodes", "future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Clustering density score based on proximity to the centroid", "clustering_score", "=", "(", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "-", "centroid_x", ")", "**", "2", "+", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "centroid_y", ")", "**", "2", ")", "**", "0.5", "score", "=", "-", "proximity_weight", "*", "direct_distance", "+", "future_cost_weight", "*", "future_cost", "+", "cluster_weight", "*", "clustering_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.51380512487912}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Future path potential: estimated cost to visit all remaining unvisited nodes", "future_path_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "# Smoothness factor: encourage directionally consistent travel", "smoothness_score", "=", "1", "/", "(", "1", "+", "abs", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "-", "distance_matrix", "[", "destination_node", "]", "[", "node", "]", ")", ")", "# Combined score using weights to incorporate direct distance, future path cost and smoothness", "score", "=", "(", "direct_distance", "*", "0.4", "+", "future_path_cost", "*", "0.4", "+", "smoothness_score", "*", "0.2", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 20.973559961410615}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity to destination", "clustering_weight", "=", "0.3", "# Weight for clustering savings", "importance_weight", "=", "0.1", "# Weight for node importance", "randomness_weight", "=", "0.1", "# Weight for introducing randomness", "# Calculate the cumulative distance from the current node to all unvisited nodes", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "prev_node", "]", "for", "prev_node", "in", "unvisited_nodes", "if", "prev_node", "!=", "current_node", ")", "# Calculate node importance based on some heuristic (e.g., the frequency of being visited)", "node_importance", "=", "{", "node", ":", "random", ".", "uniform", "(", "0", ",", "1", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Calculate a randomized score to encourage exploration", "random_factor", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "*", "randomness_weight", "score", "=", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "(", "cluster_average_distance", "*", "clustering_weight", ")", "+", "(", "node_importance", "[", "node", "]", "*", "importance_weight", ")", "-", "(", "cumulative_distance", "*", "0.2", ")", "-", "(", "direct_distance", "*", "0.3", ")", "+", "random_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.425360881035246}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "cluster_weight", "=", "0.4", "# Weight for attractiveness of node clusters", "mdt_weight", "=", "0.2", "# Weight for minimum distance to unvisited nodes", "# Calculate MST-based score", "mst_score", "=", "sum", "(", "min", "(", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "for", "unvisited", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate cluster density score (the sum of distances to all unvisited nodes)", "cluster_density", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "for", "unvisited", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Penalty for nodes that have been visited recently", "recent_visits_penalty", "=", "sum", "(", "(", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "prev", "]", "+", "1", ")", ")", "for", "prev", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "prev", "!=", "current_node", "and", "prev", "not", "in", "unvisited_nodes", ")", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "cluster_weight", "*", "cluster_density", "-", "recent_visits_penalty", "+", "mdt_weight", "*", "mst_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.41724333977419}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "nearest_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "penalty_weight", "=", "0.5", "# Weight applied to discourage distance from destination", "scaling_factor", "=", "1", "/", "len", "(", "unvisited_nodes", ")", "# Dynamic scaling based on remaining nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "direct_distance", "+", "penalty_weight", "*", "distance_to_destination", ")", "*", "scaling_factor", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "cluster_weight", "=", "0.4", "# Weight for cluster potential savings", "destination_penalty_weight", "=", "0.2", "# Penalty for distance to the destination", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Calculate average distance from the current node to the unvisited nodes", "average_cluster_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Introduce a penalty for nodes farther from the destination", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "penalty", "=", "(", "total_distance_to_destination", "-", "distance_to_destination", ")", "if", "distance_to_destination", "<", "total_distance_to_destination", "else", "0", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "cluster_weight", "*", "cluster_average_distance", ")", "+", "(", "destination_penalty_weight", "*", "penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.672733099544949}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "iterations", "=", "100", "best_node", "=", "None", "best_distance", "=", "float", "(", "'inf'", ")", "for", "_", "in", "range", "(", "iterations", ")", ":", "candidates", "=", "[", "]", "# Find the minimum distance to unvisited nodes", "distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "min_distance", "=", "min", "(", "distances", ".", "values", "(", ")", ")", "# Generate candidates with randomness", "for", "node", ",", "dist", "in", "distances", ".", "items", "(", ")", ":", "if", "dist", "<=", "min_distance", ":", "candidates", ".", "append", "(", "node", ")", "if", "candidates", ":", "# Introduce randomness in selecting candidates", "random_candidate", "=", "random", ".", "choice", "(", "candidates", ")", "total_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "random_candidate", "]", "# Estimate a quick evaluation of upcoming unvisited node distances", "for", "next_node", "in", "unvisited_nodes", "-", "{", "random_candidate", "}", ":", "total_distance", "+=", "distance_matrix", "[", "random_candidate", "]", "[", "next_node", "]", "if", "total_distance", "<", "best_distance", ":", "best_distance", "=", "total_distance", "best_node", "=", "random_candidate", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "cluster_weight", "=", "0.4", "# Weight for attractiveness of node clusters", "history_weight", "=", "0.2", "# Weight for visit frequency", "# Calculate center of remaining unvisited nodes for cluster scoring", "cluster_center", "=", "[", "0", "]", "*", "len", "(", "distance_matrix", ")", "for", "node", "in", "unvisited_nodes", ":", "for", "i", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", ":", "cluster_center", "[", "i", "]", "+=", "distance_matrix", "[", "node", "]", "[", "i", "]", "cluster_center", "=", "[", "x", "/", "len", "(", "unvisited_nodes", ")", "for", "x", "in", "cluster_center", "]", "# Create a frequency dictionary for visited nodes", "visit_frequency", "=", "{", "node", ":", "0", "for", "node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Cluster score based on proximity to the center of unvisited nodes", "cluster_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "for", "unvisited", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Calculate visit frequency penalty", "history_penalty", "=", "visit_frequency", "[", "current_node", "]", "if", "visit_frequency", "[", "current_node", "]", ">", "0", "else", "1", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "cluster_weight", "*", "cluster_score", "-", "history_weight", "*", "history_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "# Update the visit frequency for the current node", "visit_frequency", "[", "current_node", "]", "+=", "1", "return", "next_node"], "code_perf": 6.41724333977419}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.35", "# Weight for direct distance", "connectivity_weight", "=", "0.30", "# Weight for predicted travel time efficiency based on connectivity", "clustering_weight", "=", "0.25", "# Weight for clustering based on proximity to unvisited nodes", "adaptability_weight", "=", "0.10", "# Weight for adapting based on prior choices", "def", "calculate_connectivity", "(", "node", ")", ":", "neighbors_count", "=", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other", "]", "<=", "2", ")", "# Count nearby nodes", "return", "neighbors_count", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "def", "calculate_clustering_score", "(", "node", ")", ":", "return", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "+", "1", ")", "for", "other", "in", "unvisited_nodes", ")", "# Closer nodes score higher", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity", "=", "calculate_connectivity", "(", "node", ")", "clustering_score", "=", "calculate_clustering_score", "(", "node", ")", "# Novel scoring equation integrating connectivity and clustering", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity", "+", "clustering_weight", "*", "clustering_score", "-", "adaptability_weight", "*", "(", "0.1", "if", "node", "in", "unvisited_nodes", "else", "0", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 13.627324560354216}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_bid", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_factor", "=", "0.5", "# Factor for proximity", "bidding_factor", "=", "0.5", "# Factor for bidding based on clustering", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_cluster_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "decay_distance", "=", "1", "/", "(", "1", "+", "direct_distance", ")", "bid", "=", "(", "decay_distance", "*", "proximity_factor", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "(", "average_cluster_distance", "*", "bidding_factor", ")", "-", "direct_distance", "if", "bid", ">", "max_bid", ":", "max_bid", "=", "bid", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.24912028254153}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate direct distances from the current node to unvisited nodes", "direct_distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Calculate average distance to all unvisited nodes", "average_distance", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "# Score nodes based on direct distance and penalty for being far from the destination", "node_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "direct_distances", "[", "node", "]", "# Penalty for distance from destination", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "penalty", "=", "distance_to_destination", "*", "0.5", "# Adjust weight as desired", "# Total score combining direct distance, average distance, and penalty", "score", "=", "direct_distance", "+", "penalty", "-", "average_distance", "node_scores", "[", "node", "]", "=", "score", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "average_distance", ")", "heuristic_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "score", "=", "direct_distance", "+", "distance_penalty", "-", "heuristic_score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.421289537639743}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate total distance and average distance to unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "# Create a list of weighted nodes for selection based on both distance and a random factor", "weighted_nodes", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "weight", "=", "(", "1", "/", "(", "distance", "+", "1", ")", ")", "+", "(", "1", "/", "(", "avg_distance", "+", "1", ")", ")", "# Balance distance and average distance", "weighted_nodes", ".", "append", "(", "(", "node", ",", "weight", ")", ")", "# Normalize weights", "total_weight", "=", "sum", "(", "weight", "for", "_", ",", "weight", "in", "weighted_nodes", ")", "normalized_weights", "=", "[", "(", "node", ",", "weight", "/", "total_weight", ")", "for", "node", ",", "weight", "in", "weighted_nodes", "]", "# Select the next node based on a random draw influenced by the weights", "rand_value", "=", "random", ".", "random", "(", ")", "cumulative_probability", "=", "0.0", "for", "node", ",", "weight", "in", "normalized_weights", ":", "cumulative_probability", "+=", "weight", "if", "rand_value", "<=", "cumulative_probability", ":", "return", "node", "return", "unvisited_nodes", "[", "0", "]", "# Fallback in case of rounding errors"], "code_perf": 25.033310464940655}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "savings_weight", "=", "0.6", "# Increased weight for potential future savings", "distance_weight", "=", "0.4", "# Decreased weight for immediate distance cost", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "potential_future_savings", "=", "sum", "(", "min", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", ",", "distance_matrix", "[", "other_node", "]", "[", "destination_node", "]", ")", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "penalty_factor", "=", "0.1", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "# Reduced penalty for route length", "score", "=", "-", "(", "direct_distance", "+", "penalty_factor", ")", "+", "(", "savings_weight", "*", "potential_future_savings", ")", "-", "(", "distance_weight", "*", "total_distance_to_destination", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.923686521580366}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "potential_nodes", "=", "[", "]", "shortest_distance", "=", "float", "(", "'inf'", ")", "closest_node", "=", "None", "# Calculate the minimum direct distance to determine a baseline", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "direct_distance", "<", "shortest_distance", ":", "shortest_distance", "=", "direct_distance", "closest_node", "=", "node", "# Now calculate a weighted score for each unvisited node", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "nearest_distance", "=", "distance_matrix", "[", "closest_node", "]", "[", "node", "]", "if", "closest_node", "is", "not", "None", "else", "0", "# Introducing a randomness factor", "randomness", "=", "random", ".", "uniform", "(", "0", ",", "0.1", ")", "# Small random value to promote exploration", "weighted_score", "=", "direct_distance", "+", "nearest_distance", "*", "0.5", "+", "randomness", "potential_nodes", ".", "append", "(", "(", "node", ",", "weighted_score", ")", ")", "# Select the node with the least weighted score", "next_node", "=", "min", "(", "potential_nodes", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 7.038491118719886}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.3", "# Weight for direct distance", "synergy_weight", "=", "0.4", "# Weight for synergy potential", "detour_penalty_weight", "=", "0.2", "# Weight for detour penalties", "destination_distance_weight", "=", "0.1", "# Weight for distance to destination", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "adjusted_detour", "=", "max", "(", "0", ",", "direct_distance", "-", "total_distance_to_destination", ")", "# Calculate the average distance from 'node' to all unvisited nodes", "synergy_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "synergy_average_distance", "=", "synergy_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Calculate distance from the node to the destination", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Score calculation combining factors", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "synergy_weight", "*", "synergy_average_distance", ")", "-", "(", "detour_penalty_weight", "*", "adjusted_detour", ")", "+", "(", "destination_distance_weight", "*", "-", "distance_to_destination", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.620894308128364}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "score", "=", "(", "1", "/", "distance_to_next", ")", "+", "(", "1", "/", "(", "total_distance_to_unvisited", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", ")", ")", "# Balances proximity to next and overall distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.536418909379112}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_weighted_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "len", "(", "unvisited_nodes", ")", "*", "0.1", "# Introduce a penalty based on the number of unvisited nodes", "weighted_distance", "=", "distance", "+", "penalty", "if", "weighted_distance", "<", "min_weighted_distance", ":", "min_weighted_distance", "=", "weighted_distance", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.35", "clustering_density_weight", "=", "0.35", "synergy_weight", "=", "0.2", "path_penalty_weight", "=", "0.1", "# Function to calculate clustering density score based on unvisited nodes", "def", "calculate_clustering_density_score", "(", "node", ")", ":", "density_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "density_score", "+=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "+", "1e-6", ")", "# Avoid division by zero", "return", "density_score", "# Function to calculate synergy score for potential influence", "def", "calculate_synergy_score", "(", "node", ")", ":", "synergy_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "synergy_score", "+=", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other", "]", ")", "if", "distance_matrix", "[", "node", "]", "[", "other", "]", ">", "0", "else", "0", "return", "synergy_score", "# Function to calculate path penalty for extended routes", "def", "calculate_path_penalty", "(", "node", ")", ":", "return", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "clustering_density_score", "=", "calculate_clustering_density_score", "(", "node", ")", "synergy_score", "=", "calculate_synergy_score", "(", "node", ")", "path_penalty", "=", "calculate_path_penalty", "(", "node", ")", "# Combined scoring mechanism for decision making", "score", "=", "(", "direct_distance_weight", "*", "-", "direct_distance", "+", "clustering_density_weight", "*", "clustering_density_score", "+", "synergy_weight", "*", "synergy_score", "-", "path_penalty_weight", "*", "path_penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 29.27690060203038}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "attractiveness_weight", "=", "0.5", "# Weight for attractiveness based on unvisited nodes", "clustering_weight", "=", "0.1", "# Weight for clustering nearby nodes", "# Calculate the average distance from the current node to all unvisited nodes", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate clustering effect by checking proximity to other unvisited nodes", "nearby_clustering_score", "=", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "average_distance", ")", "# Scoring based on distance, attractiveness, and clustering", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "attractiveness_weight", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "nearby_clustering_score", ")", "+", "clustering_weight", "*", "nearby_clustering_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 14.801371991994428}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "minimal_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "distance", "if", "distance", ">", "0", "else", "1", ")", "# Avoid division by zero", "score", "=", "distance", "+", "penalty", "# Combine distance with penalty", "if", "score", "<", "minimal_score", ":", "minimal_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 36.1397423465301}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate the connectivity score as a heuristic to prioritize more connected nodes", "connectivity_score", "=", "len", "(", "[", "nn", "for", "nn", "in", "unvisited_nodes", "if", "nn", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "nn", "]", "<", "np", ".", "inf", "]", ")", "# Combine distance and connectivity score into the cost function", "scores", "[", "node", "]", "=", "distance_to_node", "-", "connectivity_score", "*", "0.1", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "distance_weight", "=", "0.4", "# Weight for the distance component", "penalty_weight", "=", "0.6", "# Weight for the penalty component", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_penalty", "=", "penalty_weight", "*", "(", "average_distance", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "randomness", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "*", "(", "1", "-", "distance_penalty", ")", "# Introduce randomness", "score", "=", "(", "distance_weight", "*", "direct_distance", ")", "+", "distance_penalty", "+", "randomness", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 15.625548460156033}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "historical_visit_weight", "=", "0.4", "# Weight for historical visit frequency", "dynamic_distance_weight", "=", "0.5", "# Weight for relative distances", "# Calculate frequency of previous visits to nodes", "visit_frequency", "=", "{", "node", ":", "1", "for", "node", "in", "unvisited_nodes", "}", "# Assuming initial unvisited nodes are not previously visited", "if", "unvisited_nodes", ":", "destination_weight", "=", "0.3", "# Importance weight for the destination node", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate average distance to other unvisited nodes", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Calculate visit frequency score", "frequency_score", "=", "visit_frequency", "[", "node", "]", "# Combine scores into a single score", "score", "=", "(", "dynamic_distance_weight", "*", "direct_distance", "+", "destination_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "historical_visit_weight", "*", "frequency_score", "+", "average_distance_to_unvisited", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.543146722832931}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate a weighted score that combines direct distance and an adjusted heuristic", "heuristic_factor", "=", "1", "+", "(", "distance_to_destination", "/", "(", "1", "+", "direct_distance", ")", ")", "# Avoiding division by zero", "score", "=", "direct_distance", "*", "heuristic_factor", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.130707797674412}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for distance estimation", "recent_visit_penalty", "=", "0.3", "# Penalty for recently visited nodes", "desirability_weight", "=", "0.2", "# Weight for node desirability based on proximity", "# Track recent visitation (arbitrary recent visit tracking for this example)", "recent_visitation", "=", "{", "node", ":", "1", "for", "node", "in", "unvisited_nodes", "}", "# Function to calculate heuristic estimate of remaining distance", "def", "heuristic_distance", "(", "node", ")", ":", "return", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "recent_penalty", "=", "recent_visitation", "[", "node", "]", "heuristic_estimate", "=", "heuristic_distance", "(", "node", ")", "# Combined scoring mechanism using a cost function", "score", "=", "(", "distance_weight", "*", "direct_distance", "+", "recent_visit_penalty", "*", "recent_penalty", "+", "desirability_weight", "*", "heuristic_estimate", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.331995111188165}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "# Calculate heuristic factors based on distances", "distance_scores", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "avg_distance", "=", "sum", "(", "distance_scores", ".", "values", "(", ")", ")", "/", "len", "(", "unvisited_nodes", ")", "adjusted_avg_distance", "=", "avg_distance", "*", "(", "1", "+", "0.1", "*", "len", "(", "unvisited_nodes", ")", ")", "# Increases influence with more unvisited nodes", "decay_factor", "=", "0.95", "# Decay factor for random influence", "random_factor", "=", "random", ".", "uniform", "(", "0.05", ",", "0.3", ")", "*", "decay_factor", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "+", "(", "adjusted_avg_distance", "-", "distance_scores", "[", "node", "]", ")", "*", "0.2", "+", "random_factor", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for direct proximity to destination", "density_weight", "=", "0.5", "# Weight for density of unvisited nodes nearby", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "nearby_node_count", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", ")", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", ")", "+", "(", "nearby_node_count", "*", "density_weight", ")", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 18.542760536120902}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.6", "# Weight for distance reduction", "future_impact_weight", "=", "0.4", "# Weight for potential future visits", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "potential_future_visits", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "cost", "=", "(", "total_remaining_distance", "*", "distance_weight", ")", "-", "(", "distance_to_destination", "*", "future_impact_weight", ")", "+", "potential_future_visits", "if", "cost", "<", "min_cost", ":", "min_cost", "=", "cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 31.417014917433207}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.6", "# Increased weight for proximity to destination", "clustering_weight", "=", "0.4", "# Weight for clustering benefit among unvisited nodes", "penalty_factor", "=", "1.2", "# Penalty for longer direct paths", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty_score", "=", "penalty_factor", "*", "direct_distance", "clustering_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "(", "penalty_score", "+", "total_distance_to_destination", ")", "+", "(", "clustering_weight", "*", "clustering_score", ")", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.277158301797254}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "closest_node", "=", "None", "shortest_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "<", "shortest_distance", ":", "shortest_distance", "=", "distance", "closest_node", "=", "node", "return", "closest_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "max_exploration_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "[", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "]", ")", "penalty_for_visited", "=", "sum", "(", "[", "distance_matrix", "[", "node", "]", "[", "visited", "]", "for", "visited", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "visited", "not", "in", "unvisited_nodes", "and", "distance_matrix", "[", "node", "]", "[", "visited", "]", ">", "0", "]", ")", "exploration_score", "=", "(", "1", "/", "(", "distance_to_node", "+", "1e-9", ")", ")", "*", "(", "1", "/", "(", "total_distance_to_unvisited", "+", "1e-9", ")", ")", "*", "(", "1", "+", "penalty_for_visited", ")", "if", "exploration_score", ">", "max_exploration_score", ":", "max_exploration_score", "=", "exploration_score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 7.592714285087428}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate the total distance for a more balanced scoring mechanism", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node1", "]", "[", "node2", "]", "for", "node1", "in", "unvisited_nodes", "for", "node2", "in", "unvisited_nodes", "if", "node1", "!=", "node2", ")", "penalty_factor", "=", "1.5", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Closeness score based on direct distance and a penalty for further distances", "closeness_score", "=", "direct_distance", "+", "penalty_factor", "*", "distance_to_destination", "score", "=", "closeness_score", "+", "(", "total_distance", "/", "len", "(", "unvisited_nodes", ")", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.46985744010961}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "total_weight", "=", "0", "weights", "=", "{", "}", "# Calculate weights based on inverse distance", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "weight", "=", "1", "/", "(", "distance_to_node", "+", "1e-6", ")", "# Adding a small constant to avoid division by zero", "weights", "[", "node", "]", "=", "weight", "total_weight", "+=", "weight", "# Normalize the weights to sum to 1", "for", "node", "in", "weights", ":", "weights", "[", "node", "]", "/=", "total_weight", "# Generate a random number and select the next node based on weight", "rand_value", "=", "random", ".", "random", "(", ")", "cumulative_probability", "=", "0.0", "for", "node", ",", "prob", "in", "weights", ".", "items", "(", ")", ":", "cumulative_probability", "+=", "prob", "if", "rand_value", "<", "cumulative_probability", ":", "return", "node", "return", "None", "# Fallback if no selection was made, though this should not occur"], "code_perf": 19.341591549238913}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "visit_frequency", "=", "{", "node", ":", "0", "for", "node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "}", "# Tracks how many times each node has been visited", "if", "unvisited_nodes", ":", "immediate_weight", "=", "0.5", "# Weight for immediate travel cost", "appeal_weight", "=", "0.4", "# Weight for node attractiveness based on visit frequency", "randomness_weight", "=", "0.1", "# Weight for introducing randomness", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "appeal_factor", "=", "1", "/", "(", "1", "+", "visit_frequency", "[", "node", "]", ")", "# Attractive factor; less visited nodes are more appealing", "# Incorporating randomness to encourage exploration of less popular nodes", "random_factor", "=", "random", ".", "uniform", "(", "0", ",", "randomness_weight", ")", "# Random value between 0 and randomness_weight", "score", "=", "(", "-", "immediate_weight", "*", "direct_distance", ")", "+", "(", "appeal_weight", "*", "appeal_factor", ")", "+", "random_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "visit_frequency", "[", "next_node", "]", "+=", "1", "# Update visit frequency for the selected next node", "return", "next_node"], "code_perf": 8.071288936446969}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance from current node", "distance_penalty_weight", "=", "0.3", "# Penalty for distance from destination", "connectivity_reward_weight", "=", "0.3", "# Reward for connecting to well-connected unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "direct_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_penalty", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Connectivity measure as the average distance to all other unvisited nodes", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "1", ")", "score", "=", "-", "(", "direct_distance", "*", "direct_distance_weight", ")", "-", "(", "distance_penalty", "*", "distance_penalty_weight", ")", "+", "(", "connectivity_score", "*", "connectivity_reward_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.162477349095134}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "# Calculate the base cost to the destination", "base_cost_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Cost penalty for immediate choice", "immediate_cost", "=", "distance_to_node", "+", "base_cost_to_destination", "# Estimate future costs based on connectivity (average distances to unvisited nodes)", "future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "adj", "]", "for", "adj", "in", "unvisited_nodes", "if", "adj", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "# Calculate total score by combining both costs with a weighting factor", "total_score", "=", "immediate_cost", "+", "0.5", "*", "future_cost", "if", "total_score", "<", "min_score", ":", "min_score", "=", "total_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.526271790227707}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_connectivity", "=", "sum", "(", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", "]", ")", "for", "node", "in", "unvisited_nodes", ")", "connectivity_penalty", "=", "0.5", "*", "(", "total_connectivity", "/", "len", "(", "unvisited_nodes", ")", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "+", "connectivity_penalty", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "min_distance_to_remaining", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "ripple_effect", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "direct_influence_weight", "=", "0.4", "clustering_effect_weight", "=", "0.4", "ripple_penalty_weight", "=", "0.2", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "clustering_effect", "=", "clustering_effect_weight", "*", "(", "min_distance_to_remaining", "-", "direct_distance", ")", "ripple_penalty", "=", "ripple_penalty_weight", "*", "ripple_effect", "score", "=", "(", "direct_influence_weight", "*", "direct_distance", ")", "+", "clustering_effect", "+", "ripple_penalty", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 29.865848655765852}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate average distance from current node to unvisited nodes", "average_dist", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Calculate distance variance for unvisited nodes", "distance_variance", "=", "sum", "(", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "-", "average_dist", ")", "**", "2", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_importance", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "+", "1", ")", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "score", "=", "direct_distance", "+", "(", "distance_variance", "*", "cluster_importance", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.5676996480758785}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "def", "proximity_score", "(", "node", ")", ":", "return", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1", ")", "def", "penalty_score", "(", "node", ")", ":", "return", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "+", "1", ")", "exploration_factor", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "prox_score", "=", "proximity_score", "(", "node", ")", "pen_score", "=", "penalty_score", "(", "node", ")", "score", "=", "prox_score", "*", "(", "1", "-", "pen_score", ")", "*", "exploration_factor", "# Combine scores", "scores", "[", "node", "]", "=", "score", "next_node", "=", "max", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Emphasis on direct distance", "density_weight", "=", "0.4", "# Weight for node density influence", "heuristic_weight", "=", "0.2", "# Weight for anticipated future cost", "# Calculate node density score based on proximity to unvisited nodes", "def", "calculate_density_score", "(", "node", ")", ":", "density_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "density_score", "+=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "+", "1e-6", ")", "# Avoid division by zero", "return", "density_score", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "density_score", "=", "calculate_density_score", "(", "node", ")", "heuristic_score", "=", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combined scoring mechanism", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "density_weight", "*", "density_score", "+", "heuristic_weight", "*", "heuristic_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.811288564013772}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the distances to all unvisited nodes", "distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Calculate a weight based on the number of unvisited nodes", "weight_factor", "=", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Reduces influence of remaining nodes as they decrease", "# Create a weighted score combining distance and randomness", "weighted_scores", "=", "{", "node", ":", "distances", "[", "node", "]", "*", "weight_factor", "+", "random", ".", "random", "(", ")", "*", "0.1", "for", "node", "in", "unvisited_nodes", "}", "# Select the next node by minimizing the weighted score", "next_node", "=", "min", "(", "weighted_scores", ",", "key", "=", "weighted_scores", ".", "get", ")", "return", "next_node"], "code_perf": 15.265750822780946}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity to destination", "visit_frequency_weight", "=", "0.3", "# Weight for how frequently the node was visited", "distance_savings_weight", "=", "0.2", "# Weight for the potential savings in distance", "visit_frequency", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "# Mapping to track visit frequency", "for", "node", "in", "unvisited_nodes", ":", "visit_frequency", "[", "node", "]", "+=", "1", "# Simulating visit frequency increment", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "distance_savings", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Introducing attraction based on visit frequency (lower frequency is better)", "attraction_factor", "=", "1", "/", "(", "visit_frequency", "[", "node", "]", "+", "1", ")", "score", "=", "(", "proximity_weight", "*", "proximity_score", "+", "(", "1", "-", "attraction_factor", ")", "*", "visit_frequency_weight", "-", "(", "distance_savings", "*", "distance_savings_weight", ")", "-", "direct_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.63562385255033}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.4", "# Weight for connectivity to unvisited nodes", "risk_factor_weight", "=", "0.2", "# Weight for risk of detours", "# Function to calculate connectivity score based on unvisited nodes", "def", "calculate_connectivity_score", "(", "node", ")", ":", "connectivity_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "connectivity_score", "+=", "distance_matrix", "[", "node", "]", "[", "other", "]", "return", "connectivity_score", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Calculate the distance to the destination for risk assessment", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "calculate_connectivity_score", "(", "node", ")", "risk_factor", "=", "direct_distance", "/", "distance_to_destination", "if", "distance_to_destination", ">", "0", "else", "1", "# Combined scoring mechanism with adjusted weights", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "-", "risk_factor_weight", "*", "risk_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.469175068989248}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "average_future_distance", "=", "sum", "(", "min", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_distance_impact", "=", "average_future_distance", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "direct_distance", "+", "0.5", "*", "future_distance_impact", "+", "random", ".", "uniform", "(", "-", "0.1", ",", "0.1", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.4634300430537355}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Convert unvisited nodes to a numpy array for easier manipulation", "unvisited_nodes", "=", "np", ".", "array", "(", "list", "(", "unvisited_nodes", ")", ")", "# Calculate distances from the current node to all unvisited nodes", "distances", "=", "distance_matrix", "[", "current_node", ",", "unvisited_nodes", "]", "# Calculate the number of unvisited neighbors for each unvisited node", "unvisited_count", "=", "np", ".", "array", "(", "[", "np", ".", "sum", "(", "distance_matrix", "[", "node", ",", ":", "]", ">", "0", ")", "for", "node", "in", "unvisited_nodes", "]", ")", "# Compute a combined score: weighted distance + (1 / unvisited neighbors + 1)", "weights", "=", "0.5", "# Weight factor for combining distance and unvisited nodes consideration", "scores", "=", "distances", "+", "weights", "*", "(", "1", "/", "(", "unvisited_count", "+", "1", ")", ")", "# Select the node with the minimum score", "next_node", "=", "unvisited_nodes", "[", "np", ".", "argmin", "(", "scores", ")", "]", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate the minimum distance to unvisited nodes", "min_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Calculate the centrality score based on the degree of connectivity", "centrality_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "degree", "=", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "float", "(", "'inf'", ")", ")", "centrality_scores", "[", "node", "]", "=", "degree", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Scoring based on minimum distance and centrality", "score", "=", "direct_distance", "-", "centrality_scores", "[", "node", "]", "+", "min_distance", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "future_potential_scores", "=", "{", "node", ":", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "}", "connectivity_scores", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_bonus", "=", "connectivity_scores", "[", "node", "]", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "future_potential", "=", "future_potential_scores", "[", "node", "]", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "score", "=", "direct_distance", "+", "connectivity_bonus", "-", "future_potential", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.335080459486361}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to both destination and unvisited nodes", "penalty_weight", "=", "0.6", "# Weight for penalizing direct distances to previously visited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "revisit_penalty", "=", "direct_distance", "*", "(", "penalty_weight", "if", "node", "in", "unvisited_nodes", "else", "0", ")", "score", "=", "(", "average_distance_to_unvisited", "*", "proximity_weight", ")", "+", "(", "distance_to_destination", "*", "proximity_weight", ")", "-", "(", "direct_distance", "+", "revisit_penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.38493561995725}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for distance consideration", "cluster_penalty_weight", "=", "0.3", "# Weight for penalizing cluster returns", "nearest_neighbor_weight", "=", "0.2", "# Weight for nearest neighbor attraction", "# Calculate the distance to the nearest unvisited node", "nearest_neighbor_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Evaluate score for each unvisited node", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "cluster_penalty", "=", "sum", "(", "distance_matrix", "[", "visited", "]", "[", "node", "]", "for", "visited", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "visited", "not", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "distance_matrix", ")", "-", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "distance_weight", "*", "direct_distance", ")", "+", "(", "nearest_neighbor_weight", "*", "nearest_neighbor_distance", ")", "+", "(", "cluster_penalty_weight", "*", "cluster_penalty", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.292416434176145}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "average_distance_weight", "=", "0.4", "# Weight for average distance to unvisited", "effectiveness_weight", "=", "0.2", "# Weight for cost-effectiveness", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "potential_cost_effectiveness", "=", "(", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Scale by the number of unvisited nodes", "score", "=", "-", "(", "direct_distance_weight", "*", "direct_distance", ")", "+", "(", "average_distance_weight", "*", "average_distance_to_unvisited", ")", "+", "(", "effectiveness_weight", "*", "potential_cost_effectiveness", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.362381088576832}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_edges", "=", "len", "(", "unvisited_nodes", ")", "penalty", "=", "total_edges", "/", "(", "total_edges", "+", "1", ")", "# Penalty based on remaining unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "closeness_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "weighted_score", "=", "direct_distance", "+", "penalty", "*", "closeness_to_destination", "if", "weighted_score", "<", "min_score", ":", "min_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.958619780000175}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "centroid_x", "=", "sum", "(", "node", "%", "len", "(", "distance_matrix", ")", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "centroid_y", "=", "sum", "(", "node", "//", "len", "(", "distance_matrix", ")", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "clustering_weight", "=", "0.5", "# Weight for proximity to centroid of unvisited nodes", "distance_weight", "=", "0.5", "# Weight for direct distance to the destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate the distance of the current node to the centroid of unvisited nodes", "centroid_distance", "=", "(", "(", "node", "%", "len", "(", "distance_matrix", ")", "-", "centroid_x", ")", "**", "2", "+", "(", "node", "//", "len", "(", "distance_matrix", ")", "-", "centroid_y", ")", "**", "2", ")", "**", "0.5", "score", "=", "-", "direct_distance", "*", "distance_weight", "+", "distance_to_destination", "*", "clustering_weight", "-", "centroid_distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 24.31887668755013}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Randomly sample a subset of unvisited nodes", "sample_size", "=", "min", "(", "5", ",", "len", "(", "unvisited_nodes", ")", ")", "# Sample up to 5 nodes", "sampled_nodes", "=", "random", ".", "sample", "(", "unvisited_nodes", ",", "sample_size", ")", "best_next_node", "=", "None", "minimal_distance_sum", "=", "float", "(", "'inf'", ")", "for", "node", "in", "sampled_nodes", ":", "distance_to_current", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "total_distance", "=", "distance_to_current", "+", "distance_to_destination", "if", "total_distance", "<", "minimal_distance_sum", ":", "minimal_distance_sum", "=", "total_distance", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 15.431324997239294}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "penalty", "=", "0.1", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "total_distance_traveled", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "inverse_distance_to_next", "=", "1", "/", "distance_to_next", "if", "distance_to_next", ">", "0", "else", "0", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "inverse_distance_to_next", "-", "penalty", ")", "-", "(", "0.4", "*", "distance_to_destination", ")", "-", "(", "0.2", "*", "(", "total_distance_traveled", "/", "len", "(", "distance_matrix", ")", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.025377757336667}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "average_weight", "=", "0.4", "# Weight for average distance", "risk_penalty", "=", "0.2", "# Weight to penalize longer distances", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Score calculation", "score", "=", "(", "total_distance_to_destination", "*", "distance_weight", ")", "-", "(", "direct_distance", "*", "risk_penalty", ")", "+", "(", "average_distance_to_destination", "*", "average_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.98930167680099}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.6", "# Weight for nodes closer to the destination", "penalty_weight", "=", "0.4", "# Weight for penalizing based on total distance of unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_impact", "=", "penalty_weight", "*", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max_penalty", ")", "proximity_score", "=", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "direct_distance", "+", "total_distance_impact", "+", "proximity_score", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.381106680511547}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for distance", "neighbor_weight", "=", "0.4", "# Weight for the number of neighboring unvisited nodes", "penalty_weight", "=", "0.2", "# Penalty for already visited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "neighbor_count", "=", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", ")", "# Count of neighbors", "penalty_score", "=", "sum", "(", "1", "for", "next", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "next", "not", "in", "unvisited_nodes", "and", "distance_matrix", "[", "current_node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", ")", "# Penalty for visited node connections", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "neighbor_weight", "*", "neighbor_count", "-", "penalty_weight", "*", "penalty_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "unvisited_nodes", "=", "list", "(", "unvisited_nodes", ")", "def", "proximity_score", "(", "node", ")", ":", "# Score based on closeness to unvisited nodes", "return", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "+", "1", ")", "for", "n", "in", "unvisited_nodes", ")", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "risk_factor", "=", "distance", "# Accumulated risk based on distance", "score", "=", "distance", "*", "(", "1", "-", "proximity_score", "(", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "+", "risk_factor", "# Hybrid score", "scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.051727457267798}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate the distance to the destination from the current node", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Introduce a randomness factor for exploration", "risk_factor", "=", "0.4", "# Adjusted risk factor based on inspirations from No.1", "random_factor", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "*", "risk_factor", "# Calculate scores for each unvisited node", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_to_destination_score", "=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", "scores", "[", "node", "]", "=", "(", "distance_to_node", "*", "(", "1", "+", "random_factor", ")", ")", "+", "(", "distance_to_destination", "*", "proximity_to_destination_score", ")", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.702945291596709}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "total_unvisited_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "candidate", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate", "]", "return_penalty", "=", "distance_matrix", "[", "candidate", "]", "[", "destination_node", "]", "score", "=", "immediate_distance", "+", "(", "total_unvisited_distance", "/", "len", "(", "unvisited_nodes", ")", ")", "+", "return_penalty", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "candidate", "return", "best_next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_combined_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate connectivity score as the number of connections to unvisited nodes", "connectivity_score", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "float", "(", "'inf'", ")", ")", "# Calculate the average distance to all other unvisited nodes", "average_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "/", "len", "(", "unvisited_nodes", ")", "# Combined score: balance between connectivity and distance criteria", "combined_score", "=", "connectivity_score", "-", "(", "0.5", "*", "distance_to_next", "+", "0.5", "*", "distance_to_destination", ")", "-", "(", "0.2", "*", "average_distance", ")", "if", "combined_score", ">", "max_combined_score", ":", "max_combined_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.544195543582784}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "future_distance_weight", "=", "0.4", "# Weight for future distance impact", "penalty_weight", "=", "0.1", "# Weight for penalty based on furthest unvisited node", "average_future_distance", "=", "sum", "(", "min", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "max_penalty", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_distance_impact", "=", "average_future_distance", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "distance_weight", "*", "direct_distance", "+", "future_distance_weight", "*", "future_distance_impact", "+", "penalty_weight", "*", "max_penalty", "+", "random", ".", "uniform", "(", "-", "0.1", ",", "0.1", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.810116478184206}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Use a decay factor for immediate distances", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_decay", "=", "(", "1", "/", "(", "1", "+", "direct_distance", ")", ")", "if", "direct_distance", ">", "0", "else", "0", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "direct_distance", "*", "(", "1", "-", "distance_decay", ")", "+", "connectivity_score", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.841335079842752}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "connection_weights", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "# Count the number of direct connections to unvisited nodes within a certain radius", "connection_count", "=", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<=", "5", ")", "connection_weights", "[", "node", "]", "=", "connection_count", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connection_weight", "=", "connection_weights", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "direct_distance", "+", "0.6", "*", "(", "avg_distance_to_destination", "-", "distance_to_destination", ")", "-", "0.2", "*", "connection_weight", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.4257563991146025}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance to unvisited nodes", "attractiveness_weight", "=", "0.4", "# Weight for attractiveness to destination", "proximity_weight", "=", "0.2", "# Weight for proximity to starting node", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "proximity_to_start", "=", "distance_matrix", "[", "node", "]", "[", "0", "]", "# Assuming the starting node index is 0", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "num_unvisited", "or", "1", ")", "# Dynamic penalty based on the number of unvisited nodes", "dynamic_penalty", "=", "(", "num_unvisited", "-", "1", ")", "*", "0.1", "score", "=", "(", "average_distance_to_unvisited", "*", "direct_weight", ")", "+", "(", "distance_to_destination", "*", "attractiveness_weight", ")", "+", "(", "proximity_to_start", "*", "proximity_weight", ")", "-", "direct_distance", "-", "dynamic_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.378332893374544}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_distance_weight", "=", "0.5", "# Weight for direct distance to unvisited nodes", "cluster_distance_weight", "=", "0.3", "# Weight for potential cluster savings", "density_weight", "=", "0.2", "# Weight for node density in unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "total_unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_cluster_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "future_average_distance", "=", "future_cluster_distance", "/", "(", "total_unvisited_count", "or", "1", ")", "density_score", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "1", ")", "# Example threshold distance", "score", "=", "-", "(", "immediate_distance", "+", "total_distance_to_destination", ")", "*", "immediate_distance_weight", "+", "future_average_distance", "*", "cluster_distance_weight", "+", "density_score", "*", "density_weight", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.878563403044772}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "base_distance_weight", "=", "0.4", "# Base weight for direct distance", "adaptive_connectivity_weight", "=", "0.5", "# Weight for dynamic connectivity adjustment", "penalty_weight", "=", "0.1", "# Weight for penalties based on distances to unvisited nodes", "# Function to calculate adaptive connectivity score", "def", "calculate_connectivity_score", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Function to calculate penalty based on distance to unvisited nodes", "def", "calculate_penalty", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "calculate_connectivity_score", "(", "node", ")", "penalty", "=", "calculate_penalty", "(", "node", ")", "# Dynamic adjustment of weight through the remaining number of unvisited nodes", "dynamic_weight", "=", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Combined scoring mechanism", "score", "=", "(", "-", "base_distance_weight", "*", "direct_distance", "+", "adaptive_connectivity_weight", "*", "connectivity_score", "-", "penalty_weight", "*", "penalty", "*", "dynamic_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.501670528053933}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "cluster_weight", "=", "0.6", "# Weight to influence the selection towards nearby clusters", "close_nodes", "=", "[", "node", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<=", "5", "]", "close_nodes_count", "=", "len", "(", "close_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_score", "=", "close_nodes_count", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "avg_distance_to_group", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "close_nodes", ")", "/", "(", "close_nodes_count", "if", "close_nodes_count", ">", "0", "else", "1", ")", "score", "=", "(", "1", "-", "cluster_weight", ")", "*", "direct_distance", "+", "cluster_weight", "*", "(", "avg_distance_to_group", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.5432102682595605}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to unvisited nodes", "clustering_weight", "=", "0.3", "# Weight for clustering potential", "uniqueness_weight", "=", "0.3", "# Weight for exploring less visited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "proximity_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "uniqueness_score", "=", "1", "/", "(", "1", "+", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "n", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "2", "*", "proximity_score", "]", ")", ")", "score", "=", "(", "proximity_weight", "*", "proximity_score", ")", "+", "(", "clustering_weight", "*", "cluster_score", ")", "-", "(", "uniqueness_weight", "*", "uniqueness_score", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.319426795845156}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "unvisited_nodes", "=", "np", ".", "array", "(", "list", "(", "unvisited_nodes", ")", ")", "distances", "=", "distance_matrix", "[", "current_node", ",", "unvisited_nodes", "]", "to_destination_distances", "=", "distance_matrix", "[", "unvisited_nodes", ",", "destination_node", "]", "# Decay factor to minimize the impact of distant nodes", "decay_factor", "=", "0.5", "decay_penalties", "=", "np", ".", "exp", "(", "-", "decay_factor", "*", "to_destination_distances", ")", "# Weight for the number of unvisited neighbors, penalizing over-selection of crowded paths", "unvisited_count", "=", "np", ".", "array", "(", "[", "np", ".", "sum", "(", "distance_matrix", "[", "node", ",", ":", "]", ">", "0", ")", "for", "node", "in", "unvisited_nodes", "]", ")", "neighbor_weight", "=", "1", "/", "(", "unvisited_count", "+", "1", ")", "# Compute score based on distances, decay penalties, and neighbor weight", "scores", "=", "distances", "+", "decay_penalties", "+", "neighbor_weight", "next_node", "=", "unvisited_nodes", "[", "np", ".", "argmin", "(", "scores", ")", "]", "return", "next_node"], "code_perf": 6.520538505992208}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for distance", "density_weight", "=", "0.3", "# Weight for density of unvisited connections", "penalty_weight", "=", "0.1", "# Penalty for already visited nodes", "randomness_weight", "=", "0.2", "# Weight for adding exploration randomness", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "density_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average density", "penalty_score", "=", "sum", "(", "1", "for", "next", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "next", "not", "in", "unvisited_nodes", "and", "distance_matrix", "[", "current_node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", ")", "# Penalty for visited node connections", "# Introducing randomness to avoid local optimum", "randomness_score", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "*", "randomness_weight", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "density_weight", "*", "density_score", "-", "penalty_weight", "*", "penalty_score", "+", "randomness_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.191693661094089}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "clustering_influence_factor", "=", "0.5", "# Calculate the clustering score based on the density of unvisited nodes around the current node", "clustering_score", "=", "sum", "(", "1", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<=", "15", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "clustering_effect", "=", "clustering_score", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "# Normalize clustering influence", "score", "=", "direct_distance", "+", "0.7", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "clustering_influence_factor", "*", "clustering_effect", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.438127015117454}
