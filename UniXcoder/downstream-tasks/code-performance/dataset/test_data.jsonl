{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Convert unvisited nodes to a numpy array for easier manipulation", "unvisited_nodes", "=", "np", ".", "array", "(", "list", "(", "unvisited_nodes", ")", ")", "# Calculate distances from the current node to all unvisited nodes", "distances", "=", "distance_matrix", "[", "current_node", ",", "unvisited_nodes", "]", "# Calculate distances from the unvisited nodes to the destination node", "to_destination_distances", "=", "distance_matrix", "[", "unvisited_nodes", ",", "destination_node", "]", "# A temperature parameter to adjust the influence of distance and destination proximity", "temperature", "=", "1.0", "# You can vary this value for more exploration or exploitation", "adjusted_weights", "=", "np", ".", "exp", "(", "-", "to_destination_distances", "/", "temperature", ")", "# Calculate the number of unvisited neighbors for each unvisited node", "unvisited_count", "=", "np", ".", "array", "(", "[", "np", ".", "sum", "(", "distance_matrix", "[", "node", ",", ":", "]", ">", "0", ")", "for", "node", "in", "unvisited_nodes", "]", ")", "# Compute a combined score: distance + weight for destination proximity + unvisited neighbors penalty", "scores", "=", "distances", "+", "adjusted_weights", "+", "(", "1", "/", "(", "unvisited_count", "+", "1", ")", ")", "# Select the node with the minimum score", "next_node", "=", "unvisited_nodes", "[", "np", ".", "argmin", "(", "scores", ")", "]", "return", "next_node"], "code_perf": 6.474456263583827}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "max_attractiveness_score", "=", "float", "(", "'-inf'", ")", "avg_distance_to_unvisited", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_remaining", "=", "sum", "(", "[", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "]", ")", "risk_adjusted_score", "=", "(", "avg_distance_to_unvisited", "/", "(", "distance_to_node", "+", "1e-9", ")", ")", "*", "(", "1", "+", "total_distance_to_remaining", ")", "if", "risk_adjusted_score", ">", "max_attractiveness_score", ":", "max_attractiveness_score", "=", "risk_adjusted_score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.581581373023452}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculating distances to unvisited nodes and their corresponding weights", "weighted_distances", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Introducing a weight based on the distance to the destination", "weight", "=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1e-6", ")", "# Avoid division by zero", "weighted_distances", "[", "node", "]", "=", "distance_to_node", "*", "weight", "# Selecting the node with the minimum weighted distance", "next_node", "=", "min", "(", "weighted_distances", ",", "key", "=", "weighted_distances", ".", "get", ")", "return", "next_node"], "code_perf": 6.6567767688234}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Normalizing distances to unvisited nodes and introducing exploration factor", "normalized_distances", "=", "{", "}", "min_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "normalized_distance", "=", "distance_to_node", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1e-6", ")", "# Avoid division by zero", "normalized_distances", "[", "node", "]", "=", "normalized_distance", "min_distance", "=", "min", "(", "min_distance", ",", "normalized_distance", ")", "# Introducing a random exploration factor", "exploration_factor", "=", "random", ".", "uniform", "(", "0.5", ",", "1.5", ")", "# Calculating scores based on normalized distances and exploration factor", "scores", "=", "{", "node", ":", "(", "1", "/", "(", "dist", "+", "1e-6", ")", ")", "*", "exploration_factor", "for", "node", ",", "dist", "in", "normalized_distances", ".", "items", "(", ")", "}", "# Selecting the node with the maximum score", "next_node", "=", "max", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.6567767688234}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "exploration_factor", "=", "1", "/", "(", "1", "+", "distance_to_destination", ")", "# Encourages exploration of farther nodes", "scores", "[", "node", "]", "=", "distance_to_node", "*", "exploration_factor", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.699237951584123}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "exploration_factor", "=", "1", "/", "(", "1", "+", "distance_to_destination", ")", "# Encourages exploring nodes close to the destination", "penalty_factor", "=", "(", "distance_to_node", "**", "2", ")", "/", "(", "1", "+", "distance_to_destination", ")", "# Penalizes long distances to nodes", "scores", "[", "node", "]", "=", "(", "distance_to_node", "+", "penalty_factor", ")", "*", "exploration_factor", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.699237951584123}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "weighted_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "weight", "=", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "# Weight based on remaining nodes and distance to destination", "weighted_scores", "[", "node", "]", "=", "distance_to_node", "*", "weight", "next_node", "=", "min", "(", "weighted_scores", ",", "key", "=", "weighted_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.699237951584123}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Introduce a decay factor inversely proportional to the distance to the destination", "decay_factor", "=", "1", "/", "(", "1", "+", "distance_to_destination", ")", "# Combine distance with decay factor for a weighted score", "score", "=", "distance_to_node", "*", "(", "1", "+", "decay_factor", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.83165993596245}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "max_attractiveness_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "min_distance_to_unvisited", "=", "min", "(", "[", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "]", ",", "default", "=", "float", "(", "'inf'", ")", ")", "connectivity_score", "=", "len", "(", "[", "n", "for", "n", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "0", "]", ")", "attractiveness_score", "=", "(", "1", "/", "(", "distance_to_node", "+", "1e-9", ")", ")", "*", "(", "1", "+", "min_distance_to_unvisited", ")", "*", "(", "1", "+", "connectivity_score", ")", "if", "attractiveness_score", ">", "max_attractiveness_score", ":", "max_attractiveness_score", "=", "attractiveness_score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.883569747919271}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "penalized_scores", "=", "{", "}", "visited_count", "=", "len", "(", "distance_matrix", ")", "-", "len", "(", "unvisited_nodes", ")", "-", "1", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "0.5", "**", "visited_count", "# Penalty decreases as more nodes are visited", "score", "=", "distance_to_node", "+", "(", "penalty", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "# Combine distance and penalty", "penalized_scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "penalized_scores", ",", "key", "=", "penalized_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.952821252587064}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "# Calculate the average distance to the unvisited nodes", "avg_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Decay factor based on how many nodes are left", "decay_factor", "=", "1", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "score", "=", "distance_to_node", "+", "avg_distance_remaining", "*", "decay_factor", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate the isolation penalty for nodes that are less connected", "isolation_penalty", "=", "len", "(", "[", "nn", "for", "nn", "in", "unvisited_nodes", "if", "nn", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "nn", "]", "==", "np", ".", "inf", "]", ")", "# Attraction factor based on the number of remaining unvisited nodes", "attraction_factor", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Combine distance, isolation penalty, and attraction factor into the cost function", "scores", "[", "node", "]", "=", "distance_to_node", "+", "isolation_penalty", "*", "0.5", "-", "attraction_factor", "*", "0.2", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate the connectivity score as a heuristic to prioritize more connected nodes", "connectivity_score", "=", "len", "(", "[", "nn", "for", "nn", "in", "unvisited_nodes", "if", "nn", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "nn", "]", "<", "np", ".", "inf", "]", ")", "# Combine distance and connectivity score into the cost function", "scores", "[", "node", "]", "=", "distance_to_node", "-", "connectivity_score", "*", "0.1", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Define penalty parameters", "penalty_factor", "=", "1.0", "# Base penalty modifier", "distance_decay_factor", "=", "0.1", "# How much penalty decays based on unvisited nodes", "last_visited_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "best_next_node", "=", "None", "best_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Decay the penalty based on the number of unvisited nodes", "decay_penalty", "=", "penalty_factor", "*", "last_visited_distance", "*", "(", "1", "-", "distance_decay_factor", "*", "len", "(", "unvisited_nodes", ")", ")", "# Calculate total cost with dynamic penalty", "total_cost", "=", "direct_distance", "+", "decay_penalty", "if", "total_cost", "<", "best_cost", ":", "best_cost", "=", "total_cost", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["# {This algorithm introduces a scoring mechanism that combines a dynamic weight based on the reciprocal of the distance to a node and a travel cost factor influenced by previously visited nodes, promoting exploration of nodes that balance proximity with travel history.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "total_travel_cost", "=", "sum", "(", "distance_matrix", "[", "previous_node", "]", "[", "current_node", "]", "for", "previous_node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "previous_node", "!=", "current_node", "and", "previous_node", "not", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Dynamic weight inversely related to distance to prioritize closer nodes", "distance_weight", "=", "1", "/", "(", "distance_to_node", "+", "1e-6", ")", "# Avoid division by zero", "# Scoring based on travel cost and distance weight", "score", "=", "distance_weight", "-", "(", "total_travel_cost", "/", "(", "len", "(", "distance_matrix", ")", "-", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "minimal_weighted_distance", "=", "float", "(", "'inf'", ")", "max_distance", "=", "np", ".", "max", "(", "distance_matrix", "[", "current_node", "]", ")", "# Calculate max distance from the current node", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "scaling_factor", "=", "(", "max_distance", "-", "distance", ")", "/", "max_distance", "# Scaling factor based on proximity", "weighted_distance", "=", "distance", "*", "(", "1", "+", "scaling_factor", ")", "# Incorporating scaling factor", "if", "weighted_distance", "<", "minimal_weighted_distance", ":", "minimal_weighted_distance", "=", "weighted_distance", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "distances_to_unvisited", "=", "np", ".", "array", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "average_distance", "=", "np", ".", "mean", "(", "distances_to_unvisited", ")", "penalty", "=", "np", ".", "max", "(", "distances_to_unvisited", ")", "/", "2", "# Penalty for selecting distant nodes", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "for", "candidate", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate", "]", "score", "=", "(", "immediate_distance", "*", "2", ")", "+", "(", "average_distance", "*", "0.3", ")", "+", "penalty", "# New weighted scoring with penalty", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "candidate", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["# {The algorithm prioritizes nodes based on a balance between direct distance to unvisited nodes and their average distance from all unvisited nodes, incorporating a dynamic weight that increases with the number of remaining nodes to account for overall exploration.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "num_unvisited_nodes", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Weight increases with remaining nodes to encourage distant exploration", "exploration_weight", "=", "num_unvisited_nodes", "**", "0.5", "score", "=", "direct_distance", "+", "average_distance_to_unvisited", "/", "exploration_weight", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "closest_nodes", "=", "[", "]", "weighted_choice", "=", "[", "]", "# Find the minimum distance and prepare for weighted selection", "min_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "<", "min_distance", ":", "min_distance", "=", "distance", "closest_nodes", "=", "[", "node", "]", "weighted_choice", "=", "[", "1", "/", "distance", "]", "# Initialize weight based on inverse distance", "elif", "distance", "==", "min_distance", ":", "closest_nodes", ".", "append", "(", "node", ")", "weighted_choice", ".", "append", "(", "1", "/", "distance", ")", "# Same weight for equal closest nodes", "# Introduce variability through weighted random selection", "if", "closest_nodes", ":", "total_weight", "=", "sum", "(", "weighted_choice", ")", "probabilities", "=", "[", "weight", "/", "total_weight", "for", "weight", "in", "weighted_choice", "]", "next_node", "=", "random", ".", "choices", "(", "closest_nodes", ",", "probabilities", ")", "[", "0", "]", "return", "next_node", "return", "None"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "distances_to_unvisited", "=", "np", ".", "array", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "average_distance", "=", "np", ".", "mean", "(", "distances_to_unvisited", ")", "local_density", "=", "sum", "(", "1", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<", "average_distance", ")", "/", "len", "(", "unvisited_nodes", ")", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "for", "candidate", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate", "]", "score", "=", "(", "immediate_distance", "*", "1.5", ")", "+", "(", "average_distance", "*", "0.5", ")", "-", "(", "local_density", "*", "10", ")", "# Adjusted scoring with local density", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "candidate", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Clustering unvisited nodes based on distance", "clusters", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_from_current", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_key", "=", "int", "(", "distance_from_current", "//", "1", ")", "# Use distance as a basic cluster key", "if", "cluster_key", "not", "in", "clusters", ":", "clusters", "[", "cluster_key", "]", "=", "[", "]", "clusters", "[", "cluster_key", "]", ".", "append", "(", "node", ")", "# Finding the centroid of the closest cluster", "closest_node", "=", "None", "lowest_avg_distance", "=", "float", "(", "'inf'", ")", "for", "cluster", "in", "clusters", ".", "values", "(", ")", ":", "avg_distance", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "cluster", "]", ")", "if", "avg_distance", "<", "lowest_avg_distance", ":", "lowest_avg_distance", "=", "avg_distance", "closest_node", "=", "cluster", "[", "np", ".", "argmin", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "cluster", "]", ")", "]", "return", "closest_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["# {This algorithm incorporates a scoring system that not only considers the inverse distance to the next node but also adds a heuristic penalty for visiting far nodes from the main route while encouraging exploration by taking a weighted average of the distances to previously visited nodes for better route optimization.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "# Calculate the total distance of the route created so far", "total_distance_traveled", "=", "sum", "(", "distance_matrix", "[", "previous_node", "]", "[", "current_node", "]", "for", "previous_node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "previous_node", "!=", "current_node", "and", "previous_node", "not", "in", "unvisited_nodes", ")", "# Calculate the average distance to the visited nodes for a penalty", "if", "total_distance_traveled", ">", "0", ":", "average_penalty", "=", "total_distance_traveled", "/", "(", "len", "(", "distance_matrix", ")", "-", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "else", ":", "average_penalty", "=", "0", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Dynamic weight inversely related to distance; promote shorter paths", "distance_weight", "=", "1", "/", "(", "distance_to_node", "+", "1e-6", ")", "# Heuristic penalty for visiting nodes too far from the desired route to the destination", "heuristic_penalty", "=", "distance_to_node", "-", "average_penalty", "# Score is computed with a hybrid approach of distance weight and the penalty", "score", "=", "distance_weight", "-", "heuristic_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "max_attractiveness_score", "=", "float", "(", "'-inf'", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "tour_length", "=", "total_distance", "+", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "normalized_distance", "=", "distance_to_node", "/", "(", "tour_length", "+", "1e-9", ")", "# prevent division by zero", "inverse_remaining_nodes", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "+", "1e-9", ")", "# avoid division by zero", "attractiveness_score", "=", "(", "1", "-", "normalized_distance", ")", "*", "inverse_remaining_nodes", "if", "attractiveness_score", ">", "max_attractiveness_score", ":", "max_attractiveness_score", "=", "attractiveness_score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "average_remaining_distance", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "total_distance", "=", "np", ".", "sum", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "candidate", "]", "for", "candidate", "in", "unvisited_nodes", "]", ")", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "for", "candidate", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate", "]", "penalty", "=", "(", "average_remaining_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "*", "(", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "# Dynamic penalty", "score", "=", "immediate_distance", "+", "penalty", "+", "(", "total_distance", "/", "len", "(", "unvisited_nodes", ")", ")", "# Incorporating average distance of candidates", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "candidate", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "inverse_distance", "=", "1", "/", "(", "distance_to_node", "+", "1e-9", ")", "# Avoid division by zero", "connection_strength", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "0", "for", "n", "in", "unvisited_nodes", ")", "score", "=", "inverse_distance", "*", "(", "1", "+", "0.5", "*", "connection_strength", ")", "# Weighting connection strength", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Convert unvisited nodes to a numpy array for easier manipulation", "unvisited_nodes", "=", "np", ".", "array", "(", "list", "(", "unvisited_nodes", ")", ")", "# Calculate distances from the current node to all unvisited nodes", "distances", "=", "distance_matrix", "[", "current_node", ",", "unvisited_nodes", "]", "# Calculate the distances from unvisited nodes to the destination", "destination_distances", "=", "distance_matrix", "[", "unvisited_nodes", ",", "destination_node", "]", "# Compute a dynamic weight based on the nearest distance to the destination", "dynamic_weight", "=", "np", ".", "mean", "(", "destination_distances", ")", "/", "(", "np", ".", "min", "(", "destination_distances", ")", "+", "1", ")", "# Calculate the number of unvisited neighbors for each unvisited node", "unvisited_count", "=", "np", ".", "array", "(", "[", "np", ".", "sum", "(", "distance_matrix", "[", "node", ",", ":", "]", ">", "0", ")", "for", "node", "in", "unvisited_nodes", "]", ")", "# Compute a combined score: dynamic weighted distance + (1 / unvisited neighbors + 1)", "scores", "=", "distances", "+", "dynamic_weight", "+", "(", "1", "/", "(", "unvisited_count", "+", "1", ")", ")", "# Select the node with the minimum score", "next_node", "=", "unvisited_nodes", "[", "np", ".", "argmin", "(", "scores", ")", "]", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["# {This algorithm uses a hybrid approach that combines a greedy selection of the closest nodes with a decay factor based on their distances and a randomization mechanism to promote exploration of less obvious paths.}", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "closest_nodes", "=", "[", "]", "min_distance", "=", "float", "(", "'inf'", ")", "# Find the closest nodes", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "<", "min_distance", ":", "min_distance", "=", "distance", "closest_nodes", "=", "[", "node", "]", "elif", "distance", "==", "min_distance", ":", "closest_nodes", ".", "append", "(", "node", ")", "# Introduce a decay factor based on distance", "decay_factors", "=", "[", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "**", "0.5", ")", "for", "node", "in", "closest_nodes", "]", "total_decay", "=", "sum", "(", "decay_factors", ")", "# Compute weighted probabilities using decay factors", "weighted_probs", "=", "[", "decay_factor", "/", "total_decay", "for", "decay_factor", "in", "decay_factors", "]", "# Randomly select a next node based on weighted probabilities", "next_node", "=", "random", ".", "choices", "(", "closest_nodes", ",", "weights", "=", "weighted_probs", ",", "k", "=", "1", ")", "[", "0", "]", "if", "closest_nodes", "else", "None", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Create a priority list based on distances to unvisited nodes", "priority_nodes", "=", "sorted", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "# Check for the best candidate that minimizes the distance", "for", "node", "in", "priority_nodes", ":", "if", "node", "in", "unvisited_nodes", ":", "next_node", "=", "node", "break", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "minimal_weighted_distance", "=", "float", "(", "'inf'", ")", "visit_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "(", "1", "/", "(", "1", "+", "np", ".", "log", "(", "visit_count", ")", ")", ")", "# Applying a penalty based on visit count", "weighted_distance", "=", "distance", "*", "penalty", "if", "weighted_distance", "<", "minimal_weighted_distance", ":", "minimal_weighted_distance", "=", "weighted_distance", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "unvisited_neighbors_count", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "3", ")", "# Nodes within a distance of 3", "score", "=", "distance", "-", "0.5", "*", "unvisited_neighbors_count", "# Weighting the score with unvisited neighbors", "scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "# Select the node with the lowest score", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Weighting factor based on the number of remaining unvisited nodes", "heuristic_weight", "=", "1", "+", "(", "len", "(", "unvisited_nodes", ")", "/", "len", "(", "distance_matrix", ")", ")", "score", "=", "distance_to_node", "*", "heuristic_weight", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "decay_factor", "=", "0.5", "# Decay modifier for distance", "threshold_factor", "=", "1.2", "# Threshold modifier for unvisited preference", "min_distance", "=", "float", "(", "'inf'", ")", "best_next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_decay", "=", "direct_distance", "*", "(", "1", "-", "decay_factor", ")", "# Apply decay to the distance", "# Calculate adjusted distance considering the penalty for unvisited nodes", "adjusted_distance", "=", "distance_decay", "*", "(", "1", "+", "threshold_factor", "*", "(", "len", "(", "unvisited_nodes", ")", "/", "len", "(", "distance_matrix", ")", ")", ")", "if", "adjusted_distance", "<", "min_distance", ":", "min_distance", "=", "adjusted_distance", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<", "min_distance", ":", "min_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "total_distance_traveled", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Penalty factor based on total distance traveled so far", "penalty_factor", "=", "total_distance_traveled", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Decay factor based on remaining unvisited nodes", "decay_factor", "=", "len", "(", "unvisited_nodes", ")", "/", "len", "(", "distance_matrix", ")", "score", "=", "distance_to_node", "+", "penalty_factor", "-", "decay_factor", "*", "distance_to_node", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Define a dynamic penalty that decreases with the number of visited nodes", "penalty_factor", "=", "0.3", "# Penalty modifier", "num_visited_nodes", "=", "len", "(", "distance_matrix", ")", "-", "len", "(", "unvisited_nodes", ")", "dynamic_penalty", "=", "penalty_factor", "/", "(", "num_visited_nodes", "+", "1", ")", "# Inverse relationship", "best_next_node", "=", "None", "best_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate total cost with a dynamic penalty", "total_cost", "=", "direct_distance", "+", "dynamic_penalty", "*", "direct_distance", "if", "total_cost", "<", "best_cost", ":", "best_cost", "=", "total_cost", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "urgency_factor", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "distance_to_node", "+", "1e-10", ")", "*", "(", "len", "(", "unvisited_nodes", ")", "**", "0.5", ")", "comfort_penalty", "=", "distance_to_node", "*", "(", "len", "(", "unvisited_nodes", ")", "/", "len", "(", "distance_matrix", ")", ")", "score", "=", "urgency_factor", "-", "comfort_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "total_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Score combines the distance to next node and the average distance to remaining nodes", "scores", "[", "node", "]", "=", "distance_to_node", "+", "total_distance_to_remaining", "*", "0.5", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "average_remaining_distance", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "for", "candidate", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate", "]", "score", "=", "immediate_distance", "+", "(", "average_remaining_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "# Dynamic penalty", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "candidate", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "minimal_weighted_distance", "=", "float", "(", "'inf'", ")", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance_to_unvisited", "=", "total_distance_to_unvisited", "/", "len", "(", "unvisited_nodes", ")", "visit_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "decay_factor", "=", "(", "0.5", "**", "(", "visit_count", "/", "len", "(", "distance_matrix", ")", ")", ")", "# Dynamic decay based on unvisited count", "weighted_distance", "=", "distance", "*", "decay_factor", "+", "average_distance_to_unvisited", "*", "(", "1", "-", "decay_factor", ")", "if", "weighted_distance", "<", "minimal_weighted_distance", ":", "minimal_weighted_distance", "=", "weighted_distance", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["# {This algorithm incorporates a diversity factor that encourages exploration of unvisited nodes by assigning higher scores to those that have not been recently visited, while also considering both proximity and a penalty for clustering around previously visited nodes.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "visit_history", "=", "[", "]", "# Keep track of recent visits", "recent_visit_limit", "=", "3", "# Limit for recent visits to encourage exploration", "# Create a list of recently visited nodes (if applicable)", "if", "len", "(", "visit_history", ")", ">=", "recent_visit_limit", ":", "visit_history", ".", "pop", "(", "0", ")", "visit_history", ".", "append", "(", "current_node", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_weight", "=", "1", "/", "(", "distance_to_node", "+", "1e-6", ")", "# Diversity factor based on recent visits; penalize nodes that are similar to recent ones", "diversity_penalty", "=", "sum", "(", "1", "for", "recent", "in", "visit_history", "if", "recent", "in", "unvisited_nodes", "and", "distance_matrix", "[", "current_node", "]", "[", "recent", "]", "<", "1.5", "*", "distance_to_node", ")", "# Scoring using distance weight, penalization for clustering around recent nodes", "score", "=", "distance_weight", "-", "(", "diversity_penalty", "*", "0.5", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "closest_node", "=", "None", "shortest_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "<", "shortest_distance", ":", "shortest_distance", "=", "distance", "closest_node", "=", "node", "return", "closest_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "score_factor", "=", "1.5", "# Weight for the unvisited node penalty", "min_score", "=", "float", "(", "'inf'", ")", "best_next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "unvisited_penalty", "=", "score_factor", "*", "(", "len", "(", "unvisited_nodes", ")", "/", "len", "(", "distance_matrix", ")", ")", "# Calculate total score combining direct distance and unvisited penalty", "total_score", "=", "direct_distance", "+", "unvisited_penalty", "if", "total_score", "<", "min_score", ":", "min_score", "=", "total_score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "inverse_distance", "=", "1", "/", "(", "distance_to_node", "+", "1e-9", ")", "# Avoid division by zero", "penalty_factor", "=", "len", "(", "[", "n", "for", "n", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "n", "not", "in", "unvisited_nodes", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "0", "]", ")", "score", "=", "inverse_distance", "*", "(", "1", "+", "penalty_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "total_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Inverse weighted consideration of total distance to encourage far nodes", "inverse_weighted_distance", "=", "total_distance_to_remaining", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "score", "=", "distance_to_node", "-", "inverse_weighted_distance", "*", "0.3", "# Penalty for far nodes", "scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Convert unvisited nodes to a numpy array for easier manipulation", "unvisited_nodes", "=", "np", ".", "array", "(", "list", "(", "unvisited_nodes", ")", ")", "# Calculate distances from the current node to all unvisited nodes", "distances", "=", "distance_matrix", "[", "current_node", ",", "unvisited_nodes", "]", "# Calculate the number of unvisited neighbors for each unvisited node", "unvisited_count", "=", "np", ".", "array", "(", "[", "np", ".", "sum", "(", "distance_matrix", "[", "node", ",", ":", "]", ">", "0", ")", "for", "node", "in", "unvisited_nodes", "]", ")", "# Compute a combined score: weighted distance + (1 / unvisited neighbors + 1)", "weights", "=", "0.5", "# Weight factor for combining distance and unvisited nodes consideration", "scores", "=", "distances", "+", "weights", "*", "(", "1", "/", "(", "unvisited_count", "+", "1", ")", ")", "# Select the node with the minimum score", "next_node", "=", "unvisited_nodes", "[", "np", ".", "argmin", "(", "scores", ")", "]", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculating distances to unvisited nodes", "distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Heuristic: penalization for nodes closer to groups of unvisited nodes", "cluster_penalty", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "# Selecting the node by combining distance with cluster penalty", "weighted_scores", "=", "{", "node", ":", "distances", "[", "node", "]", "+", "(", "0.5", "*", "cluster_penalty", ")", "for", "node", "in", "unvisited_nodes", "}", "# Selecting the node with the minimum score", "next_node", "=", "min", "(", "weighted_scores", ",", "key", "=", "weighted_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "closest_nodes", "=", "[", "]", "min_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "<", "min_distance", ":", "min_distance", "=", "distance", "closest_nodes", "=", "[", "node", "]", "elif", "distance", "==", "min_distance", ":", "closest_nodes", ".", "append", "(", "node", ")", "if", "not", "closest_nodes", ":", "return", "None", "# Introduce an exploration factor based on the number of unvisited nodes", "exploration_factor", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Simple normalization", "total_weight", "=", "sum", "(", "(", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1", ")", ")", "*", "exploration_factor", "for", "node", "in", "closest_nodes", ")", "weighted_probs", "=", "[", "(", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1", ")", "*", "exploration_factor", ")", "/", "total_weight", "for", "node", "in", "closest_nodes", "]", "next_node", "=", "random", ".", "choices", "(", "closest_nodes", ",", "weights", "=", "weighted_probs", ",", "k", "=", "1", ")", "[", "0", "]", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "next_node", "=", "None", "minimal_distance", "=", "float", "(", "'inf'", ")", "# Basic nearest neighbor search", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "<", "minimal_distance", ":", "minimal_distance", "=", "distance", "next_node", "=", "node", "# Backtracking mechanism", "if", "next_node", "is", "not", "None", ":", "unvisited_nodes", ".", "remove", "(", "next_node", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "distances_to_unvisited", "=", "np", ".", "array", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "average_distance", "=", "np", ".", "mean", "(", "distances_to_unvisited", ")", "variance_distance", "=", "np", ".", "var", "(", "distances_to_unvisited", ")", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "for", "candidate", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate", "]", "score", "=", "(", "immediate_distance", "*", "1.5", ")", "+", "(", "average_distance", "*", "0.5", ")", "+", "(", "variance_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "# Weighted scoring", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "candidate", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "minimal_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "<", "minimal_distance", ":", "minimal_distance", "=", "distance", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Define a penalty based on the distance of the last visited node", "penalty_factor", "=", "0.5", "# Penalty modifier", "last_visited_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "best_next_node", "=", "None", "best_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate total cost with penalty for longer paths", "total_cost", "=", "direct_distance", "+", "penalty_factor", "*", "last_visited_distance", "if", "total_cost", "<", "best_cost", ":", "best_cost", "=", "total_cost", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "closest_nodes", "=", "[", "]", "min_distance", "=", "float", "(", "'inf'", ")", "# Find the minimum distance", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "<", "min_distance", ":", "min_distance", "=", "distance", "closest_nodes", "=", "[", "node", "]", "elif", "distance", "==", "min_distance", ":", "closest_nodes", ".", "append", "(", "node", ")", "# Randomly choose a node from the closest ones", "next_node", "=", "random", ".", "choice", "(", "closest_nodes", ")", "if", "closest_nodes", "else", "None", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "min_distance", "=", "float", "(", "'inf'", ")", "optimal_nodes", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "<", "min_distance", ":", "min_distance", "=", "distance", "optimal_nodes", "=", "[", "node", "]", "elif", "distance", "==", "min_distance", ":", "optimal_nodes", ".", "append", "(", "node", ")", "if", "not", "optimal_nodes", ":", "return", "None", "# Introduce a connectivity penalty based on the number of edges from the unvisited nodes", "connectivity_penalty", "=", "sum", "(", "1", "/", "(", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "!=", "float", "(", "'inf'", ")", "]", ")", "+", "1", ")", "for", "node", "in", "optimal_nodes", ")", "/", "len", "(", "optimal_nodes", ")", "weighted_probs", "=", "[", "(", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1", ")", "*", "(", "1", "-", "connectivity_penalty", ")", ")", "for", "node", "in", "optimal_nodes", "]", "total_weight", "=", "sum", "(", "weighted_probs", ")", "weighted_probs", "=", "[", "prob", "/", "total_weight", "for", "prob", "in", "weighted_probs", "]", "next_node", "=", "random", ".", "choices", "(", "optimal_nodes", ",", "weights", "=", "weighted_probs", ",", "k", "=", "1", ")", "[", "0", "]", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "# Total distance to reach remaining nodes", "total_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Weighted score combining distance to node and potential future distance", "heuristic_value", "=", "total_distance_remaining", "/", "len", "(", "unvisited_nodes", ")", "score", "=", "distance_to_node", "+", "heuristic_value", "*", "(", "1", "+", "len", "(", "unvisited_nodes", ")", "/", "len", "(", "distance_matrix", ")", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "closest_nodes", "=", "[", "]", "min_distance", "=", "float", "(", "'inf'", ")", "# Find the minimum distance", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "<", "min_distance", ":", "min_distance", "=", "distance", "closest_nodes", "=", "[", "node", "]", "elif", "distance", "==", "min_distance", ":", "closest_nodes", ".", "append", "(", "node", ")", "# Weighting selection by distance", "total_weight", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1", ")", "for", "node", "in", "closest_nodes", ")", "weighted_probs", "=", "[", "(", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1", ")", ")", "/", "total_weight", "for", "node", "in", "closest_nodes", "]", "# Randomly choose a node based on weighted probabilities", "next_node", "=", "random", ".", "choices", "(", "closest_nodes", ",", "weights", "=", "weighted_probs", ",", "k", "=", "1", ")", "[", "0", "]", "if", "closest_nodes", "else", "None", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "# Calculate average distance from the current node to the unvisited nodes", "avg_distance_from_current", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "# Calculate total distance of the remaining unvisited nodes to encourage cluster selection", "total_distance_to_unvisited", "=", "np", ".", "sum", "(", "[", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# New score calculation considering both immediate distance and total cluster distance", "score", "=", "immediate_distance", "+", "(", "total_distance_to_unvisited", "/", "len", "(", "unvisited_nodes", ")", ")", "-", "avg_distance_from_current", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "minimal_weighted_distance", "=", "float", "(", "'inf'", ")", "visit_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "weight", "=", "(", "visit_count", "+", "1", ")", "/", "(", "visit_count", "+", "1", ")", "# Adjusting weight based on visit count", "weighted_distance", "=", "distance", "*", "weight", "if", "weighted_distance", "<", "minimal_weighted_distance", ":", "minimal_weighted_distance", "=", "weighted_distance", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "average_remaining_distance", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "max_remaining_distance", "=", "np", ".", "max", "(", "[", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "penalty", "=", "np", ".", "sqrt", "(", "len", "(", "unvisited_nodes", ")", ")", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "for", "candidate", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate", "]", "score", "=", "immediate_distance", "+", "(", "0.5", "*", "average_remaining_distance", ")", "+", "(", "0.5", "*", "max_remaining_distance", "/", "penalty", ")", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "candidate", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "closest_nodes", "=", "[", "]", "min_distance", "=", "float", "(", "'inf'", ")", "# Find the minimum distance to the unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "<", "min_distance", ":", "min_distance", "=", "distance", "closest_nodes", "=", "[", "node", "]", "elif", "distance", "==", "min_distance", ":", "closest_nodes", ".", "append", "(", "node", ")", "# Estimate future distances with a heuristic approach", "heuristic_distance", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "total_weight", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1", ")", "for", "node", "in", "closest_nodes", ")", "weighted_probs", "=", "[", "(", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1", ")", "+", "0.5", "*", "heuristic_distance", ")", "/", "total_weight", "for", "node", "in", "closest_nodes", "]", "next_node", "=", "random", ".", "choices", "(", "closest_nodes", ",", "weights", "=", "weighted_probs", ",", "k", "=", "1", ")", "[", "0", "]", "if", "closest_nodes", "else", "None", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# We use the reciprocal of the distance to prioritize closer nodes", "score", "=", "1", "/", "(", "distance_to_node", "+", "1e-5", ")", "# Adding a small constant to avoid division by zero", "# Optionally add a small penalty based on the distance to the destination to encourage a route that heads in the right direction", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "-=", "(", "distance_to_destination", "/", "(", "max", "(", "distance_to_destination", ",", "1", ")", ")", ")", "*", "0.1", "# Weighted penalty", "scores", "[", "node", "]", "=", "score", "next_node", "=", "max", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "# Choose the node with the highest score", "return", "next_node"], "code_perf": 6.960195635715911}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Penalty factor and randomness coefficient", "penalty_factor", "=", "0.3", "randomness_factor", "=", "0.1", "best_next_node", "=", "None", "best_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "last_visited_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Calculate total cost with a dynamic penalty and randomness", "dynamic_penalty", "=", "penalty_factor", "*", "last_visited_distance", "randomness", "=", "random", ".", "uniform", "(", "0", ",", "randomness_factor", "*", "direct_distance", ")", "total_cost", "=", "direct_distance", "+", "dynamic_penalty", "+", "randomness", "if", "total_cost", "<", "best_cost", ":", "best_cost", "=", "total_cost", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 7.022153082041616}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "exploration_factor", "=", "random", ".", "uniform", "(", "0.5", ",", "1", ")", "# Random factor to encourage exploration", "relative_distance", "=", "distance_to_node", "/", "total_distance", "if", "total_distance", "!=", "0", "else", "0", "# New scoring mechanism", "score", "=", "(", "distance_to_node", "**", "2", ")", "*", "(", "1", "+", "relative_distance", ")", "/", "(", "1", "+", "distance_to_destination", ")", "*", "exploration_factor", "scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.025679827125096}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "len", "(", "[", "n", "for", "n", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "0", "]", ")", "# Integrate a random factor for diversity", "random_factor", "=", "random", ".", "uniform", "(", "0.8", ",", "1.2", ")", "# New scoring equation", "score", "=", "(", "1", "/", "(", "distance_to_node", "+", "1e-9", ")", ")", "*", "random_factor", "*", "(", "1", "+", "connectivity_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 7.033784173333611}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "penalized_scores", "=", "{", "}", "visited_count", "=", "len", "(", "distance_matrix", ")", "-", "len", "(", "unvisited_nodes", ")", "-", "1", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "(", "0.5", "**", "visited_count", ")", "*", "(", "1", "+", "(", "unvisited_count", "*", "0.1", ")", ")", "# Adjust penalty with unvisited nodes", "score", "=", "distance_to_node", "+", "(", "penalty", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "# Combine distance and adjusted penalty", "penalized_scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "penalized_scores", ",", "key", "=", "penalized_scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.045722891418002}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "average_distance_to_destination", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "immediate_distance", "+", "(", "average_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 7.058807637206086}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate the proximity to the destination with a negative influence", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Heuristic: Incorporate the count of unvisited nodes for future considerations", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "heuristic_factor", "=", "1", "/", "(", "1", "+", "unvisited_count", ")", "# Combine the distance with the heuristic factor", "score", "=", "distance_to_node", "*", "(", "1", "+", "heuristic_factor", ")", "+", "distance_to_destination", "*", "heuristic_factor", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 7.059347977712101}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "unvisited_nodes", "=", "np", ".", "array", "(", "list", "(", "unvisited_nodes", ")", ")", "distances", "=", "distance_matrix", "[", "current_node", ",", "unvisited_nodes", "]", "# Calculate the distance to the destination for each unvisited node", "to_destination_distances", "=", "distance_matrix", "[", "unvisited_nodes", ",", "destination_node", "]", "# Dynamic weight based on the number of unvisited nodes", "dynamic_weight", "=", "1.0", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Combine scores: distance + (dynamic_weight * to_destination_distance)", "scores", "=", "distances", "+", "dynamic_weight", "*", "to_destination_distances", "# Select the node with the minimum score", "next_node", "=", "unvisited_nodes", "[", "np", ".", "argmin", "(", "scores", ")", "]", "return", "next_node"], "code_perf": 7.081438908556759}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "minimal_weighted_distance", "=", "float", "(", "'inf'", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "visit_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "return_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "weighted_distance", "=", "(", "0.5", "*", "direct_distance", ")", "+", "(", "0.5", "*", "(", "return_distance", "+", "average_distance", ")", ")", "/", "(", "visit_count", "+", "1", ")", "if", "weighted_distance", "<", "minimal_weighted_distance", ":", "minimal_weighted_distance", "=", "weighted_distance", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 7.081438908556759}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "unvisited_nodes", "=", "np", ".", "array", "(", "list", "(", "unvisited_nodes", ")", ")", "distances", "=", "distance_matrix", "[", "current_node", ",", "unvisited_nodes", "]", "destination_distances", "=", "distance_matrix", "[", "unvisited_nodes", ",", "destination_node", "]", "# Introduce attractiveness score based on proximity of unvisited nodes to the current node", "attractiveness_scores", "=", "1", "/", "(", "1", "+", "distances", ")", "# Thresholding dynamic weight to emphasize closer unvisited nodes", "dynamic_weight", "=", "np", ".", "clip", "(", "(", "np", ".", "mean", "(", "destination_distances", ")", "-", "destination_distances", ")", ",", "0", ",", "None", ")", "# Combine scores: distance + attractiveness + adjusted dynamic weight", "scores", "=", "distances", "+", "(", "1", "/", "(", "attractiveness_scores", "+", "1", ")", ")", "+", "dynamic_weight", "next_node", "=", "unvisited_nodes", "[", "np", ".", "argmin", "(", "scores", ")", "]", "return", "next_node"], "code_perf": 7.085674518562437}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "distances_to_unvisited", "=", "np", ".", "array", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "distances_to_destination", "=", "np", ".", "array", "(", "[", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "avg_distance", "=", "np", ".", "mean", "(", "distances_to_unvisited", ")", "avg_distance_to_dest", "=", "np", ".", "mean", "(", "distances_to_destination", ")", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "for", "candidate", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate", "]", "cluster_score", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "[", "distance_matrix", "[", "candidate", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "candidate", "]", ")", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Closeness to other unvisited nodes", "score", "=", "(", "immediate_distance", "*", "1.4", ")", "+", "(", "avg_distance", "*", "0.3", ")", "+", "(", "avg_distance_to_dest", "*", "0.2", ")", "+", "cluster_score", "*", "0.1", "# Weighted scoring with cluster influence", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "candidate", "return", "best_next_node"], "code_perf": 7.096145707600836}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "penalized_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "len", "(", "unvisited_nodes", ")", "# Penalty based on distance to destination", "penalized_scores", "[", "node", "]", "=", "distance_to_node", "+", "penalty", "next_node", "=", "min", "(", "penalized_scores", ",", "key", "=", "penalized_scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.101442436613793}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "minimal_weighted_score", "=", "float", "(", "'inf'", ")", "remaining_nodes", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "distance_to_node", "+", "(", "distance_to_destination", "/", "remaining_nodes", ")", "if", "score", "<", "minimal_weighted_score", ":", "minimal_weighted_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 7.101442436613793}
{"code_tokens": ["# {The algorithm utilizes a combined score based on the Euclidean distances to both unvisited nodes and the destination node, with an exploration factor that prioritizes nodes farther from the destination while balancing the nearest unvisited node.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "exploration_factor", "=", "(", "1", "+", "distance_to_destination", ")", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "# Encourage exploration based on remaining nodes", "scores", "[", "node", "]", "=", "distance_to_node", "*", "exploration_factor", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.146115673616158}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "minimal_adjusted_distance", "=", "float", "(", "'inf'", ")", "decay_factor", "=", "0.8", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "return_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "adjusted_distance", "=", "(", "direct_distance", "**", "decay_factor", ")", "+", "(", "return_distance", "*", "(", "1", "-", "decay_factor", ")", ")", "if", "adjusted_distance", "<", "minimal_adjusted_distance", ":", "minimal_adjusted_distance", "=", "adjusted_distance", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 7.182502646088455}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "node_degree", "=", "len", "(", "[", "nn", "for", "nn", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "distance_matrix", "[", "node", "]", "[", "nn", "]", "<", "np", ".", "inf", "and", "nn", "!=", "node", "]", ")", "proximity_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combine distance, node degree, and proximity factor into the cost function", "scores", "[", "node", "]", "=", "distance_to_node", "-", "(", "node_degree", "*", "0.3", ")", "+", "(", "proximity_to_destination", "*", "0.2", ")", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.220769184424113}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "minimal_weighted_distance", "=", "float", "(", "'inf'", ")", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "return_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "weighted_distance", "=", "(", "0.7", "*", "direct_distance", ")", "+", "(", "0.3", "*", "(", "return_distance", "+", "average_distance", ")", ")", "# New weighting mechanism", "if", "weighted_distance", "<", "minimal_weighted_distance", ":", "minimal_weighted_distance", "=", "weighted_distance", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 7.359359096932373}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "closest_remaining_distance", "=", "np", ".", "min", "(", "[", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "farthest_remaining_distance", "=", "np", ".", "max", "(", "[", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "distance_scale", "=", "(", "farthest_remaining_distance", "-", "closest_remaining_distance", ")", "+", "1", "# avoid division by zero", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "for", "candidate", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate", "]", "normalized_closeness", "=", "(", "distance_matrix", "[", "candidate", "]", "[", "destination_node", "]", "-", "closest_remaining_distance", ")", "/", "distance_scale", "score", "=", "immediate_distance", "+", "(", "0.6", "*", "normalized_closeness", ")", "+", "(", "0.4", "*", "farthest_remaining_distance", ")", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "candidate", "return", "best_next_node"], "code_perf": 7.3988393363876614}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "minimal_weighted_distance", "=", "float", "(", "'inf'", ")", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "exploration_penalty", "=", "(", "1", "/", "num_unvisited", ")", "*", "distance_to_node", "# Encourages exploring less visited nodes", "weighted_distance", "=", "distance_to_node", "+", "0.5", "*", "distance_to_destination", "+", "exploration_penalty", "if", "weighted_distance", "<", "minimal_weighted_distance", ":", "minimal_weighted_distance", "=", "weighted_distance", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 7.439568550548119}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate a relevance score based on distance to the destination", "relevance_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "distance_from_current", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Weight the distance to destination more heavily", "relevance_scores", "[", "node", "]", "=", "distance_from_current", "+", "0.5", "*", "distance_to_destination", "# Select the node with the lowest relevance score", "next_node", "=", "min", "(", "relevance_scores", ",", "key", "=", "relevance_scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "closest_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "0.5", "exploration_factor", "=", "total_remaining_distance", "/", "len", "(", "unvisited_nodes", ")", "*", "0.3", "# Weight of exploration", "adjusted_score", "=", "distance", "+", "penalty", "+", "exploration_factor", "if", "adjusted_score", "<", "best_score", ":", "best_score", "=", "adjusted_score", "closest_node", "=", "node", "return", "closest_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "closest_node", "=", "None", "shortest_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Introducing a penalty based on proximity to the destination node", "penalty", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "0.5", "# Adjusting penalty weight as needed", "adjusted_distance", "=", "distance", "+", "penalty", "if", "adjusted_distance", "<", "shortest_distance", ":", "shortest_distance", "=", "adjusted_distance", "closest_node", "=", "node", "return", "closest_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "minimal_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "distance_to_node", "+", "(", "distance_to_destination", "*", "0.5", ")", "# Penalty for distance from destination", "if", "score", "<", "minimal_distance", ":", "minimal_distance", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "distance_to_node", "+", "0.5", "*", "distance_to_destination", "# Heuristic combining distance and a small penalty", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "closest_node", "=", "None", "shortest_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "estimated_total_distance", "=", "distance_to_node", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "0.5", "# Half the distance to the destination as a penalty", "if", "estimated_total_distance", "<", "shortest_distance", ":", "shortest_distance", "=", "estimated_total_distance", "closest_node", "=", "node", "return", "closest_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# The new algorithm integrates a scoring approach that evaluates both immediate distance and a clustering factor based on the node's curvature to the destination.", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "# Calculate curvature factor as a measure of how much a node bends the trajectory towards the destination", "def", "curvature_factor", "(", "node", ")", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "return", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "-", "direct_distance", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate score considering immediate distance and curvature effect", "score", "=", "immediate_distance", "+", "curvature_factor", "(", "node", ")", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "distance_to_node", "+", "0.5", "*", "distance_to_destination", "# Weighting future distance", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "next_node", "=", "None", "lowest_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "0.5", "# Apply a penalty based on distance to destination", "cost", "=", "direct_distance", "+", "penalty", "if", "cost", "<", "lowest_cost", ":", "lowest_cost", "=", "cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "minimal_weighted_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "return_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "weighted_distance", "=", "direct_distance", "+", "(", "0.5", "*", "return_distance", ")", "# Weight the return distance", "if", "weighted_distance", "<", "minimal_weighted_distance", ":", "minimal_weighted_distance", "=", "weighted_distance", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "closest_node", "=", "None", "shortest_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "weighted_distance", "=", "distance_to_node", "+", "(", "0.5", "*", "distance_to_destination", ")", "# Weighting future distance", "if", "weighted_distance", "<", "shortest_distance", ":", "shortest_distance", "=", "weighted_distance", "closest_node", "=", "node", "return", "closest_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "minimal_weighted_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "weighted_distance", "=", "distance_to_node", "+", "0.5", "*", "distance_to_destination", "# Weighing the distance to the destination", "if", "weighted_distance", "<", "minimal_weighted_distance", ":", "minimal_weighted_distance", "=", "weighted_distance", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Heuristic weight (can be adjusted): Distance to the destination can influence the score", "score", "=", "distance_to_node", "+", "0.5", "*", "distance_to_destination", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "adjusted_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "dest", "]", "for", "dest", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Adjusted penalty using remaining unvisited nodes", "scores", "[", "node", "]", "=", "distance_to_node", "+", "0.5", "*", "adjusted_penalty", "# Combine distance and adjusted penalty ", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.526271790227707}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_current", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "1", "/", "distance_to_current", ")", "+", "(", "1", "/", "distance_to_destination", ")", "# Higher score for shorter distances", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.572785716456387}
{"code_tokens": ["# {The algorithm scores unvisited nodes based on a weighted combination of distances to the current node, the destination node, ", "# and a heuristic factor that decreases with the number of unvisited nodes, encouraging exploration.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "heuristic_factor", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_current", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "1", "/", "distance_to_current", ")", "+", "(", "1", "/", "distance_to_destination", ")", "-", "(", "0.1", "*", "heuristic_factor", ")", "# Consider exploration", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.572785716456387}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "similarity_factor", "=", "0.5", "# Similarity modifier", "num_visited_nodes", "=", "len", "(", "distance_matrix", ")", "-", "len", "(", "unvisited_nodes", ")", "exploration_factor", "=", "1", "-", "(", "num_visited_nodes", "/", "(", "len", "(", "distance_matrix", ")", "-", "1", ")", ")", "# Inverse relationship", "best_next_node", "=", "None", "best_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate total cost using a balancing equation", "total_cost", "=", "direct_distance", "*", "(", "1", "+", "similarity_factor", "*", "exploration_factor", ")", "+", "distance_to_destination", "*", "(", "1", "-", "exploration_factor", ")", "if", "total_cost", "<", "best_cost", ":", "best_cost", "=", "total_cost", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 7.580061584981928}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "visit_count", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "# Initialize visit count for unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "novelty_factor", "=", "1", "/", "(", "1", "+", "visit_count", "[", "node", "]", ")", "# Prefer less frequently visited nodes", "score", "=", "(", "distance_to_node", "*", "0.5", ")", "+", "(", "distance_to_destination", "*", "0.3", ")", "-", "(", "novelty_factor", "*", "10", ")", "# Weighted score", "scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "# Update visit count for the selected node", "visit_count", "[", "next_node", "]", "+=", "1", "return", "next_node"], "code_perf": 7.602975755903087}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "# Calculate the average distance from the current node to all unvisited nodes", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_current", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Introduce a penalty based on how close the node is to the average of unvisited nodes", "penalty", "=", "abs", "(", "distance_to_current", "-", "average_distance", ")", "/", "average_distance", "score", "=", "(", "1", "/", "distance_to_current", ")", "+", "(", "1", "/", "distance_to_destination", ")", "-", "penalty", "# Incorporate penalty into score", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.648270439565126}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Convert unvisited nodes to a numpy array for easier manipulation", "unvisited_nodes", "=", "np", ".", "array", "(", "list", "(", "unvisited_nodes", ")", ")", "# Calculate distances from the current node to all unvisited nodes", "distances", "=", "distance_matrix", "[", "current_node", ",", "unvisited_nodes", "]", "# Calculate heuristic distance to the destination (assuming 0-indexed nodes)", "heuristic_distances", "=", "distance_matrix", "[", "unvisited_nodes", ",", "destination_node", "]", "# Compute a combined score: distance + (2 * heuristic distance) / 3", "scores", "=", "distances", "+", "(", "2", "/", "3", ")", "*", "heuristic_distances", "# Select the node with the minimum score", "next_node", "=", "unvisited_nodes", "[", "np", ".", "argmin", "(", "scores", ")", "]", "return", "next_node"], "code_perf": 7.6490879527083395}
{"code_tokens": ["# {The algorithm enhances node selection by integrating a penalty for longer routes and prioritizing nodes based on clustering proximity to the starting node, using a score that includes distance ratios and clustering effects.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "# Calculate the mean distance to all unvisited nodes", "mean_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_current", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate clustering effect based on proximity to the current node", "clustering_effect", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Score includes distance ratios and clustering penalty", "score", "=", "(", "mean_distance", "/", "distance_to_current", ")", "-", "(", "0.05", "*", "clustering_effect", ")", "+", "(", "1", "/", "distance_to_destination", ")", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.741992102249354}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "decay_factor", "=", "0.9", "# Dynamic decay factor to reduce long-distance influence", "weighted_distances", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combine distances with decay to emphasize closer nodes", "weighted_distance", "=", "distance_to_node", "+", "decay_factor", "*", "distance_to_destination", "weighted_distances", "[", "node", "]", "=", "weighted_distance", "next_node", "=", "min", "(", "weighted_distances", ",", "key", "=", "weighted_distances", ".", "get", ")", "return", "next_node"], "code_perf": 7.90467678521368}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "penalties", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "local_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Introduce a penalty factor based on the local distance, promoting a more balanced selection", "penalty_factor", "=", "0.1", "*", "local_distance", "# Example dynamic penalty", "total_cost", "=", "local_distance", "+", "distance_to_destination", "+", "penalty_factor", "penalties", "[", "node", "]", "=", "total_cost", "next_node", "=", "min", "(", "penalties", ",", "key", "=", "penalties", ".", "get", ")", "return", "next_node"], "code_perf": 7.924932750374845}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "proximity_threshold", "=", "1.2", "# Proximity factor to control distance influence", "close_nodes", "=", "[", "]", "weighted_distances", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance_to_node", "<", "proximity_threshold", "*", "np", ".", "mean", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "]", ")", ":", "close_nodes", ".", "append", "(", "node", ")", "if", "close_nodes", ":", "for", "node", "in", "close_nodes", ":", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "weighted_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_to_destination", "weighted_distances", "[", "node", "]", "=", "weighted_distance", "next_node", "=", "min", "(", "weighted_distances", ",", "key", "=", "weighted_distances", ".", "get", ")", "else", ":", "# Randomly select from unvisited nodes if no close nodes are found", "next_node", "=", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "return", "next_node"], "code_perf": 8.07900812163879}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Dynamic weighting based on the number of connections to unvisited nodes", "connectivity_weight", "=", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "0", "]", ")", "score", "=", "(", "distance_to_node", "+", "distance_to_destination", ")", "/", "(", "connectivity_weight", "+", "1", ")", "# Encourage diversity by adding a small penalty for nodes already visited in the past (represented by a score adjustment)", "historical_penalty", "=", "0.05", "if", "node", "in", "unvisited_nodes", "else", "0", "scores", "[", "node", "]", "=", "score", "+", "historical_penalty", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "total_unvisited_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "candidate", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate", "]", "return_penalty", "=", "distance_matrix", "[", "candidate", "]", "[", "destination_node", "]", "score", "=", "immediate_distance", "+", "(", "total_unvisited_distance", "/", "len", "(", "unvisited_nodes", ")", ")", "+", "return_penalty", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "candidate", "return", "best_next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "distances", "=", "[", "]", "# Gather distances to all unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "distances", ".", "append", "(", "(", "node", ",", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", ")", "# Sort by distance", "distances", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "# Calculate weighted scores combining local distance and distance to destination", "weighted_scores", "=", "{", "}", "for", "node", ",", "local_distance", "in", "distances", ":", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "weighted_score", "=", "(", "local_distance", "+", "distance_to_destination", ")", "/", "2", "# Average distance", "weighted_scores", "[", "node", "]", "=", "weighted_score", "# Select the node with the minimum weighted score", "next_node", "=", "min", "(", "weighted_scores", ",", "key", "=", "weighted_scores", ".", "get", ")", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "minimal_total_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "total_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "total_distance", "<", "minimal_total_distance", ":", "minimal_total_distance", "=", "total_distance", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "closest_node", "=", "None", "best_estimated_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "total_estimated_cost", "=", "distance_to_next", "+", "distance_to_destination", "if", "total_estimated_cost", "<", "best_estimated_cost", ":", "best_estimated_cost", "=", "total_estimated_cost", "closest_node", "=", "node", "return", "closest_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "visit_history", "=", "{", "node", ":", "1", "for", "node", "in", "unvisited_nodes", "}", "# Initialize visit history for unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Weighted distance heuristic", "heuristic_score", "=", "(", "distance_to_node", "+", "distance_to_destination", ")", "/", "visit_history", "[", "node", "]", "# Desirability score: penalizes nodes frequently visited", "visit_history", "[", "node", "]", "+=", "1", "# Increment the visit history for the node", "scores", "[", "node", "]", "=", "heuristic_score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "distance", "+", "heuristic_cost", "# Total score combining distance and heuristic", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "remaining_nodes_penalty", "=", "len", "(", "unvisited_nodes", ")", "# Penalizes based on remaining nodes", "# New scoring mechanism emphasizing both direct distance and potential path optimization", "scores", "[", "node", "]", "=", "(", "distance_to_node", "+", "distance_to_destination", ")", "*", "(", "1", "+", "remaining_nodes_penalty", ")", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "minimal_round_trip_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "round_trip_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "round_trip_distance", "<", "minimal_round_trip_distance", ":", "minimal_round_trip_distance", "=", "round_trip_distance", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["import", "numpy", "as", "np", "from", "collections", "import", "deque", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Initialize a queue for BFS", "queue", "=", "deque", "(", "[", "(", "current_node", ",", "0", ")", "]", ")", "# (current_node, total_distance)", "visited_nodes", "=", "set", "(", ")", "best_next_node", "=", "None", "minimal_distance", "=", "float", "(", "'inf'", ")", "while", "queue", ":", "current", ",", "total_distance", "=", "queue", ".", "popleft", "(", ")", "if", "current", "in", "visited_nodes", ":", "continue", "visited_nodes", ".", "add", "(", "current", ")", "for", "node", "in", "unvisited_nodes", ":", "if", "node", "not", "in", "visited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current", "]", "[", "node", "]", "distance_return", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "total_path_length", "=", "total_distance", "+", "distance_to_node", "+", "distance_return", "if", "total_path_length", "<", "minimal_distance", ":", "minimal_distance", "=", "total_path_length", "best_next_node", "=", "node", "queue", ".", "append", "(", "(", "node", ",", "total_distance", "+", "distance_to_node", ")", ")", "return", "best_next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Convert unvisited nodes to a numpy array for easier manipulation", "unvisited_nodes", "=", "np", ".", "array", "(", "list", "(", "unvisited_nodes", ")", ")", "# Calculate distances from the current node to all unvisited nodes", "distances", "=", "distance_matrix", "[", "current_node", ",", "unvisited_nodes", "]", "# Calculate cumulative distance from the starting node to the current node", "cumulative_distance", "=", "np", ".", "sum", "(", "distance_matrix", "[", "0", ":", "current_node", "+", "1", ",", "current_node", "]", ")", "# Adjust for zero-indexing", "# Calculate distances from unvisited nodes to the destination", "destination_distances", "=", "distance_matrix", "[", "unvisited_nodes", ",", "destination_node", "]", "# Apply a penalty based on the cumulative distance", "penalty_factor", "=", "cumulative_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Calculate a score incorporating the penalty and distance to the destination", "scores", "=", "distances", "+", "penalty_factor", "+", "destination_distances", "# Select the node with the minimum score", "next_node", "=", "unvisited_nodes", "[", "np", ".", "argmin", "(", "scores", ")", "]", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "tabu_list", "=", "set", "(", ")", "tabu_tenure", "=", "2", "# Restricting the last two visited nodes", "best_next_node", "=", "None", "minimal_round_trip_distance", "=", "float", "(", "'inf'", ")", "# Collect unvisited nodes while maintaining tabu restrictions", "candidate_nodes", "=", "[", "node", "for", "node", "in", "unvisited_nodes", "if", "node", "not", "in", "tabu_list", "]", "for", "node", "in", "candidate_nodes", ":", "round_trip_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Incorporate a random factor to differentiate close scores", "score", "=", "round_trip_distance", "+", "random", ".", "uniform", "(", "0", ",", "0.1", ")", "# Adding a small random factor", "if", "score", "<", "minimal_round_trip_distance", ":", "minimal_round_trip_distance", "=", "score", "best_next_node", "=", "node", "# Update the tabu list", "tabu_list", ".", "add", "(", "current_node", ")", "if", "len", "(", "tabu_list", ")", ">", "tabu_tenure", ":", "tabu_list", ".", "pop", "(", ")", "# Remove the oldest entry in the tabu list", "return", "best_next_node"], "code_perf": 8.230873349700776}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Scoring for each unvisited node based on distance and a heuristic", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_score", "=", "np", ".", "min", "(", "[", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", "if", "next_node", "!=", "node", "]", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "scores", "[", "node", "]", "=", "distance_to_node", "+", "heuristic_score", "# Selecting the node with the lowest score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 8.301930936042854}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", "if", "next_node", "!=", "node", ")", "score", "=", "immediate_distance", "+", "(", "cumulative_distance", "/", "len", "(", "unvisited_nodes", ")", ")", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Penalty based on the total distance to remaining unvisited nodes", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "penalty_factor", "=", "total_remaining_distance", "/", "len", "(", "unvisited_nodes", ")", "score", "=", "distance_to_node", "+", "penalty_factor", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scored_nodes", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "adaptive_score", "=", "distance_to_node", "+", "(", "total_distance_to_unvisited", "/", "len", "(", "unvisited_nodes", ")", ")", "# Incorporating distance to remaining unvisited nodes", "scored_nodes", "[", "node", "]", "=", "adaptive_score", "next_node", "=", "min", "(", "scored_nodes", ",", "key", "=", "scored_nodes", ".", "get", ")", "return", "next_node"], "code_perf": 8.406859942200565}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "# Define an exponential decay factor for distant nodes to reduce their influence", "decay_factor", "=", "0.5", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Exponential penalty for distance to encourage cluster selection", "distance_penalty", "=", "np", ".", "exp", "(", "decay_factor", "*", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "immediate_distance", ")", ")", "# New score calculation considering immediate distance and exponential penalty", "score", "=", "immediate_distance", "+", "distance_penalty", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 8.416346289020025}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Define a cost function that considers both distance and potential future visits", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Estimate remaining distance to all unvisited nodes as a penalty", "estimated_remaining_distance", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "node", "]", "[", "nn", "]", "for", "nn", "in", "unvisited_nodes", "if", "nn", "!=", "node", "]", ")", "scores", "[", "node", "]", "=", "distance_to_node", "+", "estimated_remaining_distance", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 8.4323878079629}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm modifies the scoring mechanism by integrating a factor that considers the node's proximity to the destination, while also factoring in the maximum distance to any unvisited node to encourage exploration of closer nodes.}", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "# Maximum distance to remaining nodes", "max_distance_to_remaining", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# New score combining distance to node and a ratio of distance to destination over max remaining distance", "score", "=", "distance_to_node", "+", "(", "distance_to_destination", "/", "max_distance_to_remaining", ")", "*", "(", "1", "+", "len", "(", "unvisited_nodes", ")", "/", "len", "(", "distance_matrix", ")", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 8.546149655559521}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "temperature", "=", "1.0", "# Initial temperature", "cooling_rate", "=", "0.95", "# Cooling rate", "max_iterations", "=", "100", "# Number of iterations", "best_next_node", "=", "None", "lowest_cost", "=", "float", "(", "'inf'", ")", "for", "_", "in", "range", "(", "max_iterations", ")", ":", "# Randomly select a candidate from the unvisited nodes", "candidate_node", "=", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate_node", "]", "return_distance", "=", "distance_matrix", "[", "candidate_node", "]", "[", "destination_node", "]", "cost", "=", "direct_distance", "+", "return_distance", "# Acceptance criteria based on the simulated annealing logic", "if", "cost", "<", "lowest_cost", ":", "lowest_cost", "=", "cost", "best_next_node", "=", "candidate_node", "else", ":", "# Probability of acceptance of worse solutions", "if", "random", ".", "random", "(", ")", "<", "np", ".", "exp", "(", "-", "(", "cost", "-", "lowest_cost", ")", "/", "temperature", ")", ":", "best_next_node", "=", "candidate_node", "# Cool down the temperature", "temperature", "*=", "cooling_rate", "return", "best_next_node"], "code_perf": 8.683496037674235}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "tabu_list", "=", "[", "]", "tabu_tenure", "=", "3", "# Restrict the last three visited nodes", "best_next_node", "=", "None", "minimal_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Dynamic score calculation with a decay based on tabu tenure", "tabu_penalty", "=", "1", "if", "node", "in", "tabu_list", "else", "0.5", "# Penalize recently visited nodes", "score", "=", "(", "distance_to_node", "+", "distance_to_destination", ")", "*", "tabu_penalty", "+", "random", ".", "uniform", "(", "0", ",", "0.1", ")", "if", "score", "<", "minimal_score", ":", "minimal_score", "=", "score", "best_next_node", "=", "node", "# Update the tabu list", "tabu_list", ".", "append", "(", "current_node", ")", "if", "len", "(", "tabu_list", ")", ">", "tabu_tenure", ":", "tabu_list", ".", "pop", "(", "0", ")", "# Remove the oldest entry in the tabu list", "return", "best_next_node"], "code_perf": 8.698633011601215}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm ranks unvisited nodes by combining immediate distance with additional penalties for distant nodes, incorporating a sharp penalty for nodes further away from the destination, promoting a more directed exploration.}", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "for", "candidate", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate", "]", "distance_to_destination", "=", "distance_matrix", "[", "candidate", "]", "[", "destination_node", "]", "# Penalty for distance from the destination", "penalty_factor", "=", "2", "*", "distance_to_destination", "# Total score considering immediate distance and penalty for distance to destination", "score", "=", "immediate_distance", "+", "penalty_factor", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "candidate", "return", "best_next_node"], "code_perf": 8.80356546673329}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "0.1", "*", "(", "1", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", ")", "# penalty based on distance to destination", "score", "=", "distance", "+", "penalty", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "if", "random", ".", "random", "(", ")", "<", "0.1", ":", "# introduce a 10% chance to randomly select an unvisited node", "return", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "return", "next_node"], "code_perf": 9.069890740581407}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Convert unvisited nodes to a numpy array for easier manipulation", "unvisited_nodes", "=", "np", ".", "array", "(", "list", "(", "unvisited_nodes", ")", ")", "# Calculate distances from the current node to all unvisited nodes", "distances", "=", "distance_matrix", "[", "current_node", ",", "unvisited_nodes", "]", "# Calculate distances from the unvisited nodes to the destination node", "to_destination_distances", "=", "distance_matrix", "[", "unvisited_nodes", ",", "destination_node", "]", "# Decay factor based on the number of unvisited nodes to increase exploration", "decay_factor", "=", "len", "(", "unvisited_nodes", ")", "/", "len", "(", "distance_matrix", ")", "adjusted_distances", "=", "distances", "*", "decay_factor", "# Calculate a logarithmic penalty for the density of unvisited neighbors", "density_penalty", "=", "np", ".", "log1p", "(", "np", ".", "array", "(", "[", "np", ".", "sum", "(", "distance_matrix", "[", "node", ",", ":", "]", ">", "0", ")", "for", "node", "in", "unvisited_nodes", "]", ")", ")", "# Compute a combined score: adjusted distance + weight for destination proximity + density penalty", "scores", "=", "adjusted_distances", "+", "to_destination_distances", "+", "density_penalty", "# Select the node with the minimum score", "next_node", "=", "unvisited_nodes", "[", "np", ".", "argmin", "(", "scores", ")", "]", "return", "next_node"], "code_perf": 9.483570498700532}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "backtrack_penalty", "=", "0", "if", "current_node", "in", "unvisited_nodes", "else", "10", "# Penalty for backtracking", "proximity_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# New scoring equation", "score", "=", "immediate_distance", "+", "backtrack_penalty", "-", "(", "1", "/", "(", "proximity_to_destination", "+", "1e-6", ")", ")", "# Avoid division by zero", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 10.309089909443966}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "exploration_weight", "=", "0.3", "# Adjust this value for more or less randomness", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate connectivity score", "connectivity_score", "=", "len", "(", "[", "nn", "for", "nn", "in", "unvisited_nodes", "if", "nn", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "nn", "]", "<", "np", ".", "inf", "]", ")", "# Combine distance and connectivity score with a random exploration component", "random_factor", "=", "random", ".", "uniform", "(", "-", "exploration_weight", ",", "exploration_weight", ")", "scores", "[", "node", "]", "=", "distance_to_node", "-", "connectivity_score", "*", "0.1", "+", "random_factor", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 10.61787113555443}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "node_weights", "=", "{", "}", "# Calculate the weights based on distances and connectivity", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "distance", ")", "# Weight formula: lower distance + effect of connectivity", "weight", "=", "distance", "+", "random", ".", "uniform", "(", "0", ",", "1", ")", "*", "(", "connectivity", "+", "1", ")", "node_weights", "[", "node", "]", "=", "weight", "# Select the node with the minimum weight", "next_node", "=", "min", "(", "node_weights", ",", "key", "=", "node_weights", ".", "get", ")", "if", "node_weights", "else", "None", "return", "next_node"], "code_perf": 11.017011100886993}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Define the number of neighbors to consider", "k", "=", "min", "(", "3", ",", "len", "(", "unvisited_nodes", ")", ")", "# Adjust k based on available unvisited nodes", "distances", "=", "[", "]", "# Gather distances to all unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "distances", ".", "append", "(", "(", "node", ",", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", ")", "# Sort by distance and take the k nearest nodes", "distances", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "nearest_neighbors", "=", "[", "node", "for", "node", ",", "_", "in", "distances", "[", ":", "k", "]", "]", "# Calculate average distance to the nearest neighbors", "avg_distance", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "nearest_neighbors", "]", ")", "# Select the neighbor with the closest distance to the average", "next_node", "=", "min", "(", "nearest_neighbors", ",", "key", "=", "lambda", "x", ":", "abs", "(", "distance_matrix", "[", "current_node", "]", "[", "x", "]", "-", "avg_distance", ")", ")", "return", "next_node"], "code_perf": 11.374218016907516}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "# A temperature parameter to control the exploration", "temperature", "=", "1.0", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "immediate_distance", "+", "random", ".", "uniform", "(", "0", ",", "temperature", ")", "# Lower the temperature to reduce randomness over time", "temperature", "*=", "0.99", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 11.848618843809408}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "minimal_total_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "return_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "previous_visited_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "visited_node", "]", "for", "visited_node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "visited_node", "!=", "current_node", "and", "visited_node", "not", "in", "unvisited_nodes", ")", "total_distance", "=", "direct_distance", "+", "return_distance", "+", "previous_visited_penalty", "*", "0.5", "if", "total_distance", "<", "minimal_total_distance", ":", "minimal_total_distance", "=", "total_distance", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 11.953234261128877}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate distance to destination for all unvisited nodes", "distances_to_destination", "=", "{", "node", ":", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Assign a score based on distance to current node and cost to destination", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_current", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "distance_to_current", "+", "distances_to_destination", "[", "node", "]", "+", "np", ".", "random", ".", "rand", "(", ")", "# Adding randomness for exploration", "scores", "[", "node", "]", "=", "score", "# Select the node with the minimum score", "best_next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "best_next_node"], "code_perf": 12.346417146857679}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Setting parameters for the tabu search", "tabu_list", "=", "set", "(", ")", "tabu_tenure", "=", "2", "# Restricting the last two visited nodes", "candidate_nodes", "=", "[", "]", "# Collecting candidate nodes excluding those in the tabu list", "for", "node", "in", "unvisited_nodes", ":", "if", "node", "not", "in", "tabu_list", ":", "candidate_nodes", ".", "append", "(", "node", ")", "# Selecting the next node based on a combination of distance and a random component", "if", "candidate_nodes", ":", "selected_node", "=", "None", "best_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "candidate_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate potential score incorporating randomness", "score", "=", "immediate_distance", "+", "random", ".", "uniform", "(", "0", ",", "1", ")", "# Add exploration factor", "if", "score", "<", "best_cost", ":", "best_cost", "=", "score", "selected_node", "=", "node", "# Update the tabu list", "tabu_list", ".", "add", "(", "current_node", ")", "if", "len", "(", "tabu_list", ")", ">", "tabu_tenure", ":", "tabu_list", ".", "pop", "(", ")", "# Remove the oldest entry in the tabu list", "return", "selected_node", "return", "None"], "code_perf": 12.45125379648821}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Convert unvisited nodes to a numpy array for easier manipulation", "unvisited_nodes", "=", "np", ".", "array", "(", "list", "(", "unvisited_nodes", ")", ")", "# Calculate distances from the current node to all unvisited nodes", "distances", "=", "distance_matrix", "[", "current_node", ",", "unvisited_nodes", "]", "# Create clusters based on a distance threshold (define clusters as close nodes)", "clusters", "=", "{", "}", "threshold", "=", "np", ".", "mean", "(", "distances", ")", "# Use mean distance as a simple threshold", "for", "node", ",", "distance", "in", "zip", "(", "unvisited_nodes", ",", "distances", ")", ":", "if", "distance", "<=", "threshold", ":", "cluster_key", "=", "tuple", "(", "sorted", "(", "(", "current_node", ",", "node", ")", ")", ")", "# Use node pairs as keys for clusters", "if", "cluster_key", "not", "in", "clusters", ":", "clusters", "[", "cluster_key", "]", "=", "[", "]", "clusters", "[", "cluster_key", "]", ".", "append", "(", "node", ")", "# Find the cluster closest to the destination node", "best_cluster", "=", "None", "min_distance_to_destination", "=", "float", "(", "'inf'", ")", "for", "cluster", "in", "clusters", ".", "values", "(", ")", ":", "cluster_centroid", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "cluster", "]", ")", "if", "cluster_centroid", "<", "min_distance_to_destination", ":", "min_distance_to_destination", "=", "cluster_centroid", "best_cluster", "=", "cluster", "# Choose the next node as the one closest in the best cluster", "if", "best_cluster", "is", "not", "None", ":", "distances_to_best_cluster", "=", "distance_matrix", "[", "current_node", ",", "best_cluster", "]", "next_node", "=", "best_cluster", "[", "np", ".", "argmin", "(", "distances_to_best_cluster", ")", "]", "return", "next_node", "return", "None"], "code_perf": 13.177837928865518}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "weighted_distance_scores", "=", "[", "]", "# Calculate the weighted distance with a randomness factor", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "euclidean_distance_to_destination", "=", "np", ".", "linalg", ".", "norm", "(", "np", ".", "array", "(", "destination_node", ")", "-", "np", ".", "array", "(", "node", ")", ")", "randomness_factor", "=", "np", ".", "random", ".", "uniform", "(", "0.5", ",", "1.5", ")", "# Encouraging random exploration", "penalty", "=", "np", ".", "exp", "(", "-", "0.1", "*", "euclidean_distance_to_destination", ")", "# Decay based on distance from destination", "weighted_distance", "=", "distance", "*", "penalty", "*", "randomness_factor", "weighted_distance_scores", ".", "append", "(", "(", "node", ",", "weighted_distance", ")", ")", "# Select the node with the minimal weighted distance", "best_next_node", "=", "min", "(", "weighted_distance_scores", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "best_next_node"], "code_perf": 13.218495794618708}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "# Factors for scoring", "weight_immediate", "=", "0.7", "weight_heuristic", "=", "0.3", "temperature", "=", "1.0", "# Estimate of future distances based on the average distance to the destination node", "heuristic_distance", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate the score based on immediate distance and heuristic prediction", "score", "=", "(", "weight_immediate", "*", "immediate_distance", ")", "+", "(", "weight_heuristic", "*", "heuristic_distance", ")", "+", "random", ".", "uniform", "(", "0", ",", "temperature", ")", "# Dynamic adjustment of temperature", "temperature", "*=", "0.99", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 13.282452969371313}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "# Calculate cumulative distance for each unvisited node", "for", "node", "in", "unvisited_nodes", ":", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Score favors nodes with both shorter distance to the current node and lower cumulative distance", "scores", "[", "node", "]", "=", "distance_to_node", "+", "cumulative_distance", "*", "0.3", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 13.403771075780126}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Randomly sample a subset of unvisited nodes", "sample_size", "=", "min", "(", "5", ",", "len", "(", "unvisited_nodes", ")", ")", "sampled_nodes", "=", "random", ".", "sample", "(", "unvisited_nodes", ",", "sample_size", ")", "best_next_node", "=", "None", "min_incremental_distance", "=", "float", "(", "'inf'", ")", "# Evaluate the sampled nodes to find the one leading to the smallest distance increment", "for", "node", "in", "sampled_nodes", ":", "incremental_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "incremental_distance", "<", "min_incremental_distance", ":", "min_incremental_distance", "=", "incremental_distance", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 13.663822370106118}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "sampled_candidates", "=", "random", ".", "sample", "(", "unvisited_nodes", ",", "min", "(", "5", ",", "len", "(", "unvisited_nodes", ")", ")", ")", "# Sample up to 5 candidates", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "for", "candidate", "in", "sampled_candidates", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate", "]", "remaining_distance", "=", "distance_matrix", "[", "candidate", "]", "[", "destination_node", "]", "score", "=", "immediate_distance", "+", "(", "remaining_distance", "/", "len", "(", "unvisited_nodes", ")", ")", "# Penalize based on remaining unvisited nodes", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "candidate", "return", "best_next_node"], "code_perf": 13.724544456722091}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "weighted_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "penalty", "=", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "*", "(", "distance_to_destination", "**", "2", ")", "# Penalty increases quadratically with distance to destination", "weighted_scores", "[", "node", "]", "=", "distance_to_node", "+", "penalty", "next_node", "=", "min", "(", "weighted_scores", ",", "key", "=", "weighted_scores", ".", "get", ")", "return", "next_node"], "code_perf": 13.976611480508053}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "min_score", "=", "float", "(", "'inf'", ")", "best_next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "diversity_score", "=", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "]", ")", "# Calculate score with distance and diversity", "score", "=", "direct_distance", "-", "diversity_score", "*", "0.5", "# We subtract to favor diverse connections", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 14.522397991092513}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Initialize parameters for simulated annealing with a greedy approach", "temperature", "=", "1.0", "cooling_rate", "=", "0.98", "max_iterations", "=", "50", "best_next_node", "=", "None", "best_distance", "=", "float", "(", "'inf'", ")", "# Calculate the average distance of unvisited nodes for adaptive acceptance", "average_distance", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "for", "_", "in", "range", "(", "max_iterations", ")", ":", "# Select the greedy candidate (closest unvisited node)", "greedy_candidate", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "distance_to_greedy_candidate", "=", "distance_matrix", "[", "current_node", "]", "[", "greedy_candidate", "]", "# Evaluate greedy solution first", "if", "distance_to_greedy_candidate", "<", "best_distance", ":", "best_distance", "=", "distance_to_greedy_candidate", "best_next_node", "=", "greedy_candidate", "# Randomly select another candidate to encourage exploration", "rand_candidate", "=", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "distance_to_rand_candidate", "=", "distance_matrix", "[", "current_node", "]", "[", "rand_candidate", "]", "# Explore with acceptance probability based on distance deviation", "if", "distance_to_rand_candidate", ">", "best_distance", ":", "acceptance_probability", "=", "np", ".", "exp", "(", "(", "best_distance", "-", "distance_to_rand_candidate", ")", "/", "(", "temperature", "+", "abs", "(", "distance_to_rand_candidate", "-", "average_distance", ")", ")", ")", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", "<", "acceptance_probability", ":", "best_distance", "=", "distance_to_rand_candidate", "best_next_node", "=", "rand_candidate", "# Cool down the temperature", "temperature", "*=", "cooling_rate", "return", "best_next_node"], "code_perf": 14.874137316768746}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Randomly sample a subset of unvisited nodes", "sample_size", "=", "min", "(", "5", ",", "len", "(", "unvisited_nodes", ")", ")", "# Sample up to 5 nodes", "sampled_nodes", "=", "random", ".", "sample", "(", "unvisited_nodes", ",", "sample_size", ")", "best_next_node", "=", "None", "minimal_distance_sum", "=", "float", "(", "'inf'", ")", "for", "node", "in", "sampled_nodes", ":", "distance_to_current", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "total_distance", "=", "distance_to_current", "+", "distance_to_destination", "if", "total_distance", "<", "minimal_distance_sum", ":", "minimal_distance_sum", "=", "total_distance", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 15.431324997239294}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate the total remaining distance from this node to the destination", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "# Incorporate a heuristic penalty proportional to the total remaining distance", "penalty", "=", "total_remaining_distance", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "# Combine both distances to create a new score", "score", "=", "distance_to_node", "+", "penalty", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 17.187223124636084}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "visited_count", "=", "len", "(", "distance_matrix", ")", "-", "len", "(", "unvisited_nodes", ")", "-", "1", "attractiveness_factor", "=", "1.5", "**", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "# Increases with unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "distance_to_node", "+", "(", "attractiveness_factor", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 17.386940822346958}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "pheromone_matrix", "=", "np", ".", "ones", "(", "distance_matrix", ".", "shape", ")", "# Initialize pheromone levels", "pheromone_decay", "=", "0.1", "# Pheromone decay factor", "alpha", "=", "1.0", "# Influence of pheromone", "beta", "=", "1.0", "# Influence of distance", "# Update pheromone levels based on previous path costs (dummy values for demonstration)", "for", "node", "in", "unvisited_nodes", ":", "if", "node", "!=", "current_node", ":", "pheromone_matrix", "[", "current_node", "]", "[", "node", "]", "*=", "(", "1", "-", "pheromone_decay", ")", "candidate_nodes", "=", "[", "node", "for", "node", "in", "unvisited_nodes", "if", "node", "!=", "current_node", "]", "if", "candidate_nodes", ":", "probabilities", "=", "[", "]", "total", "=", "0.0", "for", "node", "in", "candidate_nodes", ":", "pheromone", "=", "pheromone_matrix", "[", "current_node", "]", "[", "node", "]", "**", "alpha", "distance", "=", "(", "1", "/", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "**", "beta", "probability", "=", "pheromone", "*", "distance", "probabilities", ".", "append", "(", "probability", ")", "total", "+=", "probability", "probabilities", "=", "[", "p", "/", "total", "for", "p", "in", "probabilities", "]", "# Normalize probabilities", "# Select the next node according to the computed probabilities", "selected_node", "=", "np", ".", "random", ".", "choice", "(", "candidate_nodes", ",", "p", "=", "probabilities", ")", "# Update pheromone levels (for demonstration purposes, using a fixed increment)", "pheromone_matrix", "[", "current_node", "]", "[", "selected_node", "]", "+=", "0.1", "return", "selected_node", "return", "None"], "code_perf": 18.861006851699642}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "total_weight", "=", "0", "weighted_probabilities", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "weighted_distance", "=", "distance", "*", "np", ".", "exp", "(", "-", "0.1", "*", "len", "(", "unvisited_nodes", ")", ")", "# Exponential decay based on remaining nodes", "probability", "=", "1", "/", "weighted_distance", "# Higher distance gives higher probability", "weighted_probabilities", "[", "node", "]", "=", "probability", "total_weight", "+=", "probability", "# Normalize probabilities", "for", "node", "in", "weighted_probabilities", ":", "weighted_probabilities", "[", "node", "]", "/=", "total_weight", "# Select the next node based on calculated probabilities", "next_node", "=", "random", ".", "choices", "(", "list", "(", "weighted_probabilities", ".", "keys", "(", ")", ")", ",", "weights", "=", "weighted_probabilities", ".", "values", "(", ")", ",", "k", "=", "1", ")", "[", "0", "]", "return", "next_node"], "code_perf": 18.952080697477243}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "weighted_choice", "=", "[", "]", "# Calculate weights and penalties", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "1", "/", "(", "distance", "if", "distance", "!=", "0", "else", "1", ")", "# Avoid division by zero", "weight", "=", "penalty", "*", "(", "1", "+", "random", ".", "uniform", "(", "0", ",", "1", ")", ")", "# Introduce randomness", "weighted_choice", ".", "append", "(", "(", "node", ",", "weight", ")", ")", "# Normalize weights", "total_weight", "=", "sum", "(", "weight", "for", "node", ",", "weight", "in", "weighted_choice", ")", "if", "total_weight", "==", "0", ":", "return", "None", "probabilities", "=", "[", "(", "node", ",", "weight", "/", "total_weight", ")", "for", "node", ",", "weight", "in", "weighted_choice", "]", "# Select the next node based on the calculated probabilities", "next_node", "=", "random", ".", "choices", "(", "[", "node", "for", "node", ",", "_", "in", "probabilities", "]", ",", "weights", "=", "[", "weight", "for", "_", ",", "weight", "in", "probabilities", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 19.540445338753898}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "node_scores", "=", "[", "]", "# Calculate scores based on distance and connectivity", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_penalty", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "1", "+", "sum", "(", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "for", "neighbor", "in", "unvisited_nodes", "if", "neighbor", "!=", "node", ")", ")", "score", "=", "(", "1", "/", "distance", ")", "*", "connectivity_penalty", "# Higher score for closer, well-connected nodes", "node_scores", ".", "append", "(", "(", "node", ",", "score", ")", ")", "# Normalize scores", "total_score", "=", "sum", "(", "score", "for", "_", ",", "score", "in", "node_scores", ")", "probabilities", "=", "[", "score", "/", "total_score", "for", "_", ",", "score", "in", "node_scores", "]", "# Select next node randomly based on calculated probabilities", "if", "node_scores", ":", "next_node", "=", "random", ".", "choices", "(", "[", "node", "for", "node", ",", "_", "in", "node_scores", "]", ",", "probabilities", ")", "[", "0", "]", "return", "next_node", "return", "None"], "code_perf": 19.540687562120006}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Initialize parameters for simulated annealing", "temperature", "=", "1.0", "cooling_rate", "=", "0.99", "max_iterations", "=", "100", "best_next_node", "=", "None", "best_distance", "=", "float", "(", "'inf'", ")", "for", "_", "in", "range", "(", "max_iterations", ")", ":", "# Randomly select a candidate next node from the unvisited nodes", "candidate_node", "=", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "distance_to_candidate", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate_node", "]", "# Evaluate current best", "if", "distance_to_candidate", "<", "best_distance", ":", "best_distance", "=", "distance_to_candidate", "best_next_node", "=", "candidate_node", "else", ":", "# Calculate acceptance probability for a worse solution", "acceptance_probability", "=", "np", ".", "exp", "(", "(", "best_distance", "-", "distance_to_candidate", ")", "/", "temperature", ")", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", "<", "acceptance_probability", ":", "best_distance", "=", "distance_to_candidate", "best_next_node", "=", "candidate_node", "# Cool down the temperature", "temperature", "*=", "cooling_rate", "return", "best_next_node"], "code_perf": 19.853481492599094}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "appeal_scores", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate appeal based on distance and proximity to destination", "destination_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "appeal", "=", "(", "1", "/", "distance", ")", "+", "(", "1", "/", "(", "destination_distance", "+", "1", ")", ")", "# Avoid div by zero", "appeal_scores", ".", "append", "(", "(", "node", ",", "appeal", ")", ")", "# Normalize appeal scores to create probabilities", "total_appeal", "=", "sum", "(", "score", "for", "_", ",", "score", "in", "appeal_scores", ")", "probabilities", "=", "[", "score", "/", "total_appeal", "for", "_", ",", "score", "in", "appeal_scores", "]", "# Perform a weighted random selection based on appeal", "next_node", "=", "random", ".", "choices", "(", "[", "node", "for", "node", ",", "_", "in", "appeal_scores", "]", ",", "probabilities", ")", "[", "0", "]", "return", "next_node"], "code_perf": 20.450958887222093}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "minimal_future_cost", "=", "float", "(", "'inf'", ")", "# Calculate remaining cost to visit unvisited nodes from the current node", "remaining_cost", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", "if", "next_node", "!=", "node", ")", "# Score combines immediate distance and future cost", "score", "=", "immediate_distance", "+", "future_cost", "+", "(", "remaining_cost", "-", "future_cost", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "score", "<", "minimal_future_cost", ":", "minimal_future_cost", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 20.720253103831816}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate cumulative distance for each unvisited node", "cumulative_distances", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "cumulative_distances", "[", "node", "]", "=", "total_distance", "+", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Select the node with the minimum cumulative distance", "next_node", "=", "min", "(", "cumulative_distances", ",", "key", "=", "cumulative_distances", ".", "get", ")", "return", "next_node"], "code_perf": 21.51502557645197}
{"code_tokens": ["import", "numpy", "as", "np", "def", "calculate_remaining_cost", "(", "node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "0", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "minimal_future_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_cost", "=", "calculate_remaining_cost", "(", "node", ",", "unvisited_nodes", "-", "{", "node", "}", ",", "distance_matrix", ")", "total_cost", "=", "immediate_distance", "+", "future_cost", "if", "total_cost", "<", "minimal_future_cost", ":", "minimal_future_cost", "=", "total_cost", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 21.51502557645197}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_distance_reduction", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_if_visited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "nn", "]", "for", "nn", "in", "unvisited_nodes", "if", "nn", "!=", "node", ")", "distance_reduction", "=", "(", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "nn", "]", "for", "nn", "in", "unvisited_nodes", ")", "-", "distance_to_node", "-", "total_distance_if_visited", ")", "if", "distance_reduction", ">", "max_distance_reduction", ":", "max_distance_reduction", "=", "distance_reduction", "next_node", "=", "node", "return", "next_node"], "code_perf": 21.51502557645197}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Convert unvisited nodes to a numpy array for easier manipulation", "unvisited_nodes", "=", "np", ".", "array", "(", "list", "(", "unvisited_nodes", ")", ")", "# Calculate distances from the current node to all unvisited nodes", "distances", "=", "distance_matrix", "[", "current_node", ",", "unvisited_nodes", "]", "# Calculate distances from unvisited nodes to the destination", "destination_distances", "=", "distance_matrix", "[", "unvisited_nodes", ",", "destination_node", "]", "# Introduce a penalty parameter for longer distances", "penalty_factor", "=", "1.5", "penalties", "=", "np", ".", "maximum", "(", "0", ",", "destination_distances", "-", "np", ".", "mean", "(", "destination_distances", ")", ")", "*", "penalty_factor", "# Estimating future costs based on unvisited neighbors", "estimated_future_costs", "=", "np", ".", "array", "(", "[", "np", ".", "sum", "(", "distance_matrix", "[", "node", ",", "unvisited_nodes", "]", ")", "for", "node", "in", "unvisited_nodes", "]", ")", "# Compute a combined score: distance + penalty + estimated future costs", "scores", "=", "distances", "+", "penalties", "+", "estimated_future_costs", "# Introduce stochastic element to promote exploration", "randomness_factor", "=", "np", ".", "random", ".", "uniform", "(", "0.05", ",", "0.15", ",", "size", "=", "scores", ".", "shape", ")", "scores", "+=", "randomness_factor", "# Select the node with the minimum score", "next_node", "=", "unvisited_nodes", "[", "np", ".", "argmin", "(", "scores", ")", "]", "return", "next_node"], "code_perf": 21.701437553303784}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Distance to destination", "score", "=", "1", "/", "distance", "+", "1", "/", "(", "remaining_distance", "+", "1e-6", ")", "# Avoid division by zero", "scores", "[", "node", "]", "=", "score", "# Introduce randomness", "total_score", "=", "sum", "(", "scores", ".", "values", "(", ")", ")", "probabilities", "=", "{", "node", ":", "score", "/", "total_score", "for", "node", ",", "score", "in", "scores", ".", "items", "(", ")", "}", "# Define a randomness factor", "exploration_factor", "=", "0.1", "# Adjust this value to favor exploration", "if", "random", ".", "random", "(", ")", "<", "exploration_factor", ":", "next_node", "=", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "else", ":", "next_node", "=", "random", ".", "choices", "(", "list", "(", "probabilities", ".", "keys", "(", ")", ")", ",", "weights", "=", "probabilities", ".", "values", "(", ")", ")", "[", "0", "]", "return", "next_node"], "code_perf": 21.931628010095007}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "unvisited_nodes", "=", "np", ".", "array", "(", "list", "(", "unvisited_nodes", ")", ")", "distances", "=", "distance_matrix", "[", "current_node", ",", "unvisited_nodes", "]", "destination_distances", "=", "distance_matrix", "[", "unvisited_nodes", ",", "destination_node", "]", "# Heuristic for connectivity: sum of distances to all other unvisited nodes", "connectivity_scores", "=", "np", ".", "array", "(", "[", "np", ".", "sum", "(", "distance_matrix", "[", "node", ",", "unvisited_nodes", "]", ")", "for", "node", "in", "unvisited_nodes", "]", ")", "# Calculate penalties for distance to destination", "distance_penalty", "=", "np", ".", "exp", "(", "destination_distances", "/", "np", ".", "mean", "(", "destination_distances", ")", ")", "# Combined score: distance + connectivity penalty + distance penalty", "scores", "=", "distances", "+", "connectivity_scores", "+", "distance_penalty", "next_node", "=", "unvisited_nodes", "[", "np", ".", "argmin", "(", "scores", ")", "]", "return", "next_node"], "code_perf": 22.357538305755874}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "weighted_nodes", "=", "[", "]", "# Calculate weights for each unvisited node based on their distance", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Weight based on the inverse of the distance to the destination", "weight", "=", "1", "/", "(", "distance_to_node", "+", "1", ")", "*", "distance_to_destination", "# Adding 1 to avoid division by zero", "weighted_nodes", ".", "append", "(", "(", "node", ",", "weight", ")", ")", "# Normalize weights", "total_weight", "=", "sum", "(", "weight", "for", "_", ",", "weight", "in", "weighted_nodes", ")", "normalized_weights", "=", "[", "(", "node", ",", "weight", "/", "total_weight", ")", "for", "node", ",", "weight", "in", "weighted_nodes", "]", "# Randomly choose a node based on weighted probabilities", "next_node", "=", "random", ".", "choices", "(", "[", "node", "for", "node", ",", "_", "in", "normalized_weights", "]", ",", "weights", "=", "[", "weight", "for", "_", ",", "weight", "in", "normalized_weights", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 23.161580872320485}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Define a risk factor that increases with distance traveled", "risk_factor_base", "=", "0.6", "# Base risk modifier", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "risk_factor", "=", "risk_factor_base", "*", "(", "total_distance", "/", "len", "(", "unvisited_nodes", ")", ")", "best_next_node", "=", "None", "best_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate total cost with risk factor for exploration", "total_cost", "=", "direct_distance", "+", "risk_factor", "*", "(", "direct_distance", "**", "2", ")", "# Introduce randomness to select less obvious paths as well", "if", "random", ".", "random", "(", ")", "<", "0.1", ":", "# 10% chance to explore randomly", "return", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "if", "total_cost", "<", "best_cost", ":", "best_cost", "=", "total_cost", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 23.164762190285217}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "weighted_nodes", "=", "[", "]", "# Calculate scores for each unvisited node based on distance and heuristic", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Score based on the combination of distance and heuristic cost", "score", "=", "distance_to_node", "+", "heuristic_cost", "weighted_nodes", ".", "append", "(", "(", "node", ",", "score", ")", ")", "# Normalize scores to create selection probabilities", "total_score", "=", "sum", "(", "1", "/", "score", "for", "_", ",", "score", "in", "weighted_nodes", ")", "# Inverse to favor lower scores", "normalized_weights", "=", "[", "(", "node", ",", "(", "1", "/", "score", ")", "/", "total_score", ")", "for", "node", ",", "score", "in", "weighted_nodes", "]", "# Randomly choose a node based on weighted probabilities", "next_node", "=", "random", ".", "choices", "(", "[", "node", "for", "node", ",", "_", "in", "normalized_weights", "]", ",", "weights", "=", "[", "weight", "for", "_", ",", "weight", "in", "normalized_weights", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 23.26388635887545}
{"code_tokens": ["import", "random", "import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "total_distance", "=", "0", "node_weights", "=", "{", "}", "# Calculate weights based on distance to introduce variability", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "weight", "=", "math", ".", "exp", "(", "-", "distance", ")", "# Exponential decay function", "node_weights", "[", "node", "]", "=", "weight", "total_distance", "+=", "weight", "# Normalize weights to get probabilities", "probabilities", "=", "{", "node", ":", "weight", "/", "total_distance", "for", "node", ",", "weight", "in", "node_weights", ".", "items", "(", ")", "}", "# Randomly select the next node based on weighted probabilities", "rand_value", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "cumulative_probability", "=", "0.0", "for", "node", ",", "probability", "in", "probabilities", ".", "items", "(", ")", ":", "cumulative_probability", "+=", "probability", "if", "rand_value", "<=", "cumulative_probability", ":", "return", "node", "return", "None"], "code_perf": 23.98655847187011}
{"code_tokens": ["import", "random", "import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "candidate_nodes", "=", "[", "]", "# Calculate distance decay and find candidate nodes", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "<=", "2", "*", "math", ".", "sqrt", "(", "len", "(", "distance_matrix", ")", ")", ":", "# Distance threshold", "candidate_nodes", ".", "append", "(", "node", ")", "# Calculate weights based on an exponential decay function from minimum distance", "min_distance", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "candidate_nodes", ")", "if", "candidate_nodes", "else", "float", "(", "'inf'", ")", "weights", "=", "[", "(", "math", ".", "exp", "(", "-", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "-", "min_distance", ")", "**", "2", ")", ")", "for", "node", "in", "candidate_nodes", "]", "# Normalize weights", "total_weight", "=", "sum", "(", "weights", ")", "if", "total_weight", ">", "0", ":", "weighted_probs", "=", "[", "weight", "/", "total_weight", "for", "weight", "in", "weights", "]", "else", ":", "weighted_probs", "=", "[", "1", "/", "len", "(", "candidate_nodes", ")", "]", "*", "len", "(", "candidate_nodes", ")", "# Randomly select next node based on weighted probabilities", "next_node", "=", "random", ".", "choices", "(", "candidate_nodes", ",", "weights", "=", "weighted_probs", ",", "k", "=", "1", ")", "[", "0", "]", "if", "candidate_nodes", "else", "None", "return", "next_node"], "code_perf": 24.15784128979194}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "total_weight", "=", "0", "weights", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "weight", "=", "1", "/", "(", "distance", "+", "1", ")", "# Avoid division by zero", "weights", "[", "node", "]", "=", "weight", "total_weight", "+=", "weight", "# Calculate probabilities", "probabilities", "=", "{", "node", ":", "weight", "/", "total_weight", "for", "node", ",", "weight", "in", "weights", ".", "items", "(", ")", "}", "# Select next node based on weighted probabilities", "rand_val", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "cumulative_probability", "=", "0.0", "for", "node", ",", "prob", "in", "probabilities", ".", "items", "(", ")", ":", "cumulative_probability", "+=", "prob", "if", "rand_val", "<=", "cumulative_probability", ":", "return", "node", "return", "None"], "code_perf": 24.336170454648663}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Randomly sample a subset of unvisited nodes", "sample_size", "=", "min", "(", "3", ",", "len", "(", "unvisited_nodes", ")", ")", "# Sample up to 3 nodes", "sampled_nodes", "=", "random", ".", "sample", "(", "unvisited_nodes", ",", "sample_size", ")", "best_next_node", "=", "None", "best_total_distance", "=", "float", "(", "'inf'", ")", "# Evaluate the sampled nodes", "for", "node", "in", "sampled_nodes", ":", "total_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Distance to the candidate node", "# Include distances to remaining unvisited nodes", "total_distance", "+=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "nn", "]", "for", "nn", "in", "unvisited_nodes", "if", "nn", "!=", "node", ")", "if", "total_distance", "<", "best_total_distance", ":", "best_total_distance", "=", "total_distance", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 24.386116704281037}
{"code_tokens": ["import", "random", "import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ",", "temperature", "=", "1.0", ")", ":", "def", "total_distance_if_visited", "(", "next_node", ")", ":", "return", "(", "distance_matrix", "[", "current_node", "]", "[", "next_node", "]", "+", "sum", "(", "distance_matrix", "[", "next_node", "]", "[", "nn", "]", "for", "nn", "in", "unvisited_nodes", "if", "nn", "!=", "next_node", ")", ")", "best_node", "=", "None", "best_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "candidate_distance", "=", "total_distance_if_visited", "(", "node", ")", "if", "candidate_distance", "<", "best_distance", ":", "best_distance", "=", "candidate_distance", "best_node", "=", "node", "else", ":", "# Probability to accept worse solution based on temperature", "probability", "=", "math", ".", "exp", "(", "(", "best_distance", "-", "candidate_distance", ")", "/", "temperature", ")", "if", "random", ".", "random", "(", ")", "<", "probability", ":", "best_distance", "=", "candidate_distance", "best_node", "=", "node", "return", "best_node"], "code_perf": 24.50774333246479}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "scoring_nodes", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "(", "1", "/", "(", "distance", "+", "1", ")", ")", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "scoring_nodes", ".", "append", "(", "(", "node", ",", "score", ")", ")", "if", "not", "scoring_nodes", ":", "return", "None", "total_score", "=", "sum", "(", "score", "for", "_", ",", "score", "in", "scoring_nodes", ")", "weighted_probs", "=", "[", "(", "score", "/", "total_score", ")", "for", "_", ",", "score", "in", "scoring_nodes", "]", "next_node", "=", "random", ".", "choices", "(", "[", "node", "for", "node", ",", "_", "in", "scoring_nodes", "]", ",", "weights", "=", "weighted_probs", ",", "k", "=", "1", ")", "[", "0", "]", "return", "next_node"], "code_perf": 24.68688415183449}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "min_adjusted_score", "=", "float", "(", "'inf'", ")", "average_distance_to_unvisited", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "traffic_adjustment", "=", "(", "average_distance_to_unvisited", "/", "distance_to_node", ")", "if", "distance_to_node", ">", "0", "else", "1", "adjusted_score", "=", "distance_to_node", "*", "traffic_adjustment", "if", "adjusted_score", "<", "min_adjusted_score", ":", "min_adjusted_score", "=", "adjusted_score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 25.716448610595013}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Initialize parameters for simulated annealing", "initial_temperature", "=", "1000", "cooling_rate", "=", "0.995", "current_temperature", "=", "initial_temperature", "best_next_node", "=", "None", "best_cost", "=", "float", "(", "'inf'", ")", "# Iterate through unvisited nodes and evaluate options", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate the cost of visiting the next node", "future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", "if", "next_node", "!=", "node", ")", "total_cost", "=", "immediate_distance", "+", "future_cost", "# Accept the next node based on probability", "if", "total_cost", "<", "best_cost", ":", "best_cost", "=", "total_cost", "best_next_node", "=", "node", "else", ":", "# Probability of accepting a worse solution is based on temperature", "probability", "=", "np", ".", "exp", "(", "(", "best_cost", "-", "total_cost", ")", "/", "current_temperature", ")", "if", "random", ".", "random", "(", ")", "<", "probability", ":", "best_cost", "=", "total_cost", "best_next_node", "=", "node", "# Cool down the temperature", "current_temperature", "*=", "cooling_rate", "return", "best_next_node"], "code_perf": 25.986263137981517}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "pheromone_matrix", "=", "np", ".", "ones", "(", "distance_matrix", ".", "shape", ")", "# Initialize pheromone levels", "pheromone_decay", "=", "0.1", "# Pheromone decay factor", "alpha", "=", "1.0", "# Influence of pheromone", "beta", "=", "1.0", "# Influence of distance", "tabu_list", "=", "[", "]", "tabu_tenure", "=", "2", "# Restrict the last two visited nodes", "# Collect unvisited nodes while maintaining tabu restrictions", "candidate_nodes", "=", "[", "node", "for", "node", "in", "unvisited_nodes", "if", "node", "not", "in", "tabu_list", "]", "if", "candidate_nodes", ":", "minimal_round_trip_distance", "=", "float", "(", "'inf'", ")", "best_next_node", "=", "None", "for", "node", "in", "candidate_nodes", ":", "# Compute round trip distance", "round_trip_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "pheromone", "=", "pheromone_matrix", "[", "current_node", "]", "[", "node", "]", "**", "alpha", "distance", "=", "(", "1", "/", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "**", "beta", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "!=", "0", "else", "0", "score", "=", "round_trip_distance", "*", "(", "1", "-", "pheromone", ")", "+", "random", ".", "uniform", "(", "0", ",", "0.1", ")", "if", "score", "<", "minimal_round_trip_distance", ":", "minimal_round_trip_distance", "=", "score", "best_next_node", "=", "node", "# Update the tabu list", "tabu_list", ".", "append", "(", "current_node", ")", "if", "len", "(", "tabu_list", ")", ">", "tabu_tenure", ":", "tabu_list", ".", "pop", "(", "0", ")", "# Remove the oldest entry in the tabu list", "# Update pheromone levels", "pheromone_matrix", "[", "current_node", "]", "[", "best_next_node", "]", "+=", "0.1", "return", "best_next_node", "return", "None"], "code_perf": 26.146578067007766}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "immediate_distances", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "avg_immediate_distance", "=", "np", ".", "mean", "(", "immediate_distances", ")", "# Calculate a risk factor based on distance to the destination", "risk_factor", "=", "np", ".", "std", "(", "[", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# New score calculation with added risk factor to encourage selection of closer nodes", "score", "=", "immediate_distance", "+", "risk_factor", "+", "(", "avg_immediate_distance", "-", "immediate_distance", ")", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 27.692728143090072}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "tabu_list", "=", "set", "(", ")", "tabu_tenure", "=", "2", "# Restricting the last two visited nodes", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "# Update the tabu list with the current node", "tabu_list", ".", "add", "(", "current_node", ")", "if", "len", "(", "tabu_list", ")", ">", "tabu_tenure", ":", "tabu_list", ".", "pop", "(", ")", "# Remove the oldest entry in the tabu list", "immediate_distances", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "if", "node", "not", "in", "tabu_list", "]", "avg_immediate_distance", "=", "np", ".", "mean", "(", "immediate_distances", ")", "if", "immediate_distances", "else", "0", "# Calculate a risk factor based on distance to the destination", "risk_factor", "=", "np", ".", "std", "(", "[", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "if", "node", "not", "in", "tabu_list", "]", ")", "for", "node", "in", "unvisited_nodes", ":", "if", "node", "not", "in", "tabu_list", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# New score calculation combining immediate distance, risk factor, and average distance", "score", "=", "immediate_distance", "+", "risk_factor", "+", "(", "avg_immediate_distance", "-", "immediate_distance", ")", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 27.692728143090072}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "scores", "=", "{", "}", "total_score", "=", "0", "# Calculate scores based on distance to the current node and a random factor", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "random_factor", "=", "random", ".", "uniform", "(", "0.5", ",", "1.5", ")", "# Introduce a randomness in scoring", "score", "=", "distance", "*", "random_factor", "scores", "[", "node", "]", "=", "score", "total_score", "+=", "score", "# Select the next node based on weighted random choice", "selection_threshold", "=", "random", ".", "uniform", "(", "0", ",", "total_score", ")", "cumulative_score", "=", "0", "for", "node", ",", "score", "in", "scores", ".", "items", "(", ")", ":", "cumulative_score", "+=", "score", "if", "cumulative_score", ">=", "selection_threshold", ":", "return", "node", "return", "None", "# Just in case, though it shouldn't reach here"], "code_perf": 29.652332826481064}
{"code_tokens": ["import", "random", "import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "probabilities", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "if", "total_distance", ">", "0", ":", "probabilities", "[", "node", "]", "=", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "/", "total_distance", ")", "**", "2", "# Squaring to emphasize shorter distances", "else", ":", "probabilities", "[", "node", "]", "=", "0", "# Normalize probabilities", "total_prob", "=", "sum", "(", "probabilities", ".", "values", "(", ")", ")", "if", "total_prob", ">", "0", ":", "probabilities", "=", "{", "node", ":", "prob", "/", "total_prob", "for", "node", ",", "prob", "in", "probabilities", ".", "items", "(", ")", "}", "else", ":", "return", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "# Use a random number to select based on probabilities", "random_value", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "cumulative", "=", "0.0", "for", "node", ",", "prob", "in", "probabilities", ".", "items", "(", ")", ":", "cumulative", "+=", "prob", "if", "cumulative", ">=", "random_value", ":", "return", "node", "return", "random", ".", "choice", "(", "list", "(", "unvisited_nodes", ")", ")", "# Fallback"], "code_perf": 31.470287369123373}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "total_distance_to_other_nodes", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "nn", "]", "for", "nn", "in", "unvisited_nodes", "if", "nn", "!=", "node", ")", "scores", "[", "node", "]", "=", "total_distance_to_other_nodes", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 31.616956377461854}
{"code_tokens": ["import", "numpy", "as", "np", "def", "cluster_nodes", "(", "unvisited_nodes", ",", "distance_matrix", ")", ":", "clusters", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distances", "=", "[", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "]", "avg_distance", "=", "np", ".", "mean", "(", "distances", ")", "clusters", "[", "node", "]", "=", "avg_distance", "return", "sorted", "(", "clusters", ",", "key", "=", "clusters", ".", "get", ")", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Cluster the unvisited nodes based on proximity", "ordered_nodes", "=", "cluster_nodes", "(", "unvisited_nodes", ",", "distance_matrix", ")", "# Select the next node as the closest one from the cluster head (centroid)", "next_node", "=", "ordered_nodes", "[", "0", "]", "# First node in sorted order is the \"centroid\"", "return", "next_node"], "code_perf": 31.616956377461854}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "min_total_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "# Calculate the total distance if we go to this node", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "for", "neighbor", "in", "unvisited_nodes", "if", "neighbor", "!=", "node", ")", "# Select the node that minimizes the total distance", "if", "total_distance", "<", "min_total_distance", ":", "min_total_distance", "=", "total_distance", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 31.616956377461854}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Define a decay factor for the penalty based on the number of visited nodes", "decay_factor", "=", "0.5", "# Decay modifier", "num_visited_nodes", "=", "len", "(", "distance_matrix", ")", "-", "len", "(", "unvisited_nodes", ")", "decay_penalty", "=", "decay_factor", "*", "np", ".", "sqrt", "(", "num_visited_nodes", ")", "# Square root for slower growth", "best_next_node", "=", "None", "best_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate total cost using a weighted average approach", "total_cost", "=", "(", "1", "-", "decay_penalty", ")", "*", "direct_distance", "+", "decay_penalty", "*", "(", "direct_distance", "/", "(", "num_visited_nodes", "+", "1", ")", ")", "if", "total_cost", "<", "best_cost", ":", "best_cost", "=", "total_cost", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 32.802720577955526}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "weighted_distances", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "probability", "=", "distance", "/", "total_distance", "weighted_selection", "=", "(", "1", "-", "probability", ")", "+", "(", "random", ".", "random", "(", ")", "*", "probability", ")", "weighted_distances", ".", "append", "(", "(", "node", ",", "weighted_selection", ")", ")", "# Select the node with the minimum weighted distance", "next_node", "=", "min", "(", "weighted_distances", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "unvisited_nodes", ".", "remove", "(", "next_node", ")", "return", "next_node"], "code_perf": 34.70658926118945}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "minimal_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "distance", "if", "distance", ">", "0", "else", "1", ")", "# Avoid division by zero", "score", "=", "distance", "+", "penalty", "# Combine distance with penalty", "if", "score", "<", "minimal_score", ":", "minimal_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 36.1397423465301}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "unvisited_nodes", "=", "np", ".", "array", "(", "list", "(", "unvisited_nodes", ")", ")", "distances", "=", "distance_matrix", "[", "current_node", ",", "unvisited_nodes", "]", "to_destination_distances", "=", "distance_matrix", "[", "unvisited_nodes", ",", "destination_node", "]", "# Decay factor to minimize the impact of distant nodes", "decay_factor", "=", "0.5", "decay_penalties", "=", "np", ".", "exp", "(", "-", "decay_factor", "*", "to_destination_distances", ")", "# Weight for the number of unvisited neighbors, penalizing over-selection of crowded paths", "unvisited_count", "=", "np", ".", "array", "(", "[", "np", ".", "sum", "(", "distance_matrix", "[", "node", ",", ":", "]", ">", "0", ")", "for", "node", "in", "unvisited_nodes", "]", ")", "neighbor_weight", "=", "1", "/", "(", "unvisited_count", "+", "1", ")", "# Compute score based on distances, decay penalties, and neighbor weight", "scores", "=", "distances", "+", "decay_penalties", "+", "neighbor_weight", "next_node", "=", "unvisited_nodes", "[", "np", ".", "argmin", "(", "scores", ")", "]", "return", "next_node"], "code_perf": 6.520538505992208}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "max_heuristic_score", "=", "float", "(", "'-inf'", ")", "# Normalize distances", "max_distance", "=", "np", ".", "max", "(", "distance_matrix", "[", "current_node", "]", ")", "normalized_distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "/", "max_distance", "for", "node", "in", "unvisited_nodes", "}", "# Calculate a density score based on the remaining unvisited nodes", "density_scores", "=", "{", "node", ":", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "0.25", "*", "max_distance", "]", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "normalized_distances", "[", "node", "]", "density_score", "=", "density_scores", "[", "node", "]", "+", "1e-9", "# Avoid division by zero", "heuristic_score", "=", "distance_to_node", "/", "density_score", "# Lower distance with higher density is better", "if", "heuristic_score", ">", "max_heuristic_score", ":", "max_heuristic_score", "=", "heuristic_score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 33.25036357399763}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Rank unvisited nodes based on distance from current and distance to destination", "ranked_distances", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combining distances into a rank factor", "rank_value", "=", "distance_to_node", "+", "distance_to_destination", "ranked_distances", "[", "node", "]", "=", "rank_value", "# Selecting the node with the minimum rank value", "next_node", "=", "min", "(", "ranked_distances", ",", "key", "=", "ranked_distances", ".", "get", ")", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["# {The design idea involves using a weighted scoring system that combines heuristic distance factors with a decay factor based on the number of unvisited nodes, encouraging exploration while prioritizing closer nodes.}", "import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate heuristic distances to unvisited nodes", "heuristic_distances", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_distances", "[", "node", "]", "=", "distance_to_node", "# Calculating decay factor based on the number of unvisited nodes", "decay_factor", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "distance_matrix", ")", "+", "1e-6", ")", "# Scoring based on heuristic distances and decay factor", "scores", "=", "{", "node", ":", "(", "1", "/", "(", "dist", "+", "1e-6", ")", ")", "*", "decay_factor", "for", "node", ",", "dist", "in", "heuristic_distances", ".", "items", "(", ")", "}", "# Introducing stochastic element: adding a random noise to scores for exploration", "noise", "=", "{", "node", ":", "random", ".", "uniform", "(", "-", "0.1", ",", "0.1", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "scores", ":", "scores", "[", "node", "]", "+=", "noise", "[", "node", "]", "# Selecting the node with the maximum score", "next_node", "=", "max", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.995588206312564}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "connectivity_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "# Higher score for well-connected nodes", "exploration_factor", "=", "1", "/", "(", "1", "+", "distance_to_destination", ")", "# Encourages exploration of farther nodes", "# Combine scores with a weighted approach", "scores", "[", "node", "]", "=", "(", "distance_to_node", "*", "exploration_factor", ")", "/", "(", "1", "+", "connectivity_score", ")", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 8.347794353578557}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "clustering_threshold", "=", "2", "# Adjust this value to change clustering sensitivity", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate the density of unvisited neighbors", "density_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "clustering_threshold", ")", "exploration_factor", "=", "1", "/", "(", "1", "+", "distance_to_destination", ")", "# Encourages exploring nodes close to the destination", "penalty_factor", "=", "distance_to_node", "**", "2", "/", "(", "1", "+", "distance_to_destination", ")", "# Penalizes long distances to nodes", "scores", "[", "node", "]", "=", "(", "distance_to_node", "+", "penalty_factor", ")", "*", "exploration_factor", "/", "(", "1", "+", "density_score", ")", "# Adjust score by density", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.699237951584123}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "weighted_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "# Penalty for close nodes", "weight", "=", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "# Weight based on remaining nodes and distance to destination", "weighted_scores", "[", "node", "]", "=", "(", "distance_to_node", "+", "penalty", ")", "*", "weight", "next_node", "=", "min", "(", "weighted_scores", ",", "key", "=", "weighted_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.699237951584123}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Modify the score to incorporate a connection strength factor", "connection_strength", "=", "np", ".", "exp", "(", "-", "total_distance_to_destination", ")", "# Combine the distances with the connection strength for a weighted score", "score", "=", "distance_to_node", "*", "(", "1", "-", "connection_strength", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 7.416282833571017}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "max_exploration_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "[", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "]", ")", "penalty_for_visited", "=", "sum", "(", "[", "distance_matrix", "[", "node", "]", "[", "visited", "]", "for", "visited", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "visited", "not", "in", "unvisited_nodes", "and", "distance_matrix", "[", "node", "]", "[", "visited", "]", ">", "0", "]", ")", "exploration_score", "=", "(", "1", "/", "(", "distance_to_node", "+", "1e-9", ")", ")", "*", "(", "1", "/", "(", "total_distance_to_unvisited", "+", "1e-9", ")", ")", "*", "(", "1", "+", "penalty_for_visited", ")", "if", "exploration_score", ">", "max_exploration_score", ":", "max_exploration_score", "=", "exploration_score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 7.592714285087428}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "weighted_scores", "=", "{", "}", "remaining_nodes_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "decay_factor", "=", "1", "/", "(", "1", "+", "remaining_nodes_count", ")", "# Decay increases as nodes are left unvisited", "score", "=", "distance_to_node", "*", "decay_factor", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combine distance and decay", "weighted_scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "weighted_scores", ",", "key", "=", "weighted_scores", ".", "get", ")", "return", "next_node"], "code_perf": 14.282829649931207}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "# Calculate the maximum distance to any unvisited node for penalty", "max_distance_remaining", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Proximity factor based on the distance to the destination", "proximity_factor", "=", "1", "-", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "max_distance_remaining", ")", "# Score incorporates immediate distance and the proximity factor", "score", "=", "distance_to_node", "-", "proximity_factor", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 8.20718583006699}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "# Predictive model for remaining path costs using the average distance to the remaining unvisited nodes", "avg_remaining_distance", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "for", "node", "in", "unvisited_nodes", "for", "unvisited", "in", "unvisited_nodes", "if", "unvisited", "!=", "node", "]", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "isolation_penalty", "=", "len", "(", "[", "nn", "for", "nn", "in", "unvisited_nodes", "if", "nn", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "nn", "]", "==", "np", ".", "inf", "]", ")", "*", "0.3", "attraction_factor", "=", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Combine distance, isolation penalty, attraction factor, and predicted costs into the score", "scores", "[", "node", "]", "=", "distance_to_node", "+", "isolation_penalty", "-", "attraction_factor", "*", "0.1", "+", "avg_remaining_distance", "*", "0.2", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "visit_count", "=", "{", "node", ":", "0", "for", "node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "}", "# Track visit counts", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "len", "(", "[", "nn", "for", "nn", "in", "unvisited_nodes", "if", "nn", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "nn", "]", "<", "np", ".", "inf", "]", ")", "# Update visit bias: the less visited, the better score", "least_visited_score", "=", "-", "visit_count", "[", "node", "]", "scores", "[", "node", "]", "=", "distance_to_node", "-", "connectivity_score", "*", "0.1", "+", "least_visited_score", "*", "0.2", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "max_distance", "=", "np", ".", "max", "(", "distance_matrix", "[", "current_node", ",", "list", "(", "unvisited_nodes", ")", "]", ")", "best_next_node", "=", "None", "best_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Implementing min-max normalization for distance", "normalized_distance", "=", "(", "direct_distance", "-", "0", ")", "/", "(", "max_distance", "-", "0", ")", "if", "max_distance", ">", "0", "else", "direct_distance", "# Deterrent factor based on distance to destination", "deterrent_factor", "=", "(", "1", "-", "normalized_distance", ")", "*", "(", "1", "+", "(", "0.5", "*", "len", "(", "unvisited_nodes", ")", ")", ")", "# Calculate total cost combining normalized distance with deterrent factor", "total_cost", "=", "direct_distance", "+", "deterrent_factor", "if", "total_cost", "<", "best_cost", ":", "best_cost", "=", "total_cost", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 36.1397423465301}
{"code_tokens": ["# {This algorithm incorporates a hybrid scoring mechanism that combines a heuristic based on the cumulative distance to unvisited nodes and a risk factor that penalizes visiting nodes with a high average distance from previously visited nodes, aiming to balance travel efficiency with minimized overall distance.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "min_risk_score", "=", "float", "(", "'inf'", ")", "# Calculate cumulative distance to remaining unvisited nodes", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Calculate average distance from already visited nodes", "visited_nodes", "=", "set", "(", "range", "(", "len", "(", "distance_matrix", ")", ")", ")", "-", "set", "(", "unvisited_nodes", ")", "-", "{", "current_node", "}", "average_distance_from_visited", "=", "(", "sum", "(", "distance_matrix", "[", "prev", "]", "[", "current_node", "]", "for", "prev", "in", "visited_nodes", ")", "/", "(", "len", "(", "visited_nodes", ")", "+", "1e-6", ")", "if", "visited_nodes", "else", "0", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Risk factor penalized by distance from previously visited nodes", "risk_score", "=", "average_distance_from_visited", "+", "distance_to_node", "# Combined score of proximity (based on cumulative distance) and risk", "score", "=", "cumulative_distance", "/", "len", "(", "unvisited_nodes", ")", "+", "risk_score", "if", "score", "<", "min_risk_score", ":", "min_risk_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "total_weight", "=", "0", "weighted_distances", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Scale the weight inversely with the distance and add randomness", "noise", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "# Random factor to encourage exploration", "weighted_distance", "=", "distance", "/", "(", "1", "+", "noise", ")", "weighted_distances", "[", "node", "]", "=", "weighted_distance", "total_weight", "+=", "weighted_distance", "# Normalize weights and randomly select the next node based on probabilities", "probabilities", "=", "{", "node", ":", "weight", "/", "total_weight", "for", "node", ",", "weight", "in", "weighted_distances", ".", "items", "(", ")", "}", "next_node", "=", "random", ".", "choices", "(", "list", "(", "probabilities", ".", "keys", "(", ")", ")", ",", "weights", "=", "probabilities", ".", "values", "(", ")", ")", "[", "0", "]", "return", "next_node"], "code_perf": 29.80610408155138}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "distances_to_unvisited", "=", "np", ".", "array", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "average_distance", "=", "np", ".", "mean", "(", "distances_to_unvisited", ")", "clustering_factor", "=", "np", ".", "sum", "(", "distances_to_unvisited", "<", "average_distance", ")", "# Count of close nodes", "exploration_factor", "=", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Factor to encourage exploring less visited nodes", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "for", "candidate", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate", "]", "score", "=", "(", "immediate_distance", ")", "+", "(", "0.5", "*", "average_distance", ")", "-", "(", "0.2", "*", "clustering_factor", ")", "+", "(", "exploration_factor", "*", "10", ")", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "candidate", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["# {The algorithm employs a weighted score that combines the direct distance to unvisited nodes with a penalty based on the distance to the farthest unvisited node, promoting a balanced exploration strategy.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "max_distance_to_unvisited", "=", "max", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "num_unvisited_nodes", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Dynamic penalty based on the farthest unvisited node to encourage diversity in picking closer or strategic nodes", "penalty", "=", "(", "max_distance_to_unvisited", "-", "direct_distance", ")", "**", "1.5", "score", "=", "direct_distance", "+", "(", "total_distance_to_unvisited", "/", "num_unvisited_nodes", ")", "+", "penalty", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 23.399244781450058}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "nearest_nodes", "=", "[", "]", "decay_factor", "=", "0.9", "weighted_choice", "=", "[", "]", "# Calculate distances and prepare for selection", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "nearest_nodes", ".", "append", "(", "(", "node", ",", "distance", ")", ")", "# Sort by distance", "nearest_nodes", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "# Create weighted choices considering decay for already visited nodes", "for", "idx", ",", "(", "node", ",", "distance", ")", "in", "enumerate", "(", "nearest_nodes", ")", ":", "weight", "=", "(", "1", "/", "distance", ")", "*", "(", "decay_factor", "**", "idx", ")", "weighted_choice", ".", "append", "(", "(", "node", ",", "weight", ")", ")", "# Introduce variability through weighted random selection", "if", "weighted_choice", ":", "total_weight", "=", "sum", "(", "weight", "for", "_", ",", "weight", "in", "weighted_choice", ")", "probabilities", "=", "[", "weight", "/", "total_weight", "for", "_", ",", "weight", "in", "weighted_choice", "]", "next_node", "=", "random", ".", "choices", "(", "[", "node", "for", "node", ",", "_", "in", "weighted_choice", "]", ",", "probabilities", ")", "[", "0", "]", "return", "next_node", "return", "None"], "code_perf": 14.127177030241295}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "historical_factor", "=", "np", ".", "zeros", "(", "len", "(", "distance_matrix", ")", ")", "# To track historical visits", "path_length", "=", "sum", "(", "distance_matrix", "[", "i", "]", "[", "j", "]", "for", "i", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "for", "j", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "i", "in", "unvisited_nodes", "and", "j", "in", "unvisited_nodes", ")", "best_next_node", "=", "None", "lowest_score", "=", "float", "(", "'inf'", ")", "for", "candidate", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "candidate", "]", "historical_penalty", "=", "historical_factor", "[", "candidate", "]", "*", "0.5", "# Applying historical penalty", "score", "=", "(", "immediate_distance", "*", "1.2", ")", "+", "historical_penalty", "-", "(", "np", ".", "log", "(", "len", "(", "unvisited_nodes", ")", ")", "*", "2", ")", "# Log factor reducing score with number of unvisited nodes", "if", "score", "<", "lowest_score", ":", "lowest_score", "=", "score", "best_next_node", "=", "candidate", "return", "best_next_node"], "code_perf": 6.957936002221982}
