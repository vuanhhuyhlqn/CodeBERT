{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "exploration_factor", "=", "1.5", "# Factor to encourage exploration of diverse paths", "penalty_weight", "=", "0.2", "# Weight for penalizing revisiting nodes", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "unvisited_connection_weight", "=", "0.4", "# Weight for connections to unvisited nodes", "return_path_weight", "=", "0.2", "# Weight for potential return paths", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "unvisited_connection_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Calculating distance to destination for future path consideration", "return_path_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score with exploration factor and penalty for already visited paths", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "unvisited_connection_weight", "*", "unvisited_connection_score", "+", "return_path_weight", "*", "return_path_score", "# Exploring diverse remaining paths by amplifying score based on unvisited nodes", "diversity_score", "=", "len", "(", "unvisited_nodes", ")", "-", "unvisited_connection_score", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "*=", "(", "1", "+", "exploration_factor", "*", "diversity_score", ")", "# Applying penalty for paths that revisit nodes", "if", "node", "in", "unvisited_nodes", ":", "score", "-=", "penalty_weight", "*", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.667383290927022}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {The algorithm utilizes a hybrid approach that combines the nearest neighbor heuristic with a cost-adjusted distance measure to enhance decision-making for the next node.}", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Calculate the adjusted cost based on proximity and a heuristic factor (e.g., potential distance to destination)", "for", "node", "in", "unvisited_nodes", ":", "direct_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "adjusted_cost", "=", "direct_cost", "+", "heuristic_cost", "*", "0.5", "# Weight the heuristic", "if", "adjusted_cost", "<", "min_cost", ":", "min_cost", "=", "adjusted_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "confidence_weight", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "1", "+", "sum", "(", "1", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<", "avg_distance_to_destination", ")", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "*", "(", "1", "+", "confidence_weight", ")", "+", "0.5", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.657271764735758}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "distance_weight", "=", "0.7", "proximity_weight", "=", "0.2", "randomness_factor", "=", "0.1", "# Introduces some hunting randomness", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Estimated closeness to destination (inverse of distance to destination)", "proximity_score", "=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1e-6", ")", "# Avoid division by zero", "# Penalty for cluster density (inverse of number of connections to other unvisited nodes)", "connections", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "cluster_density_penalty", "=", "connections", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-6", ")", "# Avoid division by zero", "weighted_score", "=", "(", "distance_weight", "*", "direct_distance", "+", "proximity_weight", "*", "proximity_score", "-", "(", "1", "-", "cluster_density_penalty", ")", ")", "randomness", "=", "random", ".", "uniform", "(", "-", "randomness_factor", ",", "randomness_factor", ")", "score", "=", "weighted_score", "+", "randomness", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.813392553503721}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "tour_cost_reduction_weight", "=", "0.5", "# Weight for tour cost reduction", "expansion_potential_weight", "=", "0.3", "# Weight for potential future distance savings", "average_neighbor_distance_weight", "=", "0.2", "# Weight for average distance to nearest unvisited nodes", "total_return_trip_distance", "=", "sum", "(", "distance_matrix", "[", "prev_node", "]", "[", "current_node", "]", "for", "prev_node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "nearest_neighbor_distances", "=", "[", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "]", "average_neighbor_distance", "=", "sum", "(", "nearest_neighbor_distances", ")", "/", "(", "len", "(", "nearest_neighbor_distances", ")", "or", "1", ")", "score", "=", "(", "-", "direct_distance", "*", "tour_cost_reduction_weight", "+", "average_neighbor_distance", "*", "expansion_potential_weight", "+", "(", "total_return_trip_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", ")", "*", "average_neighbor_distance_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.337920465110309}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "cost_weight", "=", "0.5", "momentum_weight", "=", "0.3", "penalty_weight", "=", "0.2", "# Calculate the momentum based on the distance to the last node visited", "momentum_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate the worst-case distance to unvisited nodes", "worst_case_distance", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "# Penalty for nodes that are further away from the destination", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "penalty", "=", "penalty_weight", "*", "distance_to_destination", "# Score calculation integrating direct cost, momentum, and penalty", "score", "=", "-", "cost_weight", "*", "direct_distance", "+", "momentum_weight", "*", "momentum_distance", "-", "penalty", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.331995111188165}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "time_weight", "=", "0.3", "# New weight for time consideration based on how long nodes remain unvisited", "distance_weight", "=", "0.4", "# Weight for direct distance", "potential_weight", "=", "0.3", "# Weight for potential future routes", "total_time", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Calculate total travel time for unvisited nodes", "time_factor", "=", "1", "/", "(", "total_time", "+", "1", ")", "# Normalize the time factor", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "potential_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average potential", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "potential_weight", "*", "potential_score", "+", "time_weight", "*", "time_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.37815587401459}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "proximity_weight", "=", "0.4", "# Weight for proximity to unvisited nodes", "recency_weight", "=", "0.2", "# Weight for the recency of visited connections", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "*", "(", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "# Proximity to unvisited nodes", "recency_penalty", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "previous", "]", "+", "1", ")", "for", "previous", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "previous", "not", "in", "unvisited_nodes", ")", "# Adjusted penalty based on distance to already visited nodes", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "proximity_weight", "*", "proximity_score", "-", "recency_weight", "*", "recency_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.41724333977419}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "urgency_factor", "=", "0.6", "# Factor to prioritize moving towards destination", "historical_cost_weight", "=", "0.4", "# Weight associated with historical data of costs", "if", "unvisited_nodes", ":", "historical_cost_matrix", "=", "{", "}", "# Store historical costs if needed", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "destination_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate urgency based on distance to the destination", "urgency_score", "=", "1", "/", "(", "destination_distance", "+", "1e-6", ")", "# Avoid division by zero", "# If historical cost exists, retrieve or initialize it", "historical_cost", "=", "historical_cost_matrix", ".", "get", "(", "(", "current_node", ",", "node", ")", ",", "direct_distance", ")", "# Combined score considering urgency and historical costs", "score", "=", "urgency_factor", "*", "urgency_score", "-", "historical_cost_weight", "*", "historical_cost", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 11.165205278168473}
{"code_tokens": ["import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Increased weight for direct distance", "cluster_weight", "=", "0.25", "# Weight for cluster potential savings", "detour_penalty_weight", "=", "0.1", "# Weight for detour penalties", "trend_weight", "=", "0.15", "# Weight for considering frequent nodes", "# Decay factor based on how many nodes are unvisited", "decay_factor", "=", "1", "/", "max", "(", "1", ",", "len", "(", "unvisited_nodes", ")", ")", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Trend data simulating which nodes have been visited more frequently", "visit_trend", "=", "{", "node", ":", "1", "for", "node", "in", "unvisited_nodes", "}", "# Initialize trend counts", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "adjusted_detour", "=", "max", "(", "0", ",", "direct_distance", "-", "total_distance_to_destination", ")", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "trend_factor", "=", "visit_trend", "[", "node", "]", "score", "=", "(", "direct_weight", "*", "(", "-", "direct_distance", "*", "decay_factor", ")", ")", "+", "(", "cluster_weight", "*", "cluster_average_distance", ")", "-", "(", "detour_penalty_weight", "*", "adjusted_detour", ")", "+", "(", "trend_weight", "*", "trend_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.964150143914685}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "accessibility_weight", "=", "0.7", "# Increased weight for accessibility", "distance_weight", "=", "0.3", "# Reduced weight for proximity", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_future_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "1", ")", "total_cost", "=", "direct_distance", "+", "total_distance_to_destination", "score", "=", "-", "total_cost", "+", "(", "average_future_distance", "*", "accessibility_weight", ")", "-", "(", "distance_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.609877258886519}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "average_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "-", "average_remaining_distance", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "0", "else", "1", ")", "total_cost", "=", "direct_distance", "+", "penalty", "if", "total_cost", "<", "min_cost", ":", "min_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.101442436613793}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_cost", "=", "float", "(", "'inf'", ")", "def", "calculate_path_cost", "(", "path", ",", "remaining_nodes", ")", ":", "if", "not", "remaining_nodes", ":", "return", "distance_matrix", "[", "path", "[", "-", "1", "]", "]", "[", "0", "]", "# Return to starting node", "return", "sum", "(", "distance_matrix", "[", "path", "[", "i", "]", "]", "[", "path", "[", "i", "+", "1", "]", "]", "for", "i", "in", "range", "(", "len", "(", "path", ")", "-", "1", ")", ")", "+", "sum", "(", "distance_matrix", "[", "path", "[", "-", "1", "]", "]", "[", "node", "]", "for", "node", "in", "remaining_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "path", "=", "[", "current_node", ",", "node", "]", "remaining_nodes", "=", "unvisited_nodes", "-", "{", "node", "}", "path_cost", "=", "calculate_path_cost", "(", "path", ",", "remaining_nodes", ")", "if", "path_cost", "<", "best_cost", ":", "best_cost", "=", "path_cost", "best_node", "=", "node", "return", "best_node"], "code_perf": 21.51502557645197}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "# Constants for weighting", "alpha", "=", "0.5", "# Weight for distance score", "beta", "=", "0.3", "# Weight for cluster potential score", "gamma", "=", "0.2", "# Weight for return distance penalty", "exploration_factor", "=", "0.1", "# Degree of randomness in scoring", "# Calculate total distances to the remaining nodes", "total_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Cluster potential score, weighted by closeness to remaining unvisited nodes", "cluster_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "+", "1", ")", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "# Combined score incorporating cluster potential and distance penalty, adjusted with exploration", "combined_score", "=", "(", "cluster_score", "*", "beta", "/", "total_distance_remaining", "-", "distance_to_destination", "*", "gamma", "-", "distance_to_next", "*", "alpha", ")", "combined_score", "+=", "random", ".", "uniform", "(", "-", "exploration_factor", ",", "exploration_factor", ")", "# Introducing randomness", "if", "combined_score", ">", "best_score", ":", "best_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.89660897176832}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "quadratic_penalty", "=", "sum", "(", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "**", "2", ")", "for", "other", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "connectivity_score", "=", "len", "(", "[", "other", "for", "other", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "direct_distance", "]", ")", "score", "=", "direct_distance", "+", "quadratic_penalty", "-", "connectivity_score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 34.814802926058604}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "future_cost_weight", "=", "0.6", "# Weight for future cost estimation", "distance_weight", "=", "0.4", "# Weight for direct distance cost", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "dynamic_penalty", "=", "0.7", "*", "(", "len", "(", "unvisited_nodes", ")", "**", "2", ")", "# Dynamic penalty for the number of remaining unvisited nodes", "total_future_cost", "=", "sum", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ")", "average_future_cost", "=", "total_future_cost", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cost", "=", "(", "distance_weight", "*", "direct_distance", ")", "+", "(", "future_cost_weight", "*", "average_future_cost", ")", "+", "dynamic_penalty", "if", "cost", "<", "min_cost", ":", "min_cost", "=", "cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_distance", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "# Weighted score combining direct distance, future distance, and connectivity", "score", "=", "direct_distance", "+", "(", "0.5", "*", "future_distance", ")", "+", "(", "0.3", "*", "(", "connectivity_score", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", ")", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.903903291747195}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_total_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "# Calculate the total cost if this node is visited next", "travel_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "return_cost", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "total_cost", "=", "travel_cost", "+", "return_cost", "if", "total_cost", "<", "best_total_cost", ":", "best_total_cost", "=", "total_cost", "best_node", "=", "node", "return", "best_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "cluster_density_factor", "=", "0.5", "# Weight for the cluster density influence", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate cumulative score based on distance and cluster density", "cluster_density", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "15", ")", "# Nodes close to the current node", "score", "=", "direct_distance", "+", "0.6", "*", "cluster_density_factor", "*", "cluster_density", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Calculate relative distances and clustering influence", "relative_distances", "=", "{", "}", "clustering_influence", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "# Calculate relative distance", "relative_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "relative_distances", "[", "node", "]", "=", "relative_distance", "# Calculate clustering influence based on the number of connections", "clustering_influence", "[", "node", "]", "=", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<=", "5", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "relative_distances", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "clustering_penalty", "=", "clustering_influence", "[", "node", "]", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "# Combined score calculation", "score", "=", "(", "0.4", "*", "direct_distance", ")", "+", "(", "0.4", "*", "(", "1", "/", "(", "1", "+", "distance_to_destination", ")", ")", ")", "-", "(", "0.2", "*", "clustering_penalty", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.603153416629608}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "decay_factor", "=", "0.5", "# Adjusts how much distant nodes influence the scoring", "if", "unvisited_nodes", ":", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "weighted_remaining_distance", "=", "total_remaining_distance", "*", "decay_factor", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "+", "weighted_remaining_distance", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.131614624962722}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_combined_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate connectivity score based on the number of connections to other unvisited nodes", "connectivity_score", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "float", "(", "'inf'", ")", ")", "# Combine connectivity and happiness in the scoring", "combined_score", "=", "(", "connectivity_score", "*", "2", ")", "/", "len", "(", "unvisited_nodes", ")", "-", "(", "distance_to_next", "+", "0.5", "*", "distance_to_destination", ")", "if", "combined_score", ">", "max_combined_score", ":", "max_combined_score", "=", "combined_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.6", "# Weight for proximity to destination", "efficiency_weight", "=", "0.4", "# Weight for travel efficiency", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Travel frequency multiplier (inverse of number of unvisited nodes)", "travel_efficiency", "=", "(", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "0", "else", "1", "attractiveness_score", "=", "(", "1", "/", "(", "direct_distance", "+", "1", ")", ")", "*", "travel_efficiency", "# Prevent division by zero", "score", "=", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "-", "(", "direct_distance", "*", "efficiency_weight", ")", "+", "(", "attractiveness_score", "*", "10", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.790883842346972}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "estimated_tour_length", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "immediate_neighbors", "=", "[", "node", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<", "2", "]", "# Neighbors within direct distance of 2", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "neighbor_bonus", "=", "1.5", "if", "node", "in", "immediate_neighbors", "else", "0", "score", "=", "direct_distance", "+", "estimated_tour_length", "-", "neighbor_bonus", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "unvisited_nodes", "=", "list", "(", "unvisited_nodes", ")", "def", "find_shortest_path", "(", "nodes", ")", ":", "if", "len", "(", "nodes", ")", "==", "1", ":", "return", "nodes", "[", "0", "]", ",", "0", "# Only one node, no distance to calculate", "mid", "=", "len", "(", "nodes", ")", "//", "2", "left_half", "=", "nodes", "[", ":", "mid", "]", "right_half", "=", "nodes", "[", "mid", ":", "]", "left_node", ",", "left_distance", "=", "find_shortest_path", "(", "left_half", ")", "right_node", ",", "right_distance", "=", "find_shortest_path", "(", "right_half", ")", "# Calculate distance to connect left and right", "distance_to_left", "=", "distance_matrix", "[", "current_node", "]", "[", "left_node", "]", "distance_to_right", "=", "distance_matrix", "[", "current_node", "]", "[", "right_node", "]", "optimal_node", "=", "left_node", "if", "distance_to_left", "<", "distance_to_right", "else", "right_node", "total_distance", "=", "left_distance", "+", "right_distance", "+", "min", "(", "distance_to_left", ",", "distance_to_right", ")", "return", "optimal_node", ",", "total_distance", "next_node", ",", "_", "=", "find_shortest_path", "(", "unvisited_nodes", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "visiting_factor", "=", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Rewards for visiting unvisited nodes", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_score", "=", "(", "direct_distance", "*", "visiting_factor", ")", "+", "(", "cumulative_distance", "/", "len", "(", "unvisited_nodes", ")", ")", "if", "heuristic_score", "<", "best_score", ":", "best_score", "=", "heuristic_score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight focused on direct distance", "penalty_weight", "=", "0.3", "# Weight for longer routes", "brevity_reward_weight", "=", "0.3", "# Reward for shorter subsequent routes", "total_distance_from_node", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "potential_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", ")", "brevity_reward", "=", "(", "total_distance_from_node", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", "-", "direct_distance", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "penalty_weight", "*", "potential_distance", "+", "brevity_reward_weight", "*", "brevity_reward", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.19144271620102}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "avg_cluster_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "num_unvisited", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connection_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "direct_distance", "*", "1.5", "+", "connection_to_destination", "/", "2", "-", "avg_cluster_distance", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.2671068114400965}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "weighted_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "weight", "=", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "# Weight based on remaining nodes and distance to destination", "weighted_scores", "[", "node", "]", "=", "distance_to_node", "*", "weight", "next_node", "=", "min", "(", "weighted_scores", ",", "key", "=", "weighted_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.699237951584123}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "heuristic_weight", "=", "0.4", "# Weight for heuristic estimation of remaining distances", "penalty_weight", "=", "0.2", "# Weight for penalty based on the distance traveled to date", "# Calculate the total distance traveled (assuming we need to track this)", "total_travel_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Heuristic: average distance from current node to remaining nodes", "heuristic_estimate", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Calculate the distance to the destination as a proximity factor", "destination_proximity", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "node", "in", "unvisited_nodes", "else", "0", "# Score calculation incorporating a penalty for total distance", "score", "=", "-", "direct_distance_weight", "*", "direct_distance", "+", "heuristic_weight", "*", "heuristic_estimate", "-", "penalty_weight", "*", "total_travel_distance", "+", "destination_proximity", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.826120688051933}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "historical_route_factor", "=", "0.4", "# Factor to reinforce shorter historical routes", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "accessibility_weight", "=", "0.3", "# Weight for accessibility to unvisited nodes", "heuristic_score_weight", "=", "0.3", "# Weight for heuristic ease of travel", "historical_distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "average_historical_distance", "=", "sum", "(", "historical_distances", ".", "values", "(", ")", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate accessibility score based on remaining unvisited nodes", "accessibility_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "+", "1e-6", ")", "for", "next", "in", "unvisited_nodes", ")", "# Avoid division by zero", "# Compute a heuristic score that factors in both distance and a simple reward for visiting closer nodes", "heuristic_score", "=", "max", "(", "0", ",", "1", "-", "(", "direct_distance", "/", "(", "average_historical_distance", "+", "1e-6", ")", ")", ")", "# Normalizing score", "# Combined score with reinforcement from historical routes", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "accessibility_weight", "*", "accessibility_score", "+", "historical_route_factor", "*", "heuristic_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 27.018897025089313}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the total distance penalty based on the connectivity of unvisited nodes", "connectivity_penalty", "=", "np", ".", "mean", "(", "[", "np", ".", "min", "(", "[", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", "if", "next_node", "!=", "node", "]", ",", "initial", "=", "np", ".", "inf", ")", "for", "node", "in", "unvisited_nodes", "]", ")", "# Calculate the closeness factor to the destination node", "closeness_factor", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "/", "(", "1", "+", "np", ".", "mean", "(", "[", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", ")", "# Compute scores for unvisited nodes using a combined score with dynamic weights", "node_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Incorporate a score based on direct distance, connectivity penalty, and closeness to destination", "score", "=", "(", "direct_distance", "*", "0.5", ")", "+", "(", "connectivity_penalty", "*", "0.3", ")", "-", "(", "closeness_factor", "*", "0.2", ")", "node_scores", "[", "node", "]", "=", "score", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "centrality_scores", "=", "{", "node", ":", "len", "(", "unvisited_nodes", ")", "-", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", ">", "0", ")", "for", "node", "in", "unvisited_nodes", "}", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "centrality_penalty", "=", "1", "/", "(", "centrality_scores", "[", "node", "]", "+", "1", ")", "# Encourage less connected nodes", "score", "=", "(", "distance", "*", "0.7", "+", "(", "centrality_penalty", "*", "0.3", ")", ")", "*", "random", ".", "uniform", "(", "0.9", ",", "1.1", ")", "# Balancing distance and centrality with randomness", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.183309240680478}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_weight", "=", "0.6", "# Weight for immediate travel cost", "clustering_weight", "=", "0.4", "# Weight for potential clustering effect", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Clustering factor based on distances to all unvisited nodes", "clustering_factor", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "# Modified score equation with clustering factor", "score", "=", "(", "-", "immediate_weight", "*", "direct_distance", ")", "+", "(", "clustering_weight", "*", "clustering_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.368214238744789}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "path_length", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "adaptive_weight_factor", "=", "1", "/", "(", "1", "+", "path_length", ")", "# Dynamic adaptation based on current path length", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "*", "adaptive_weight_factor", "# Increased weight for proximity", "potential_pathway_weight", "=", "0.3", "# Weight for promising future paths", "synergy_weight", "=", "0.2", "# Weight for synergistic routes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate potential future pathways based on unvisited connections", "potential_pathway_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Synergy score for nodes that connect efficiently with the destination", "synergy_score", "=", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "(", "direct_distance", "+", "1", ")", ")", "# Avoid division by zero", "# Combined score with adaptive distance weight", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "potential_pathway_weight", "*", "potential_pathway_score", "+", "synergy_weight", "*", "synergy_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.56858538735655}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "# Neighbor influence: add bonus for proximity to unvisited nodes", "neighbor_influence", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "0", ")", "# Adjusting score based on average distance and neighbor influence", "score", "=", "(", "avg_distance_to_unvisited", "-", "distance_to_next", ")", "+", "neighbor_influence", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.637900629114952}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "connectivity_scores", "=", "{", "node", ":", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "for", "node", "in", "unvisited_nodes", "}", "average_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "random_factor", "=", "random", ".", "uniform", "(", "0.1", ",", "0.5", ")", "# Increased random perturbation factor", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_bonus", "=", "connectivity_scores", "[", "node", "]", "*", "0.2", "# Bonus for more connections", "score", "=", "direct_distance", "-", "connectivity_bonus", "+", "random_factor", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "visit_counts", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "# Track how many times nodes have been considered", "for", "node", "in", "unvisited_nodes", ":", "# Calculate total distance to all other unvisited nodes", "total_distance_to_others", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "avg_distance_to_others", "=", "total_distance_to_others", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "visit_penalty", "=", "visit_counts", "[", "node", "]", "*", "0.5", "# Add a penalty based on visit frequency", "# Score calculation incorporating direct distance, distance to other nodes, and penalties", "score", "=", "direct_distance", "+", "0.4", "*", "avg_distance_to_others", "-", "0.3", "*", "distance_to_destination", "+", "visit_penalty", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "# Increment visit count for the next node", "if", "next_node", ":", "visit_counts", "[", "next_node", "]", "+=", "1", "return", "next_node"], "code_perf": 7.0792230513172445}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "candidates", "=", "list", "(", "unvisited_nodes", ")", "random", ".", "shuffle", "(", "candidates", ")", "scored_candidates", "=", "[", "]", "total_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "candidates", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Introducing a heuristic that considers the number of unvisited nodes", "heuristic_factor", "=", "total_unvisited", "/", "(", "total_unvisited", "+", "1e-5", ")", "# New scoring mechanism", "score", "=", "(", "1", "/", "(", "direct_distance", "+", "1e-5", ")", ")", "+", "(", "1", "/", "(", "distance_to_destination", "+", "1e-5", ")", ")", "*", "heuristic_factor", "scored_candidates", ".", "append", "(", "(", "node", ",", "score", ")", ")", "scored_candidates", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "return", "scored_candidates", "[", "0", "]", "[", "0", "]"], "code_perf": 7.572785716456387}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "cluster_density_threshold", "=", "5", "# Distance threshold for cluster density influence", "cluster_nodes", "=", "[", "node", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "<=", "cluster_density_threshold", "]", "density_factor", "=", "len", "(", "cluster_nodes", ")", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "# Normalize density influence", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "density_effect", "=", "density_factor", "*", "(", "1", "/", "(", "1", "+", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", ")", "# Favor closer cluster nodes", "score", "=", "direct_distance", "+", "0.5", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "0.5", "*", "density_effect", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.522879594586621}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm incorporates a scoring mechanism that balances distance to unvisited nodes with a decay factor based on the number of unvisited nodes, promoting exploration of closer nodes while considering overall proximity.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "1", "/", "(", "distance_to_next", "+", "1", ")", "# Closer nodes get higher scores", "# Weighted average distance to unvisited nodes with the count influencing the score", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "unvisited_count", "=", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "average_distance_to_unvisited", "=", "total_distance_to_unvisited", "/", "unvisited_count", "# Decay factor based on the number of unvisited nodes", "decay_factor", "=", "1", "/", "(", "unvisited_count", "**", "1.5", ")", "score", "=", "proximity_score", "*", "decay_factor", "-", "average_distance_to_unvisited", "# Combined scoring", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 30.86406535032461}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_total_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "future_cost_weight", "=", "0.7", "# Weight for future route cost", "current_cost_weight", "=", "0.3", "# Weight for current distance cost", "for", "node", "in", "unvisited_nodes", ":", "current_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "potential_future_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "decay_factor", "=", "(", "1", "/", "(", "1", "+", "current_distance", ")", ")", "# Decay for distance covered", "total_cost", "=", "(", "current_cost_weight", "*", "current_distance", ")", "+", "(", "future_cost_weight", "*", "potential_future_cost", "*", "decay_factor", ")", "if", "total_cost", "<", "min_total_cost", ":", "min_total_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 15.954709801947196}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "exploration_factor", "=", "0.4", "# Factor to encourage exploring lesser-ranked nodes", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity to the current node", "average_distance_weight", "=", "0.3", "# Weight for average distance to unvisited nodes", "destination_proximity_weight", "=", "0.2", "# Weight for proximity to the destination", "# Calculate weighted average distance to unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "weighted_average_distance", "=", "total_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Score based on proximity to current node", "proximity_score", "=", "-", "direct_distance", "# Score based on the weighted average distance to unvisited nodes", "average_distance_score", "=", "-", "weighted_average_distance", "# Score for proximity to the destination", "destination_proximity_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score with exploration encouragement for less favorable nodes", "score", "=", "proximity_weight", "*", "proximity_score", "+", "average_distance_weight", "*", "average_distance_score", "+", "destination_proximity_weight", "*", "destination_proximity_score", "+", "exploration_factor", "*", "(", "1", "/", "(", "1", "+", "direct_distance", ")", ")", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.65125879518631}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "def", "distance_weight", "(", "node", ")", ":", "# Weight based on distance to current node", "return", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "def", "decay_factor", "(", ")", ":", "# Decay factor based on the number of unvisited nodes", "return", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "scores", "=", "{", "}", "decay", "=", "decay_factor", "(", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_weight", "(", "node", ")", "score", "=", "distance", "*", "decay", "# Combine distance with decay factor", "scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "adaptive_weight_factor", "=", "1.5", "# Factor to adjust scoring based on node centrality", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "centrality_weight", "=", "0.4", "# Weight for importance of the node's centrality", "closure_weight", "=", "0.2", "# Weight for potential loop closure", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Centrality score based on the average distance from this node to all remaining unvisited nodes", "centrality_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Estimate closure score based on distance to the destination", "closure_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "centrality_weight", "*", "(", "1", "/", "(", "centrality_score", "+", "1", ")", ")", "+", "closure_weight", "*", "closure_score", "# Adjust score based on node centrality", "score", "*=", "(", "1", "+", "adaptive_weight_factor", "*", "(", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.844949667116546}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to destination", "overhead_penalty_weight", "=", "0.3", "# Penalty for already visited nodes", "shortest_connection_weight", "=", "0.3", "# Weight for the potential connection to unvisited nodes", "# Calculate the shortest connections to unvisited nodes", "shortest_connection", "=", "min", "(", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", ",", "default", "=", "0", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate overhead penalty based on the proximity to already visited nodes", "overhead_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "prev_node", "]", "for", "prev_node", "in", "unvisited_nodes", "if", "prev_node", "!=", "node", ")", "*", "overhead_penalty_weight", "score", "=", "(", "proximity_weight", "*", "distance_to_destination", "-", "overhead_penalty", "-", "(", "direct_distance", "*", "shortest_connection_weight", ")", "-", "direct_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 12.058585763530708}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "connectivity_score", "*", "0.4", ")", "-", "(", "distance_to_next", "*", "0.6", ")", "-", "(", "distance_to_destination", "*", "0.2", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 15.618442921349374}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "candidates", "=", "list", "(", "unvisited_nodes", ")", "scored_candidates", "=", "[", "]", "# Calculate average distance to remaining unvisited nodes", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "candidates", ")", "/", "len", "(", "candidates", ")", "for", "node", "in", "candidates", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "nearest_unvisited_distance", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "float", "(", "'inf'", ")", "connectivity_bonus", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "*", "0.3", "# Increased bonus for connected nodes", "dynamic_penalty", "=", "(", "nearest_unvisited_distance", "-", "direct_distance", ")", "*", "0.5", "if", "nearest_unvisited_distance", ">", "direct_distance", "else", "0", "# Distance-based penalty", "score", "=", "direct_distance", "+", "average_distance", "-", "connectivity_bonus", "+", "dynamic_penalty", "scored_candidates", ".", "append", "(", "(", "node", ",", "score", ")", ")", "scored_candidates", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "return", "scored_candidates", "[", "0", "]", "[", "0", "]"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance to unvisited nodes", "attractiveness_weight", "=", "0.4", "# Weight for attractiveness to destination", "distance_penalty_weight", "=", "0.2", "# Weight for penalizing longer distances", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "longest_distance_to_unvisited", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "score", "=", "(", "average_distance_to_unvisited", "*", "direct_weight", ")", "+", "(", "distance_to_destination", "*", "attractiveness_weight", ")", "-", "(", "direct_distance", "*", "distance_penalty_weight", ")", "-", "longest_distance_to_unvisited", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.486498381840942}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "proximity_weight", "=", "0.3", "# Weight for relative proximity influence", "unvisited_count_weight", "=", "0.3", "# Weight for favoring unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate proximity influence", "proximity_influence", "=", "sum", "(", "1", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "other_node", "]", ")", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "proximity_weight", "*", "proximity_influence", ")", "# Scale score based on distance to the destination", "if", "direct_distance", "<", "total_distance_to_destination", ":", "score", "+=", "(", "total_distance_to_destination", "-", "direct_distance", ")", "*", "0.1", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.216284543780638}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_total_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "influence_factor", "=", "0.4", "# Weight for collective connectivity consideration", "distance_weight", "=", "0.6", "# Weight for distance cost", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "collective_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average distance from the node to all other unvisited nodes", "synergy_score", "=", "influence_factor", "*", "collective_distance", "total_cost", "=", "distance_weight", "*", "direct_distance", "+", "synergy_score", "if", "total_cost", "<", "min_total_cost", ":", "min_total_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.857602299783965}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_factor", "=", "0.6", "# Influence of distance to the next node", "penalty_factor", "=", "0.4", "# Penalty for distant nodes", "neighbor_factor", "=", "0.2", "# Bonus for neighbor influence", "neighbor_counts", "=", "[", "0", "]", "*", "len", "(", "distance_matrix", ")", "# Count the number of times neighboring nodes are in unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", ":", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ":", "neighbor_counts", "[", "node", "]", "+=", "1", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Penalty for selecting distant nodes (larger distances)", "distance_penalty", "=", "max", "(", "0", ",", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "-", "direct_distance", ")", "# Score calculation", "score", "=", "(", "-", "distance_factor", "*", "direct_distance", ")", "+", "(", "penalty_factor", "*", "distance_penalty", ")", "+", "(", "neighbor_factor", "*", "neighbor_counts", "[", "node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.5", "# Weight for direct distance to the destination", "average_distance_weight", "=", "0.2", "# Weight for average distance to unvisited nodes", "neighbor_bonus_weight", "=", "0.3", "# Bonus for being a neighbor to fewer unvisited nodes", "# Calculate the average distance to unvisited nodes", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Calculate the neighbor count for the current node", "neighbor_count", "=", "sum", "(", "1", "for", "next_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "<", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "# Scoring based on distance to destination, average distance to unvisited nodes, and neighbor count", "score", "=", "-", "direct_distance_weight", "*", "direct_distance_to_destination", "-", "average_distance_weight", "*", "avg_distance_to_unvisited", "+", "neighbor_bonus_weight", "*", "(", "1", "/", "(", "neighbor_count", "+", "1", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 13.701731137974225}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "max_distance_weight", "=", "0.6", "# Weight for minimizing max distance to unvisited nodes", "distance_penalty_weight", "=", "0.4", "# Weight for penalizing distance from destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "max_distance_to_unvisited", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "score", "=", "(", "max_distance_to_unvisited", "*", "max_distance_weight", ")", "+", "(", "distance_to_destination", "*", "distance_penalty_weight", ")", "+", "direct_distance", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.277904233105449}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "total_costs", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "# Total costs to unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "# Total distance to all other unvisited nodes", "random_factor", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "# Randomness factor for exploration", "# Scoring mechanism", "score", "=", "direct_distance", "+", "total_distance_to_remaining", "-", "random_factor", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 21.876353807810325}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm employs a combination of both the nearest neighbor heuristic and a penalty for longer travel, enhancing the decision-making by factoring in the proximity to the destination node.}", "next_node", "=", "None", "min_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Introduce a penalty for longer distances", "score", "=", "distance_to_next", "+", "(", "0.5", "*", "distance_to_destination", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "connectivity_scores", "=", "{", "node", ":", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", "}", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "visit_penalty", "=", "1", "/", "(", "1", "+", "(", "len", "(", "unvisited_nodes", ")", "-", "len", "(", "unvisited_nodes", ")", "//", "2", ")", ")", "# Penalize based on visits", "score", "=", "(", "distance", "*", "visit_penalty", ")", "-", "(", "connectivity_scores", "[", "node", "]", "*", "0.5", ")", "+", "random", ".", "uniform", "(", "0.85", ",", "1.15", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 26.04202206317254}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate the average distance to unvisited nodes", "total_distance", "=", "0", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "total_distance", "+=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance", "=", "total_distance", "/", "unvisited_count", "if", "unvisited_count", ">", "0", "else", "float", "(", "'inf'", ")", "# Find the best node based on distance and average heuristic", "min_score", "=", "float", "(", "'inf'", ")", "next_nodes", "=", "[", "]", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "distance", "+", "(", "average_distance", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "+", "1", ")", ")", "# Penalty based on average", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_nodes", "=", "[", "node", "]", "elif", "score", "==", "min_score", ":", "next_nodes", ".", "append", "(", "node", ")", "# Introduce random selection among the closest nodes for exploration", "if", "next_nodes", ":", "return", "random", ".", "choice", "(", "next_nodes", ")", "return", "None"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "inverse_distance", "=", "1", "/", "(", "distance_to_node", "+", "1e-9", ")", "# Avoid division by zero", "penalty_factor", "=", "len", "(", "[", "n", "for", "n", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "n", "not", "in", "unvisited_nodes", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", ">", "0", "]", ")", "score", "=", "inverse_distance", "*", "(", "1", "+", "penalty_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity to destination", "clustering_weight", "=", "0.3", "# Weight for clustering savings", "cumulative_distance_weight", "=", "0.2", "# Weight for cumulative distance traveled", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "prev_node", "]", "for", "prev_node", "in", "unvisited_nodes", "if", "prev_node", "!=", "current_node", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_distance_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "cluster_average_distance", "=", "cluster_distance_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "(", "cluster_average_distance", "*", "clustering_weight", ")", "-", "(", "cumulative_distance", "*", "cumulative_distance_weight", ")", "-", "direct_distance", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.284576143905293}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.3", "# Weight for direct distance", "density_weight", "=", "0.5", "# Weight for density of unvisited nodes", "future_cost_weight", "=", "0.2", "# Weight for potential future cost", "current_path_cost_weight", "=", "0.1", "# Weight for current path cost", "# Function to calculate node density score based on unvisited neighbors", "def", "calculate_density_score", "(", "node", ")", ":", "neighbors", "=", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "10", ")", "# Example threshold", "return", "neighbors", "# Function to calculate the current path cost", "def", "calculate_current_path_cost", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "# Function to estimate future cost based on unvisited nodes", "def", "calculate_future_cost", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "density_score", "=", "calculate_density_score", "(", "node", ")", "current_path_cost", "=", "calculate_current_path_cost", "(", "node", ")", "future_cost", "=", "calculate_future_cost", "(", "node", ")", "# Combined scoring mechanism", "score", "=", "(", "-", "direct_distance_weight", "*", "direct_distance", "+", "density_weight", "*", "density_score", "+", "future_cost_weight", "*", "future_cost", "-", "current_path_cost_weight", "*", "current_path_cost", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.35828255629592}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Distance threshold to form clusters", "distance_threshold", "=", "10", "clusters", "=", "[", "]", "visited", "=", "set", "(", ")", "# Create clusters based on proximity", "for", "node", "in", "unvisited_nodes", ":", "if", "node", "not", "in", "visited", ":", "cluster", "=", "[", "node", "]", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "distance_threshold", ":", "cluster", ".", "append", "(", "other", ")", "visited", ".", "add", "(", "other", ")", "clusters", ".", "append", "(", "cluster", ")", "# Calculate the nearest cluster to the current node", "nearest_cluster", "=", "min", "(", "clusters", ",", "key", "=", "lambda", "c", ":", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "n", "]", "for", "n", "in", "c", ")", ")", "# Explore within the nearest cluster", "next_node", "=", "min", "(", "nearest_cluster", ",", "key", "=", "lambda", "n", ":", "distance_matrix", "[", "current_node", "]", "[", "n", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate average distance to all unvisited nodes", "avg_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "node", "in", "unvisited_nodes", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Weighted proximity factor", "proximity_weight", "=", "0.5", "close_nodes", "=", "[", "node", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "<", "10", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_effect", "=", "(", "len", "(", "close_nodes", ")", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", ")", "if", "close_nodes", "else", "0", "# Score incorporates direct distance, average distance to remaining nodes, and proximity effect", "score", "=", "direct_distance", "+", "avg_distance_to_remaining", "+", "proximity_weight", "*", "proximity_effect", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "weighted_choice", "=", "[", "]", "# Calculate weights and penalties", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "1", "/", "(", "distance", "if", "distance", "!=", "0", "else", "1", ")", "# Avoid division by zero", "weight", "=", "penalty", "*", "(", "1", "+", "random", ".", "uniform", "(", "0", ",", "1", ")", ")", "# Introduce randomness", "weighted_choice", ".", "append", "(", "(", "node", ",", "weight", ")", ")", "# Normalize weights", "total_weight", "=", "sum", "(", "weight", "for", "node", ",", "weight", "in", "weighted_choice", ")", "if", "total_weight", "==", "0", ":", "return", "None", "probabilities", "=", "[", "(", "node", ",", "weight", "/", "total_weight", ")", "for", "node", ",", "weight", "in", "weighted_choice", "]", "# Select the next node based on the calculated probabilities", "next_node", "=", "random", ".", "choices", "(", "[", "node", "for", "node", ",", "_", "in", "probabilities", "]", ",", "weights", "=", "[", "weight", "for", "_", ",", "weight", "in", "probabilities", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 19.540445338753898}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance", "penalty_weight", "=", "0.5", "# Weight for penalizing longer distances", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_distance_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "(", "direct_distance", ")", "+", "(", "total_distance_to_destination", "*", "penalty_weight", ")", "-", "(", "future_distance_penalty", "*", "penalty_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.526271790227707}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "cluster_weight", "=", "0.3", "# Weight for attractiveness of node clusters", "time_weight", "=", "0.2", "# Weight for recency of visiting nodes", "# Calculate center of remaining unvisited nodes for cluster scoring", "cluster_center", "=", "[", "0", "]", "*", "len", "(", "distance_matrix", ")", "for", "node", "in", "unvisited_nodes", ":", "for", "i", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", ":", "cluster_center", "[", "i", "]", "+=", "distance_matrix", "[", "node", "]", "[", "i", "]", "cluster_center", "=", "[", "x", "/", "len", "(", "unvisited_nodes", ")", "for", "x", "in", "cluster_center", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Cluster score based on proximity to the center of unvisited nodes", "cluster_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "for", "unvisited", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Time-based penalty for nodes recently visited", "time_penalty", "=", "sum", "(", "(", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "prev", "]", "+", "1", ")", ")", "for", "prev", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "prev", "not", "in", "unvisited_nodes", ")", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "cluster_weight", "*", "cluster_score", "-", "time_weight", "*", "time_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.349781351250228}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "# Calculate the distance to the destination for each unvisited node", "destination_distances", "=", "{", "node", ":", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "destination_distances", "[", "node", "]", "# Calculate an adjusted score based on the direct distance and a weight for proximity to destination", "score", "=", "direct_distance", "+", "(", "0.5", "*", "distance_to_destination", ")", "-", "(", "0.1", "*", "(", "unvisited_count", "-", "1", ")", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "# Calculate total connections for unvisited nodes", "connections", "=", "{", "node", ":", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "direct_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Neighborhood score based on connectivity", "neighborhood_score", "=", "connections", "[", "node", "]", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Normalize by total unvisited", "# Proximity score inversely related to distance", "proximity_score", "=", "1", "/", "(", "direct_distance_to_destination", "+", "1", ")", "# New score combining both neighborhood and proximity scores", "score", "=", "proximity_score", "*", "neighborhood_score", "/", "(", "1", "+", "distance_to_next", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.862738108318953}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "total_weight", "=", "0", "weights", "=", "{", "}", "# Calculate weights based on the inverse of distances", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "weight", "=", "1", "/", "(", "distance", "+", "1", ")", "# Avoid division by zero", "weights", "[", "node", "]", "=", "weight", "total_weight", "+=", "weight", "# Normalize weights to probabilities", "probabilities", "=", "{", "node", ":", "weight", "/", "total_weight", "for", "node", ",", "weight", "in", "weights", ".", "items", "(", ")", "}", "# Randomly select the next node based on weighted probabilities", "next_node", "=", "random", ".", "choices", "(", "list", "(", "probabilities", ".", "keys", "(", ")", ")", ",", "weights", "=", "list", "(", "probabilities", ".", "values", "(", ")", ")", ")", "[", "0", "]", "return", "next_node"], "code_perf": 24.367675430963672}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "decay_factor", "=", "0.9", "# Factor to give higher priority to nearer nodes", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "future_potential_weight", "=", "0.3", "# Weight for the potential future score", "density_weight", "=", "0.2", "# Weight for the density of clusters", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_potential_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "# Average other nodes", "# Closeness score considering the decay factor", "closeness_score", "=", "decay_factor", "**", "direct_distance", "# Dynamic cluster density based on remaining unvisited nodes' proximity", "density_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "+", "1", ")", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Inverse of distance", "# Combining scores with weights", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "future_potential_weight", "*", "future_potential_score", "+", "density_weight", "*", "density_score", "*", "closeness_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.529765953996841}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "exploration_weight", "=", "0.3", "# Weight to promote exploration", "distance_weight", "=", "0.7", "# Weight for direct distance cost", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_sum", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "heuristic_average", "=", "heuristic_sum", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "distance_weight", "*", "direct_distance", ")", "+", "(", "exploration_weight", "*", "heuristic_average", ")", "-", "total_distance_to_destination", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 35.82287626907618}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Reduced weight for direct distance to encourage exploration", "connectivity_weight", "=", "0.4", "# Increased emphasis on connectivity to unvisited nodes", "future_benefit_weight", "=", "0.2", "# Weight for potential future benefit based on remaining distances", "average_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average connectivity", "future_benefit_score", "=", "(", "average_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "average_distance_to_destination", ">", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "else", "0", "# Positive future gain", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "future_benefit_weight", "*", "future_benefit_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.605209837079135}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "cost", "=", "distance_to_node", "+", "0.5", "*", "distance_to_destination", "# Introduce a weighting factor", "if", "cost", "<", "min_cost", ":", "min_cost", "=", "cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.460598815061458}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_remaining_distance", "=", "total_remaining_distance", "/", "len", "(", "unvisited_nodes", ")", "visited_nodes_count", "=", "len", "(", "distance_matrix", ")", "-", "len", "(", "unvisited_nodes", ")", "influence_factor", "=", "1", "/", "(", "1", "+", "visited_nodes_count", ")", "# Diminishes impact of visited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_influence", "=", "influence_factor", "*", "(", "avg_remaining_distance", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "score", "=", "direct_distance", "+", "heuristic_influence", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.8265551571455525}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "diversity_penalty_factor", "=", "0.5", "# Penalty for choosing nodes that lead to less diversity", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "average_closeness_weight", "=", "0.4", "# Weight for average closeness to the destination", "probabilistic_diversity_weight", "=", "0.2", "# Weight for encouraging diversity in paths", "total_distance_from_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "average_closeness_to_destination", "=", "total_distance_from_destination", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Combined score incorporating diversity and average closeness to the destination", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "average_closeness_weight", "*", "(", "average_closeness_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "score", "+=", "probabilistic_diversity_weight", "*", "(", "1", "/", "(", "random", ".", "uniform", "(", "0.1", ",", "1", ")", "+", "diversity_penalty_factor", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.826212163516411}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "dynamic_penalty", "=", "(", "len", "(", "unvisited_nodes", ")", "**", "1.5", ")", "*", "0.2", "# Increasing penalty for remaining unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_unvisited", "=", "total_distance_to_unvisited", "/", "len", "(", "unvisited_nodes", ")", "score", "=", "direct_distance", "+", "average_distance_to_unvisited", "+", "dynamic_penalty", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Clustering unvisited nodes based on distance", "clusters", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_from_current", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_key", "=", "int", "(", "distance_from_current", "//", "1", ")", "# Use distance as a basic cluster key", "if", "cluster_key", "not", "in", "clusters", ":", "clusters", "[", "cluster_key", "]", "=", "[", "]", "clusters", "[", "cluster_key", "]", ".", "append", "(", "node", ")", "# Finding the centroid of the closest cluster", "closest_node", "=", "None", "lowest_avg_distance", "=", "float", "(", "'inf'", ")", "for", "cluster", "in", "clusters", ".", "values", "(", ")", ":", "avg_distance", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "cluster", "]", ")", "if", "avg_distance", "<", "lowest_avg_distance", ":", "lowest_avg_distance", "=", "avg_distance", "closest_node", "=", "cluster", "[", "np", ".", "argmin", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "cluster", "]", ")", "]", "return", "closest_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "geometric_mean_distance", "=", "(", "distance_to_next", "*", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "**", "(", "1", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", ")", ")", "**", "(", "1", "/", "2", ")", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "*", "geometric_mean_distance", "-", "distance_to_next", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.70211988419468}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "potential_nodes", "=", "[", "]", "total_risk", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "risk_factor", "=", "(", "total_risk", "-", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "score", "=", "direct_distance", "+", "risk_factor", "potential_nodes", ".", "append", "(", "(", "node", ",", "score", ")", ")", "# Select the node with the least score (distance + risk factor)", "next_node", "=", "min", "(", "potential_nodes", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 7.031727768795343}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate the distance to the destination from the current node", "distances_to_destination", "=", "{", "node", ":", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Introduce a dynamic penalty factor for previously visited nodes", "visited_penalty", "=", "1.5", "# Penalty factor to discourage revisiting nodes", "current_distances", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "# Calculate average distance to unvisited nodes", "average_distance", "=", "sum", "(", "current_distances", ")", "/", "len", "(", "current_distances", ")", "# Calculate scores for each unvisited node", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "desirability_score", "=", "1", "/", "(", "distances_to_destination", "[", "node", "]", "+", "1", ")", "# Adjust score based on the average distance and apply penalty", "penalty_score", "=", "visited_penalty", "*", "(", "distance_to_node", "<", "average_distance", ")", "scores", "[", "node", "]", "=", "(", "distance_to_node", "+", "penalty_score", ")", "-", "desirability_score", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 29.476417050792655}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for distance", "connectivity_weight", "=", "0.4", "# Weight for unvisited connections", "future_travel_weight", "=", "0.2", "# Weight for future travel potential", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", ")", "# Count of unvisited connections", "future_travel_score", "=", "sum", "(", "1", "for", "next", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "next", "not", "in", "unvisited_nodes", "and", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", ")", "# Future travel potential", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "future_travel_weight", "*", "future_travel_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "base_distance_weight", "=", "0.4", "# Base emphasis on direct distance", "cluster_weight", "=", "0.4", "# Weight for proximity to clusters of unvisited nodes", "heuristic_weight", "=", "0.2", "# Weight for overall spatial positioning of unvisited nodes", "# Calculate dynamic penalty for distance to penalize longer routes", "def", "calculate_distance_penalty", "(", "distance", ")", ":", "return", "1.0", "/", "(", "1.0", "+", "distance", ")", "# Higher distance gives lower score", "# Calculate cluster score for unvisited nodes", "def", "calculate_cluster_score", "(", "node", ")", ":", "cluster_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "cluster_score", "+=", "distance_matrix", "[", "node", "]", "[", "other", "]", "return", "cluster_score", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_score", "=", "calculate_cluster_score", "(", "node", ")", "heuristic_score", "=", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "distance_penalty", "=", "calculate_distance_penalty", "(", "direct_distance", ")", "# Combined scoring mechanism", "score", "=", "base_distance_weight", "*", "distance_penalty", "+", "cluster_weight", "*", "cluster_score", "+", "heuristic_weight", "*", "heuristic_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.695259201919651}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "time_factor", "=", "0.3", "# Weight for time-based consideration", "proximity_factor", "=", "0.3", "# Weight for consideration of proximity to visited nodes", "distance_weight", "=", "0.5", "# Weight for direct distance", "# Calculate average distance to all unvisited nodes", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Estimate score based on distance and average distance", "adjusted_distance_score", "=", "(", "average_distance", "-", "direct_distance", ")", "*", "distance_weight", "# Heuristic for the nearest unvisited node", "nearest_neighbor_score", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "# Combined score incorporating a time-based factor and proximity to visited nodes", "score", "=", "adjusted_distance_score", "+", "time_factor", "*", "nearest_neighbor_score", "+", "proximity_factor", "*", "(", "1", "/", "(", "direct_distance", "+", "1", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "connectivity_factor", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "for", "node", "in", "unvisited_nodes", "for", "neighbor", "in", "unvisited_nodes", "if", "neighbor", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "or", "1", ")", "# Average connectivity score", "immediate_weight", "=", "0.4", "# Weight for immediate travel cost", "future_benefit_weight", "=", "0.4", "# Weight for future potential", "novelty_weight", "=", "0.2", "# Influence of node saturation", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_average_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "# Average distance to remaining nodes", "saturation_score", "=", "novelty_weight", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "direct_distance", "]", ")", ")", "# Measure of novelty based on saturation", "score", "=", "(", "-", "immediate_weight", "*", "direct_distance", ")", "+", "(", "future_benefit_weight", "*", "future_average_distance", ")", "+", "saturation_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.498637407355454}
{"code_tokens": ["# {This algorithm introduces a weighted factor based on the degree of connectivity of unvisited nodes, allowing better selection of the next node by considering local distance, connectivity, and proximity to the destination.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "connectivity_score", "-", "distance_to_next", "-", "distance_to_destination", ")", "# Balance between connectivity and distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.328751305099974}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "+", "0.5", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.450370583313572}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "average_distance_to_unvisited", "-", "distance_to_next", ")", "-", "(", "0.5", "*", "distance_to_destination", ")", "# Incorporate penalty for distance to destination", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.791674262630402}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "future_influence_factor", "=", "0.3", "# Factor to prioritize nodes with beneficial future impact", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "route_efficiency_weight", "=", "0.3", "# Weight for route efficiency from current to future nodes", "alignment_weight", "=", "0.2", "# Weight for alignment towards final destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate future route efficiency based on unvisited connections", "future_route_score", "=", "sum", "(", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "next", "]", "if", "distance_matrix", "[", "current_node", "]", "[", "next", "]", "else", "1", ")", ")", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Estimate score for alignment towards the final destination", "destination_alignment_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "(", "direct_distance", "if", "direct_distance", "else", "1", ")", "# Combined score with future influence consideration", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "route_efficiency_weight", "*", "future_route_score", "+", "alignment_weight", "*", "destination_alignment_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.589630279763995}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance to unvisited nodes", "attractiveness_weight", "=", "0.4", "# Weight for attractiveness to destination", "distribution_penalty_weight", "=", "0.2", "# Weight for geometric distribution penalty", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculating the geometric distribution heuristic", "geometric_distribution_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "distance_to_destination", "*", "attractiveness_weight", ")", "-", "(", "direct_distance", "*", "direct_weight", ")", "-", "(", "geometric_distribution_penalty", "*", "distribution_penalty_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.820268957266613}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Heuristic encouraging nodes closer to the destination", "heuristic_influence", "=", "1", "/", "(", "distance_to_destination", "+", "1", ")", "# Dynamic penalty for longer distances", "penalty", "=", "(", "distance_to_next", "**", "2", ")", "*", "0.1", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Score combines proximity to destination and penalty", "score", "=", "heuristic_influence", "-", "penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 11.628306531065363}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "total_distance_from_current", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "penalty_factor", "=", "total_distance_to_remaining", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_penalty", "=", "penalty_factor", "+", "(", "total_distance_from_current", "-", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "score", "=", "direct_distance", "+", "heuristic_penalty", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 26.684993851487985}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_penalty", "=", "float", "(", "'inf'", ")", "max_penalty_factor", "=", "0.3", "+", "(", "0.7", "*", "len", "(", "unvisited_nodes", ")", "/", "len", "(", "distance_matrix", ")", ")", "if", "unvisited_nodes", "else", "0.3", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "tour_penalty", "=", "(", "total_distance_to_unvisited", "*", "max_penalty_factor", ")", "+", "distance_to_next", "# Introducing a random factor to add variability", "random_factor", "=", "random", ".", "uniform", "(", "0.8", ",", "1.2", ")", "# Random multiplier between 0.8 and 1.2", "effective_penalty", "=", "tour_penalty", "*", "random_factor", "if", "effective_penalty", "<", "min_penalty", ":", "min_penalty", "=", "effective_penalty", "next_node", "=", "node", "return", "next_node"], "code_perf": 20.533406664314203}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "2", "*", "distance_to_next", ")", "# Encourage nodes with more neighbors", "score", "=", "(", "connectivity_score", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", ")", "-", "distance_to_next", "# Balance between connectivity and distance", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 23.76803294874903}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Select the closest unvisited node", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "unvisited_penalty", "=", "0.4", "# Penalty for distance to unvisited nodes", "clustering_bonus", "=", "0.2", "# Bonus for selecting a node that makes a good cluster", "destination_weight", "=", "0.2", "# Weight based on distance to the destination", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "potential_benefit", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "unvisited_distance_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "clustering_bonus", "*", "potential_benefit", ")", "-", "(", "unvisited_penalty", "*", "unvisited_distance_penalty", ")", "+", "(", "destination_weight", "*", "total_distance_to_destination", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.526271790227707}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight focused on direct distance", "connectivity_weight", "=", "0.3", "# Weight for connectivity to unvisited nodes", "penalty_weight", "=", "0.2", "# Weight for penalty on selection of distant nodes", "bonus_weight", "=", "0.1", "# Weight for forming clusters of visited nodes", "total_distance_from_node", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average connectivity", "penalty_score", "=", "-", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Penalty for long distance choices", "visited_cluster_bonus", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "visited", "]", "for", "visited", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "visited", "not", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "distance_matrix", ")", "-", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Bonus for clustering", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "penalty_weight", "*", "penalty_score", "+", "bonus_weight", "*", "visited_cluster_bonus", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.530575513417512}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "node_scores", "=", "[", "]", "# Calculate scores based on distance and connectivity", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_penalty", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "1", "+", "sum", "(", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "for", "neighbor", "in", "unvisited_nodes", "if", "neighbor", "!=", "node", ")", ")", "score", "=", "(", "1", "/", "distance", ")", "*", "connectivity_penalty", "# Higher score for closer, well-connected nodes", "node_scores", ".", "append", "(", "(", "node", ",", "score", ")", ")", "# Normalize scores", "total_score", "=", "sum", "(", "score", "for", "_", ",", "score", "in", "node_scores", ")", "probabilities", "=", "[", "score", "/", "total_score", "for", "_", ",", "score", "in", "node_scores", "]", "# Select next node randomly based on calculated probabilities", "if", "node_scores", ":", "next_node", "=", "random", ".", "choices", "(", "[", "node", "for", "node", ",", "_", "in", "node_scores", "]", ",", "probabilities", ")", "[", "0", "]", "return", "next_node", "return", "None"], "code_perf": 19.540687562120006}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "clusters", "=", "{", "}", "threshold", "=", "5", "# Distance threshold for clustering", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "distance", "not", "in", "clusters", ":", "clusters", "[", "distance", "]", "=", "[", "]", "clusters", "[", "distance", "]", ".", "append", "(", "node", ")", "# Identify the closest cluster", "closest_cluster_distance", "=", "min", "(", "clusters", ".", "keys", "(", ")", ")", "closest_cluster", "=", "clusters", "[", "closest_cluster_distance", "]", "# Select the nearest node within that cluster", "next_node", "=", "min", "(", "closest_cluster", ",", "key", "=", "lambda", "x", ":", "distance_matrix", "[", "current_node", "]", "[", "x", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "nearest_node", "=", "None", "nearest_distance", "=", "float", "(", "'inf'", ")", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "1", "/", "(", "direct_distance", "+", "1", ")", "+", "(", "average_distance", "-", "direct_distance", ")", "/", "average_distance", "# Encouraging proximity but incorporating distance variability", "scores", "[", "node", "]", "=", "score", "if", "direct_distance", "<", "nearest_distance", ":", "nearest_distance", "=", "direct_distance", "nearest_node", "=", "node", "# Introducing randomness based on scores", "if", "random", ".", "random", "(", ")", "<", "0.3", ":", "# 30% chance to select a randomly chosen node based on scores", "next_node", "=", "random", ".", "choices", "(", "list", "(", "scores", ".", "keys", "(", ")", ")", ",", "weights", "=", "scores", ".", "values", "(", ")", ",", "k", "=", "1", ")", "[", "0", "]", "else", ":", "next_node", "=", "nearest_node", "return", "next_node"], "code_perf": 10.598701316949976}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Heuristic score calculation", "heuristic_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combine distance to the node and distance to destination with a random factor", "score", "=", "distance_to_node", "+", "(", "0.5", "*", "distance_to_destination", ")", "*", "(", "1", "+", "random", ".", "uniform", "(", "-", "0.1", ",", "0.1", ")", ")", "heuristic_scores", "[", "node", "]", "=", "score", "# Select the node with the lowest heuristic score", "next_node", "=", "min", "(", "heuristic_scores", ",", "key", "=", "heuristic_scores", ".", "get", ")", "return", "next_node"], "code_perf": 7.512867330324842}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate the average distance to the destination for unvisited nodes", "total_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", "# Introducing a centrality factor based on connectivity", "connectivity_factor", "=", "sum", "(", "1", "for", "node", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "# Novel scoring mechanism combining direct distance, proximity to destination, and connectivity", "heuristic_score", "=", "0.5", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "0.5", "*", "connectivity_score", "score", "=", "direct_distance", "+", "heuristic_score", "-", "(", "0.5", "*", "connectivity_factor", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.450370583313572}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "import", "math", "def", "calculate_connectivity_score", "(", "node", ",", "unvisited", ",", "distance_matrix", ")", ":", "direct_connections", "=", "sum", "(", "1", "for", "j", "in", "unvisited", "if", "distance_matrix", "[", "node", "]", "[", "j", "]", "<", "10", ")", "# Threshold for direct connection", "return", "direct_connections", "/", "(", "len", "(", "unvisited", ")", "or", "1", ")", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connection_score", "=", "calculate_connectivity_score", "(", "node", ",", "unvisited_nodes", ",", "distance_matrix", ")", "alignment_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "-", "0.4", "*", "direct_distance", "+", "0.4", "*", "connection_score", "+", "0.2", "*", "alignment_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.450370583313572}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "euclidean_distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "direct_distance", "+", "(", "num_unvisited", "*", "0.1", ")", "+", "0.3", "*", "(", "euclidean_distance_to_destination", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.244455041163539}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Influence of distance", "historical_weight", "=", "0.3", "# Influence of historical travel costs", "unvisited_penalty_weight", "=", "0.2", "# Penalty based on the number of unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "historical_cost", "=", "(", "total_distance_to_destination", "+", "direct_distance", ")", "/", "2", "# Historical cost as a simple average", "unvisited_penalty", "=", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "*", "0.1", "# Penalty for remaining unvisited nodes", "cost", "=", "(", "direct_distance", "*", "distance_weight", ")", "+", "(", "historical_cost", "*", "historical_weight", ")", "+", "(", "unvisited_penalty", "*", "unvisited_penalty_weight", ")", "if", "cost", "<", "min_cost", ":", "min_cost", "=", "cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "connectivity_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "# Weighted score calculation", "scores", "[", "node", "]", "=", "(", "distance_to_node", "+", "distance_to_destination", ")", "/", "(", "1", "+", "connectivity_score", ")", "# Lower score is better", "# Select the unvisited node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ",", "1", ")", "score", "=", "connectivity_score", "-", "distance_to_next", "# Higher scores for better connectivity and lower distance", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 17.854437372898275}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "heuristic_weight", "=", "1", "/", "len", "(", "unvisited_nodes", ")", "# Influence of unvisited nodes count", "proximity_factor", "=", "0.3", "# Influence on the score based on proximity to destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "proximity_factor", "*", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "**", "2", ")", "# Squared penalty for distance to destination", "weighted_score", "=", "heuristic_weight", "*", "direct_distance", "+", "proximity_score", "if", "weighted_score", "<", "min_cost", ":", "min_cost", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 11.256888281666926}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.6", "# Weight for connectivity score", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate connectivity score based on the sum of distances to other unvisited nodes", "connectivity_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "attractiveness", "=", "(", "total_distance_to_destination", "-", "direct_distance", ")", "/", "(", "total_distance_to_destination", "+", "1", ")", "# Normalized attractiveness", "score", "=", "(", "attractiveness", "*", "direct_weight", ")", "+", "(", "connectivity_score", "*", "connectivity_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 29.870961120503992}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate scores for each unvisited node based on distance to current node and destination", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "goal_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "scores", "[", "node", "]", "=", "direct_distance", "+", "goal_distance", "*", "random", ".", "uniform", "(", "0.5", ",", "1.5", ")", "# Adding randomness to encourage diversity", "# Select the unvisited node with the minimum score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 10.206523382994561}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_discounted_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "connection_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "discounted_distance", "=", "direct_distance", "/", "(", "1", "+", "connection_score", "/", "len", "(", "unvisited_nodes", ")", ")", "if", "discounted_distance", "<", "min_discounted_distance", ":", "min_discounted_distance", "=", "discounted_distance", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.624258003809929}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for inverse distance", "connectivity_weight", "=", "0.3", "# Weight for minimum distance to unvisited", "separation_penalty_factor", "=", "1.2", "# Penalty based on the spread of unvisited nodes", "direct_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "distances_to_unvisited", "=", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", "min_distance_to_unvisited", "=", "min", "(", "distances_to_unvisited", ")", "if", "distances_to_unvisited", "else", "0", "average_distance", "=", "sum", "(", "distances_to_unvisited", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "separation_penalty", "=", "separation_penalty_factor", "*", "sum", "(", "(", "d", "-", "average_distance", ")", "**", "2", "for", "d", "in", "distances_to_unvisited", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "(", "1", "/", "(", "direct_distance", "+", "1e-5", ")", ")", "*", "distance_weight", "+", "(", "min_distance_to_unvisited", "+", "separation_penalty", ")", "*", "connectivity_weight", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "exploration_factor", "=", "1", "/", "(", "1", "+", "distance_to_destination", ")", "# Encourages exploration of farther nodes", "scores", "[", "node", "]", "=", "distance_to_node", "*", "exploration_factor", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.699237951584123}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "cluster_weight", "=", "0.4", "# Weight for node exploration encouragement", "penalty_weight", "=", "0.2", "# Weight for dynamic penalty based on remaining nodes", "# Calculate average distance to unvisited nodes for clustering", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Create a priority score for each unvisited node", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Score based on distance and clustering exploration", "exploration_score", "=", "avg_distance", "-", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Dynamic penalty, lesser penalty for fewer unvisited nodes", "dynamic_penalty", "=", "(", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "*", "(", "1", "/", "(", "direct_distance", "+", "1", ")", ")", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "cluster_weight", "*", "exploration_score", "-", "penalty_weight", "*", "dynamic_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Define a scoring function", "def", "score_node", "(", "node", ")", ":", "# Calculate distance to current node", "distance_score", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Count connections to other unvisited nodes", "connections_score", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "distance_matrix", "[", "current_node", "]", "[", "n", "]", ")", "return", "distance_score", "+", "connections_score", "# Lower is better", "# Select the node with the lowest score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "score_node", ")", "return", "next_node"], "code_perf": 22.289066434732277}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate the total distance to all unvisited nodes", "total_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "# Use a penalty for highly connected nodes", "connectivity_penalty", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "1", "for", "n", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", "}", "nearest_node", "=", "None", "min_weighted_distance", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Adjust the distance with a weight factor based on average distance and penalty", "weighted_distance", "=", "distance", "+", "(", "avg_distance", "-", "distance", ")", "*", "0.3", "+", "connectivity_penalty", "[", "node", "]", "*", "0.5", "if", "weighted_distance", "<", "min_weighted_distance", ":", "min_weighted_distance", "=", "weighted_distance", "nearest_node", "=", "node", "return", "nearest_node"], "code_perf": 8.71500265943235}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "average_distance_weight", "=", "0.4", "# Weight for average distance to unvisited nodes", "proximity_weight", "=", "0.2", "# Weight for proximity to destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "proximity_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "-", "(", "(", "direct_distance", "*", "direct_distance_weight", ")", "+", "(", "average_distance", "*", "average_distance_weight", ")", "+", "(", "proximity_score", "*", "proximity_weight", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.803026259893244}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "+", "(", "0.5", "/", "len", "(", "unvisited_nodes", ")", ")", "# Dynamic weight based on unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "min_remaining_distance", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "for", "unvisited", "in", "unvisited_nodes", ")", "score", "=", "direct_distance", "+", "proximity_weight", "*", "min_remaining_distance", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight focused on direct distance", "connectivity_weight", "=", "0.3", "# Weight for connectivity to unvisited nodes", "heuristic_weight", "=", "0.2", "# Weight for overall spatial positioning of unvisited nodes", "total_distance_from_node", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average connectivity", "heuristic_score", "=", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average distance to destination", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "heuristic_weight", "*", "heuristic_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.349781351250228}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity to destination", "connectivity_weight", "=", "0.3", "# Weight for connectivity to other unvisited nodes", "historical_weight", "=", "0.2", "# Weight for historical travel costs", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "len", "(", "unvisited_nodes", ")", "-", "len", "(", "[", "n", "for", "n", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "n", "]", "==", "float", "(", "'inf'", ")", "]", ")", "historical_cost", "=", "(", "total_distance_to_destination", "+", "direct_distance", ")", "/", "2", "# Averages between current and destination", "score", "=", "(", "(", "1", "/", "(", "direct_distance", "+", "1", ")", ")", "*", "proximity_weight", ")", "+", "(", "connectivity_score", "*", "connectivity_weight", ")", "-", "(", "historical_cost", "*", "historical_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "nearest_nodes", "=", "[", "]", "decay_factor", "=", "0.9", "weighted_choice", "=", "[", "]", "# Calculate distances and prepare for selection", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "nearest_nodes", ".", "append", "(", "(", "node", ",", "distance", ")", ")", "# Sort by distance", "nearest_nodes", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "# Create weighted choices considering decay for already visited nodes", "for", "idx", ",", "(", "node", ",", "distance", ")", "in", "enumerate", "(", "nearest_nodes", ")", ":", "weight", "=", "(", "1", "/", "distance", ")", "*", "(", "decay_factor", "**", "idx", ")", "weighted_choice", ".", "append", "(", "(", "node", ",", "weight", ")", ")", "# Introduce variability through weighted random selection", "if", "weighted_choice", ":", "total_weight", "=", "sum", "(", "weight", "for", "_", ",", "weight", "in", "weighted_choice", ")", "probabilities", "=", "[", "weight", "/", "total_weight", "for", "_", ",", "weight", "in", "weighted_choice", "]", "next_node", "=", "random", ".", "choices", "(", "[", "node", "for", "node", ",", "_", "in", "weighted_choice", "]", ",", "probabilities", ")", "[", "0", "]", "return", "next_node", "return", "None"], "code_perf": 14.127177030241295}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm prioritizes unvisited nodes based on a combined score of proximity, overall potential distance remaining, and a weighted exploration factor to balance between nearby nodes and those with larger connections.}", "if", "not", "unvisited_nodes", ":", "return", "None", "node_scores", "=", "{", "}", "total_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate the overall potential distance remaining", "distance_to_remain", "=", "total_distance_remaining", "-", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Create a composite score based on direct distance, potential remaining distance, and an exploration factor", "exploration_factor", "=", "len", "(", "unvisited_nodes", ")", "# Weighted by the number of unvisited nodes", "node_scores", "[", "node", "]", "=", "direct_distance", "+", "(", "distance_to_remain", "*", "0.5", ")", "/", "exploration_factor", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_distance_so_far", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "distance_weight", "=", "0.4", "connectivity_weight", "=", "0.4", "loop_closure_weight", "=", "0.2", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Loop closure score based on proximity to destination", "loop_closure_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Dynamic scoring based on distance traveled so far", "distance_adjustment_factor", "=", "total_distance_so_far", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combined score", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "loop_closure_weight", "*", "loop_closure_score", "-", "distance_adjustment_factor", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.696674800295234}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm introduces a dynamic scoring mechanism favoring nodes that maintain a balance between proximity and the cost of leading towards the destination while discouraging returning to previously visited nodes.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate a heuristic that favors closer nodes to the destination while penalizing for distance to the current node", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "+", "(", "1", "/", "(", "distance_to_destination", "+", "1", ")", ")", "-", "(", "0.5", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.6608569721620725}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_weighted_cost", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_nodes_count", "=", "len", "(", "unvisited_nodes", ")", "-", "1", "# exclude the next node", "weighted_cost", "=", "distance", "+", "(", "remaining_nodes_count", "*", "(", "1", "/", "(", "distance", "+", "1", ")", ")", ")", "# adding a penalty for unvisited nodes", "if", "weighted_cost", "<", "min_weighted_cost", ":", "min_weighted_cost", "=", "weighted_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 36.08107298243216}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "import", "numpy", "as", "np", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.6", "# Weight for direct distance", "spatial_density_weight", "=", "0.4", "# Weight for spatial density", "penalty_weight", "=", "0.2", "# Weight for discouraging over-frequent visits", "# Function to calculate spatial density of unvisited nodes", "def", "calculate_spatial_density", "(", "node", ")", ":", "distances", "=", "[", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "]", "return", "len", "(", "unvisited_nodes", ")", "/", "(", "1", "+", "np", ".", "mean", "(", "distances", ")", ")", "# Density inversely related to avg distance", "# Function to assess penalty for frequent visits based on visit counts", "def", "calculate_visit_penalty", "(", "node", ")", ":", "return", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", "**", "3", "# Cubic penalty for emphasis", "# Initialize visit counts for nodes if not present", "global", "node_visit_counts", "node_visit_counts", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "# Update visit counts at each call", "node_visit_counts", "[", "node", "]", "=", "node_visit_counts", ".", "get", "(", "node", ",", "0", ")", "+", "1", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "spatial_density", "=", "calculate_spatial_density", "(", "node", ")", "penalty", "=", "calculate_visit_penalty", "(", "node", ")", "# Combined scoring mechanism with new factors", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "spatial_density_weight", "*", "spatial_density", "-", "penalty_weight", "*", "penalty", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 13.073616141113028}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.4", "# Weight for connectivity to unvisited nodes", "potential_weight", "=", "0.2", "# Weight for future potential based on remaining nodes", "penalty_weight", "=", "0.3", "# Penalty for long distance", "bonus_weight", "=", "0.2", "# Bonus for high connectivity", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average connectivity", "# Potential score based on the distance to the destination from unvisited nodes", "potential_score", "=", "min", "(", "distance_matrix", "[", "node", "]", "[", "dest", "]", "for", "dest", "in", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "# Penalty for long distance from the current node", "penalty_score", "=", "max", "(", "0", ",", "direct_distance", "-", "10", ")", "# Assuming 10 is a threshold", "# Bonus for high connectivity", "bonus_score", "=", "1", "/", "(", "sum", "(", "1", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "5", ")", "+", "1", ")", "# Nodes close to the current node", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "potential_weight", "*", "potential_score", "-", "penalty_weight", "*", "penalty_score", "+", "bonus_weight", "*", "bonus_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.41724333977419}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Rank unvisited nodes based on distance from current and distance to destination", "ranked_distances", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combining distances into a rank factor", "rank_value", "=", "distance_to_node", "+", "distance_to_destination", "ranked_distances", "[", "node", "]", "=", "rank_value", "# Selecting the node with the minimum rank value", "next_node", "=", "min", "(", "ranked_distances", ",", "key", "=", "ranked_distances", ".", "get", ")", "return", "next_node"], "code_perf": 8.094027426700828}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight focused on direct distance", "centrality_weight", "=", "0.4", "# Weight for centrality score of unvisited nodes", "randomness_weight", "=", "0.2", "# Weight to introduce randomness", "centrality_scores", "=", "{", "node", ":", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "centrality_score", "=", "centrality_scores", "[", "node", "]", "randomness_score", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "# Random score for exploration", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "centrality_weight", "*", "centrality_score", "+", "randomness_weight", "*", "randomness_weight", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 11.766825752183726}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm incorporates a hybrid scoring model that combines the minimum distance to the destination,", "# the nearest unvisited node, and a penalty factor based on the remaining unvisited nodes' distance variance.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "distance_variance", "=", "sum", "(", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "-", "distance_to_next", ")", "**", "2", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", "score", "=", "(", "1", "/", "(", "distance_to_next", "+", "1", ")", ")", "+", "(", "1", "/", "(", "distance_to_destination", "+", "1", ")", ")", "-", "(", "distance_variance", "/", "(", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "1", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.818584701540308}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm introduces a trade-off between distance minimization and maximizing connectivity, using a scoring mechanism based on inverse distance, an aggression factor for nearest nodes, and a penalty for isolation.}", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "num_connections", "=", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "10", ")", "# Assuming a threshold for connectivity", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Weighting factors", "weight_distance", "=", "0.4", "weight_connections", "=", "0.4", "weight_destination", "=", "0.2", "# Composite score calculation", "score", "=", "(", "weight_distance", "/", "(", "distance_to_next", "+", "1", ")", ")", "+", "(", "weight_connections", "*", "num_connections", ")", "-", "(", "weight_destination", "*", "distance_to_destination", "/", "(", "distance_to_destination", "+", "1", ")", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.281798253848895}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "temperature", "=", "1.0", "# Starting temperature for exploration", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "frequency_weight", "=", "0.3", "# Weight for visitation frequency", "exploration_weight", "=", "0.2", "# Weight for exploration factor", "# Track visitation frequency (higher means less penalty for re-visiting)", "visitation_frequency", "=", "{", "node", ":", "1", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "frequency_penalty", "=", "visitation_frequency", "[", "node", "]", "exploration_factor", "=", "temperature", "/", "(", "1", "+", "direct_distance", ")", "# Adjust exploration", "# Combined scoring mechanism with temperature-based exploration", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "/", "frequency_penalty", "+", "exploration_weight", "*", "exploration_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "temperature", "*=", "0.95", "# Simulate temperature decrease for next iteration", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "# Distance factor reducing influence with increasing distance", "distance_factor", "=", "0.7", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Geometric spread: penalize nodes too close or too far to encourage balanced selections", "spread_penalty", "=", "sum", "(", "1", "/", "(", "1", "+", "abs", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "-", "direct_distance", ")", ")", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "# Centrality score based on potential next moves", "centrality_score", "=", "len", "(", "[", "neighbor", "for", "neighbor", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<=", "5", "]", ")", "# Distance weight influenced by proximity to current node", "dynamic_distance_weight", "=", "(", "1", "/", "(", "1", "+", "direct_distance", ")", ")", "if", "direct_distance", ">", "0", "else", "0", "# Total score calculation incorporating all factors with adjusted weights", "score", "=", "(", "direct_distance", "*", "distance_factor", ")", "+", "(", "spread_penalty", "*", "0.2", ")", "+", "(", "centrality_score", "*", "0.1", ")", "-", "dynamic_distance_weight", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.9746989848253165}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.5", "# Weight for direct distance to unvisited nodes", "centrality_weight", "=", "0.3", "# Weight for the centrality of unvisited nodes", "distance_decay_factor", "=", "0.2", "# Dynamic penalty for distance from current exploration area", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Centrality score based on how close the node is to the center of unvisited nodes", "centrality_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "centrality_score_weighted", "=", "centrality_score", "*", "centrality_weight", "# Dynamic distance penalty based on the exponential decay", "distance_penalty", "=", "distance_decay_factor", "*", "(", "1", "/", "(", "1", "+", "direct_distance", ")", ")", "score", "=", "(", "direct_weight", "*", "distance_to_destination", ")", "+", "centrality_score_weighted", "-", "direct_distance", "-", "distance_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.360769108594097}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "random_weight", "=", "0.3", "# Weight for random exploration factor", "penalty_weight", "=", "0.3", "# Weight for distance from the final destination", "# Calculate penalty based on distance from destination", "penalty_scores", "=", "{", "node", ":", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Random exploration factor to avoid local optima", "random_score", "=", "random", ".", "uniform", "(", "0", ",", "10", ")", "# Penalty based on distance from destination", "penalty_score", "=", "penalty_scores", "[", "node", "]", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "random_weight", "*", "random_score", "-", "penalty_weight", "*", "penalty_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 20.835445536995145}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "# Calculate an average distance to unvisited nodes", "avg_distance", "=", "np", ".", "mean", "(", "[", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "]", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "len", "(", "unvisited_nodes", ")", "*", "0.1", "# Penalty factor for remaining nodes", "total_cost", "=", "direct_distance", "+", "avg_distance", "+", "penalty", "if", "total_cost", "<", "min_cost", ":", "min_cost", "=", "total_cost", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "exploration_weight", "=", "0.3", "# Weight for potential node exploration", "future_savings_weight", "=", "0.2", "# Weight for potential future savings", "# Function to calculate exploration score based on unvisited neighboring nodes", "def", "calculate_exploration_score", "(", "node", ")", ":", "return", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "10", ")", "# Example threshold of 10", "# Function to calculate potential future savings", "def", "calculate_future_savings", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "exploration_score", "=", "calculate_exploration_score", "(", "node", ")", "future_savings", "=", "calculate_future_savings", "(", "node", ")", "# Combined scoring mechanism", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "exploration_weight", "*", "exploration_score", "+", "future_savings_weight", "*", "future_savings", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "connectivity_weight", "=", "0.4", "# Weight for connectivity to unvisited nodes", "exploration_weight", "=", "0.2", "# Weight for exploration potential", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_connectivity", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Adaptive exploration score based on the distance to destination", "exploration_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "# Calculate combined score", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "average_connectivity", "+", "exploration_weight", "*", "exploration_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.362381088576832}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "# Calculate the clustering attractiveness score based on the proximity of unvisited nodes", "clustering_attractiveness", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "current_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# New cost function combining direct distance, clustering attractiveness, and distance to the destination", "score", "=", "direct_distance", "-", "clustering_attractiveness", "*", "0.5", "+", "0.3", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.244455041163539}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "connectivity_penalty", "=", "0.8", "direct_weight", "=", "0.6", "heuristic_weight", "=", "0.4", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "connectivity_score_penalty", "=", "connectivity_penalty", "*", "(", "1", "-", "(", "connectivity_score", "/", "len", "(", "unvisited_nodes", ")", ")", ")", "score", "=", "(", "direct_weight", "*", "direct_distance", ")", "+", "(", "heuristic_weight", "*", "heuristic_distance", ")", "+", "connectivity_score_penalty", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.6490879527083395}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for distance to unvisited nodes", "density_weight", "=", "0.3", "# Weight for local density of unvisited nodes", "penalty_weight", "=", "0.2", "# Weight for the total distance penalty", "penalty_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_visit_density", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "<", "10", ")", "# Count nearby unvisited nodes", "density_score", "=", "future_visit_density", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "1", "/", "(", "direct_distance", "+", "1", ")", ")", "*", "distance_weight", "+", "(", "density_score", "*", "density_weight", ")", "-", "(", "penalty_distance", "*", "penalty_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.5", "# Weight for proximity to destination", "penalty_weight", "=", "0.4", "# Weight for penalty of unvisited nodes", "clustering_weight", "=", "0.1", "# Weight for clustering efficiency", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "unvisited_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "cluster_average_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", ")", "+", "(", "clustering_weight", "*", "cluster_average_distance", ")", "-", "(", "penalty_weight", "*", "unvisited_penalty", ")", "+", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 14.515863508917779}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "connectivity_score", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_connection_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "for", "neighbor", "in", "unvisited_nodes", "if", "neighbor", "!=", "node", ")", "connection_bonus", "=", "len", "(", "unvisited_nodes", ")", "-", "1", "# Bonus for having many options", "normalized_future_penalty", "=", "future_connection_penalty", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", "score", "=", "direct_distance", "-", "connection_bonus", "+", "normalized_future_penalty", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.28547121499269}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm incorporates a synergy metric that enhances the selection process by combining the distances to unvisited ", "# nodes with exploration potential based on node diversity, while also factoring in a temporal aspect of previously visited paths.}", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "# Calculate the total distance to all unvisited nodes", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "# Calculate remaining distances to destination", "remaining_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Capture diversity factor based on the distances of unvisited nodes from this node", "diversity_factor", "=", "sum", "(", "min", "(", "distance_matrix", "[", "node", "]", "[", "adj", "]", ",", "distance_matrix", "[", "adj", "]", "[", "current_node", "]", ")", "for", "node", "in", "unvisited_nodes", "for", "adj", "in", "unvisited_nodes", "if", "adj", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1e-5", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Synergy metrics combining proximity, diversity, and remaining distance to destination", "synergy_metric", "=", "(", "distance", "+", "remaining_distance_to_destination", ")", "/", "(", "diversity_factor", "+", "1e-5", ")", "# Calculate weighted score", "weighted_score", "=", "synergy_metric", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "# {This algorithm combines a modified cost function with a bias toward nodes that are closer to the destination, promoting both efficiency in distance traveled and steering towards the final goal.}", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "clustering_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ",", "1", ")", "# New scoring mechanism that prefers nodes that reduce both immediate travel and overall route complexity", "score", "=", "(", "distance_to_next", "+", "clustering_penalty", "+", "distance_to_destination", ")", "*", "(", "1", "+", "(", "len", "(", "unvisited_nodes", ")", "/", "10", ")", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 9.392093580764584}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for distance", "potential_weight", "=", "0.5", "# Weight for potential future connections", "# Function to calculate potential score based on future cluster connectivity", "def", "calculate_potential_score", "(", "node", ")", ":", "potential_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "potential_score", "+=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "+", "1e-6", ")", "# Avoid division by zero", "return", "potential_score", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "potential_score", "=", "calculate_potential_score", "(", "node", ")", "# Combined scoring mechanism", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "potential_weight", "*", "potential_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.811288564013772}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "degree_importance_factor", "=", "0.5", "# Weight for node degree influence", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "degree_of_connection", "=", "{", "node", ":", "sum", "(", "1", "for", "neighbor", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<", "15", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "relevance_score", "=", "degree_of_connection", "[", "node", "]", "*", "degree_importance_factor", "score", "=", "direct_distance", "+", "(", "avg_distance", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "relevance_score", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.078385722187273}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "i", "]", "[", "j", "]", "for", "i", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "for", "j", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "i", "!=", "j", ")", "# Environmental score based on average distance between unvisited nodes", "avg_environmental_distance", "=", "sum", "(", "distance_matrix", "[", "node1", "]", "[", "node2", "]", "for", "node1", "in", "unvisited_nodes", "for", "node2", "in", "unvisited_nodes", "if", "node1", "!=", "node2", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "1", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Adaptive exploration factor based on cumulative distance", "exploration_factor", "=", "direct_distance", "/", "(", "cumulative_distance", "+", "1", ")", "# Adjust score based on environmental factors and distances", "score", "=", "(", "direct_distance", "*", "0.4", ")", "+", "(", "(", "avg_environmental_distance", "*", "0.5", ")", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", ")", "+", "(", "exploration_factor", "*", "0.1", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.712549821607685}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "historical_frequency", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "decay_factor", "=", "0.9", "# Introduce a decay factor for historical visit penalty", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "visit_penalty", "=", "historical_frequency", "[", "node", "]", "*", "decay_factor", "if", "historical_frequency", "[", "node", "]", ">", "0", "else", "0", "weighted_heuristic", "=", "(", "0.6", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "0.4", "*", "(", "connectivity_score", "-", "1", ")", "-", "visit_penalty", ")", "score", "=", "direct_distance", "+", "weighted_heuristic", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "historical_frequency", "[", "node", "]", "+=", "1", "# Update historical frequency", "return", "best_node"], "code_perf": 6.4257563991146025}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "# Calculate proximity factor", "proximity_scores", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "for", "node", "in", "unvisited_nodes", "}", "avg_proximity", "=", "sum", "(", "proximity_scores", ".", "values", "(", ")", ")", "/", "len", "(", "unvisited_nodes", ")", "decay_factor", "=", "0.9", "# Decay factor for perturbation", "random_factor", "=", "random", ".", "uniform", "(", "0.1", ",", "0.5", ")", "*", "decay_factor", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "(", "avg_proximity", "-", "proximity_scores", "[", "node", "]", ")", "*", "0.3", "# Dynamic penalty based on proximity", "score", "=", "direct_distance", "+", "penalty", "+", "random_factor", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.498918432044007}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_ratio", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate the ratio of distances", "if", "distance_to_destination", ">", "0", ":", "# Avoid division by zero", "ratio", "=", "distance_to_node", "/", "distance_to_destination", "# Select the node with the minimum ratio", "if", "ratio", "<", "best_ratio", ":", "best_ratio", "=", "ratio", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.831500052161287}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_short_distances", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "weight_factor", "=", "0.7", "# Weight for current distance", "vision_factor", "=", "0.3", "# Weight for future distance evaluation", "random_factor", "=", "random", ".", "uniform", "(", "0.05", ",", "0.15", ")", "# Stochastic influence", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_distance_score", "=", "total_short_distances", "*", "(", "1", "-", "(", "1", "/", "num_unvisited", ")", ")", "if", "num_unvisited", ">", "1", "else", "0", "score", "=", "(", "direct_distance", "*", "weight_factor", ")", "+", "(", "future_distance_score", "*", "vision_factor", ")", "+", "random_factor", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "current_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "remaining_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "direct_distance", "+", "0.4", "*", "(", "proximity_score", "-", "remaining_distance", ")", "+", "0.3", "*", "(", "remaining_distance", "/", "(", "1", "+", "direct_distance", ")", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.716337627372263}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Define risk factor for exploration reward", "risk_factor", "=", "0.3", "# Calculate scores based on distance and risk-reward mechanism", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_to_destination_score", "=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1", ")", "if", "destination_node", "in", "unvisited_nodes", "else", "0", "# Risk-reward mechanism incorporates randomness and risk factor", "randomized_reward", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "*", "risk_factor", "scores", "[", "node", "]", "=", "(", "1", "-", "proximity_to_destination_score", ")", "+", "randomized_reward", "/", "distance", "# Select the unvisited node with the highest score (higher is better)", "next_node", "=", "max", "(", "unvisited_nodes", ",", "key", "=", "lambda", "node", ":", "scores", "[", "node", "]", ")", "return", "next_node"], "code_perf": 9.144166480295118}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate adjusted distances with a random factor", "adjusted_distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "(", "1", "+", "random", ".", "uniform", "(", "-", "0.1", ",", "0.1", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the unvisited node with the smallest adjusted distance", "next_node", "=", "min", "(", "adjusted_distances", ",", "key", "=", "adjusted_distances", ".", "get", ")", "return", "next_node"], "code_perf": 6.957898878839783}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "import", "numpy", "as", "np", "from", "scipy", ".", "sparse", ".", "csgraph", "import", "minimum_spanning_tree", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "compatibility_weight", "=", "0.4", "# Weight for compatibility with the destination", "mst_weight", "=", "0.1", "# Weight for MST influence", "# Create a filtered distance matrix for unvisited nodes", "filtered_matrix", "=", "np", ".", "array", "(", "[", "[", "distance_matrix", "[", "i", "]", "[", "j", "]", "for", "j", "in", "unvisited_nodes", "]", "for", "i", "in", "unvisited_nodes", "]", ")", "# Calculate the minimum spanning tree cost for unvisited nodes using the filtered distance matrix", "mst_cost", "=", "minimum_spanning_tree", "(", "filtered_matrix", ")", ".", "toarray", "(", ")", ".", "sum", "(", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "compatibility_score", "=", "1", "/", "(", "1", "+", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "# Closeness to the destination", "# Dynamic score calculation", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "compatibility_weight", "*", "compatibility_score", "+", "mst_weight", "*", "mst_cost", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.2914218423609345}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate distances and dynamic weights for each unvisited node", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "max", "(", "1", ",", "len", "(", "unvisited_nodes", ")", ")", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "scores", "=", "{", "node", ":", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "*", "(", "1", "+", "(", "distance_to_destination", "/", "(", "avg_distance_to_unvisited", "+", "1e-6", ")", "*", "0.5", ")", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "# Select the unvisited node with the minimum score", "next_node", "=", "min", "(", "unvisited_nodes", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "max_remaining_distance", "=", "max", "(", "distance_matrix", "[", "node", "]", "[", "dest", "]", "for", "dest", "in", "unvisited_nodes", ")", "# Adaptive penalty that increases with the number of unvisited nodes", "adaptive_penalty", "=", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Heuristic score that balances direct distance and maximum remaining distance", "heuristic_score", "=", "0.5", "*", "(", "max_remaining_distance", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "0.5", "*", "direct_distance", "score", "=", "direct_distance", "+", "heuristic_score", "+", "adaptive_penalty", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.042302759758005}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_weight", "=", "0.5", "# Weight for immediate travel distance", "penalty_weight", "=", "0.4", "# Weight for penalty of route length", "bonus_weight", "=", "0.2", "# Weight for average distance to remaining unvisited nodes", "risk_weight", "=", "0.1", "# Weight to penalize isolation risk", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "total_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "average_distance_to_others", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "num_unvisited", "or", "1", ")", "isolation_risk", "=", "1", "/", "(", "1", "+", "(", "num_unvisited", "-", "1", ")", ")", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Risk of moving to an isolated node", "score", "=", "(", "direct_distance", "*", "immediate_weight", ")", "+", "(", "penalty", "*", "penalty_weight", ")", "-", "(", "average_distance_to_others", "*", "bonus_weight", ")", "+", "(", "isolation_risk", "*", "risk_weight", ")", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.751500900312028}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Emphasize direct distance moderately", "centrality_weight", "=", "0.4", "# High emphasis on node centrality for clusters of unvisited nodes", "residual_weight", "=", "0.2", "# Weight for remaining unvisited nodes' average distance to destination", "# Calculate centrality score of unvisited nodes based on their connections", "def", "calculate_centrality_score", "(", "node", ")", ":", "connections", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "return", "connections", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "centrality_score", "=", "calculate_centrality_score", "(", "node", ")", "# Calculate average distance of unvisited nodes to the destination", "residual_score", "=", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combined scoring mechanism", "score", "=", "-", "direct_distance_weight", "*", "direct_distance", "+", "centrality_weight", "*", "centrality_score", "-", "residual_weight", "*", "residual_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.424216980256856}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Calculate penalty scores for each unvisited node based on distance", "penalty_scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_current", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "penalty", "=", "distance_to_current", "*", "(", "1", "+", "(", "len", "(", "unvisited_nodes", ")", "-", "len", "(", "unvisited_nodes", ".", "intersection", "(", "{", "node", "}", ")", ")", ")", "/", "len", "(", "unvisited_nodes", ")", ")", "penalty_scores", "[", "node", "]", "=", "penalty", "# Select the node with the minimum penalty score", "next_node", "=", "min", "(", "penalty_scores", ",", "key", "=", "penalty_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "# Direct distance to the current node", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Average distance to remaining unvisited nodes", "average_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Distance to the final destination", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Combined score", "score", "=", "direct_distance", "+", "average_distance", "+", "distance_to_destination", "# Adjust score with a weighting factor", "adjusted_score", "=", "score", "*", "(", "1", "+", "(", "len", "(", "unvisited_nodes", ")", "/", "len", "(", "distance_matrix", ")", ")", ")", "if", "adjusted_score", "<", "best_score", ":", "best_score", "=", "adjusted_score", "best_node", "=", "node", "return", "best_node"], "code_perf": 9.242071761591692}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "remaining_route_weight", "=", "0.3", "cluster_benefit_weight", "=", "0.3", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "estimated_remaining_distance", "=", "total_remaining_distance", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "cluster_benefit", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "direct_distance_weight", "*", "(", "-", "direct_distance", ")", ")", "+", "(", "remaining_route_weight", "*", "(", "-", "estimated_remaining_distance", ")", ")", "+", "(", "cluster_benefit_weight", "*", "cluster_benefit", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.931755431732832}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "direct_distance_weight", "=", "0.4", "average_distance_weight", "=", "0.4", "exploration_incentive_weight", "=", "0.2", "unvisited_count", "=", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Heuristic: average distance to unvisited nodes", "average_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "unvisited_count", "or", "1", ")", "# Exploration incentive based on the remaining unvisited nodes", "exploration_incentive", "=", "unvisited_count", "**", "2", "# Encouraging exploration with higher incentives for more unvisited", "# Score calculation", "score", "=", "-", "direct_distance_weight", "*", "direct_distance", "+", "average_distance_weight", "*", "average_distance", "-", "exploration_incentive_weight", "*", "exploration_incentive", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.41724333977419}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "# Calculate the average distance from the current node to all unvisited nodes", "average_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_current", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Introduce a penalty based on how close the node is to the average of unvisited nodes", "penalty", "=", "abs", "(", "distance_to_current", "-", "average_distance", ")", "/", "average_distance", "score", "=", "(", "1", "/", "distance_to_current", ")", "+", "(", "1", "/", "distance_to_destination", ")", "-", "penalty", "# Incorporate penalty into score", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.648270439565126}
{"code_tokens": ["import", "random", "import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "random_exploration_factor", "=", "0.2", "# Weight for introducing randomness in node selection", "penalty_factor", "=", "1.5", "# Penalty for unvisited nodes further from the destination", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "penalty", "=", "penalty_factor", "*", "(", "distance_to_destination", "**", "2", ")", "# Squared penalty for greater impact", "score", "=", "direct_distance", "+", "penalty", "*", "(", "1", "-", "random_exploration_factor", "*", "random", ".", "random", "(", ")", ")", "# Random adjustment", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.554520257795318}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "decay_factor", "=", "0.1", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Introducing a logarithmic factor to the average distance to unvisited nodes", "log_average_distance", "=", "decay_factor", "*", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "(", "1", "+", "len", "(", "unvisited_nodes", ")", ")", ")", "score", "=", "log_average_distance", "-", "distance_to_next", "-", "(", "0.5", "*", "distance_to_destination", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.327272772488095}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "historical_cost_weight", "=", "0.4", "# Weight for historical cost", "direct_distance_weight", "=", "0.5", "# Weight for direct distance", "cluster_influence_weight", "=", "0.2", "# Weight for cluster proximity", "avg_unvisited_cost", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "historical_cost", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "/", "(", "avg_unvisited_cost", "+", "1e-6", ")", "# Avoid division by zero", "cluster_influence", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "(", "-", "direct_distance_weight", "*", "direct_distance", ")", "+", "(", "historical_cost_weight", "*", "historical_cost", ")", "+", "(", "cluster_influence_weight", "*", "cluster_influence", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 35.38422557306711}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Emphasis on direct distance", "density_weight", "=", "0.4", "# Weight for the density of unvisited nodes nearby", "revisit_penalty", "=", "0.2", "# Penalty for visiting nodes that have been visited before", "# Calculate the density score for unvisited nodes around the current node", "def", "calculate_density_score", "(", "node", ")", ":", "density_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "density_score", "+=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "+", "1", ")", "# Inverse distance for density", "return", "density_score", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "density_score", "=", "calculate_density_score", "(", "node", ")", "# Incorporate revisit penalty based on path length to current_node", "revisit_penalty_effect", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "if", "node", "in", "distance_matrix", "[", "current_node", "]", "else", "0", "# Combined scoring mechanism", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "density_weight", "*", "density_score", "-", "revisit_penalty_effect", "*", "revisit_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 15.69011470172758}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_distance_weight", "=", "0.5", "# Weight for immediate distance to the node", "connectivity_weight", "=", "0.3", "# Weight for assessing connectivity to other unvisited nodes", "destination_proximity_weight", "=", "0.2", "# Weight for direct distance to the destination", "for", "node", "in", "unvisited_nodes", ":", "immediate_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "if", "unvisited_nodes", "else", "0", "destination_distance", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "immediate_distance", "*", "immediate_distance_weight", ")", "-", "(", "connectivity_score", "*", "connectivity_weight", ")", "+", "(", "destination_distance", "*", "destination_proximity_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 13.659968770423912}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct distance", "density_weight", "=", "0.4", "# Weight for density of unvisited nodes near the current node", "heuristic_weight", "=", "0.2", "# Weight for remaining unvisited nodes' average distance to the destination", "# Calculate density score for unvisited nodes", "def", "calculate_density_score", "(", "node", ")", ":", "density_score", "=", "0", "for", "other", "in", "unvisited_nodes", ":", "if", "other", "!=", "node", ":", "density_score", "+=", "1", "/", "distance_matrix", "[", "node", "]", "[", "other", "]", "# Inverse distance for density", "return", "density_score", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "density_score", "=", "calculate_density_score", "(", "node", ")", "# Average distance from remaining unvisited nodes to the destination", "heuristic_score", "=", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combined scoring mechanism", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "density_weight", "*", "density_score", "+", "heuristic_weight", "*", "heuristic_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.81442622590815}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.5", "# Weight for direct distance", "clustering_weight", "=", "0.3", "# Weight for proximity to clusters of unvisited nodes", "future_cost_weight", "=", "0.2", "# Weight for estimating future costs", "distance_penalty_weight", "=", "0.2", "# Penalty for selecting distant nodes", "# Function to calculate cluster score based on unvisited nodes", "def", "calculate_cluster_score", "(", "node", ")", ":", "return", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "0", "# Function to estimate minimum future tour length assuming a nearest neighbor heuristic", "def", "estimate_future_cost", "(", "node", ")", ":", "sorted_unvisited", "=", "sorted", "(", "unvisited_nodes", ",", "key", "=", "lambda", "x", ":", "distance_matrix", "[", "node", "]", "[", "x", "]", ")", "return", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "sum", "(", "distance_matrix", "[", "sorted_unvisited", "[", "i", "]", "]", "[", "sorted_unvisited", "[", "i", "+", "1", "]", "]", "for", "i", "in", "range", "(", "len", "(", "sorted_unvisited", ")", "-", "1", ")", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cluster_score", "=", "calculate_cluster_score", "(", "node", ")", "future_cost", "=", "estimate_future_cost", "(", "node", ")", "# Combined scoring mechanism with distance penalty", "score", "=", "(", "-", "direct_distance_weight", "*", "direct_distance", "+", "clustering_weight", "*", "cluster_score", "-", "distance_penalty_weight", "*", "(", "direct_distance", "**", "2", ")", "+", "future_cost_weight", "*", "future_cost", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.58144621445735}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate distances and importances", "distances", "=", "{", "node", ":", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", "}", "# Calculate the importance based on the distance to the destination", "importance", "=", "{", "node", ":", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ",", "distances", "[", "node", "]", ")", "for", "node", "in", "unvisited_nodes", "}", "# Compute a score based on distance and importance", "scores", "=", "{", "node", ":", "(", "0.5", "*", "dist", ")", "+", "(", "0.5", "*", "importance", "[", "node", "]", "[", "0", "]", ")", "for", "node", ",", "dist", "in", "distances", ".", "items", "(", ")", "}", "# Normalize scores to introduce variability", "score_min", "=", "min", "(", "scores", ".", "values", "(", ")", ")", "score_range", "=", "max", "(", "scores", ".", "values", "(", ")", ")", "-", "score_min", "if", "score_range", ">", "0", ":", "scores", "=", "{", "node", ":", "(", "score", "-", "score_min", ")", "/", "score_range", "for", "node", ",", "score", "in", "scores", ".", "items", "(", ")", "}", "# Introduce a random factor for selection", "weighted_candidates", "=", "[", "(", "node", ",", "random", ".", "uniform", "(", "0", ",", "scores", "[", "node", "]", ")", ")", "for", "node", "in", "unvisited_nodes", "]", "# Select the node with the highest weighted score", "next_node", "=", "max", "(", "weighted_candidates", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 30.960362717574803}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "total_remaining_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "average_distance", "=", "total_remaining_distance", "/", "num_unvisited", "if", "num_unvisited", ">", "0", "else", "1", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "favorable_bonus", "=", "(", "average_distance", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "*", "0.7", "# Bonus for favorable nodes", "scaling_factor", "=", "1", "/", "(", "1", "+", "(", "total_remaining_distance", "/", "average_distance", ")", ")", "# Dynamic scaling", "score", "=", "direct_distance", "-", "favorable_bonus", "*", "scaling_factor", "+", "random", ".", "uniform", "(", "0.02", ",", "0.1", ")", "# Minor randomness", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.26338552642735}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_remaining", "=", "total_distance_remaining", "/", "len", "(", "unvisited_nodes", ")", "penalty_factor", "=", "len", "(", "unvisited_nodes", ")", "*", "0.2", "# Factor to penalize having more unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "+", "0.5", "*", "(", "avg_distance_remaining", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "penalty_factor", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.450370583313572}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "scores", "=", "[", "]", "exploration_factor", "=", "0.1", "# Adjust this factor for more or less randomness", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "distance", "+", "random", ".", "uniform", "(", "0", ",", "exploration_factor", ")", "# Add randomness to distance", "scores", ".", "append", "(", "(", "node", ",", "score", ")", ")", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 7.271153850111111}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "node_scores", "=", "{", "}", "# Calculate a score for each unvisited node based on distance and edge connectivity", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "bridge_connections", "=", "sum", "(", "1", "for", "other", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "other", "]", "<", "float", "(", "'inf'", ")", ")", "# Combine direct distance with a penalty for connectivity to encourage visiting nodes that connect more unvisited areas", "node_scores", "[", "node", "]", "=", "direct_distance", "+", "(", "1", "/", "(", "bridge_connections", "+", "1", ")", ")", "# Adding +1 to avoid division by zero", "# Select the node with the lowest score", "next_node", "=", "min", "(", "node_scores", ",", "key", "=", "node_scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Calculate the average distance for all unvisited nodes", "avg_distance_to_destination", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "heuristic_factor", "=", "(", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "**", "2", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "# Centrality score based on number of connections to other unvisited nodes", "connectivity_score", "=", "sum", "(", "1", "for", "neighbor", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "neighbor", "in", "unvisited_nodes", "and", "neighbor", "!=", "node", ")", "centrality_factor", "=", "(", "connectivity_score", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", ")", "if", "connectivity_score", ">", "0", "else", "0", "# Combined score with penalties and adjustments", "score", "=", "direct_distance", "+", "heuristic_factor", "-", "(", "0.5", "*", "centrality_factor", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.953440370631245}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "immediate_distance_weight", "=", "0.4", "# Weight for immediate distance", "detour_penalty_weight", "=", "0.3", "# Weight for penalty on long detours", "cluster_reward_weight", "=", "0.3", "# Weight for rewarding nearby clusters", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "detour_penalty", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "-", "direct_distance", "cluster_reward", "=", "sum", "(", "1", "for", "next_node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "<", "5", ")", "# Example threshold for nearby clusters", "score", "=", "(", "immediate_distance_weight", "*", "-", "direct_distance", ")", "+", "(", "detour_penalty_weight", "*", "-", "detour_penalty", ")", "+", "(", "cluster_reward_weight", "*", "cluster_reward", ")", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "decay_factor", "=", "0.5", "# Decay modifier for distance", "threshold_factor", "=", "1.2", "# Threshold modifier for unvisited preference", "min_distance", "=", "float", "(", "'inf'", ")", "best_next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_decay", "=", "direct_distance", "*", "(", "1", "-", "decay_factor", ")", "# Apply decay to the distance", "# Calculate adjusted distance considering the penalty for unvisited nodes", "adjusted_distance", "=", "distance_decay", "*", "(", "1", "+", "threshold_factor", "*", "(", "len", "(", "unvisited_nodes", ")", "/", "len", "(", "distance_matrix", ")", ")", ")", "if", "adjusted_distance", "<", "min_distance", ":", "min_distance", "=", "adjusted_distance", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "numpy", "as", "np", "def", "cluster_nodes", "(", "unvisited_nodes", ",", "distance_matrix", ")", ":", "clusters", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distances", "=", "[", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", "]", "avg_distance", "=", "np", ".", "mean", "(", "distances", ")", "clusters", "[", "node", "]", "=", "avg_distance", "return", "sorted", "(", "clusters", ",", "key", "=", "clusters", ".", "get", ")", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# Cluster the unvisited nodes based on proximity", "ordered_nodes", "=", "cluster_nodes", "(", "unvisited_nodes", ",", "distance_matrix", ")", "# Select the next node as the closest one from the cluster head (centroid)", "next_node", "=", "ordered_nodes", "[", "0", "]", "# First node in sorted order is the \"centroid\"", "return", "next_node"], "code_perf": 31.616956377461854}
{"code_tokens": ["import", "numpy", "as", "np", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "score_factor", "=", "1.5", "# Weight for the unvisited node penalty", "min_score", "=", "float", "(", "'inf'", ")", "best_next_node", "=", "None", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "unvisited_penalty", "=", "score_factor", "*", "(", "len", "(", "unvisited_nodes", ")", "/", "len", "(", "distance_matrix", ")", ")", "# Calculate total score combining direct distance and unvisited penalty", "total_score", "=", "direct_distance", "+", "unvisited_penalty", "if", "total_score", "<", "min_score", ":", "min_score", "=", "total_score", "best_next_node", "=", "node", "return", "best_next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "estimated_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "adjustment_factor", "=", "(", "len", "(", "unvisited_nodes", ")", "**", "0.5", ")", "# Increase penalty with unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "score", "=", "direct_distance", "+", "estimated_to_destination", "+", "adjustment_factor", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.6", "# Weight for direct distance", "connectivity_weight", "=", "0.4", "# Weight for connectivity", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "distance_penalty", "=", "(", "direct_distance", "*", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", ")", "if", "len", "(", "unvisited_nodes", ")", ">", "1", "else", "direct_distance", "score", "=", "-", "(", "direct_distance", "*", "distance_weight", ")", "+", "(", "connectivity_penalty", "*", "connectivity_weight", ")", "-", "(", "distance_penalty", "*", "0.3", ")", "+", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "0.1", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 10.234217988271675}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "savings_weight", "=", "0.5", "# Weight for relative savings", "exploration_weight", "=", "0.5", "# Weight for exploration of potentially distant nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "relative_savings", "=", "average_distance_to_remaining", "-", "direct_distance", "exploration_value", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "score", "=", "(", "savings_weight", "*", "relative_savings", ")", "+", "(", "exploration_weight", "*", "exploration_value", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 31.02633185605336}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to destination", "detour_penalty_weight", "=", "0.4", "# Weight for detour penalties", "future_gain_weight", "=", "0.2", "# Weight for future distances to unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Detour penalty calculation", "detour_penalty", "=", "max", "(", "0", ",", "direct_distance", "-", "total_distance_to_destination", ")", "*", "detour_penalty_weight", "# Calculating future potential gains based on remaining unvisited nodes", "future_distance_impact", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "score", "=", "-", "(", "direct_distance", "+", "detour_penalty", ")", "+", "(", "future_distance_impact", "*", "future_gain_weight", ")", "+", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "*", "proximity_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.369941170594373}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "visit_frequency", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "# Track visit counts", "for", "node", "in", "unvisited_nodes", ":", "visit_frequency", "[", "node", "]", "+=", "1", "# Increase frequency count for unvisited nodes", "next_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "frequency_penalty", "=", "1", "/", "(", "visit_frequency", "[", "node", "]", "+", "1", ")", "# Reduce score for frequently visited nodes", "score", "=", "(", "distance", "*", "frequency_penalty", ")", "+", "random", ".", "uniform", "(", "0", ",", "1", ")", "# Adding randomness to the score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 15.22216954918948}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "total_unvisited_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "distance_weight", "=", "0.7", "# Weight for the direct distance", "unvisited_weight", "=", "0.3", "# Weight for the total distance to unvisited nodes", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", ")", "score", "=", "(", "distance_weight", "*", "direct_distance", ")", "+", "(", "unvisited_weight", "*", "total_distance_to_unvisited", ")", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 15.632924313572472}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "# Start with positive infinity for minimization", "# Calculate average distance from the current path to all unvisited nodes", "average_cost_from_visited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "# Calculate direct distance to the candidate node", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate Euclidean distance to the destination (assuming nodes are indexed by coordinates)", "euclidean_distance", "=", "(", "(", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "**", "2", ")", "+", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "**", "2", ")", ")", "**", "0.5", "# Calculate a penalty score based on the average cost from visited nodes", "penalty_score", "=", "average_cost_from_visited", "*", "0.3", "# Weighting the penalty", "# Combined score incorporating direct distance, euclidean distance, and penalty", "score", "=", "direct_distance", "+", "euclidean_distance", "*", "0.5", "+", "penalty_score", "# Selecting the node that minimizes this score", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 7.265496969194075}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "cycle_penalty_factor", "=", "0.3", "# Penalization factor for nodes leading to cycles", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.5", "# Weight for direct distance", "outreach_weight", "=", "0.4", "# Weight for potential outreach to unvisited nodes", "cycle_penalty_weight", "=", "0.1", "# Weight for penalty if forming a cycle", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "outreach_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "# Compute penalty for close nodes that might create cycles", "penalty_score", "=", "0", "if", "current_node", "in", "unvisited_nodes", ":", "penalty_score", "=", "cycle_penalty_weight", "*", "direct_distance", "# Combined score calculation", "score", "=", "-", "direct_distance_weight", "*", "direct_distance", "+", "outreach_weight", "*", "outreach_score", "-", "penalty_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 11.367464102361115}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.6", "# Weight for direct distance", "average_weight", "=", "0.3", "# Weight for average distance to unvisited nodes", "risk_penalty_weight", "=", "0.1", "# Weight for risk of longer distances", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "risk_factor", "=", "len", "(", "unvisited_nodes", ")", "/", "(", "1", "+", "direct_distance", ")", "# Penalizes choices that lead to further distances", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "average_weight", "*", "average_distance_to_unvisited", ")", "-", "(", "risk_penalty_weight", "*", "risk_factor", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 33.49414926367841}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "centrality_weight", "=", "0.4", "# Weight for centrality of node", "immediate_cost_weight", "=", "0.5", "# Immediate travel cost weight", "long_term_penalty_weight", "=", "0.1", "# Penalty for selecting distant nodes for long term efficiency", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "centrality_score", "=", "sum", "(", "1", "/", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", "if", "next", "!=", "node", ")", "# Higher score for central nodes", "long_term_penalty", "=", "long_term_penalty_weight", "*", "(", "direct_distance", "-", "(", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", ")", ")", "# Penalty based on long-term distance", "score", "=", "(", "centrality_weight", "*", "centrality_score", ")", "-", "(", "immediate_cost_weight", "*", "direct_distance", ")", "-", "long_term_penalty", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.267943468579762}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_weight", "=", "0.4", "# Weight for proximity to destination", "novelty_weight", "=", "0.4", "# Weight for novelty in visiting less connected nodes", "cumulative_distance_weight", "=", "0.2", "# Weight for cumulative distance traveled", "cumulative_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "prev_node", "]", "for", "prev_node", "in", "unvisited_nodes", "if", "prev_node", "!=", "current_node", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "average_distance_from_visited", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "prev_node", "]", "for", "prev_node", "in", "unvisited_nodes", "if", "prev_node", "!=", "node", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "-", "1", "or", "1", ")", "unvisited_connection_count", "=", "sum", "(", "1", "for", "other_node", "in", "unvisited_nodes", "if", "other_node", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "other_node", "]", ">", "0", ")", "novelty_score", "=", "1", "/", "(", "unvisited_connection_count", "+", "1", ")", "# Reward less connected nodes", "score", "=", "(", "proximity_weight", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "novelty_weight", "*", "novelty_score", "-", "(", "cumulative_distance", "*", "cumulative_distance_weight", ")", "-", "direct_distance", "+", "average_distance_from_visited", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.572383690818215}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "weight_factors", "=", "{", "'distance'", ":", "0.4", ",", "'future_pathway'", ":", "0.3", ",", "'destination_alignment'", ":", "0.2", ",", "'proximity'", ":", "0.1", "}", "# Adjust weight factors based on previous selections (example mechanism)", "total_nodes", "=", "len", "(", "distance_matrix", ")", "if", "total_nodes", ">", "10", ":", "# Arbitrary condition to adjust weights", "weight_factors", "[", "'distance'", "]", "*=", "1.1", "# Decrease the penalty for distance", "weight_factors", "[", "'future_pathway'", "]", "*=", "0.9", "# Slightly decrease future pathway weight", "if", "unvisited_nodes", ":", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "future_pathway_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "destination_alignment_score", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "proximity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Combine scores using the adjusted weight factors", "score", "=", "(", "-", "weight_factors", "[", "'distance'", "]", "*", "direct_distance", "+", "weight_factors", "[", "'future_pathway'", "]", "*", "future_pathway_score", "+", "weight_factors", "[", "'destination_alignment'", "]", "*", "destination_alignment_score", "+", "weight_factors", "[", "'proximity'", "]", "*", "proximity_score", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.475197055442823}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "# Calculate average distance to unvisited nodes", "avg_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Calculate scores based on distances and average distance", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Score balances immediate distance with the penalty from the average distance", "scores", "[", "node", "]", "=", "distance", "+", "(", "avg_distance", "-", "distance", ")", "*", "0.5", "# 0.5 is a weighting factor", "# Normalize scores to add randomness", "score_min", "=", "min", "(", "scores", ".", "values", "(", ")", ")", "score_range", "=", "max", "(", "scores", ".", "values", "(", ")", ")", "-", "score_min", "if", "score_range", ">", "0", ":", "scores", "=", "{", "node", ":", "(", "score", "-", "score_min", ")", "/", "score_range", "for", "node", ",", "score", "in", "scores", ".", "items", "(", ")", "}", "# Introduce a random factor for selection", "weighted_candidates", "=", "[", "(", "node", ",", "random", ".", "uniform", "(", "0", ",", "scores", "[", "node", "]", ")", ")", "for", "node", "in", "unvisited_nodes", "]", "# Select the node with the highest weighted score", "next_node", "=", "max", "(", "weighted_candidates", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "return", "next_node"], "code_perf": 35.01997863904046}
{"code_tokens": ["import", "math", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "centralized_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "score", "=", "(", "math", ".", "log", "(", "distance_to_next", "+", "1", ")", "+", "centralized_distance", ")", "*", "math", ".", "exp", "(", "-", "distance_to_next", "/", "10", ")", "# Hybrid scoring mechanism", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 34.65488517644664}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.5", "# Weight for direct distance", "connectivity_weight", "=", "0.3", "# Weight for connectivity to unvisited nodes", "long_term_potential_weight", "=", "0.2", "# Weight for long-term connectivity potential", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Average connectivity", "potential_score", "=", "len", "(", "[", "next", "for", "next", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", "]", ")", "# Count of connections to unvisited nodes", "# Introduce a decay based on distance from the current node, promoting closer nodes", "distance_decay", "=", "(", "1", "/", "(", "1", "+", "direct_distance", ")", ")", "if", "direct_distance", ">", "0", "else", "0", "score", "=", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "+", "long_term_potential_weight", "*", "potential_score", "*", "distance_decay", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.849680577526319}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "def", "distance_to_target", "(", "node", ")", ":", "return", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "def", "penalty", "(", "node", ")", ":", "# Penalty is based on the number of unvisited nodes", "return", "len", "(", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "1", ")", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "dist", "=", "distance_to_target", "(", "node", ")", "pen", "=", "penalty", "(", "node", ")", "score", "=", "dist", "*", "pen", "# New score calculated with distance and penalty", "scores", "[", "node", "]", "=", "score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_weight", "=", "0.4", "# Weight for direct distance", "cluster_weight", "=", "0.5", "# Weight for cluster potential savings", "return_weight", "=", "0.1", "# Weight for return on investment", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other_node", "]", "for", "other_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "return_investment", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "(", "direct_distance", "+", "1e-6", ")", "# Prevent division by zero", "score", "=", "(", "direct_weight", "*", "-", "direct_distance", ")", "+", "(", "cluster_weight", "*", "connectivity_score", ")", "+", "(", "return_weight", "*", "return_investment", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.3370767448660965}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "proximity_factor", "=", "0.6", "# Factor for diminishing returns on proximity to destination", "penalty_factor", "=", "0.4", "# Factor for considering cumulative distance to unvisited nodes", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cumulative_distance_penalty", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "*", "penalty_factor", "score", "=", "-", "(", "direct_distance", "+", "total_distance_to_destination", ")", "+", "(", "proximity_factor", "*", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "-", "cumulative_distance_penalty", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 14.769932506972623}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for distance", "avg_distance_weight", "=", "0.4", "# Weight for average distance to remaining nodes", "novelty_weight", "=", "0.2", "# Weight for novelty of unvisited nodes", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_unvisited", "=", "total_distance_to_unvisited", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "novelty_score", "=", "sum", "(", "1", "for", "next", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", "if", "next", "not", "in", "unvisited_nodes", "and", "distance_matrix", "[", "current_node", "]", "[", "next", "]", "<", "float", "(", "'inf'", ")", ")", "score", "=", "-", "distance_weight", "*", "direct_distance", "-", "avg_distance_weight", "*", "avg_distance_to_unvisited", "+", "novelty_weight", "*", "novelty_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# If no unvisited nodes are available", "# Calculate the distance to the destination from current node", "distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "# Introduce a randomness factor for exploration", "random_factor", "=", "random", ".", "uniform", "(", "0.1", ",", "2.0", ")", "# Calculate a score for each unvisited node", "scores", "=", "{", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "scores", "[", "node", "]", "=", "(", "distance_to_node", "*", "random_factor", ")", "+", "(", "distance_to_destination", "/", "len", "(", "unvisited_nodes", ")", ")", "# Select the node with the minimum score", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["import", "random", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "historical_frequency", "=", "{", "node", ":", "0", "for", "node", "in", "unvisited_nodes", "}", "proximity_weight", "=", "0.5", "# Weight for close proximity to destination", "cluster_factor", "=", "1.0", "# Weight for clustering effect", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_score", "=", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1e-6", ")", "# Avoid division by zero", "visit_penalty", "=", "historical_frequency", "[", "node", "]", "*", "0.1", "# Historical visit penalty", "score", "=", "(", "direct_distance", "*", "(", "1", "-", "proximity_weight", ")", "+", "proximity_score", "*", "proximity_weight", "-", "visit_penalty", "+", "cluster_factor", "*", "len", "(", "[", "neighbor", "for", "neighbor", "in", "unvisited_nodes", "if", "distance_matrix", "[", "node", "]", "[", "neighbor", "]", "<", "10", "]", ")", ")", "# Cluster effect", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "# Randomly select among the best nodes if there's a tie", "next_candidates", "=", "[", "node", "for", "node", "in", "unvisited_nodes", "if", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "+", "1e-6", ")", "*", "proximity_weight", ")", "-", "historical_frequency", "[", "node", "]", "*", "0.1", "==", "best_score", "]", "return", "random", ".", "choice", "(", "next_candidates", ")", "if", "next_candidates", "else", "best_node"], "code_perf": 10.059555024436328}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "best_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "distance_traveled", "=", "0", "# Initialize distance traveled", "if", "unvisited_nodes", ":", "nearest_node_weight", "=", "0.4", "# Weight for the distance to the nearest unvisited node", "distance_penalty_weight", "=", "0.4", "# Weight for distance penalty towards traveling to unvisited nodes", "path_length_weight", "=", "0.2", "# Weight for total distance traveled so far", "# Calculate total distance traveled from the start to current node for later use", "for", "i", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", ":", "if", "distance_matrix", "[", "0", "]", "[", "current_node", "]", "<", "float", "(", "'inf'", ")", ":", "distance_traveled", "+=", "distance_matrix", "[", "0", "]", "[", "current_node", "]", "for", "node", "in", "unvisited_nodes", ":", "# Distance to the current unvisited node", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Calculate score for visiting this unvisited node based on weighted factors", "score", "=", "(", "nearest_node_weight", "*", "direct_distance", ")", "+", "(", "distance_penalty_weight", "*", "(", "1", "/", "(", "1", "+", "direct_distance", ")", ")", ")", "+", "(", "path_length_weight", "*", "distance_traveled", ")", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_cost", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "avg_distance_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_ratio", "=", "(", "avg_distance_remaining", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "/", "(", "1", "+", "avg_distance_remaining", ")", "closeness_penalty", "=", "(", "direct_distance", "/", "(", "1", "+", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", ")", "score", "=", "direct_distance", "+", "0.5", "*", "proximity_ratio", "-", "0.2", "*", "closeness_penalty", "if", "score", "<", "min_cost", ":", "min_cost", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.4756382182184264}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "direct_distance_weight", "=", "0.4", "# Weight for direct distance", "cluster_weight", "=", "0.4", "# Weight for attractiveness of node clusters", "connectivity_penalty_weight", "=", "0.2", "# Weight for connectivity penalties", "# Calculate center of remaining unvisited nodes for cluster scoring", "cluster_score", "=", "[", "0", "]", "*", "len", "(", "distance_matrix", ")", "for", "node", "in", "unvisited_nodes", ":", "for", "i", "in", "range", "(", "len", "(", "distance_matrix", ")", ")", ":", "cluster_score", "[", "i", "]", "+=", "distance_matrix", "[", "node", "]", "[", "i", "]", "cluster_score", "=", "[", "x", "/", "len", "(", "unvisited_nodes", ")", "for", "x", "in", "cluster_score", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Connectivity score inversely related to the number of links to this node", "connectivity_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "unvisited", "]", "+", "1", ")", "for", "unvisited", "in", "unvisited_nodes", ")", "score", "=", "-", "direct_distance_weight", "*", "direct_distance", "+", "cluster_weight", "*", "cluster_score", "[", "node", "]", "-", "connectivity_penalty_weight", "*", "connectivity_score", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 8.882125795024223}
{"code_tokens": ["# {The algorithm enhances node selection by integrating a penalty for longer routes and prioritizing nodes based on clustering proximity to the starting node, using a score that includes distance ratios and clustering effects.}", "def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "best_score", "=", "float", "(", "'-inf'", ")", "# Calculate the mean distance to all unvisited nodes", "mean_distance", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_current", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "distance_to_destination", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "# Calculate clustering effect based on proximity to the current node", "clustering_effect", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "# Score includes distance ratios and clustering penalty", "score", "=", "(", "mean_distance", "/", "distance_to_current", ")", "-", "(", "0.05", "*", "clustering_effect", ")", "+", "(", "1", "/", "distance_to_destination", ")", "if", "score", ">", "best_score", ":", "best_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.741992102249354}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "candidates", "=", "list", "(", "unvisited_nodes", ")", "scored_candidates", "=", "[", "]", "avg_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "candidates", ")", "/", "len", "(", "candidates", ")", "connectivity_factor", "=", "sum", "(", "1", "for", "n", "in", "candidates", "if", "any", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", "for", "node", "in", "candidates", ")", ")", "/", "len", "(", "candidates", ")", "for", "node", "in", "candidates", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "priority_penalty", "=", "0.5", "*", "(", "len", "(", "unvisited_nodes", ")", "-", "1", ")", "*", "(", "1", "-", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "/", "avg_distance_to_unvisited", ")", ")", "score", "=", "direct_distance", "+", "(", "1", "-", "connectivity_factor", ")", "+", "priority_penalty", "scored_candidates", ".", "append", "(", "(", "node", ",", "score", ")", ")", "scored_candidates", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "return", "scored_candidates", "[", "0", "]", "[", "0", "]"], "code_perf": 36.1397423465301}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "min_weighted_score", "=", "float", "(", "'inf'", ")", "# Calculate the number of unvisited nodes", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "# Calculate total distance to unvisited nodes", "total_distance_to_unvisited", "=", "sum", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "for", "node", "in", "unvisited_nodes", ":", "distance_to_node", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Normalize distance to node", "normalized_distance", "=", "distance_to_node", "/", "(", "total_distance_to_unvisited", "+", "1e-5", ")", "# Urgency factor: how close the node is to the destination against remaining nodes", "urgency_factor", "=", "(", "1", "/", "num_unvisited", ")", "*", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "/", "(", "total_distance_to_unvisited", "+", "1e-5", ")", ")", "# Combine metrics to compute a weighted score", "weighted_score", "=", "normalized_distance", "+", "urgency_factor", "if", "weighted_score", "<", "min_weighted_score", ":", "min_weighted_score", "=", "weighted_score", "next_node", "=", "node", "return", "next_node"], "code_perf": 7.101442436613793}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "# No unvisited nodes", "def", "heuristic_score", "(", "node", ")", ":", "# Heuristic score: combines distance to destination with penalties for visited nodes", "distance_to_dest", "=", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "penalty", "=", "1", "/", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "+", "1", ")", "if", "node", "in", "unvisited_nodes", "else", "0", "return", "distance_to_dest", "+", "penalty", "scores", "=", "{", "node", ":", "heuristic_score", "(", "node", ")", "for", "node", "in", "unvisited_nodes", "}", "next_node", "=", "min", "(", "scores", ",", "key", "=", "scores", ".", "get", ")", "return", "next_node"], "code_perf": 25.841994474117996}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "next_node", "=", "None", "max_score", "=", "float", "(", "'-inf'", ")", "connectivity_scores", "=", "{", "node", ":", "sum", "(", "1", "for", "n", "in", "unvisited_nodes", "if", "n", "!=", "node", "and", "distance_matrix", "[", "node", "]", "[", "n", "]", "<", "float", "(", "'inf'", ")", ")", "for", "node", "in", "unvisited_nodes", "}", "for", "node", "in", "unvisited_nodes", ":", "distance_to_next", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "log_penalty", "=", "-", "1", "*", "(", "1", "+", "(", "distance_to_next", "**", "0.5", ")", ")", "# Logarithmic penalty on distance", "average_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "n", "]", "for", "n", "in", "unvisited_nodes", ")", "/", "max", "(", "len", "(", "unvisited_nodes", ")", ",", "1", ")", "connectivity_score", "=", "connectivity_scores", "[", "node", "]", "score", "=", "(", "log_penalty", "*", "connectivity_score", ")", "+", "(", "0.5", "*", "average_distance_to_remaining", ")", "# Adjusted scoring equation", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.871574901958524}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "distance_weight", "=", "0.4", "# Weight for direct travel distance", "benefit_weight", "=", "0.3", "# Weight for cost-benefit ratio of visiting", "connectivity_weight", "=", "0.3", "# Weight for influence from connectivity", "total_distance_to_destination", "=", "distance_matrix", "[", "current_node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "cost_benefit_ratio", "=", "(", "total_distance_to_destination", "-", "direct_distance", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "connectivity_score", "=", "sum", "(", "1", "/", "(", "distance_matrix", "[", "node", "]", "[", "next", "]", "+", "1e-6", ")", "for", "next", "in", "unvisited_nodes", ")", "# Avoid division by zero", "score", "=", "-", "(", "direct_distance", "*", "distance_weight", ")", "+", "(", "cost_benefit_ratio", "*", "benefit_weight", ")", "+", "(", "connectivity_score", "*", "connectivity_weight", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 28.331023327539224}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "min_score", "=", "float", "(", "'inf'", ")", "next_node", "=", "None", "total_distance", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "avg_distance_to_destination", "=", "total_distance", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "avg_position", "=", "sum", "(", "node", "for", "node", "in", "unvisited_nodes", ")", "/", "len", "(", "unvisited_nodes", ")", "if", "unvisited_nodes", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "proximity_to_avg", "=", "abs", "(", "node", "-", "avg_position", ")", "score", "=", "direct_distance", "+", "0.5", "*", "(", "avg_distance_to_destination", "-", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", ")", "+", "0.2", "*", "proximity_to_avg", "if", "score", "<", "min_score", ":", "min_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 18.090572823004898}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "if", "not", "unvisited_nodes", ":", "return", "None", "best_node", "=", "None", "best_score", "=", "float", "(", "'inf'", ")", "total_distance_to_remaining", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "destination_node", "]", "for", "node", "in", "unvisited_nodes", ")", "unvisited_count_penalty", "=", "len", "(", "unvisited_nodes", ")", "/", "5.0", "clustering_score", "=", "0", "# Calculate average and minimum distance to unvisited nodes for clustering effect", "average_distance_to_remaining", "=", "total_distance_to_remaining", "/", "len", "(", "unvisited_nodes", ")", "min_distance_to_unvisited", "=", "min", "(", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "for", "node", "in", "unvisited_nodes", ")", "direct_influence_weight", "=", "0.4", "clustering_weight", "=", "0.4", "penalty_weight", "=", "0.2", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "clustering_score", "=", "1", "/", "(", "1", "+", "distance_matrix", "[", "current_node", "]", "[", "node", "]", ")", "# Encouraging selection of nearby clusters", "penalty", "=", "penalty_weight", "*", "unvisited_count_penalty", "*", "(", "total_distance_to_remaining", "/", "100.0", ")", "# Scaling penalty", "score", "=", "(", "direct_influence_weight", "*", "direct_distance", ")", "-", "(", "clustering_weight", "*", "clustering_score", ")", "+", "penalty", "if", "score", "<", "best_score", ":", "best_score", "=", "score", "best_node", "=", "node", "return", "best_node"], "code_perf": 6.957936002221982}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "strategic_weight_factor", "=", "0.7", "# Factor to prioritize nodes with future potential", "distance_weight", "=", "0.4", "# Base weight for distance", "connectivity_weight", "=", "0.3", "# Weight for connectivity to remaining unvisited nodes", "future_gain_weight", "=", "0.3", "# Weight for potential future benefits", "if", "unvisited_nodes", ":", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "# Evaluate potential future costs if all unvisited nodes are visited after the current node", "future_path_cost", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "next_node", "]", "for", "next_node", "in", "unvisited_nodes", ")", "/", "(", "len", "(", "unvisited_nodes", ")", "or", "1", ")", "# Score calculation considering distance, connectivity, and potential future gains", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "future_path_cost", "+", "future_gain_weight", "*", "(", "1", "/", "(", "len", "(", "unvisited_nodes", ")", "+", "0.01", ")", ")", ")", "# Adding a small constant to avoid division by zero", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.37815587401459}
{"code_tokens": ["def", "select_next_node", "(", "current_node", ",", "destination_node", ",", "unvisited_nodes", ",", "distance_matrix", ")", ":", "max_score", "=", "float", "(", "'-inf'", ")", "next_node", "=", "None", "if", "unvisited_nodes", ":", "# Dynamic weights based on the number of unvisited nodes", "num_unvisited", "=", "len", "(", "unvisited_nodes", ")", "distance_weight", "=", "1", "/", "num_unvisited", "# Inversely proportional to unvisited nodes", "connectivity_weight", "=", "1", "/", "(", "num_unvisited", "**", "1.5", ")", "# More sensitive weight", "future_gain_weight", "=", "1", "/", "(", "num_unvisited", "+", "1", ")", "# Modest future gain influence", "# Function to calculate connectivity score based on unvisited nodes", "def", "calculate_connectivity_score", "(", "node", ")", ":", "connectivity_score", "=", "sum", "(", "distance_matrix", "[", "node", "]", "[", "other", "]", "for", "other", "in", "unvisited_nodes", "if", "other", "!=", "node", ")", "return", "connectivity_score", "/", "(", "num_unvisited", "-", "1", ")", "if", "num_unvisited", ">", "1", "else", "0", "for", "node", "in", "unvisited_nodes", ":", "direct_distance", "=", "distance_matrix", "[", "current_node", "]", "[", "node", "]", "connectivity_score", "=", "calculate_connectivity_score", "(", "node", ")", "future_gain", "=", "sum", "(", "distance_matrix", "[", "next", "]", "[", "destination_node", "]", "for", "next", "in", "unvisited_nodes", ")", "/", "(", "num_unvisited", "or", "1", ")", "# Combined scoring mechanism with an additional factor for direct distance", "score", "=", "(", "-", "distance_weight", "*", "direct_distance", "+", "connectivity_weight", "*", "connectivity_score", "-", "future_gain_weight", "*", "future_gain", "+", "(", "num_unvisited", "*", "0.1", ")", "# Incentive for considering remaining nodes", ")", "if", "score", ">", "max_score", ":", "max_score", "=", "score", "next_node", "=", "node", "return", "next_node"], "code_perf": 6.743860296930055}
